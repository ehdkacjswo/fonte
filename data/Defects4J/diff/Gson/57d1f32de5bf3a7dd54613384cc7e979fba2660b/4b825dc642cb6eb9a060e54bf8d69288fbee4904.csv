is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,23,* Converts the field name that uses camel-case define word separation into separate words that
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,24,* are separated by the provided {@code separatorString}.
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,26,* <p>The following is an example:</p>
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,27,* <pre>
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,28,* class IntWrapper {
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,29,*   public int integerField = 0;
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,32,"* CamelCaseSeparatorNamingPolicy policy = new CamelCaseSeparatorNamingPolicy(""_"");"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,33,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,34,"*     policy.translateName(IntWrapper.class.getField(""integerField""));"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,36,"* assert(""integer_Field"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,37,* </pre>
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,39,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,41,final class CamelCaseSeparatorNamingPolicy extends RecursiveFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,42,private final String separatorString;
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,45,* Constructs a new CamelCaseSeparatorNamingPolicy object that will add the
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,46,* {@code separatorString} between each of the words separated by camel case.
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,48,* @param separatorString the string value to place between words
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,49,* @throws IllegalArgumentException thrown if the {@code separatorString} parameter
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,50,*         is null or purely whitespace.
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,52,public CamelCaseSeparatorNamingPolicy(String separatorString) {
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,53,Preconditions.checkNotNull(separatorString);
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,54,"Preconditions.checkArgument(!"""".equals(separatorString.trim()));"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,55,this.separatorString = separatorString;
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,58,@Override
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,59,"protected String translateName(String target, Type fieldType, Annotation[] annnotations) {"
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,60,StringBuilder translation = new StringBuilder();
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,61,for (int i = 0; i < target.length(); i++) {
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,62,char character = target.charAt(i);
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,63,if (Character.isUpperCase(character) && translation.length() != 0) {
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,64,translation.append(separatorString);
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,66,translation.append(character);
True,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java,69,return translation.toString();
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,23,* Performs numerous field naming translations wrapped up as one object.
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,25,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,27,abstract class CompositionFieldNamingPolicy extends RecursiveFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,29,private final RecursiveFieldNamingPolicy[] fieldPolicies;
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,31,public CompositionFieldNamingPolicy(RecursiveFieldNamingPolicy... fieldNamingPolicies) {
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,32,if (fieldNamingPolicies == null) {
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,33,"throw new NullPointerException(""naming policies can not be null."");"
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,35,this.fieldPolicies = fieldNamingPolicies;
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,38,@Override
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,39,"protected String translateName(String target, Type fieldType, Annotation[] annotations) {"
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,40,for (RecursiveFieldNamingPolicy policy : fieldPolicies) {
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,41,"target = policy.translateName(target, fieldType, annotations);"
True,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,gson/src/main/java/com/google/gson/CompositionFieldNamingPolicy.java,43,return target;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,19,import java.lang.reflect.InvocationTargetException;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,20,import java.lang.reflect.Method;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,22,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,23,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,24,import java.net.MalformedURLException;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,25,import java.net.URI;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,26,import java.net.URISyntaxException;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,27,import java.net.URL;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,28,import java.text.DateFormat;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,29,import java.text.ParseException;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,30,import java.text.SimpleDateFormat;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,31,import java.util.Collection;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,32,import java.util.Date;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,33,import java.util.Iterator;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,34,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,35,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,36,import java.util.List;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,37,import java.util.Locale;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,38,import java.util.Map;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,39,import java.util.Queue;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,40,import java.util.Set;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,41,import java.util.SortedSet;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,42,import java.util.StringTokenizer;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,43,import java.util.TreeSet;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,46,"* List of all the default type adapters ({@link JsonSerializer}s, {@link JsonDeserializer}s,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,47,* and {@link InstanceCreator}s.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,49,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,50,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,52,final class DefaultTypeAdapters {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,54,private static final DefaultDateTypeAdapter DATE_TYPE_ADAPTER =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,55,new DefaultDateTypeAdapter(DateFormat.DEFAULT);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,56,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,57,private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,58,private static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,59,private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,60,private static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,61,private static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,62,private static final BigDecimalTypeAdapter BIG_DECIMAL_TYPE_ADAPTER = new BigDecimalTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,63,private static final BigIntegerTypeAdapter BIG_INTEGER_TYPE_ADAPTER = new BigIntegerTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,65,private static final BooleanCreator BOOLEAN_CREATOR = new BooleanCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,66,private static final ByteCreator BYTE_CREATOR = new ByteCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,67,private static final CharacterCreator CHARACTER_CREATOR = new CharacterCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,68,private static final DoubleCreator DOUBLE_CREATOR = new DoubleCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,69,private static final FloatCreator FLOAT_CREATOR = new FloatCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,70,private static final IntegerCreator INTEGER_CREATOR = new IntegerCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,71,private static final LongCreator LONG_CREATOR = new LongCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,72,private static final ShortCreator SHORT_CREATOR = new ShortCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,73,private static final LinkedListCreator LINKED_LIST_CREATOR = new LinkedListCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,74,private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,76,"// The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,77,"// must be defined after the constants for the type adapters. Otherwise, the type adapter"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,78,// constants will appear as nulls.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,79,static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,80,getDefaultSerializers();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,81,static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,82,getDefaultDeserializers();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,83,static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,84,getDefaultInstanceCreators();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,86,private static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,87,ParameterizedTypeHandlerMap<JsonSerializer<?>> map =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,88,new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,90,"map.register(Enum.class, wrapSerializer(ENUM_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,91,"map.register(URL.class, wrapSerializer(URL_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,92,"map.register(URI.class, wrapSerializer(URI_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,93,"map.register(Locale.class, wrapSerializer(LOCALE_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,94,"map.register(Map.class, wrapSerializer(MAP_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,95,"map.register(Date.class, wrapSerializer(DATE_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,96,"map.register(BigDecimal.class, wrapSerializer(BIG_DECIMAL_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,97,"map.register(BigInteger.class, wrapSerializer(BIG_INTEGER_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,98,map.makeUnmodifiable();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,99,return map;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,102,private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,103,ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,104,new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,105,"map.register(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,106,"map.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,107,"map.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,108,"map.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,109,"map.register(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,110,"map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,111,"map.register(BigDecimal.class, wrapDeserializer(BIG_DECIMAL_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,112,"map.register(BigInteger.class, wrapDeserializer(BIG_INTEGER_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,113,map.makeUnmodifiable();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,114,return map;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,117,private static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,118,ParameterizedTypeHandlerMap<InstanceCreator<?>> map =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,119,new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,120,"map.register(Enum.class, ENUM_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,121,"map.register(URL.class, URL_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,122,"map.register(Locale.class, LOCALE_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,123,"map.register(Map.class, MAP_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,124,"map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,125,"map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,127,// Add primitive instance creators
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,128,"map.register(Boolean.class, BOOLEAN_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,129,"map.register(boolean.class, BOOLEAN_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,130,"map.register(Byte.class, BYTE_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,131,"map.register(byte.class, BYTE_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,132,"map.register(Character.class, CHARACTER_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,133,"map.register(char.class, CHARACTER_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,134,"map.register(Double.class, DOUBLE_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,135,"map.register(double.class, DOUBLE_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,136,"map.register(Float.class, FLOAT_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,137,"map.register(float.class, FLOAT_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,138,"map.register(Integer.class, INTEGER_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,139,"map.register(int.class, INTEGER_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,140,"map.register(Long.class, LONG_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,141,"map.register(long.class, LONG_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,142,"map.register(Short.class, SHORT_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,143,"map.register(short.class, SHORT_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,145,"map.register(Collection.class, LINKED_LIST_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,146,"map.register(List.class, LINKED_LIST_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,147,"map.register(Queue.class, LINKED_LIST_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,149,"map.register(Set.class, TREE_SET_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,150,"map.register(SortedSet.class, TREE_SET_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,151,map.makeUnmodifiable();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,152,return map;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,155,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,156,private static JsonSerializer<?> wrapSerializer(JsonSerializer<?> serializer) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,157,return new JsonSerializerExceptionWrapper(serializer);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,160,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,161,private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,162,return new JsonDeserializerExceptionWrapper(deserializer);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,165,"static class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,167,private final DateFormat format;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,169,public DefaultDateTypeAdapter(String datePattern) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,170,this.format = new SimpleDateFormat(datePattern);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,173,public DefaultDateTypeAdapter(int style) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,174,this.format = DateFormat.getDateInstance(style);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,177,"public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,178,String dateFormatAsString = format.format(src);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,179,return new JsonPrimitive(dateFormatAsString);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,182,"public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,183,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,184,if (!(json instanceof JsonPrimitive)) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,185,"throw new JsonParseException(""The date should be a string value"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,188,try {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,189,return format.parse(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,190,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,191,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,196,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,197,"private static class EnumTypeAdapter<T extends Enum<T>> implements JsonSerializer<T>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,198,"JsonDeserializer<T>, InstanceCreator<Enum<?>> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,199,"public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,200,return new JsonPrimitive(src.name());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,202,"@SuppressWarnings(""cast"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,203,"public T deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,204,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,205,"return (T) Enum.valueOf((Class<T>)classOfT, json.getAsString());"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,207,public Enum<?> createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,208,Class<Enum<?>> enumClass = (Class<Enum<?>>) type;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,209,try {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,210,"Method valuesMethod = enumClass.getMethod(""values"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,211,Enum<?>[] enums = (Enum<?>[]) valuesMethod.invoke(null);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,212,return enums[0];
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,213,} catch (NoSuchMethodException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,214,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,215,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,216,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,217,} catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,218,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,223,"private static class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,224,InstanceCreator<URL> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,225,"public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,226,return new JsonPrimitive(src.toExternalForm());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,228,"public URL deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,229,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,230,try {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,231,return new URL(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,232,} catch (MalformedURLException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,233,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,236,public URL createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,237,try {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,238,"return new URL(""http://google.com/"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,239,} catch (MalformedURLException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,240,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,245,"private static class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,246,"public JsonElement serialize(URI src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,247,return new JsonPrimitive(src.toASCIIString());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,249,"public URI deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,250,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,251,try {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,252,return new URI(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,253,} catch (URISyntaxException e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,254,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,259,"private static class LocaleTypeAdapter implements JsonSerializer<Locale>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,260,"JsonDeserializer<Locale>, InstanceCreator<Locale> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,261,"public JsonElement serialize(Locale src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,262,return new JsonPrimitive(src.toString());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,264,"public Locale deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,265,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,266,String locale = json.getAsString();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,267,"StringTokenizer tokenizer = new StringTokenizer(locale, ""_"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,268,String language = null;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,269,String country = null;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,270,String variant = null;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,271,if (tokenizer.hasMoreElements()) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,272,language = tokenizer.nextToken();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,274,if (tokenizer.hasMoreElements()) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,275,country = tokenizer.nextToken();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,277,if (tokenizer.hasMoreElements()) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,278,variant = tokenizer.nextToken();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,280,if (country == null && variant == null) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,281,return new Locale(language);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,282,} else if (variant == null) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,283,"return new Locale(language, country);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,284,} else {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,285,"return new Locale(language, country, variant);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,288,public Locale createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,289,"return new Locale(""en_US"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,293,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,294,"static class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,295,InstanceCreator<Map> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,296,"public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,297,JsonObject map = new JsonObject();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,298,Type childType = new TypeInfoMap(typeOfSrc).getValueType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,299,for (Iterator iterator = src.entrySet().iterator(); iterator.hasNext(); ) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,300,Map.Entry entry = (Map.Entry) iterator.next();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,301,"JsonElement valueElement = context.serialize(entry.getValue(), childType);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,302,"map.add(entry.getKey().toString(), valueElement);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,304,return map;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,306,"public Map deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,307,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,308,// Using linked hash map to preserve order in which elements are entered
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,309,"Map<String, Object> map = new LinkedHashMap<String, Object>();"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,310,Type childType = new TypeInfoMap(typeOfT).getValueType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,311,"for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,312,"Object value = context.deserialize(entry.getValue(), childType);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,313,"map.put(entry.getKey(), value);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,315,return map;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,317,public Map createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,318,return new LinkedHashMap();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,322,"private static class BigDecimalTypeAdapter implements JsonSerializer<BigDecimal>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,323,"JsonDeserializer<BigDecimal>, InstanceCreator<BigDecimal> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,325,"public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,326,return new JsonPrimitive(src);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,329,"public BigDecimal deserialize(JsonElement json, Type typeOfT,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,330,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,331,return json.getAsBigDecimal();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,334,public BigDecimal createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,335,return new BigDecimal(0);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,339,"private static class BigIntegerTypeAdapter implements JsonSerializer<BigInteger>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,340,"JsonDeserializer<BigInteger>, InstanceCreator<BigInteger> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,342,"public JsonElement serialize(BigInteger src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,343,return new JsonPrimitive(src);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,346,"public BigInteger deserialize(JsonElement json, Type typeOfT,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,347,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,348,return json.getAsBigInteger();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,351,public BigInteger createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,352,"return new BigInteger(""0"");"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,356,private static class LongCreator implements InstanceCreator<Long> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,357,public Long createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,358,return new Long(0L);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,362,private static class IntegerCreator implements InstanceCreator<Integer> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,363,public Integer createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,364,return new Integer(0);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,368,private static class ShortCreator implements InstanceCreator<Short> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,369,public Short createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,370,return new Short((short) 0);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,374,private static class ByteCreator implements InstanceCreator<Byte> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,375,public Byte createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,376,return new Byte((byte) 0);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,380,private static class FloatCreator implements InstanceCreator<Float> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,381,public Float createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,382,return new Float(0F);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,386,private static class DoubleCreator implements InstanceCreator<Double> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,387,public Double createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,388,return new Double(0D);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,392,private static class CharacterCreator implements InstanceCreator<Character> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,393,public Character createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,394,return new Character((char) 0);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,398,private static class BooleanCreator implements InstanceCreator<Boolean> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,399,public Boolean createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,400,return new Boolean(false);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,404,private static class LinkedListCreator implements InstanceCreator<LinkedList<?>> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,405,public LinkedList<?> createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,406,return new LinkedList<Object>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,410,private static class TreeSetCreator implements InstanceCreator<TreeSet<?>> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,411,public TreeSet<?> createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,412,return new TreeSet<Object>();
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,20,* A simple implementation of the {@link JsonElementVisitor} that simply delegates the method
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,21,* invocation onto a {@code delegate} instance of the {@link JsonElementVisitor}.  This object
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,22,* can be used to build a chain of visitors such that each Visitor instance can perform some
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,23,* operation on the {@link JsonElement} and then pass on the input to the delegate.  This kind
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,24,"* of pattern is sometimes referred as a ""Chain of Responsibility""."
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,26,* <p>The following is an example use case:
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,28,* <pre>
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,29,* class JsonEscapingVisitor extends DelegatingJsonElementVisitor {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,30,*   public JsonEscapingVisitor(JsonElementVisitor) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,31,*     super(visitor);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,34,*   public void visitPrimitive(JsonPrimitive primitive) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,35,*     JsonPrimitive escapedPrimitive = escapePrimitiveObject(primitive);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,36,*     super.visitPrimitive(escapedPrimitive);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,40,* JsonElementVisitor visitor = new JsonEscapingVisitor(new FormattingVisitor());
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,41,* </pre></p>
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,43,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,45,class DelegatingJsonElementVisitor implements JsonElementVisitor {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,46,private final JsonElementVisitor delegate;
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,48,protected DelegatingJsonElementVisitor(JsonElementVisitor delegate) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,49,Preconditions.checkNotNull(delegate);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,50,this.delegate = delegate;
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,53,public void endArray(JsonArray array) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,54,delegate.endArray(array);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,57,public void endObject(JsonObject object) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,58,delegate.endObject(object);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,61,public void startArray(JsonArray array) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,62,delegate.startArray(array);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,65,public void startObject(JsonObject object) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,66,delegate.startObject(object);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,69,"public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,70,"delegate.visitArrayMember(parent, member, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,73,"public void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,74,"delegate.visitArrayMember(parent, member, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,77,"public void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,78,"delegate.visitArrayMember(parent, member, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,81,public void visitObjectMember(
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,82,"JsonObject parent, String memberName, JsonPrimitive member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,83,"delegate.visitObjectMember(parent, memberName, member, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,86,public void visitObjectMember(
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,87,"JsonObject parent, String memberName, JsonArray member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,88,"delegate.visitObjectMember(parent, memberName, member, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,91,public void visitObjectMember(
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,92,"JsonObject parent, String memberName, JsonObject member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,93,"delegate.visitObjectMember(parent, memberName, member, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,96,"public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,97,"delegate.visitNullObjectMember(parent, memberName, isFirst);"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,100,public void visitPrimitive(JsonPrimitive primitive) {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,101,delegate.visitPrimitive(primitive);
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,104,public void visitNull() {
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,105,delegate.visitNull();
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,108,"public void visitNullArrayMember(JsonArray parent, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,109,"delegate.visitNullArrayMember(parent, isFirst);"
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,20,import java.util.Collection;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,21,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,24,* A wrapper class used to collect numerous {@link ExclusionStrategy} objects
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,25,* and perform a short-circuited OR operation.
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,29,final class DisjunctionExclusionStrategy implements ExclusionStrategy {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,30,private final Collection<ExclusionStrategy> strategies;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,32,public DisjunctionExclusionStrategy(ExclusionStrategy... strategies) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,33,Preconditions.checkNotNull(strategies);
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,34,Preconditions.checkArgument(strategies.length > 0);
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,36,this.strategies = new LinkedList<ExclusionStrategy>();
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,37,for (ExclusionStrategy strategy : strategies) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,38,this.strategies.add(strategy);
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,42,public DisjunctionExclusionStrategy(Collection<ExclusionStrategy> strategies) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,43,Preconditions.checkNotNull(strategies);
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,44,Preconditions.checkArgument(!strategies.isEmpty());
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,46,this.strategies = new LinkedList<ExclusionStrategy>();
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,47,this.strategies.addAll(strategies);
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,50,public boolean shouldSkipField(Field f) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,51,for (ExclusionStrategy strategy : strategies) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,52,if (strategy.shouldSkipField(f)) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,53,return true;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,56,return false;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,59,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,60,for (ExclusionStrategy strategy : strategies) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,61,if (strategy.shouldSkipClass(clazz)) {
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,62,return true;
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,65,return false;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,19,import java.io.IOException;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,20,import java.util.Collections;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,21,import java.util.HashSet;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,22,import java.util.Set;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,25,"* A utility class that is used to perform JSON escaping so that "", <, >, etc. characters are"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,26,* properly encoded in the JSON string representation before returning to the client code.
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,28,* <p>This class contains a single method to escape a passed in string value:
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,29,* <pre>
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,30,"*   String jsonStringValue = ""beforeQuote\""afterQuote"";"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,31,*   String escapedValue = Escaper.escapeJsonString(jsonStringValue);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,32,* </pre></p>
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,34,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,35,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,37,class Escaper {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,39,private static final char[] HEX_CHARS = {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,40,"'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,43,private static final Set<Character> JS_ESCAPE_CHARS;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,45,static {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,46,Set<Character> tmpSet = new HashSet<Character>();
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,47,tmpSet.add('\u0000');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,48,tmpSet.add('\r');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,49,tmpSet.add('\n');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,50,tmpSet.add('\u2028');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,51,tmpSet.add('\u2029');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,52,tmpSet.add('\u0085');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,53,tmpSet.add('\'');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,54,"tmpSet.add('""');"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,55,tmpSet.add('<');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,56,tmpSet.add('>');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,57,tmpSet.add('&');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,58,tmpSet.add('=');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,59,tmpSet.add('\\');
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,60,JS_ESCAPE_CHARS = Collections.unmodifiableSet(tmpSet);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,63,public static String escapeJsonString(CharSequence plainText) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,64,StringBuffer escapedString = new StringBuffer(plainText.length() + 20);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,65,try {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,66,"escapeJsonString(plainText, escapedString);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,67,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,68,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,70,return escapedString.toString();
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,73,"private static void escapeJsonString(CharSequence plainText, StringBuffer out) throws IOException {"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,74,int pos = 0;  // Index just past the last char in plainText written to out.
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,75,int len = plainText.length();
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,76,"for (int charCount, i = 0; i < len; i += charCount) {"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,77,"int codePoint = Character.codePointAt(plainText, i);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,78,charCount = Character.charCount(codePoint);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,80,if (!((codePoint < 0x20 || codePoint >= 0x7f)
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,81,|| mustEscapeCharInJsString(codePoint))) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,82,continue;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,85,"out.append(plainText, pos, i);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,86,pos = i + charCount;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,87,switch (codePoint) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,88,case '\b':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,89,"out.append(""\\b"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,90,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,91,case '\t':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,92,"out.append(""\\t"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,93,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,94,case '\n':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,95,"out.append(""\\n"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,96,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,97,case '\f':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,98,"out.append(""\\f"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,99,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,100,case '\r':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,101,"out.append(""\\r"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,102,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,103,case '\\':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,104,"out.append(""\\\\"");"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,105,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,106,"case '""':"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,107,out.append('\\').append((char) codePoint);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,108,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,109,case '\'':
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,110,out.append((char) codePoint);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,111,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,112,default:
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,113,"appendHexJavaScriptRepresentation(codePoint, out);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,114,break;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,117,"out.append(plainText, pos, len);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,120,"private static void appendHexJavaScriptRepresentation(int codePoint, Appendable out)"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,121,throws IOException {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,122,if (Character.isSupplementaryCodePoint(codePoint)) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,123,// Handle supplementary unicode values which are not representable in
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,124,// javascript.  We deal with these by escaping them as two 4B sequences
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,125,// so that they will round-trip properly when sent from java to javascript
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,126,// and back.
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,127,char[] surrogates = Character.toChars(codePoint);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,128,"appendHexJavaScriptRepresentation(surrogates[0], out);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,129,"appendHexJavaScriptRepresentation(surrogates[1], out);"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,130,return;
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,132,"out.append(""\\u"")"
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,133,.append(HEX_CHARS[(codePoint >>> 12) & 0xf])
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,134,.append(HEX_CHARS[(codePoint >>> 8) & 0xf])
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,135,.append(HEX_CHARS[(codePoint >>> 4) & 0xf])
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,136,.append(HEX_CHARS[codePoint & 0xf]);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,139,private static boolean mustEscapeCharInJsString(int codepoint) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,140,if (!Character.isSupplementaryCodePoint(codepoint)) {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,141,return JS_ESCAPE_CHARS.contains((char)codepoint);
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,142,} else {
True,gson/src/main/java/com/google/gson/Escaper.java,gson/src/main/java/com/google/gson/Escaper.java,143,return false;
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,22,* A strategy definition that is used by the {@link ObjectNavigator} to
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,23,* determine whether or not the field of the object should be ignored during
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,24,* navigation.
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,26,"* As well, for now this class is also responsible for excluding entire"
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,27,"* classes.  This is somewhat a mixing of concerns for this object, but"
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,28,* it will suffice for now.  We can always break it down into two
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,29,* different strategies later.
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,31,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,33,interface ExclusionStrategy {
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,36,* @param f the field object that is under test
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,37,* @return true if the field should be ignored otherwise false
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,39,public boolean shouldSkipField(Field f);
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,42,* @param clazz the class object that is under test
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,43,* @return true if the class should be ignored otherwise false
True,gson/src/main/java/com/google/gson/ExclusionStrategy.java,gson/src/main/java/com/google/gson/ExclusionStrategy.java,45,public boolean shouldSkipClass(Class<?> clazz);
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,19,import com.google.gson.annotations.Expose;
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,21,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,24,* Excludes fields that do not have the {@link Expose} annotation
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,28,class ExposeAnnotationBasedExclusionStrategy implements ExclusionStrategy {
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,30,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,31,return false;
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,34,public boolean shouldSkipField(Field f) {
True,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ExposeAnnotationBasedExclusionStrategy.java,35,return f.getAnnotation(Expose.class) == null;
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,20,* An enumeration that defines a few standard naming conventions for JSON field names.
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,21,* This enumeration should be used in conjunction with {@link com.google.gson.GsonBuilder}
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,22,* to configure a {@link com.google.gson.Gson} instance to properly translate Java field
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,23,* names into the desired JSON field names.
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,25,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,27,public enum FieldNamingPolicy {
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,29,"* Using this naming policy with Gson will ensure that the first ""letter"" of the Java"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,30,* field name is capitalized when serialized to its JSON form.
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,32,"* <p>Here's a few examples of the form ""Java Field Name"" ---> ""JSON Field Name"":</p>"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,33,* <ul>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,34,*   <li>someFieldName ---> SomeFieldName</li>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,35,*   <li>_someFieldName ---> _SomeFieldName</li>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,36,* </ul>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,38,UPPER_CAMEL_CASE(new ModifyFirstLetterNamingPolicy(
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,39,"ModifyFirstLetterNamingPolicy.LetterModifier.UPPER)),"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,42,* Using this naming policy with Gson will modify the Java Field name from its camel cased
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,43,* form to a lower case field name where each word is separated by an underscore (_).
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,45,"* <p>Here's a few examples of the form ""Java Field Name"" ---> ""JSON Field Name"":</p>"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,46,* <ul>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,47,*   <li>someFieldName ---> some_field_name</li>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,48,*   <li>_someFieldName ---> _some_field_name</li>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,49,*   <li>aStringField ---> a_string_field</li>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,50,*   <li>aURL ---> a_u_r_l</li>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,51,* </ul>
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,53,"LOWER_CASE_WITH_UNDERSCORES(new LowerCamelCaseSeparatorNamingPolicy(""_""));"
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,55,private final FieldNamingStrategy namingPolicy;
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,57,private FieldNamingPolicy(FieldNamingStrategy namingPolicy) {
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,58,this.namingPolicy = namingPolicy;
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,61,FieldNamingStrategy getFieldNamingPolicy() {
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,62,return namingPolicy;
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,22,* A mechanism for providing custom field naming in Gson.  This allows the client code to translate
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,23,* field names into a particular convention that is not supported as a normal Java field
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,24,"* declaration rules.  For example, Java does not support ""-"" characters in a field name."
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,26,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,28,interface FieldNamingStrategy {
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,31,* Translates the field name into its JSON field name representation.
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,33,* @param f the field object that we are translating
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,34,* @return the translated field name.
True,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,gson/src/main/java/com/google/gson/FieldNamingStrategy.java,36,public String translateName(Field f);
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,19,import java.lang.reflect.GenericArrayType;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,23,* An simple pojo-like immutable instance of the {@link GenericArrayType}.  This object provides
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,24,* us the ability to create reflective types on demand.  This object is required for support
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,25,* object similar to the one defined below:
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,26,* <pre>
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,27,* class Foo<T> {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,28,*   private final List<T>[] arrayOfListT;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,30,*   Foo(List<T>[] arrayList) {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,31,*     this.arrayOfListT = arrayList;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,34,* </pre>
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,36,"* <p>During parsing or serialization, we know the real variable type parameter {@code T},"
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,37,"* so we can build a new {@code GenericTypeArray} with the ""real"" type parameters and"
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,38,* pass that object along instead.
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,40,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,41,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,43,final class GenericArrayTypeImpl implements GenericArrayType {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,45,private final Type genericComponentType;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,47,public GenericArrayTypeImpl(Type genericComponentType) {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,48,this.genericComponentType = genericComponentType;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,51,public Type getGenericComponentType() {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,52,return genericComponentType;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,55,@Override
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,56,public boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,57,if (!(o instanceof  GenericArrayType)) {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,58,return false;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,59,} else {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,60,GenericArrayType that = (GenericArrayType) o;
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,61,Type thatComponentType = that.getGenericComponentType();
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,62,return genericComponentType == null ?
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,63,thatComponentType == null : genericComponentType.equals(thatComponentType);
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,67,@Override
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,68,public int hashCode() {
True,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,gson/src/main/java/com/google/gson/GenericArrayTypeImpl.java,69,return (genericComponentType == null) ? 0 : genericComponentType.hashCode();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,19,import java.io.IOException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,import java.io.PrintWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,21,import java.io.Reader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,22,import java.io.StringReader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,23,import java.io.StringWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,24,import java.io.Writer;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,25,import java.lang.reflect.Modifier;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,26,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,27,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,28,import java.util.List;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,29,import java.util.Map;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,30,import java.util.logging.Logger;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,33,* This is the main class for using Gson. Gson is typically used by first constructing a
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,34,"* Gson instance and then invoking {@link #toJson(Object)} or {@link #fromJson(String, Class)}"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,35,* methods on it.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,37,* <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,38,* is all you need. You can also use {@link GsonBuilder} to build a Gson instance with various
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,39,"* configuration options such as versioning support, pretty printing, custom"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,40,"* {@link JsonSerializer}s, {@link JsonDeserializer}s, and {@link InstanceCreator}s.</p>"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,42,* <p>Here is an example of how Gson is used for a simple Class:
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,44,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,45,* Gson gson = new Gson(); // Or use new GsonBuilder().create();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,46,* MyType target = new MyType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,47,* String json = gson.toJson(target); // serializes target to Json
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,48,"* MyType target2 = gson.fromJson(json, MyType.class); // deserializes json into target2"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,49,* </pre></p>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,51,* <p>If the object that your are serializing/deserializing is a {@code ParameterizedType}
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,52,* (i.e. contains at least one type parameter and may be an array) then you must use the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,53,"* {@link #toJson(Object, Type)} or {@link #fromJson(String, Type)} method.  Here is an"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,54,* example for serializing and deserialing a {@code ParameterizedType}:
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,56,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,57,* Type listType = new TypeToken<List<String>>() {}.getType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,58,* List<String> target = new LinkedList<String>();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,59,"* target.add(""blah"");"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,61,* Gson gson = new Gson();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,62,"* String json = gson.toJson(target, listType);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,63,"* List<String> target2 = gson.fromJson(json, listType);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,64,* </pre></p>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,66,"* <p>See the <a href=""https://sites.google.com/site/gson/gson-user-guide"">Gson User Guide</a>"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,67,* for a more complete set of examples.</p>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,69,* @see com.google.gson.reflect.TypeToken
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,71,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,72,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,74,public final class Gson {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,76,//TODO(inder): get rid of all the registerXXX methods and take all such parameters in the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,77,"// constructor instead. At the minimum, mark those methods private."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,79,"private static final String NULL_STRING = ""null"";"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,80,// Default instances of plug-ins
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,81,static final TypeAdapter DEFAULT_TYPE_ADAPTER =
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,82,new TypeAdapterNotRequired(new PrimitiveTypeAdapter());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,83,static final ModifierBasedExclusionStrategy DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY =
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,84,"new ModifierBasedExclusionStrategy(true, new int[] { Modifier.TRANSIENT, Modifier.STATIC });"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,85,static final JsonFormatter DEFAULT_JSON_FORMATTER = new JsonCompactFormatter();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,86,static final FieldNamingStrategy DEFAULT_NAMING_POLICY =
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,87,new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,89,static final Logger logger = Logger.getLogger(Gson.class.getName());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,91,private final ObjectNavigatorFactory navigatorFactory;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,92,private final MappedObjectConstructor objectConstructor;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,93,private final TypeAdapter typeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,95,/** Map containing Type or Class objects as keys */
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,96,private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,98,/** Map containing Type or Class objects as keys */
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,99,private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,101,private final JsonFormatter formatter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,102,private final boolean serializeNulls;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,105,* Constructs a Gson object with default configuration. The default configuration has the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,106,* following settings:
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,107,* <ul>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,108,*   <li>The JSON generated by <code>toJson</code> methods is in compact representation. This
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,109,*   means that all the unneeded white-space is removed. You can change this behavior with
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,110,*   {@link GsonBuilder#setPrettyPrinting()}. </li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,111,*   <li>The generated JSON omits all the fields that are null. Note that nulls in arrays are
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,112,"*   kept as is since an array is an ordered list. Moreover, if a field is not null, but its"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,113,"*   generated JSON is empty, the field is kept. You can configure Gson to serialize null values"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,114,*   by setting {@link GsonBuilder#serializeNulls()}.</li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,115,"*   <li>Gson provides default serialization and deserialization for Enums, {@link Map},"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,116,"*   {@link java.net.URL}, {@link java.net.URI}, {@link java.util.Locale}, {@link java.util.Date},"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,117,"*   {@link java.math.BigDecimal}, and {@link java.math.BigInteger} classes. If you would prefer"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,118,"*   to change the default representation, you can do so by registering a type adapter through"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,119,"*   {@link GsonBuilder#registerTypeAdapter(Type, Object)}. </li>"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,120,*   <li>The default Date format is same as {@link java.text.DateFormat#DEFAULT}. You can change
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,121,*   this by invoking {@link GsonBuilder#setDateFormat(int)} or
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,122,*   {@link GsonBuilder#setDateFormat(String)}. </li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,123,"*   <li>By default, Gson ignores the {@link com.google.gson.annotations.Expose} annotation."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,124,*   You can enable Gson to serialize/deserialize only those fields marked with this annotation
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,125,*   through {@link GsonBuilder#excludeFieldsWithoutExposeAnnotation()}. </li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,126,"*   <li>By default, Gson ignores the {@link com.google.gson.annotations.Since} annotation. You"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,127,*   can enable Gson to use this annotation through {@link GsonBuilder#setVersion(double)}.</li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,128,"*   <li>The default field naming policy for the output Json is same as in Java. So, a Java class"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,129,*   field <code>versionNumber</code> will be output as <code>&quot;versionNumber@quot;</code> in
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,130,*   Json. The same rules are applied for mapping incoming Json to the Java classes. You can
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,131,*   change this policy through {@link GsonBuilder#setFieldNamingPolicy(FieldNamingPolicy)}.</li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,132,"*   <li>By default, Gson excludes <code>transient</code> or <code>static</code> fields from"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,133,*   consideration for serialization and deserialization. You can change this behavior through
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,134,*   {@link GsonBuilder#excludeFieldsWithModifiers(int...)}.</li>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,135,* </ul>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,137,public Gson() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,138,this(createDefaultObjectNavigatorFactory());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,142,* Constructs a Gson object with the specified version and the mode of operation while
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,143,* encountering inner class references.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,145,* @param factory the object navigator factory to use when creating a new {@link ObjectNavigator}
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,146,* instance
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,148,Gson(ObjectNavigatorFactory factory) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,149,"this(factory, createObjectConstructor(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS),"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,150,"DEFAULT_TYPE_ADAPTER, DEFAULT_JSON_FORMATTER, false,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,151,"DefaultTypeAdapters.DEFAULT_SERIALIZERS, DefaultTypeAdapters.DEFAULT_DESERIALIZERS);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,154,"Gson(ObjectNavigatorFactory factory, MappedObjectConstructor objectConstructor,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,155,"TypeAdapter typeAdapter, JsonFormatter formatter, boolean serializeNulls,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,156,"ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,157,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,158,this.navigatorFactory = factory;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,159,this.objectConstructor = objectConstructor;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,160,this.typeAdapter = typeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,161,this.formatter = formatter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,162,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,163,this.serializers = serializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,164,this.deserializers = deserializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,167,static MappedObjectConstructor createObjectConstructor(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,168,ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,169,MappedObjectConstructor objectConstructor = new MappedObjectConstructor();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,170,"for (Map.Entry<Type, InstanceCreator<?>> entry : instanceCreators.entrySet()) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,171,"objectConstructor.register(entry.getKey(), entry.getValue());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,173,return objectConstructor;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,176,private static ObjectNavigatorFactory createDefaultObjectNavigatorFactory() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,177,return new ObjectNavigatorFactory(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,178,"createExclusionStrategy(VersionConstants.IGNORE_VERSIONS), DEFAULT_NAMING_POLICY);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,181,private static ExclusionStrategy createExclusionStrategy(double version) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,182,List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,183,strategies.add(new InnerClassExclusionStrategy());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,184,strategies.add(DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,185,if (version != VersionConstants.IGNORE_VERSIONS) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,186,strategies.add(new VersionExclusionStrategy(version));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,return new DisjunctionExclusionStrategy(strategies);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,192,* This method serializes the specified object into its equivalent Json representation.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,193,* This method should be used when the specified object is not a generic type. This method uses
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,194,"* {@link Class#getClass()} to get the type for the specified object, but the"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,195,* {@code getClass()} loses the generic type information because of the Type Erasure feature
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,196,"* of Java. Note that this method works fine if the any of the object fields are of generic type,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,197,"* just the object itself should not be of a generic type. If the object is of generic type, use"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,198,"* {@link #toJson(Object, Type)} instead. If you want to write out the object to a"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,199,"* {@link Writer}, use {@link #toJson(Object, Writer)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,201,* @param src the object for which Json representation is to be created setting for Gson
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,202,* @return Json representation of {@code src}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,204,public String toJson(Object src) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,205,if (src == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,206,"return serializeNulls ? NULL_STRING : """";"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,208,"return toJson(src, src.getClass());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,"* This method serializes the specified object, including those of generic types, into its"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,* equivalent Json representation. This method must be used if the specified object is a generic
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214,"* type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,215,"* the object to a {@link Writer}, use {@link #toJson(Object, Type, Writer)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,217,* @param src the object for which JSON representation is to be created
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,* @param typeOfSrc The specific genericized type of src. You can obtain
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,219,"* this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,220,"* to get the type for {@code Collection<Foo>}, you should use:"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,221,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,222,* Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,223,* </pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,224,* @return Json representation of {@code src}
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,226,"public String toJson(Object src, Type typeOfSrc) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,227,StringWriter writer = new StringWriter();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,228,"toJson(src, typeOfSrc, writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,229,return writer.toString();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,233,* This method serializes the specified object into its equivalent Json representation.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,234,* This method should be used when the specified object is not a generic type. This method uses
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,235,"* {@link Class#getClass()} to get the type for the specified object, but the"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,236,* {@code getClass()} loses the generic type information because of the Type Erasure feature
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,237,"* of Java. Note that this method works fine if the any of the object fields are of generic type,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,238,"* just the object itself should not be of a generic type. If the object is of generic type, use"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,239,"* {@link #toJson(Object, Type, Writer)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,241,* @param src the object for which Json representation is to be created setting for Gson
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,242,* @param writer Writer to which the Json representation needs to be written
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,243,* @since 1.2
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,245,"public void toJson(Object src, Writer writer) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,246,if (src != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,247,"toJson(src, src.getClass(), writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,248,} else if (serializeNulls) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,249,writeOutNullString(writer);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,"* This method serializes the specified object, including those of generic types, into its"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,* equivalent Json representation. This method must be used if the specified object is a generic
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,256,"* type. For non-generic objects, use {@link #toJson(Object, Writer)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,258,* @param src the object for which JSON representation is to be created
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,259,* @param typeOfSrc The specific genericized type of src. You can obtain
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,260,"* this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,"* to get the type for {@code Collection<Foo>}, you should use:"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,262,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,* Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,264,* </pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,265,* @param writer Writer to which the Json representation of src needs to be written.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,266,* @since 1.2
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,"public void toJson(Object src, Type typeOfSrc, Writer writer) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,269,if (src != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,270,JsonSerializationContext context =
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,271,"new JsonSerializationContextDefault(navigatorFactory, serializeNulls, serializers);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,272,"JsonElement jsonElement = context.serialize(src, typeOfSrc);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,274,"//TODO(Joel): instead of navigating the ""JsonElement"" inside the formatter, do it here."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,275,"formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,276,} else {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,277,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,278,writeOutNullString(writer);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,284,* This method deserializes the specified Json into an object of the specified class. It is not
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,285,* suitable to use if the specified class is a generic type since it will not have the generic
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,286,"* type information because of the Type Erasure feature of Java. Therefore, this method should not"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,287,* be used if the desired type is a generic type. Note that this method works fine if the any of
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,288,"* the fields of the specified object are generics, just the object itself should not be a"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,289,"* generic type. For the cases when the object is of generic type, invoke"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,290,"* {@link #fromJson(String, Type)}. If you have the Json in a {@link Reader} instead of"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,291,"* a String, use {@link #fromJson(Reader, Class)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,293,* @param <T> the type of the desired object
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,294,* @param json the string from which the object is to be deserialized
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,295,* @param classOfT the class of T
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,296,* @return an object of type T from the string
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,297,* @throws JsonParseException if json is not a valid representation for an object of type
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,298,* classOfT
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,300,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,301,"public <T> T fromJson(String json, Class<T> classOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,302,"T target = (T) fromJson(json, (Type) classOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,303,return target;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,307,* This method deserializes the specified Json into an object of the specified type. This method
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,308,"* is useful if the specified object is a generic type. For non-generic objects, use"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,309,"* {@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,310,"* a String, use {@link #fromJson(Reader, Type)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,312,* @param <T> the type of the desired object
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,313,* @param json the string from which the object is to be deserialized
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,314,* @param typeOfT The specific genericized type of src. You can obtain this type by using the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,315,"* {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,316,"* {@code Collection<Foo>}, you should use:"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,317,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,318,* Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,319,* </pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,320,* @return an object of type T from the string
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,321,* @throws JsonParseException if json is not a valid representation for an object of type typeOfT
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,323,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,324,"public <T> T fromJson(String json, Type typeOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,325,StringReader reader = new StringReader(json);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,326,"T target = (T) fromJson(reader, typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,327,return target;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,331,* This method deserializes the Json read from the specified reader into an object of the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,332,* specified class. It is not suitable to use if the specified class is a generic type since it
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,333,* will not have the generic type information because of the Type Erasure feature of Java.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,334,"* Therefore, this method should not be used if the desired type is a generic type. Note that"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,335,"* this method works fine if the any of the fields of the specified object are generics, just the"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,336,"* object itself should not be a generic type. For the cases when the object is of generic type,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,337,"* invoke {@link #fromJson(Reader, Type)}. If you have the Json in a String form instead of a"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,338,"* {@link Reader}, use {@link #fromJson(String, Class)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,340,* @param <T> the type of the desired object
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,341,* @param json the reader producing the Json from which the object is to be deserialized.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,342,* @param classOfT the class of T
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,343,* @return an object of type T from the string
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,344,* @throws JsonParseException if json is not a valid representation for an object of type
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,345,* classOfT
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,346,* @since 1.2
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,348,"public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,349,"T target = classOfT.cast(fromJson(json, (Type) classOfT));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,350,return target;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,354,* This method deserializes the Json read from the specified reader into an object of the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,355,* specified type. This method is useful if the specified object is a generic type. For
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,356,"* non-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,357,"* String form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,359,* @param <T> the type of the desired object
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,360,* @param json the reader producing Json from which the object is to be deserialized
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,361,* @param typeOfT The specific genericized type of src. You can obtain this type by using the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,362,"* {@link com.google.gson.reflect.TypeToken} class. For example, to get the type for"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,363,"* {@code Collection<Foo>}, you should use:"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,364,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,365,* Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,366,* </pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,367,* @return an object of type T from the json
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,368,* @throws JsonParseException if json is not a valid representation for an object of type typeOfT
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,369,* @since 1.2
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,371,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,372,"public <T> T fromJson(Reader json, Type typeOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,373,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,374,JsonParser parser = new JsonParser(json);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,375,JsonElement root = parser.parse();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,376,"JsonDeserializationContext context = new JsonDeserializationContextDefault(navigatorFactory,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,377,"deserializers, objectConstructor, typeAdapter);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,378,"T target = (T) context.deserialize(root, typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,379,return target;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,380,} catch (TokenMgrError e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,381,"throw new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"", e);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,382,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,383,"throw new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"", e);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,384,} catch (StackOverflowError e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,385,"throw new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"", e);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,386,} catch (OutOfMemoryError e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,387,"throw new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"", e);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,392,* Appends the {@link #NULL_STRING} to the {@code writer} object.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,394,* @param writer the object to append the null value to
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,396,private void writeOutNullString(Writer writer) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,397,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,398,writer.append(NULL_STRING);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,399,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,400,// Should this be a different exception???
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,401,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,19,import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,22,import java.text.DateFormat;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,23,import java.util.Date;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,24,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,25,import java.util.List;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,28,* <p>Use this builder to construct a {@link Gson} instance when you need to set configuration
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,29,"* options other than the default. For {@link Gson} with default configuration, it is simpler to"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,30,"* use {@code new Gson()}. {@code GsonBuilder} is best used by creating it, and then invoking its"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,31,"* various configuration methods, and finally calling create.</p>"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,33,* <p>The following is an example shows how to use the {@code GsonBuilder} to construct a Gson
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,34,* instance:
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,36,* <pre>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,37,* Gson gson = new GsonBuilder()
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,38,"*     .registerTypeAdapter(Id.class, new IdTypeAdapter())"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,39,*     .serializeNulls()
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,40,*     .setDateFormat(DateFormat.LONG)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,41,*     .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,42,*     .setPrettyPrinting()
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,43,*     .setVersion(1.0)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,44,*     .create();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,45,* </pre></p>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,47,* <p>NOTE: the order of invocation of configuration methods does not matter.</p>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,49,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,50,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,52,public final class GsonBuilder {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,54,private double ignoreVersionsAfter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,55,private ModifierBasedExclusionStrategy modifierBasedExclusionStrategy;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,56,private final InnerClassExclusionStrategy innerClassExclusionStrategy;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,57,private boolean excludeFieldsWithoutExposeAnnotation;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,58,private final TypeAdapter typeAdapter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,59,private JsonFormatter formatter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,60,private FieldNamingStrategy fieldNamingPolicy;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,61,private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,62,private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,63,private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,64,private boolean serializeNulls;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,65,private String datePattern;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,66,private int dateStyle;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,69,* Creates a GsonBuilder instance that can be used to build Gson with various configuration
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,70,"* settings. GsonBuilder follows the builder pattern, and it is typically used by first"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,71,"* invoking various configuration methods to set desired options, and finally calling"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,72,* {@link #create()}.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,74,public GsonBuilder() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,75,// setup default values
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,76,ignoreVersionsAfter = VersionConstants.IGNORE_VERSIONS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,77,innerClassExclusionStrategy = new InnerClassExclusionStrategy();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,78,modifierBasedExclusionStrategy = Gson.DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,79,excludeFieldsWithoutExposeAnnotation = false;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,80,typeAdapter = Gson.DEFAULT_TYPE_ADAPTER;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,81,formatter = Gson.DEFAULT_JSON_FORMATTER;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,82,fieldNamingPolicy = Gson.DEFAULT_NAMING_POLICY;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,83,instanceCreators = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,84,serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,85,deserializers = new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,86,serializeNulls = false;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,87,dateStyle = DateFormat.DEFAULT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,91,* Configures Gson to enable versioning support.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,93,* @param ignoreVersionsAfter any field or type marked with a version higher than this value
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,94,* are ignored during serialization or deserialization.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,95,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,97,public GsonBuilder setVersion(double ignoreVersionsAfter) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,98,this.ignoreVersionsAfter = ignoreVersionsAfter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,99,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,103,"* Configures Gson to excludes all class fields that have the specified modifiers. By default,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,104,* Gson will exclude all fields marked transient or static. This method will override that
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,105,* behavior.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,107,* @param modifiers the field modifiers. You must use the modifiers specified in the
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,108,"* {@link java.lang.reflect.Modifier} class. For example,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,109,"* {@link java.lang.reflect.Modifier#TRANSIENT},"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,110,* {@link java.lang.reflect.Modifier#STATIC}.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,111,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,113,public GsonBuilder excludeFieldsWithModifiers(int... modifiers) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,114,boolean skipSynthetics = true;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,115,"modifierBasedExclusionStrategy = new ModifierBasedExclusionStrategy(skipSynthetics, modifiers);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,116,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,120,* Configures Gson to exclude all fields from consideration for serialization or deserialization
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,121,* that do not have the {@link com.google.gson.annotations.Expose} annotation.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,123,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,125,public GsonBuilder excludeFieldsWithoutExposeAnnotation() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,126,excludeFieldsWithoutExposeAnnotation = true;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,127,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,131,"* Configure Gson to serialize null fields. By default, Gson omits all fields that are null"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,132,* during serialization.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,134,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,135,* @since 1.2
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,137,public GsonBuilder serializeNulls() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,138,this.serializeNulls = true;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,139,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,142,* Configures Gson to apply a specific naming policy to an object's field during serialization
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,143,* and deserialization.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,145,* @param namingConvention the JSON field naming convention to use for serialization and
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,146,* deserialization.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,147,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,149,public GsonBuilder setFieldNamingPolicy(FieldNamingPolicy namingConvention) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,150,return setFieldNamingStrategy(namingConvention.getFieldNamingPolicy());
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,154,* Configures Gson to apply a specific naming policy strategy to an object's field during
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,155,* serialization and deserialization.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,157,* @param fieldNamingPolicy the actual naming strategy to apply to the fields
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,158,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,160,private GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingPolicy) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,161,this.fieldNamingPolicy = new SerializedNameAnnotationInterceptingNamingPolicy(fieldNamingPolicy);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,162,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,166,* Configures Gson to output Json that fits in a page for pretty printing. This option only
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,167,* affects Json serialization.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,169,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,171,public GsonBuilder setPrettyPrinting() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,172,setFormatter(new JsonPrintFormatter());
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,173,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,177,* Configures Gson with a new formatting strategy other than the default strategy. The default
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,178,* strategy is to provide a compact representation that eliminates all unneeded white-space.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,180,* @param formatter the new formatter to use.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,181,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,182,* @see JsonPrintFormatter
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,184,GsonBuilder setFormatter(JsonFormatter formatter) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,185,this.formatter = formatter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,186,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,190,* Configures Gson to serialize {@code Date} objects according to the pattern provided. You can
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,191,"* call this method or {@link #setDateFormat(int)} multiple times, but only the last invocation"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,192,* will be used to decide the serialization format.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,194,* <p>Note that this pattern must abide by the convention provided by {@code SimpleDateFormat}
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,195,* class. See the documentation in {@link java.text.SimpleDateFormat} for more information on
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,196,* valid date and time patterns.</p>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,198,* @param pattern the pattern that dates will be serialized/deserialized to/from
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,199,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,200,* @since 1.2
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,202,public GsonBuilder setDateFormat(String pattern) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,203,// TODO(Joel): Make this fail fast if it is an invalid date format
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,204,this.datePattern = pattern;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,205,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,209,* Configures Gson to to serialize {@code Date} objects according to the style value provided.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,210,"* You can call this method or {@link #setDateFormat(String)} multiple times, but only the last"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,211,* invocation will be used to decide the serialization format.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,213,* <p>Note that this style value should be one of the predefined constants in the
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,214,* {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,215,* information on the valid style constants.</p>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,217,* @param style the predefined date style that date objects will be serialized/deserialized
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,218,* to/from
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,219,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,220,* @since 1.2
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,222,public GsonBuilder setDateFormat(int style) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,223,this.dateStyle = style;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,224,this.datePattern = null;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,225,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,229,* Configures Gson for custom serialization or deserialization. This method combines the
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,230,"* registration of an {@link InstanceCreator}, {@link JsonSerializer}, and a"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,231,* {@link JsonDeserializer}. It is best used when a single object {@code typeAdapter} implements
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,232,"* all the required interfaces for custom serialization with Gson. If an instance creator,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,233,"* serializer or deserializer was previously registered for the specified {@code type}, it is"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,234,* overwritten.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,236,* @param type the type definition for the type adapter being registered
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,237,"* @param typeAdapter This object must implement at least one of the {@link InstanceCreator},"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,238,"* {@link JsonSerializer}, and a {@link JsonDeserializer} interfaces."
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,239,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,241,"public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,242,Preconditions.checkArgument(typeAdapter instanceof JsonSerializer
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,243,|| typeAdapter instanceof JsonDeserializer || typeAdapter instanceof InstanceCreator);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,244,if (typeAdapter instanceof InstanceCreator) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,245,"registerInstanceCreator(type, (InstanceCreator<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,247,if (typeAdapter instanceof JsonSerializer) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,248,"registerSerializer(type, (JsonSerializer<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,250,if (typeAdapter instanceof JsonDeserializer) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,251,"registerDeserializer(type, (JsonDeserializer<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,253,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,257,* Configures Gson to use a custom {@link InstanceCreator} for the specified type. If an instance
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,258,"* creator was previously registered for the specified class, it is overwritten. Since this method"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,259,"* takes a type instead of a Class object, it can be used to register a specific handler for a"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,260,* generic type corresponding to a raw type.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,262,* @param <T> the type for which instance creator is being registered
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,263,* @param typeOfT The Type definition for T
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,264,* @param instanceCreator the instance creator for T
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,265,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,267,"private <T> GsonBuilder registerInstanceCreator(Type typeOfT,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,268,InstanceCreator<? extends T> instanceCreator) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,269,"instanceCreators.register(typeOfT, instanceCreator);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,270,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,274,* Configures Gson to use a custom JSON serializer for the specified type. You should use this
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,275,* method if you want to register different serializers for different generic types corresponding
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,276,* to a raw type.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,278,* @param <T> the type for which the serializer is being registered
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,279,* @param typeOfT The type definition for T
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,280,* @param serializer the custom serializer
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,281,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,283,"private <T> GsonBuilder registerSerializer(Type typeOfT, final JsonSerializer<T> serializer) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,284,"serializers.register(typeOfT, new JsonSerializerExceptionWrapper<T>(serializer));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,285,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,289,* Configures Gson to use a custom JSON deserializer for the specified type. You should use this
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,290,* method if you want to register different deserializers for different generic types
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,291,* corresponding to a raw type.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,293,* @param <T> the type for which the deserializer is being registered
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,294,* @param typeOfT The type definition for T
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,295,* @param deserializer the custom deserializer
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,296,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,298,"private <T> GsonBuilder registerDeserializer(Type typeOfT, JsonDeserializer<T> deserializer) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,299,"deserializers.register(typeOfT, new JsonDeserializerExceptionWrapper<T>(deserializer));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,300,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,304,* Creates a {@link Gson} instance based on the current configuration. This method is free of
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,305,* side-effects to this {@code GsonBuilder} instance and hence can be called multiple times.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,307,* @return an instance of Gson configured with the options currently set in this builder
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,309,public Gson create() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,310,List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,311,strategies.add(innerClassExclusionStrategy);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,312,strategies.add(modifierBasedExclusionStrategy);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,313,if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,314,strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,316,if (excludeFieldsWithoutExposeAnnotation) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,317,strategies.add(new ExposeAnnotationBasedExclusionStrategy());
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,319,ExclusionStrategy exclusionStrategy = new DisjunctionExclusionStrategy(strategies);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,320,ObjectNavigatorFactory objectNavigatorFactory =
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,321,"new ObjectNavigatorFactory(exclusionStrategy, fieldNamingPolicy);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,323,ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers = serializers.copyOf();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,324,ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers = deserializers.copyOf();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,326,"addTypeAdaptersForDate(datePattern, dateStyle, customSerializers, customDeserializers);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,327,customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,328,customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,330,ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators =
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,331,instanceCreators.copyOf();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,332,customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,333,MappedObjectConstructor objConstructor = Gson.createObjectConstructor(customInstanceCreators);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,335,"Gson gson = new Gson(objectNavigatorFactory, objConstructor, typeAdapter, formatter,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,336,"serializeNulls, customSerializers, customDeserializers);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,337,return gson;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,340,"private static void addTypeAdaptersForDate(String datePattern, int dateStyle,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,341,"ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,342,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,343,"// NOTE: if a date pattern exists, then that style takes priority"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,344,DefaultDateTypeAdapter dateTypeAdapter = null;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,345,"if (datePattern != null && !"""".equals(datePattern.trim())) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,346,dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,347,} else if (dateStyle != DateFormat.DEFAULT) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,348,dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,350,if (dateTypeAdapter != null
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,351,&& !serializers.hasAnyHandlerFor(Date.class)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,352,&& !deserializers.hasAnyHandlerFor(Date.class)) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,353,"serializers.register(Date.class, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,354,"deserializers.register(Date.class, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,22,* Strategy for excluding inner classes.
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,24,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,26,final class InnerClassExclusionStrategy implements ExclusionStrategy {
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,28,public boolean shouldSkipField(Field f) {
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,29,return isAnonymousOrLocal(f.getType());
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,32,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,33,return isAnonymousOrLocal(clazz);
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,36,private boolean isAnonymousOrLocal(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java,37,return clazz.isAnonymousClass() || clazz.isLocalClass();
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,22,* This interface is implemented to create instances of a class that does not define a no-args
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,23,"* constructor. If you can modify the class, you should instead add a private, or public"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,24,"* no-args constructor. However, that is not possible for library classes, such as JDK classes, or"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,25,"* a third-party library that you do not have source-code of. In such cases, you should define an"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,26,* instance creator for the class. Implementations of this interface should be registered with
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,27,"* {@link GsonBuilder#registerTypeAdapter(Type, Object)} method before Gson will be able to use"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,28,* them.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,29,* <p>Let us look at an example where defining an InstanceCreator might be useful. The
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,30,* {@code Id} class defined below does not have a default no-args constructor.</p>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,32,* <pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,33,* public class Id&lt;T&gt; {
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,34,*   private final Class&lt;T&gt; clazz;
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,35,*   private final long value;
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,36,"*   public Id(Class&lt;T&gt; clazz, long value) {"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,37,*     this.clazz = clazz;
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,38,*     this.value = value;
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,41,* </pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,43,"* <p>If Gson encounters an object of type {@code Id} during deserialization, it will throw an"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,44,* exception. The easiest way to solve this problem will be to add a (public or private) no-args
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,45,* constructor as follows:</p>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,47,* <pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,48,* private Id() {
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,49,"*   this(Object.class, 0L);"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,51,* </pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,53,"* <p>However, let us assume that the developer does not have access to the source-code of the"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,54,"* {@code Id} class, or does not want to define a no-args constructor for it. The developer"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,55,* can solve this problem by defining an {@code InstanceCreator} for {@code Id}:</p>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,57,* <pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,58,* class IdInstanceCreator implements InstanceCreator&lt;Id&gt; {
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,59,*   public Id createInstance(Type type) {
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,60,"*     return new Id(Object.class, 0L);"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,63,* </pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,65,* <p>Note that it does not matter what the fields of the created instance contain since Gson will
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,66,* overwrite them with the deserialized values specified in Json. You should also ensure that a
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,67,"* <i>new</i> object is returned, not a common object since its fields will be overwritten."
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,68,* The developer will need to register {@code IdInstanceCreator} with Gson as follows:</p>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,70,* <pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,71,"* Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new IdInstanceCreator()).create();"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,72,* </pre>
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,74,* @param <T> the type of object that will be created by this implementation.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,76,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,78,public interface InstanceCreator<T> {
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,81,* Gson invokes this call-back method during deserialization to create an instance of the
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,82,* specified type. The fields of the returned instance are overwritten with the data present
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,83,"* in the Json. Since the prior contents of the object are destroyed and overwritten, do not"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,84,"* return an instance that is useful elsewhere. In particular, do not return a common instance,"
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,85,* always use {@code new} to create a new instance.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,87,* @param type the parameterized T represented as a {@link Type}.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,88,* @return a default object instance of type T.
True,gson/src/main/java/com/google/gson/InstanceCreator.java,gson/src/main/java/com/google/gson/InstanceCreator.java,90,public T createInstance(Type type);
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,23,* A simple implementation of the {@link FieldNamingStrategy} interface such that it does not
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,24,* perform any string translation of the incoming field name.
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,26,* <p>The following is an example:</p>
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,28,* <pre>
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,29,* class IntWrapper {
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,30,*   public int integerField = 0;
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,33,* JavaFieldNamingPolicy policy = new JavaFieldNamingPolicy();
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,34,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,35,"*     policy.translateName(IntWrapper.class.getField(""integerField""));"
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,37,"* assert(""integerField"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,38,* </pre>
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,40,* <p>This is the default {@link FieldNamingStrategy} used by Gson.</p>
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,42,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,44,class JavaFieldNamingPolicy extends RecursiveFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,46,@Override
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,47,"protected String translateName(String target, Type fieldType, Annotation[] annotations) {"
True,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,gson/src/main/java/com/google/gson/JavaFieldNamingPolicy.java,48,return target;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,19,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,20,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,21,import java.util.Collections;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,22,import java.util.Iterator;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,23,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,24,import java.util.List;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,27,* A class representing an array type in Json. An array is a list of {@link JsonElement}s each of
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,28,"* which can be of a different type. This is an ordered list, meaning that the order in which"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,29,* elements are added is preserved.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,31,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,33,public final class JsonArray extends JsonElement implements Iterable<JsonElement> {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,34,private final List<JsonElement> elements;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,37,* Creates an empty JsonArray.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,39,public JsonArray() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,40,elements = new LinkedList<JsonElement>();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,44,* Adds the specified element to self.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,46,* @param element the element that needs to be added to the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,48,public void add(JsonElement element) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,49,elements.add(element);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,53,* Adds all the elements of the specified array to self.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,55,* @param array the array whose elements need to be added to the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,57,public void addAll(JsonArray array) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,58,elements.addAll(array.elements);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,62,* Reverses the elements of the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,64,void reverse() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,65,Collections.reverse(elements);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,69,* Returns the number of elements in the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,71,* @return the number of elements in the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,73,public int size() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,74,return elements.size();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,78,"* Returns an iterator to navigate the elemetns of the array. Since the array is an ordered list,"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,79,* the iterator navigates the elements in the order they were inserted.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,81,* @return an iterator to navigate the elements of the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,83,public Iterator<JsonElement> iterator() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,84,return elements.iterator();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,88,* Returns the ith element of the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,90,* @param i the index of the element that is being sought.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,91,* @return the element present at the ith index.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,92,* @throws IndexOutOfBoundsException if i is negative or greater than or equal to the
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,93,* {@link #size()} of the array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,95,public JsonElement get(int i) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,96,return elements.get(i);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,100,* convenience method to get this array as a {@link Number} if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,102,* @return get this element as a number if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,103,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,104,* is not a valid Number.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,105,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,107,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,108,public Number getAsNumber() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,109,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,110,return elements.get(0).getAsNumber();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,112,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,116,* convenience method to get this array as a {@link String} if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,118,* @return get this element as a String if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,119,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,120,* is not a valid String.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,121,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,123,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,124,public String getAsString() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,125,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,126,return elements.get(0).getAsString();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,128,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,132,* convenience method to get this array as a double if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,134,* @return get this element as a double if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,135,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,136,* is not a valid double.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,137,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,139,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,140,public double getAsDouble() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,141,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,142,return elements.get(0).getAsDouble();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,144,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,148,* convenience method to get this array as a {@link BigDecimal} if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,150,* @return get this element as a {@link BigDecimal} if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,151,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,152,* @throws NumberFormatException if the element at index 0 is not a valid {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,153,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,154,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,156,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,157,public BigDecimal getAsBigDecimal() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,158,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,159,return elements.get(0).getAsBigDecimal();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,161,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,165,* convenience method to get this array as a {@link BigInteger} if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,167,* @return get this element as a {@link BigInteger} if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,168,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive}.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,169,* @throws NumberFormatException if the element at index 0 is not a valid {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,170,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,171,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,173,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,174,public BigInteger getAsBigInteger() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,175,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,176,return elements.get(0).getAsBigInteger();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,178,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,182,* convenience method to get this array as a float if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,184,* @return get this element as a float if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,185,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,186,* is not a valid float.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,187,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,189,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,190,public float getAsFloat() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,191,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,192,return elements.get(0).getAsFloat();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,194,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,198,* convenience method to get this array as a long if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,200,* @return get this element as a long if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,201,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,202,* is not a valid long.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,203,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,205,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,206,public long getAsLong() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,207,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,208,return elements.get(0).getAsLong();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,210,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,214,* convenience method to get this array as an integer if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,216,* @return get this element as an integer if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,217,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,218,* is not a valid integer.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,219,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,221,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,222,public int getAsInt() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,223,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,224,return elements.get(0).getAsInt();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,226,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,230,* convenience method to get this array as a primitive short if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,232,* @return get this element as a primitive short if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,233,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,234,* is not a valid short.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,235,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,237,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,238,public short getAsShort() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,239,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,240,return elements.get(0).getAsShort();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,242,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,246,* convenience method to get this array as a boolean if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,248,* @return get this element as a boolean if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,249,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,250,* is not a valid boolean.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,251,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,253,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,254,public boolean getAsBoolean() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,255,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,256,return elements.get(0).getAsBoolean();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,258,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,262,* convenience method to get this array as an Object if it contains a single element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,264,* @return get this element as an Object if it is single element array.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,265,* @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,266,* is not a valid Object.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,267,* @throws IllegalStateException if the array has more than one element.
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,269,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,270,Object getAsObject() {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,271,if (elements.size() == 1) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,272,return elements.get(0).getAsObject();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,274,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,277,@Override
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,278,protected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,279,sb.append('[');
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,280,boolean first = true;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,281,for (JsonElement element : elements) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,282,if (first) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,283,first = false;
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,284,} else {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,285,"sb.append(',');"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,287,element.toString(sb);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,289,sb.append(']');
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,19,import java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,20,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,22,import java.util.Collection;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,25,* A visitor that populates fields of an object with data from its equivalent
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,26,* JSON representation
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,28,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,29,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,31,final class JsonArrayDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,32,private final Class<?> componentType;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,34,"JsonArrayDeserializationVisitor(JsonArray jsonArray, Type arrayType,"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,35,"ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,36,"TypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,37,JsonDeserializationContext context) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,38,"super(jsonArray, arrayType, factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,39,this.componentType = TypeUtils.toRawClass(arrayType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,42,@Override
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,43,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,44,protected T constructTarget() {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,46,TypeInfo typeInfo = new TypeInfo(targetType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,48,JsonArray jsonArray = json.getAsJsonArray();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,49,if (typeInfo.isPrimitiveOrStringAndNotAnArray()) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,50,if (jsonArray.size() != 1) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,51,throw new IllegalArgumentException(
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,52,"""Primitives should be an array of length 1, but was: "" + jsonArray);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,54,return (T) objectConstructor.construct(typeInfo.getWrappedClass());
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,55,} else if (typeInfo.isArray()) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,56,TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray(targetType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,57,"// We know that we are getting back an array of the required type, so"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,58,// this typecasting is safe.
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,59,"return (T) objectConstructor.constructArray(arrayTypeInfo.getSecondLevelType(),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,60,jsonArray.size());
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,61,} else { // is a collection
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,62,return (T) objectConstructor.construct(typeInfo.getRawClass());
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,66,"public void visitArray(Object array, Type arrayType) {"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,67,JsonArray jsonArray = json.getAsJsonArray();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,68,TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,69,for (int i = 0; i < jsonArray.size(); i++) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,70,JsonElement jsonChild = jsonArray.get(i);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,71,Object child;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,73,if (jsonChild == null) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,74,child = null;
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,75,} else if (jsonChild instanceof JsonObject) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,76,"child = visitChildAsObject(arrayTypeInfo.getComponentRawType(), jsonChild);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,77,} else if (jsonChild instanceof JsonArray) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,78,"child = visitChildAsArray(arrayTypeInfo.getSecondLevelType(), jsonChild.getAsJsonArray());"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,79,} else if (jsonChild instanceof JsonPrimitive) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,80,"child = visitChildAsPrimitive(arrayTypeInfo.getComponentRawType(),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,81,jsonChild.getAsJsonPrimitive());
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,82,} else {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,83,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,85,"Array.set(array, i, child);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,89,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,90,"public void visitCollection(Collection collection, Type collectionType) {"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,91,Type childType = TypeUtils.getActualTypeForFirstTypeVariable(collectionType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,92,for (JsonElement jsonChild : json.getAsJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,93,if (childType == Object.class) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,94,throw new JsonParseException(collection +
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,95,""" must not be a raw collection. Try making it genericized instead."");"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,97,"Object child = visitChild(childType, jsonChild);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,98,collection.add(child);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,102,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,103,public void visitPrimitiveValue(Object obj) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,104,"target = (T) typeAdapter.adaptType(json.getAsJsonArray().get(0).getAsObject(), componentType);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,107,// We should not implement any other method from Visitor interface since
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,108,// all other methods should be invoked on JsonObjectDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,109,// instead.
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,111,public void endVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,112,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,115,public void startVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,116,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,119,"public void visitArrayField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,120,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,123,"public void visitCollectionField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,124,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,127,"public void visitObjectField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,128,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,131,"public void visitPrimitiveField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,132,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,19,import java.io.PrintWriter;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,22,* Formats Json in a compact way eliminating all unnecessary whitespace.
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,24,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,26,final class JsonCompactFormatter implements JsonFormatter {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,28,private static class FormattingVisitor implements JsonElementVisitor {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,29,private final PrintWriter writer;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,30,private final boolean serializeNulls;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,32,"FormattingVisitor(PrintWriter writer, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,33,this.writer = writer;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,34,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,37,public void visitPrimitive(JsonPrimitive primitive) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,38,writer.append(primitive.toString());
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,41,public void visitNull() {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,42,"writer.append(""null"");"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,45,public void startArray(JsonArray array) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,46,writer.append('[');
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,49,"public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,50,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,51,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,53,writer.append(member.toString());
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,56,"public void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,57,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,58,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,62,"public void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,63,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,64,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,68,"public void visitNullArrayMember(JsonArray parent, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,69,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,70,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,74,public void endArray(JsonArray array) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,75,writer.append(']');
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,78,public void startObject(JsonObject object) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,79,writer.append('{');
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,82,"public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member,"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,83,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,84,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,85,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,87,"writer.append('""');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,88,writer.append(memberName);
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,89,"writer.append(""\"":"");"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,90,writer.append(member.toString());
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,93,"public void visitObjectMember(JsonObject parent, String memberName, JsonArray member,"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,94,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,95,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,96,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,98,"writer.append('""');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,99,writer.append(memberName);
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,100,"writer.append(""\"":"");"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,103,"public void visitObjectMember(JsonObject parent, String memberName, JsonObject member,"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,104,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,105,if (!isFirst) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,106,"writer.append(',');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,108,"writer.append('""');"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,109,writer.append(memberName);
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,110,"writer.append(""\"":"");"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,113,"public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,114,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,115,"visitObjectMember(parent, memberName, (JsonObject) null, isFirst);"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,119,public void endObject(JsonObject object) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,120,writer.append('}');
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,124,"public void format(JsonElement root, PrintWriter writer, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,125,if (root == null) {
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,126,return;
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,128,JsonElementVisitor visitor =
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,129,"new JsonEscapingVisitor(new FormattingVisitor(writer, serializeNulls));"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,130,"JsonTreeNavigator navigator = new JsonTreeNavigator(visitor, serializeNulls);"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,131,navigator.navigate(root);
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,22,* Context for deserialization that is passed to a custom deserializer during invocation of its
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,23,"* {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)}"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,24,* method.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,28,public interface JsonDeserializationContext {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,31,* Invokes default deserialization on the specified object. It should never be invoked on
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,32,* the element received as a parameter of the
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,33,"* {@link JsonDeserializer#deserialize(JsonElement, Type, JsonDeserializationContext)} method. Doing"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,34,* so will result in an infinite loop since Gson will in-turn call the custom deserializer again.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,36,* @param json the parse tree.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,37,* @param typeOfT type of the expected return value.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,38,* @param <T> The type of the deserialized object.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,39,* @return An object of type typeOfT.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,40,* @throws JsonParseException if the parse tree does not contain expected data.
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,42,"public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException;"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,22,* implementation of a deserialization context for Gson
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,24,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,26,final class JsonDeserializationContextDefault implements JsonDeserializationContext {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,28,private final ObjectNavigatorFactory navigatorFactory;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,29,private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,30,private final MappedObjectConstructor objectConstructor;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,31,private final TypeAdapter typeAdapter;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,33,"JsonDeserializationContextDefault(ObjectNavigatorFactory navigatorFactory,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,34,"ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,35,"MappedObjectConstructor objectConstructor, TypeAdapter typeAdapter) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,36,this.navigatorFactory = navigatorFactory;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,37,this.deserializers = deserializers;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,38,this.objectConstructor = objectConstructor;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,39,this.typeAdapter = typeAdapter;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,42,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,43,"public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,44,if (json.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,45,"return (T) fromJsonArray(typeOfT, json.getAsJsonArray(), this);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,46,} else if (json.isJsonObject()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,47,"return (T) fromJsonObject(typeOfT, json.getAsJsonObject(), this);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,48,} else if (json.isJsonPrimitive()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,49,"return (T) fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,50,} else if (json.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,51,return null;
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,52,} else {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,53,"throw new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,57,"private <T> T fromJsonArray(Type arrayType, JsonArray jsonArray,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,58,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,59,JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,60,"jsonArray, arrayType, navigatorFactory, objectConstructor, typeAdapter, deserializers,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,61,context);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,62,Object target = visitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,63,"ObjectNavigator on = navigatorFactory.create(target, arrayType);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,64,on.accept(visitor);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,65,return visitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,68,"private <T> T fromJsonObject(Type typeOfT, JsonObject jsonObject,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,69,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,70,JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,71,"jsonObject, typeOfT, navigatorFactory, objectConstructor, typeAdapter, deserializers,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,72,context);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,73,Object target = visitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,74,"ObjectNavigator on = navigatorFactory.create(target, typeOfT);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,75,on.accept(visitor);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,76,return visitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,79,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,80,"private <T> T fromJsonPrimitive(Type typeOfT, JsonPrimitive json,"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,81,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,82,JsonPrimitiveDeserializationVisitor<T> visitor = new JsonPrimitiveDeserializationVisitor<T>(
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,83,"json, typeOfT, navigatorFactory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,84,Object target = visitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,85,"ObjectNavigator on = navigatorFactory.create(target, typeOfT);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,86,on.accept(visitor);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,87,target = visitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,88,if (typeOfT instanceof Class) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,89,"target = typeAdapter.adaptType(target, (Class) typeOfT);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,91,return (T) target;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,20,import java.util.logging.Logger;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,23,* Abstract data value container for the {@link ObjectNavigator.Visitor}
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,24,* implementations.  This class exposes the {@link #getTarget()} method
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,25,* which returns the class that was visited by this object.
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,30,abstract class JsonDeserializationVisitor<T> implements ObjectNavigator.Visitor {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,32,protected static Logger logger = Logger.getLogger(JsonDeserializationVisitor.class.getName());
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,34,protected final ObjectNavigatorFactory factory;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,35,protected final ObjectConstructor objectConstructor;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,36,protected final TypeAdapter typeAdapter;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,37,protected final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,38,protected T target;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,39,protected final JsonElement json;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,40,protected final Type targetType;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,41,private final JsonDeserializationContext context;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,43,"public JsonDeserializationVisitor(JsonElement json, Type targetType,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,44,"ObjectNavigatorFactory factory, ObjectConstructor objectConstructor, TypeAdapter typeAdapter,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,45,"ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,46,JsonDeserializationContext context) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,47,Preconditions.checkNotNull(json);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,48,this.targetType = targetType;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,49,this.factory = factory;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,50,this.objectConstructor = objectConstructor;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,51,this.typeAdapter = typeAdapter;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,52,this.deserializers = deserializers;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,53,this.json = json;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,54,this.context = context;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,57,T getTarget() {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,58,if (target == null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,59,target = constructTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,61,return target;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,64,protected abstract T constructTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,66,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,67,"public final void visitEnum(Object obj, Type objType) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,68,JsonDeserializer<T> deserializer = (JsonDeserializer<T>) deserializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,69,if (deserializer == null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,70,deserializer =  (JsonDeserializer<T>) deserializers.getHandlerFor(Enum.class);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,72,if (deserializer == null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,73,"throw new RuntimeException(""Register a JsonDeserializer for Enum or """
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,74,+ obj.getClass().getName());
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,76,"target = deserializer.deserialize(json, objType, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,79,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,80,"public final boolean visitUsingCustomHandler(Object obj, Type objType) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,81,JsonDeserializer<T> deserializer = (JsonDeserializer<T>) deserializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,82,if (deserializer != null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,83,"target = deserializer.deserialize(json, objType, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,84,return true;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,86,return false;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,89,"final Object visitChildAsObject(Type childType, JsonElement jsonChild) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,90,JsonDeserializationVisitor<?> childVisitor =
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,91,"new JsonObjectDeserializationVisitor<Object>(jsonChild, childType,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,92,"factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,93,"return visitChild(childType, childVisitor);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,96,"final Object visitChildAsArray(Type childType, JsonArray jsonChild) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,97,JsonDeserializationVisitor<?> childVisitor =
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,98,"new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(), childType,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,99,"factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,100,"return visitChild(childType, childVisitor);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,103,"final Object visitChildAsPrimitive(Type childType, JsonPrimitive jsonChild) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,104,Preconditions.checkNotNull(jsonChild);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,105,Class<?> childClass;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,106,if (childType instanceof Class) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,107,childClass = (Class<?>) childType;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,108,} else {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,109,childClass = TypeUtils.toRawClass(childType);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,111,"return typeAdapter.adaptType(jsonChild.getAsObject(), childClass);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,114,"final Object visitChild(Type childType, JsonElement jsonChild) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,115,if (jsonChild == null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,116,return null;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,117,} else if (jsonChild instanceof JsonArray) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,118,"return visitChildAsArray(childType, jsonChild.getAsJsonArray());"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,119,} else if (jsonChild instanceof JsonObject) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,120,"return visitChildAsObject(childType, jsonChild);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,121,} else if (jsonChild instanceof JsonPrimitive) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,122,"return visitChildAsPrimitive(childType, jsonChild.getAsJsonPrimitive());"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,123,} else {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,124,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,128,"private Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,129,Object child = childVisitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,130,"ObjectNavigator on = factory.create(child, type);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,131,on.accept(childVisitor);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,132,// the underlying object may have changed during the construction phase
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,133,// This happens primarily because of custom deserializers
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,134,return childVisitor.getTarget();
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,22,* <p>Interface representing a custom deserializer for Json. You should write a custom
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,23,"* deserializer, if you are not happy with the default deserialization done by Gson. You will"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,24,* also need to register this deserializer through
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,25,"* {@link GsonBuilder#registerTypeAdapter(Type, Object)}.</p>"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,27,* <p>Let us look at example where defining a deserializer will be useful. The {@code Id} class
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,28,* defined below has two fields: {@code clazz} and {@code value}.</p>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,30,* <pre>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,31,* public class Id&lt;T&gt; {
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,32,*   private final Class&lt;T&gt; clazz;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,33,*   private final long value;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,34,"*   public Id(Class&lt;T&gt; clazz, long value) {"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,35,*     this.clazz = clazz;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,36,*     this.value = value;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,38,*   public long getValue() {
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,39,*     return value;
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,42,* </pre>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,44,"* <p>The default deserialization of {@code Id(com.foo.MyObject.class, 20L)} will require the"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,45,"* Json string to be <code>{""clazz"":com.foo.MyObject,""value"":20}</code>. Suppose, you already know"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,46,"* the type of the field that the {@code Id} will be deserialized into, and hence just want to"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,47,* deserialize it from a Json string {@code 20}. You can achieve that by writing a custom
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,48,* deserializer:</p>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,50,* <pre>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,51,* class IdDeserializer implements JsonDeserializer&lt;Id&gt;() {
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,52,"*   public Id fromJson(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,53,*       throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,54,"*     return (Id) new Id((Class)typeOfT, id.getValue());"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,56,* </pre>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,58,* <p>You will also need to register {@code IdDeserializer} with Gson as follows:</p>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,60,* <pre>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,61,"* Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new IdDeserializer()).create();"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,62,* </pre>
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,64,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,65,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,67,* @param <T> type for which the deserializer is being registered. It is possible that a
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,68,* deserializer may be asked to deserialize a specific generic type of the T.
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,70,public interface JsonDeserializer<T> {
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,73,* Gson invokes this call-back method during deserialization when it encounters a field of the
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,74,* specified type.
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,75,"* <p>In the implementation of this call-back method, you should consider invoking"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,76,"* {@link JsonDeserializationContext#deserialize(JsonElement, Type)} method to create objects"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,77,"* for any non-trivial field of the returned object. However, you should never invoke it on the"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,78,* the same type passing {@code json} since that will cause an infinite loop (Gson will call your
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,79,* call-back method again).
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,81,* @param json The Json data being deserialized
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,82,* @param typeOfT The type of the Object to deserialize to
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,83,* @return a deserialized object of the specified type typeOfT which is a subclass of {@code T}
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,84,* @throws JsonParseException if json is not in the expected format of {@code typeofT}
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,86,"public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,87,throws JsonParseException;
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,22,* Decorators a {@code JsonDeserializer} instance with exception handling.  This wrapper class
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,23,* ensures that a {@code JsonDeserializer} will not propagate any exception other than a
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,24,* {@link JsonParseException}.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,26,* @param <T> type of the deserializer being wrapped.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,28,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,29,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,31,class JsonDeserializerExceptionWrapper<T> implements JsonDeserializer<T> {
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,33,private final JsonDeserializer<T> delegate;
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,36,* Returns a wrapped {@link JsonDeserializer} object that has been decorated with
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,37,* {@link JsonParseException} handling.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,39,* @param delegate the {@code JsonDeserializer} instance to be wrapped.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,40,* @throws IllegalArgumentException if {@code delegate} is {@code null}.
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,42,JsonDeserializerExceptionWrapper(JsonDeserializer<T> delegate) {
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,43,Preconditions.checkNotNull(delegate);
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,44,this.delegate = delegate;
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,47,"public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,48,throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,49,try {
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,50,"return delegate.deserialize(json, typeOfT, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,51,} catch (JsonParseException e) {
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,52,// just rethrow the exception
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,53,throw e;
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,54,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,55,// rethrow as a JsonParseException
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,56,StringBuilder errorMsg = new StringBuilder()
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,57,".append(""The JsonDeserializer "")"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,58,.append(delegate)
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,59,".append("" failed to deserialized json object "")"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,60,.append(json)
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,61,".append("" given the type "")"
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,62,.append(typeOfT);
True,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,63,"throw new JsonParseException(errorMsg.toString(), e);"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,19,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,20,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,23,"* A class representing an element of Json. It could either be a {@link JsonObject}, a"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,24,"* {@link JsonArray}, a {@link JsonPrimitive} or a {@link JsonNull}."
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,29,public abstract class JsonElement {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,32,* provides check for verifying if this element is an array or not.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,34,"* @return true if this element is of type {@link JsonArray}, false otherwise."
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,36,public boolean isJsonArray() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,37,return this instanceof JsonArray;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,41,* provides check for verifying if this element is a Json object or not.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,43,"* @return true if this element is of type {@link JsonObject}, false otherwise."
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,45,public boolean isJsonObject() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,46,return this instanceof JsonObject;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,50,* provides check for verifying if this element is a primitive or not.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,52,"* @return true if this element is of type {@link JsonPrimitive}, false otherwise."
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,54,public boolean isJsonPrimitive() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,55,return this instanceof JsonPrimitive;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,59,* provides check for verifying if this element represents a null value or not.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,61,"* @return true if this element is of type {@link JsonNull}, false otherwise."
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,62,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,64,public boolean isJsonNull() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,65,return this instanceof JsonNull;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,69,* convenience method to get this element as a {@link JsonObject}. If the element is of some
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,70,"* other type, a {@link ClassCastException} will result. Hence it is best to use this method"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,71,* after ensuring that this element is of the desired type by calling {@link #isJsonObject()}
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,72,* first.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,74,* @return get this element as a {@link JsonObject}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,75,* @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,77,public JsonObject getAsJsonObject() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,78,return (JsonObject) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,82,* convenience method to get this element as a {@link JsonArray}. If the element is of some
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,83,"* other type, a {@link ClassCastException} will result. Hence it is best to use this method"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,84,* after ensuring that this element is of the desired type by calling {@link #isJsonArray()}
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,85,* first.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,87,* @return get this element as a {@link JsonArray}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,88,* @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,90,public JsonArray getAsJsonArray() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,91,return (JsonArray) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,95,* convenience method to get this element as a {@link JsonPrimitive}. If the element is of some
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,96,"* other type, a {@link ClassCastException} will result. Hence it is best to use this method"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,97,* after ensuring that this element is of the desired type by calling {@link #isJsonPrimitive()}
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,98,* first.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,100,* @return get this element as a {@link JsonPrimitive}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,101,* @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,103,public JsonPrimitive getAsJsonPrimitive() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,104,return (JsonPrimitive) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,108,* convenience method to get this element as a {@link JsonNull}. If the element is of some
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,109,"* other type, a {@link ClassCastException} will result. Hence it is best to use this method"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,110,* after ensuring that this element is of the desired type by calling {@link #isJsonNull()}
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,111,* first.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,113,* @return get this element as a {@link JsonNull}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,114,* @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,115,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,117,public JsonNull getAsJsonNull() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,118,return (JsonNull) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,122,* convenience method to get this element as a boolean value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,124,* @return get this element as a primitive boolean value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,125,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,126,* boolean value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,127,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,128,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,130,public boolean getAsBoolean() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,131,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,135,* convenience method to get this element as a {@link Boolean} value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,137,* @return get this element as a {@link Boolean} value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,138,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,139,* boolean value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,140,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,141,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,143,Boolean getAsBooleanWrapper() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,144,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,148,* convenience method to get this element as a {@link Number}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,150,* @return get this element as a {@link Number}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,151,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,152,* number.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,153,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,154,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,156,public Number getAsNumber() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,157,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,161,* convenience method to get this element as a string value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,163,* @return get this element as a string value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,164,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,165,* string value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,166,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,167,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,169,public String getAsString() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,170,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,174,* convenience method to get this element as a primitive double value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,176,* @return get this element as a primitive double value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,177,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,178,* double value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,179,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,180,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,182,public double getAsDouble() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,183,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,187,* convenience method to get this element as a primitive float value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,189,* @return get this element as a primitive float value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,190,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,191,* float value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,192,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,193,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,195,public float getAsFloat() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,196,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,200,* convenience method to get this element as a primitive long value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,202,* @return get this element as a primitive long value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,203,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,204,* long value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,205,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,206,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,208,public long getAsLong() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,209,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,213,* convenience method to get this element as a primitive integer value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,215,* @return get this element as a primitive integer value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,216,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,217,* integer value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,218,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,219,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,221,public int getAsInt() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,222,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,226,* convenience method to get this element as a {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,228,* @return get this element as a {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,229,* @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,230,* * @throws NumberFormatException if the element is not a valid {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,231,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,232,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,233,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,235,public BigDecimal getAsBigDecimal() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,236,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,240,* convenience method to get this element as a {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,242,* @return get this element as a {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,243,* @throws ClassCastException if the element is of not a {@link JsonPrimitive}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,244,* @throws NumberFormatException if the element is not a valid {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,245,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,246,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,247,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,249,public BigInteger getAsBigInteger() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,250,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,254,* convenience method to get this element as a primitive short value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,256,* @return get this element as a primitive short value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,257,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,258,* short value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,259,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,260,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,262,public short getAsShort() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,263,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,267,* convenience method to get this element as an {@link Object} value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,269,* @return get this element as an Object value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,270,* @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,271,* Object value.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,272,* @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,273,* more than a single element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,275,Object getAsObject() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,276,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,280,* Returns a String representation of this element.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,282,* @return String the string representation of this element. The output is valid Json.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,284,@Override
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,285,public String toString() {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,286,StringBuilder sb = new StringBuilder();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,287,toString(sb);
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,288,return sb.toString();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,291,protected abstract void toString(StringBuilder sb);
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,20,* Definition of a visitor for a JsonElement tree.
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,22,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,24,interface JsonElementVisitor {
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,25,void visitPrimitive(JsonPrimitive primitive);
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,26,void visitNull();
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,28,void startArray(JsonArray array);
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,29,"void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,30,"void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,31,"void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,32,"void visitNullArrayMember(JsonArray parent, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,33,void endArray(JsonArray array);
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,35,void startObject(JsonObject object);
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,36,"void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member,"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,37,boolean isFirst);
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,38,"void visitObjectMember(JsonObject parent, String memberName, JsonArray member, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,39,"void visitObjectMember(JsonObject parent, String memberName, JsonObject member, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,40,"void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst);"
True,gson/src/main/java/com/google/gson/JsonElementVisitor.java,gson/src/main/java/com/google/gson/JsonElementVisitor.java,41,void endObject(JsonObject object);
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,20,* Performs JSON escaping and passes on the new escaped value to the delegate
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,21,* {@link JsonElementVisitor}.
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,23,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,25,class JsonEscapingVisitor extends DelegatingJsonElementVisitor {
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,28,* Constructs a Visitor that will properly escape any JSON primitive values.
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,30,* @param delegate the JsonElementVisitor that this instance will use for delegation
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,32,protected JsonEscapingVisitor(JsonElementVisitor delegate) {
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,33,super(delegate);
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,36,@Override
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,37,"public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,38,"super.visitArrayMember(parent, escapeJsonPrimitive(member), isFirst);"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,41,@Override
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,42,public void visitObjectMember(
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,43,"JsonObject parent, String memberName, JsonPrimitive member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,44,"super.visitObjectMember(parent, memberName, escapeJsonPrimitive(member), isFirst);"
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,47,@Override
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,48,public void visitPrimitive(JsonPrimitive primitive) {
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,49,super.visitPrimitive(escapeJsonPrimitive(primitive));
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,52,private JsonPrimitive escapeJsonPrimitive(JsonPrimitive member) {
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,53,if (member.isString()) {
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,54,String memberValue = member.getAsString();
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,55,String escapedValue = Escaper.escapeJsonString(memberValue);
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,56,if (!escapedValue.equals(memberValue)) {
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,57,member.setValue(escapedValue);
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,60,return member;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,19,import java.util.Arrays;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,20,import java.util.Collections;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,21,import java.util.HashSet;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,22,import java.util.Set;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,23,import java.util.regex.Matcher;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,24,import java.util.regex.Pattern;
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,27,* This class can be used to check the validity of a JSON field name.
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,29,* <p>The primary use of this object is to ensure that any Java fields that use the
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,30,* {@link com.google.gson.annotations.SerializedName} annotation is providing valid JSON
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,31,* field names.  This will make the code fail-fast rather than letting the invalid
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,32,* field name propagate to the client and it fails to parse.</p>
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,34,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,36,class JsonFieldNameValidator {
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,37,private static final String[] JS_KEYWORDS = {
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,38,"""break"", ""case"", ""catch"", ""class"", ""comment"", ""const"", ""continue"", ""debugger"", ""default"", ""delete"", ""do"","
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,39,"""else"", ""enum"", ""export"", ""extends"", ""finally"", ""for"", ""function"", ""if"", ""import"", ""in"", ""label"", ""new"","
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,40,"""return"", ""super"", ""switch"", ""this"", ""throw"", ""try"", ""typeof"", ""var"", ""void"", ""while"", ""with"""
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,43,private static final Pattern JSON_FIELD_NAME_PATTERN =
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,44,"Pattern.compile(""(^[a-zA-Z][a-zA-Z0-9\\$_]*$)|(^[\\$_][a-zA-Z][a-zA-Z0-9\\$_]*$)"");"
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,46,private static final Set<String> KEYWORDS = Collections.unmodifiableSet(
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,47,new HashSet<String>(Arrays.asList(JS_KEYWORDS)));
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,50,* Performs validation on the JSON field name to ensure it is a valid field name.
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,52,* @param fieldName the name of the field to validate
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,53,* @return {@code fieldName} if it is a valid JSON field name
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,54,* @throws IllegalArgumentException if the field name is an invalid JSON field name
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,56,public String validate(String fieldName) {
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,57,Preconditions.checkNotNull(fieldName);
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,58,"Preconditions.checkArgument(!"""".equals(fieldName.trim()));"
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,59,Preconditions.checkArgument(!KEYWORDS.contains(fieldName));
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,61,Matcher matcher = JSON_FIELD_NAME_PATTERN.matcher(fieldName);
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,62,if (!matcher.matches()) {
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,63,"throw new IllegalArgumentException(fieldName + "" is not a valid JSON field name."");"
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,64,} else {
True,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,gson/src/main/java/com/google/gson/JsonFieldNameValidator.java,65,return fieldName;
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,19,import java.io.PrintWriter;
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,22,* Common interface for a formatter for Json.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,24,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,26,interface JsonFormatter {
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,29,* Writes a formatted version of the Json corresponding to
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,30,* the specified Json.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,32,* @param root the root of the Json tree.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,33,* @param writer the writer to output the formatter JSON to.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,34,* @param serializeNulls serialize null values in the output.
True,gson/src/main/java/com/google/gson/JsonFormatter.java,gson/src/main/java/com/google/gson/JsonFormatter.java,36,"public void format(JsonElement root, PrintWriter writer, boolean serializeNulls);"
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,20,* A class representing a Json null value.
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,22,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,23,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,24,* @since 1.2
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,26,public final class JsonNull extends JsonElement {
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,28,@Override
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,29,protected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,30,"sb.append(""null"");"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,19,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,20,import java.util.Map;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,21,import java.util.Set;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,22,import java.util.Map.Entry;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,25,* A class representing an object type in Json. An object consists of name-value pairs where names
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,26,"* are strings, and values are any other type of {@link JsonElement}. This allows for a creating a"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,27,* tree of JsonElements. The member elements of this object are maintained in order they were added.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,29,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,31,public final class JsonObject extends JsonElement {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,32,// We are using a linked hash map because it is important to preserve
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,33,// the order in which elements are inserted. This is needed to ensure
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,34,// that the fields of an object are inserted in the order they were
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,35,// defined in the class.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,36,"private final Map<String, JsonElement> members;"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,39,* Creates an empty JsonObject.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,41,public JsonObject() {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,42,"members = new LinkedHashMap<String, JsonElement>();"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,46,"* Adds a member, which is a name-value pair, to self. The name must be a String, but the value"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,47,"* can be an arbitrary JsonElement, thereby allowing you to build a full tree of JsonElements"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,48,* rooted at this node.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,50,* @param property name of the member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,51,* @param value the member object.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,53,"public void add(String property, JsonElement value) {"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,54,"members.put(property, value);"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,58,* Convenience method to add a primitive member. The specified value is converted to a
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,59,* JsonPrimitive of String.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,61,* @param property name of the member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,62,* @param value the string value associated with the member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,64,"public void addProperty(String property, String value) {"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,65,"members.put(property, new JsonPrimitive(value));"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,69,* Convenience method to add a primitive member. The specified value is converted to a
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,70,* JsonPrimitive of Number.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,72,* @param property name of the member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,73,* @param value the number value associated with the member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,75,"public void addProperty(String property, Number value) {"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,76,"members.put(property, new JsonPrimitive(value));"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,80,"* Returns a set of members of this object. The set is ordered, and the order is in which the"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,81,* elements were added.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,83,* @return a set of members of this object.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,85,"public Set<Entry<String, JsonElement>> entrySet() {"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,86,return members.entrySet();
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,90,* Convenience method to check if a member with the specified name is present in this object.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,92,* @param memberName name of the member that is being checked for presence.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,93,"* @return true if there is a member with the specified name, false otherwise."
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,95,public boolean has(String memberName) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,96,return members.containsKey(memberName);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,100,* Returns the member with the specified name.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,102,* @param memberName name of the member that is being requested.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,103,* @return the member matching the name. Null if no such member exists.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,105,public JsonElement get(String memberName) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,106,return members.get(memberName);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,110,* Convenience method to get the specified member as a JsonPrimitive element.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,112,* @param memberName name of the member being requested.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,113,* @return the JsonPrimitive corresponding to the specified member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,115,public JsonPrimitive getAsJsonPrimitive(String memberName) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,116,return (JsonPrimitive) members.get(memberName);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,120,* Convenience method to get the specified member as a JsonArray.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,122,* @param memberName name of the member being requested.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,123,* @return the JsonArray corresponding to the specified member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,125,public JsonArray getAsJsonArray(String memberName) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,126,return (JsonArray) members.get(memberName);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,130,* Convenience method to get the specified member as a JsonObject.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,132,* @param memberName name of the member being requested.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,133,* @return the JsonObject corresponding to the specified member.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,135,public JsonObject getAsJsonObject(String memberName) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,136,return (JsonObject) members.get(memberName);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,139,@Override
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,140,protected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,141,sb.append('{');
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,142,boolean first = true;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,143,"for (Map.Entry<String, JsonElement> entry : members.entrySet()) {"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,144,if (first) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,145,first = false;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,146,} else {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,147,"sb.append(',');"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,149,"sb.append('\""');"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,150,sb.append(entry.getKey());
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,151,"sb.append(""\"":"");"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,152,entry.getValue().toString(sb);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,154,sb.append('}');
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,21,import java.util.Collection;
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,24,* A visitor that populates fields of an object with data from its equivalent
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,25,* JSON representation
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,30,final class JsonObjectDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,32,"JsonObjectDeserializationVisitor(JsonElement json, Type type,"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,33,"ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,34,"TypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,35,JsonDeserializationContext context) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,36,"super(json, type, factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,39,@Override
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,40,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,41,protected T constructTarget() {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,42,return (T) objectConstructor.construct(targetType);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,45,public void startVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,46,// do nothing
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,49,public void endVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,50,// do nothing
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,53,"public void visitCollection(@SuppressWarnings(""unchecked"")Collection collection,"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,54,Type componentType) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,55,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,56,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,59,"public void visitArray(Object array, Type componentType) {"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,60,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,61,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,64,public void visitPrimitiveValue(Object obj) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,65,// should not be called since this case should invoke JsonPrimitiveDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,66,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,69,"public void visitObjectField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,70,try {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,71,JsonObject jsonObject = json.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,72,String fName = getFieldName(f);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,73,JsonElement jsonChild = jsonObject.get(fName);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,74,if (jsonChild != null) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,75,"Object child = visitChildAsObject(typeOfF, jsonChild);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,76,"f.set(obj, child);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,77,} else {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,78,"f.set(obj, null);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,80,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,81,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,85,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,86,"public void visitCollectionField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,87,try {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,88,JsonObject jsonObject = json.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,89,String fName = getFieldName(f);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,90,JsonArray jsonArray = (JsonArray) jsonObject.get(fName);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,91,if (jsonArray != null) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,92,Collection collection = (Collection) objectConstructor.construct(typeOfF);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,93,"f.set(obj, collection);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,94,Type childType = TypeUtils.getActualTypeForFirstTypeVariable(typeOfF);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,95,for (JsonElement jsonChild : jsonArray) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,96,"Object child = visitChild(childType, jsonChild);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,97,if (childType == Object.class) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,98,throw new JsonParseException(fName +
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,99,""" can not be a raw collection. Try making it a genericized collection instead"");"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,101,collection.add(child);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,103,} else {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,104,"f.set(obj, null);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,106,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,107,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,111,"public void visitArrayField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,112,try {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,113,JsonObject jsonObject = json.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,114,String fName = getFieldName(f);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,115,JsonArray jsonChild = (JsonArray) jsonObject.get(fName);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,116,if (jsonChild != null) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,117,"Object array = visitChildAsArray(typeOfF, jsonChild);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,118,"f.set(obj, array);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,119,} else {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,120,"f.set(obj, null);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,122,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,123,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,127,"public void visitPrimitiveField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,128,try {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,129,JsonObject jsonObject = json.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,130,String fName = getFieldName(f);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,131,JsonPrimitive value = jsonObject.getAsJsonPrimitive(fName);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,132,if (value != null) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,133,"f.set(obj, typeAdapter.adaptType(value.getAsObject(), TypeUtils.toRawClass(typeOfF)));"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,134,} else {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,135,"// For Strings, we need to set the field to null"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,136,"// For other primitive types, any value created during default construction is fine"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,137,if (f.getType() == String.class) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,138,"f.set(obj, null);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,141,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,142,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,146,private String getFieldName(Field f) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,147,FieldNamingStrategy namingPolicy = factory.getFieldNamingPolicy();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,148,return namingPolicy.translateName(f);
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,20,* This exception is raised if there is a serious issue that occurs during parsing of a Json
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,21,* string.  One of the main usages for this class is for the Gson infrastructure.  If the incoming
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,22,"* Json is bad/malicious, an instance of this exception is raised."
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,24,* <p>This exception is a {@link RuntimeException} because it is exposed to the client.  Using a
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,25,* {@link RuntimeException} avoids bad coding practices on the client side where they catch the
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,26,* exception and do nothing.  It is often the case that you want to blow up if there is a parsing
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,27,* error (i.e. often clients do not know how to recover from a {@link JsonParseException}.</p>
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,29,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,31,public final class JsonParseException extends RuntimeException {
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,32,static final long serialVersionUID = -4086729973971783390L;
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,35,"* Creates exception with the specified message. If you are wrapping another exception, consider"
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,36,"* using {@link #JsonParseException(String, Throwable)} instead."
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,38,* @param msg error message describing a possible cause of this exception.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,40,public JsonParseException(String msg) {
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,41,super(msg);
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,45,* Creates exception with the specified message and cause.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,47,* @param msg error message describing what happened.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,48,* @param cause root exception that caused this exception to be thrown.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,50,"public JsonParseException(String msg, Throwable cause) {"
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,51,"super(msg, cause);"
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,55,* Creates exception with the specified cause. Consider using
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,56,"* {@link #JsonParseException(String, Throwable)} instead if you can describe what happened."
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,58,* @param cause root exception that caused this exception to be thrown.
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,60,public JsonParseException(Throwable cause) {
True,gson/src/main/java/com/google/gson/JsonParseException.java,gson/src/main/java/com/google/gson/JsonParseException.java,61,super(cause);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,1,/* Generated By:JavaCC: Do not edit this line. JsonParser.java */
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,4,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,5,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,7,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,8,import java.util.List;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,10,import com.google.gson.JsonArray;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,11,import com.google.gson.JsonElement;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,12,import com.google.gson.JsonObject;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,13,import com.google.gson.JsonPrimitive;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,15,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,16,final class JsonParser implements JsonParserConstants {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,18,final public JsonElement parse() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,19,JsonElement json = null;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,20,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,21,case 15:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,22,json = JsonObject();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,23,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,24,case 20:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,25,json = JsonArray();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,26,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,27,case DIGITS:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,28,case QUOTE:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,29,case 22:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,30,case 23:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,31,case 24:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,32,json = JsonPrimitive();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,33,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,34,case 17:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,35,json = JsonNull();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,36,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,37,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,38,jj_la1[0] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,39,jj_consume_token(-1);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,40,throw new ParseException();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,42,{if (true) return json;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,43,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,46,final private JsonObject JsonObject() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,47,JsonObject o = new JsonObject();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,48,jj_consume_token(15);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,49,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,50,case QUOTE:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,51,Members(o);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,52,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,53,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,54,jj_la1[1] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,57,jj_consume_token(16);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,58,{if (true) return o;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,59,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,62,final private JsonNull JsonNull() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,63,JsonNull json = new JsonNull();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,64,jj_consume_token(17);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,65,{if (true) return json;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,66,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,69,final private void Members(JsonObject o) throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,70,Pair(o);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,71,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,72,case 18:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,73,jj_consume_token(18);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,74,Members(o);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,75,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,76,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,77,jj_la1[2] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,82,final private void Pair(JsonObject o) throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,83,JsonPrimitive property;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,84,JsonElement value;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,85,property = JsonString();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,86,jj_consume_token(19);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,87,value = JsonValue();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,88,"o.add(property.getAsString(), value);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,91,final private JsonArray JsonArray() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,92,JsonArray array = new JsonArray();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,93,jj_consume_token(20);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,94,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,95,case DIGITS:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,96,case QUOTE:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,97,case 15:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,98,case 17:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,99,case 20:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,100,case 22:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,101,case 23:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,102,case 24:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,103,Elements(array);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,104,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,105,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,106,jj_la1[3] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,109,jj_consume_token(21);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,110,array.reverse();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,111,{if (true) return array;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,112,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,115,final private void Elements(JsonArray array) throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,116,JsonElement element;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,117,element = JsonValue();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,118,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,119,case 18:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,120,jj_consume_token(18);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,121,Elements(array);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,122,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,123,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,124,jj_la1[4] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,127,array.add(element);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,130,final private JsonElement JsonValue() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,131,JsonElement o = null;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,132,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,133,case QUOTE:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,134,o = JsonString();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,135,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,136,case DIGITS:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,137,case 24:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,138,o = JsonNumber();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,139,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,140,case 15:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,141,o = JsonObject();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,142,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,143,case 20:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,144,o = JsonArray();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,145,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,146,case 22:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,147,jj_consume_token(22);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,148,o = new JsonPrimitive(true);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,149,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,150,case 23:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,151,jj_consume_token(23);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,152,o = new JsonPrimitive(false);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,153,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,154,case 17:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,155,jj_consume_token(17);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,156,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,157,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,158,jj_la1[5] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,159,jj_consume_token(-1);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,160,throw new ParseException();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,162,{if (true) return o;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,163,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,166,final private JsonPrimitive JsonPrimitive() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,167,JsonPrimitive value;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,168,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,169,case QUOTE:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,170,value = JsonString();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,171,{if (true) return value;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,172,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,173,case DIGITS:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,174,case 24:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,175,value = JsonNumber();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,176,{if (true) return value;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,177,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,178,case 22:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,179,jj_consume_token(22);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,180,{if (true) return new JsonPrimitive(true);}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,181,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,182,case 23:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,183,jj_consume_token(23);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,184,{if (true) return new JsonPrimitive(false);}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,185,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,186,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,187,jj_la1[6] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,188,jj_consume_token(-1);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,189,throw new ParseException();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,191,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,194,final private JsonPrimitive JsonNumber() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,195,"String intpart = null,"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,196,"fracpart = null,"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,197,exppart = null;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,198,intpart = JsonInt();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,199,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,200,case 25:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,201,fracpart = JsonFrac();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,202,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,203,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,204,jj_la1[7] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,207,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,208,case E:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,209,exppart = JsonExp();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,210,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,211,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,212,jj_la1[8] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,215,Number n;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,216,if (exppart != null) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,217,n = new BigDecimal(intpart + fracpart + exppart);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,218,} else if (fracpart != null) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,219,n = new Double(intpart + fracpart);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,220,} else {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,221,"// See if the number fits in an integer, or long"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,222,// Use BigInteger only if it is big enough.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,223,if (intpart.length() < 10) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,224,n = new Integer(intpart);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,225,} else if (intpart.length() < 19) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,226,n = new Long(intpart);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,227,} else {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,228,n = new BigInteger(intpart);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,231,{if (true) return new JsonPrimitive(n);}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,232,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,235,final private String JsonInt() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,236,String digits;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,237,boolean negative = false;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,238,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,239,case 24:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,240,jj_consume_token(24);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,241,negative = true;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,242,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,243,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,244,jj_la1[9] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,247,digits = Digits();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,248,if(negative)
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,249,"{if (true) return ""-"" + digits;}"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,250,{if (true) return digits;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,251,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,254,final private String JsonFrac() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,255,String digits;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,256,jj_consume_token(25);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,257,digits = Digits();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,258,"{if (true) return ""."" + digits;}"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,259,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,262,final private String JsonExp() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,263,Token t;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,264,String digits;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,265,t = jj_consume_token(E);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,266,digits = Digits();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,267,{if (true) return t.image + digits;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,268,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,271,final private String Digits() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,272,Token t;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,273,t = jj_consume_token(DIGITS);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,274,{if (true) return t.image;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,275,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,278,final private JsonPrimitive JsonString() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,279,StringBuffer strbuf = new StringBuffer();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,280,jj_consume_token(QUOTE);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,281,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,282,case CHAR:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,283,case CNTRL_ESC:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,284,case HEX_ESC:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,285,Chars(strbuf);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,286,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,287,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,288,jj_la1[10] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,291,jj_consume_token(ENDQUOTE);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,292,{if (true) return new JsonPrimitive(strbuf.toString());}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,293,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,296,final private void Chars(StringBuffer strbuf) throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,297,char c;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,298,c = Char();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,299,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,300,case CHAR:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,301,case CNTRL_ESC:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,302,case HEX_ESC:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,303,Chars(strbuf);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,304,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,305,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,306,jj_la1[11] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,309,"strbuf.insert(0, c);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,312,final private char Char() throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,313,Token t;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,314,switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,315,case CHAR:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,316,t = jj_consume_token(CHAR);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,317,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,318,case CNTRL_ESC:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,319,t = jj_consume_token(CNTRL_ESC);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,320,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,321,case HEX_ESC:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,322,t = jj_consume_token(HEX_ESC);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,323,break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,324,default:
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,325,jj_la1[12] = jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,326,jj_consume_token(-1);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,327,throw new ParseException();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,329,if(t.image.length() < 2) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,330,{if (true) return t.image.charAt(0);}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,332,if(t.image.length() < 6) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,333,char c = t.image.charAt(1);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,334,switch(t.image.charAt(1)) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,335,//control characters
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,336,case 'b'  : {if (true) return (char) 8;} break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,337,case 'f'  : {if (true) return (char) 12;} break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,338,case 'n'  : {if (true) return (char) 10;} break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,339,case 'r'  : {if (true) return (char) 13;} break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,340,case 't'  : {if (true) return (char) 9;} break;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,341,default   : {if (true) return c;}   //characters that represent themselves
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,344,else {      //hex escape code
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,345,//create an integer from our hex values
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,346,//and then cast into a char
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,347,"int i = Integer.valueOf(t.image.substring(2,6), 16).intValue();"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,348,{if (true) return (char) i;}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,350,"throw new Error(""Missing return statement in function"");"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,353,public JsonParserTokenManager token_source;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,354,SimpleCharStream jj_input_stream;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,355,"public Token token, jj_nt;"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,356,private int jj_ntk;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,357,private int jj_gen;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,358,final private int[] jj_la1 = new int[13];
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,359,static private int[] jj_la1_0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,360,static {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,361,jj_la1_0();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,363,private static void jj_la1_0() {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,364,"jj_la1_0 = new int[] {0x1d280c0,0x80,0x40000,0x1d280c0,0x40000,0x1d280c0,0x1c000c0,0x2000000,0x20,0x1000000,0x4c00,0x4c00,0x4c00,};"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,367,public JsonParser(java.io.InputStream stream) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,368,"this(stream, null);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,370,"public JsonParser(java.io.InputStream stream, String encoding) {"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,371,"try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,372,token_source = new JsonParserTokenManager(jj_input_stream);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,373,token = new Token();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,374,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,375,jj_gen = 0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,376,for (int i = 0; i < 13; i++) jj_la1[i] = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,379,public void ReInit(java.io.InputStream stream) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,380,"ReInit(stream, null);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,382,"public void ReInit(java.io.InputStream stream, String encoding) {"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,383,"try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,384,token_source.ReInit(jj_input_stream);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,385,token = new Token();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,386,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,387,jj_gen = 0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,388,for (int i = 0; i < 13; i++) jj_la1[i] = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,391,public JsonParser(java.io.Reader stream) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,392,"jj_input_stream = new SimpleCharStream(stream, 1, 1);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,393,token_source = new JsonParserTokenManager(jj_input_stream);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,394,token = new Token();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,395,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,396,jj_gen = 0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,397,for (int i = 0; i < 13; i++) jj_la1[i] = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,400,public void ReInit(java.io.Reader stream) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,401,"jj_input_stream.ReInit(stream, 1, 1);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,402,token_source.ReInit(jj_input_stream);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,403,token = new Token();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,404,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,405,jj_gen = 0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,406,for (int i = 0; i < 13; i++) jj_la1[i] = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,409,public JsonParser(JsonParserTokenManager tm) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,410,token_source = tm;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,411,token = new Token();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,412,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,413,jj_gen = 0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,414,for (int i = 0; i < 13; i++) jj_la1[i] = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,417,public void ReInit(JsonParserTokenManager tm) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,418,token_source = tm;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,419,token = new Token();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,420,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,421,jj_gen = 0;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,422,for (int i = 0; i < 13; i++) jj_la1[i] = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,425,final private Token jj_consume_token(int kind) throws ParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,426,Token oldToken;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,427,if ((oldToken = token).next != null) token = token.next;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,428,else token = token.next = token_source.getNextToken();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,429,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,430,if (token.kind == kind) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,431,jj_gen++;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,432,return token;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,434,token = oldToken;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,435,jj_kind = kind;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,436,throw generateParseException();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,439,final public Token getNextToken() {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,440,if (token.next != null) token = token.next;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,441,else token = token.next = token_source.getNextToken();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,442,jj_ntk = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,443,jj_gen++;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,444,return token;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,447,final public Token getToken(int index) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,448,Token t = token;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,449,for (int i = 0; i < index; i++) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,450,if (t.next != null) t = t.next;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,451,else t = t.next = token_source.getNextToken();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,453,return t;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,456,final private int jj_ntk() {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,457,if ((jj_nt=token.next) == null)
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,458,return (jj_ntk = (token.next=token_source.getNextToken()).kind);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,459,else
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,460,return (jj_ntk = jj_nt.kind);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,463,private java.util.Vector jj_expentries = new java.util.Vector();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,464,private int[] jj_expentry;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,465,private int jj_kind = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,467,public ParseException generateParseException() {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,468,jj_expentries.removeAllElements();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,469,boolean[] la1tokens = new boolean[26];
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,470,for (int i = 0; i < 26; i++) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,471,la1tokens[i] = false;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,473,if (jj_kind >= 0) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,474,la1tokens[jj_kind] = true;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,475,jj_kind = -1;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,477,for (int i = 0; i < 13; i++) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,478,if (jj_la1[i] == jj_gen) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,479,for (int j = 0; j < 32; j++) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,480,if ((jj_la1_0[i] & (1<<j)) != 0) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,481,la1tokens[j] = true;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,486,for (int i = 0; i < 26; i++) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,487,if (la1tokens[i]) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,488,jj_expentry = new int[1];
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,489,jj_expentry[0] = i;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,490,jj_expentries.addElement(jj_expentry);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,493,int[][] exptokseq = new int[jj_expentries.size()][];
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,494,for (int i = 0; i < jj_expentries.size(); i++) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,495,exptokseq[i] = (int[])jj_expentries.elementAt(i);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,497,"return new ParseException(token, exptokseq, tokenImage);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,500,final public void enable_tracing() {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,503,final public void disable_tracing() {
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,1,/* Generated By:JavaCC: Do not edit this line. JsonParserConstants.java */
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,4,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,5,interface JsonParserConstants {
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,7,int EOF = 0;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,8,int E = 5;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,9,int DIGITS = 6;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,10,int QUOTE = 7;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,11,int ENDQUOTE = 9;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,12,int CHAR = 10;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,13,int CNTRL_ESC = 11;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,14,int HEX = 13;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,15,int HEX_ESC = 14;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,17,int DEFAULT = 0;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,18,int STRING_STATE = 1;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,19,int ESC_STATE = 2;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,20,int HEX_STATE = 3;
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,22,String[] tokenImage = {
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,23,"""<EOF>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,25,"""\""\\t\"""","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,26,"""\""\\n\"""","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,27,"""\""\\r\"""","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,28,"""<E>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,29,"""<DIGITS>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,32,"""<ENDQUOTE>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,33,"""<CHAR>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,34,"""<CNTRL_ESC>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,35,"""\""u\"""","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,36,"""<HEX>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,37,"""<HEX_ESC>"","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,40,"""\""null\"""","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,45,"""\""true\"""","
True,gson/src/main/java/com/google/gson/JsonParserConstants.java,gson/src/main/java/com/google/gson/JsonParserConstants.java,46,"""\""false\"""","
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,1,/* Generated By:JavaCC: Do not edit this line. JsonParserTokenManager.java */
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,3,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,4,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,5,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,6,import java.util.List;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,7,import com.google.gson.JsonArray;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,8,import com.google.gson.JsonElement;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,9,import com.google.gson.JsonObject;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,10,import com.google.gson.JsonPrimitive;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,12,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,13,final class JsonParserTokenManager implements JsonParserConstants
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,15,public  java.io.PrintStream debugStream = System.out;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,16,public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,17,private final int jjMoveStringLiteralDfa0_3()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,19,"return jjMoveNfa_3(0, 0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,21,private final void jjCheckNAdd(int state)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,23,if (jjrounds[state] != jjround)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,25,jjstateSet[jjnewStateCnt++] = state;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,26,jjrounds[state] = jjround;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,29,"private final void jjAddStates(int start, int end)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,31,do {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,32,jjstateSet[jjnewStateCnt++] = jjnextStates[start];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,33,} while (start++ != end);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,35,"private final void jjCheckNAddTwoStates(int state1, int state2)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,37,jjCheckNAdd(state1);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,38,jjCheckNAdd(state2);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,40,"private final void jjCheckNAddStates(int start, int end)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,42,do {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,43,jjCheckNAdd(jjnextStates[start]);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,44,} while (start++ != end);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,46,private final void jjCheckNAddStates(int start)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,48,jjCheckNAdd(jjnextStates[start]);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,49,jjCheckNAdd(jjnextStates[start + 1]);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,51,"private final int jjMoveNfa_3(int startState, int curPos)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,53,int[] nextStates;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,54,int startsAt = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,55,jjnewStateCnt = 4;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,56,int i = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,57,jjstateSet[0] = startState;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,58,"int j, kind = 0x7fffffff;"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,59,for (;;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,61,if (++jjround == 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,62,ReInitRounds();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,63,if (curChar < 64)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,65,long l = 1L << curChar;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,66,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,68,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,70,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,71,if ((0x3ff000000000000L & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,72,jjstateSet[jjnewStateCnt++] = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,73,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,74,case 1:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,75,if ((0x3ff000000000000L & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,76,jjstateSet[jjnewStateCnt++] = 2;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,77,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,78,case 2:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,79,if ((0x3ff000000000000L & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,80,jjstateSet[jjnewStateCnt++] = 3;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,81,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,82,case 3:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,83,if ((0x3ff000000000000L & l) != 0L && kind > 14)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,84,kind = 14;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,85,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,86,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,88,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,90,else if (curChar < 128)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,92,long l = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,93,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,95,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,97,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,98,if ((0x7e0000007eL & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,99,jjstateSet[jjnewStateCnt++] = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,100,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,101,case 1:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,102,if ((0x7e0000007eL & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,103,jjstateSet[jjnewStateCnt++] = 2;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,104,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,105,case 2:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,106,if ((0x7e0000007eL & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,107,jjstateSet[jjnewStateCnt++] = 3;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,108,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,109,case 3:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,110,if ((0x7e0000007eL & l) != 0L && kind > 14)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,111,kind = 14;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,112,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,113,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,115,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,117,else
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,119,int hiByte = (int)(curChar >> 8);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,120,int i1 = hiByte >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,121,long l1 = 1L << (hiByte & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,122,int i2 = (curChar & 0xff) >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,123,long l2 = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,124,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,126,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,128,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,130,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,132,if (kind != 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,134,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,135,jjmatchedPos = curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,136,kind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,138,++curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,139,if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,140,return curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,141,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,142,catch(java.io.IOException e) { return curPos; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,145,"private final int jjStopStringLiteralDfa_0(int pos, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,147,switch (pos)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,149,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,150,return -1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,153,"private final int jjStartNfa_0(int pos, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,155,"return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,157,"private final int jjStopAtPos(int pos, int kind)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,159,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,160,jjmatchedPos = pos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,161,return pos + 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,163,"private final int jjStartNfaWithStates_0(int pos, int kind, int state)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,165,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,166,jjmatchedPos = pos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,167,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,168,catch(java.io.IOException e) { return pos + 1; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,169,"return jjMoveNfa_0(state, pos + 1);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,171,private final int jjMoveStringLiteralDfa0_0()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,173,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,175,case 34:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,176,"return jjStopAtPos(0, 7);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,177,case 44:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,178,"return jjStopAtPos(0, 18);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,179,case 45:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,180,"return jjStopAtPos(0, 24);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,181,case 46:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,182,"return jjStopAtPos(0, 25);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,183,case 58:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,184,"return jjStopAtPos(0, 19);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,185,case 91:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,186,"return jjStopAtPos(0, 20);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,187,case 93:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,188,"return jjStopAtPos(0, 21);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,189,case 102:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,190,return jjMoveStringLiteralDfa1_0(0x800000L);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,191,case 110:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,192,return jjMoveStringLiteralDfa1_0(0x20000L);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,193,case 116:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,194,return jjMoveStringLiteralDfa1_0(0x400000L);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,195,case 123:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,196,"return jjStopAtPos(0, 15);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,197,case 125:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,198,"return jjStopAtPos(0, 16);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,199,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,200,"return jjMoveNfa_0(0, 0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,203,private final int jjMoveStringLiteralDfa1_0(long active0)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,205,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,206,catch(java.io.IOException e) {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,207,"jjStopStringLiteralDfa_0(0, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,208,return 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,210,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,212,case 97:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,213,"return jjMoveStringLiteralDfa2_0(active0, 0x800000L);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,214,case 114:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,215,"return jjMoveStringLiteralDfa2_0(active0, 0x400000L);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,216,case 117:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,217,"return jjMoveStringLiteralDfa2_0(active0, 0x20000L);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,218,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,219,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,221,"return jjStartNfa_0(0, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,223,"private final int jjMoveStringLiteralDfa2_0(long old0, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,225,if (((active0 &= old0)) == 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,226,"return jjStartNfa_0(0, old0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,227,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,228,catch(java.io.IOException e) {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,229,"jjStopStringLiteralDfa_0(1, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,230,return 2;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,232,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,234,case 108:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,235,"return jjMoveStringLiteralDfa3_0(active0, 0x820000L);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,236,case 117:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,237,"return jjMoveStringLiteralDfa3_0(active0, 0x400000L);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,238,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,239,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,241,"return jjStartNfa_0(1, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,243,"private final int jjMoveStringLiteralDfa3_0(long old0, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,245,if (((active0 &= old0)) == 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,246,"return jjStartNfa_0(1, old0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,247,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,248,catch(java.io.IOException e) {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,249,"jjStopStringLiteralDfa_0(2, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,250,return 3;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,252,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,254,case 101:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,255,if ((active0 & 0x400000L) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,256,"return jjStopAtPos(3, 22);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,257,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,258,case 108:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,259,if ((active0 & 0x20000L) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,260,"return jjStopAtPos(3, 17);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,261,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,262,case 115:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,263,"return jjMoveStringLiteralDfa4_0(active0, 0x800000L);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,264,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,265,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,267,"return jjStartNfa_0(2, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,269,"private final int jjMoveStringLiteralDfa4_0(long old0, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,271,if (((active0 &= old0)) == 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,272,"return jjStartNfa_0(2, old0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,273,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,274,catch(java.io.IOException e) {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,275,"jjStopStringLiteralDfa_0(3, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,276,return 4;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,278,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,280,case 101:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,281,if ((active0 & 0x800000L) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,282,"return jjStopAtPos(4, 23);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,283,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,284,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,285,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,287,"return jjStartNfa_0(3, active0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,289,"private final int jjMoveNfa_0(int startState, int curPos)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,291,int[] nextStates;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,292,int startsAt = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,293,jjnewStateCnt = 3;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,294,int i = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,295,jjstateSet[0] = startState;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,296,"int j, kind = 0x7fffffff;"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,297,for (;;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,299,if (++jjround == 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,300,ReInitRounds();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,301,if (curChar < 64)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,303,long l = 1L << curChar;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,304,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,306,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,308,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,309,case 2:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,310,if ((0x3ff000000000000L & l) == 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,311,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,312,kind = 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,313,jjCheckNAdd(2);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,314,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,315,case 1:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,316,if ((0x280000000000L & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,317,kind = 5;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,318,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,319,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,321,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,323,else if (curChar < 128)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,325,long l = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,326,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,328,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,330,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,331,if ((0x2000000020L & l) == 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,332,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,333,kind = 5;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,334,jjstateSet[jjnewStateCnt++] = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,335,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,336,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,338,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,340,else
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,342,int hiByte = (int)(curChar >> 8);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,343,int i1 = hiByte >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,344,long l1 = 1L << (hiByte & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,345,int i2 = (curChar & 0xff) >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,346,long l2 = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,347,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,349,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,351,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,353,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,355,if (kind != 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,357,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,358,jjmatchedPos = curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,359,kind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,361,++curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,362,if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,363,return curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,364,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,365,catch(java.io.IOException e) { return curPos; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,368,"private final int jjStopStringLiteralDfa_2(int pos, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,370,switch (pos)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,372,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,373,return -1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,376,"private final int jjStartNfa_2(int pos, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,378,"return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,380,"private final int jjStartNfaWithStates_2(int pos, int kind, int state)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,382,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,383,jjmatchedPos = pos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,384,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,385,catch(java.io.IOException e) { return pos + 1; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,386,"return jjMoveNfa_2(state, pos + 1);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,388,private final int jjMoveStringLiteralDfa0_2()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,390,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,392,case 117:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,393,"return jjStopAtPos(0, 12);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,394,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,395,"return jjMoveNfa_2(0, 0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,398,"private final int jjMoveNfa_2(int startState, int curPos)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,400,int[] nextStates;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,401,int startsAt = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,402,jjnewStateCnt = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,403,int i = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,404,jjstateSet[0] = startState;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,405,"int j, kind = 0x7fffffff;"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,406,for (;;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,408,if (++jjround == 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,409,ReInitRounds();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,410,if (curChar < 64)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,412,long l = 1L << curChar;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,413,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,415,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,417,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,418,if ((0x800400000000L & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,419,kind = 11;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,420,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,421,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,423,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,425,else if (curChar < 128)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,427,long l = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,428,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,430,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,432,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,433,if ((0x14404410000000L & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,434,kind = 11;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,435,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,436,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,438,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,440,else
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,442,int hiByte = (int)(curChar >> 8);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,443,int i1 = hiByte >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,444,long l1 = 1L << (hiByte & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,445,int i2 = (curChar & 0xff) >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,446,long l2 = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,447,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,449,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,451,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,453,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,455,if (kind != 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,457,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,458,jjmatchedPos = curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,459,kind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,461,++curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,462,if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,463,return curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,464,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,465,catch(java.io.IOException e) { return curPos; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,468,"private final int jjStopStringLiteralDfa_1(int pos, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,470,switch (pos)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,472,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,473,return -1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,476,"private final int jjStartNfa_1(int pos, long active0)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,478,"return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,480,"private final int jjStartNfaWithStates_1(int pos, int kind, int state)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,482,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,483,jjmatchedPos = pos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,484,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,485,catch(java.io.IOException e) { return pos + 1; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,486,"return jjMoveNfa_1(state, pos + 1);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,488,private final int jjMoveStringLiteralDfa0_1()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,490,switch(curChar)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,492,case 92:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,493,"return jjStopAtPos(0, 8);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,494,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,495,"return jjMoveNfa_1(0, 0);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,498,static final long[] jjbitVec0 = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,499,"0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,501,static final long[] jjbitVec2 = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,502,"0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,504,"private final int jjMoveNfa_1(int startState, int curPos)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,506,int[] nextStates;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,507,int startsAt = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,508,jjnewStateCnt = 2;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,509,int i = 1;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,510,jjstateSet[0] = startState;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,511,"int j, kind = 0x7fffffff;"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,512,for (;;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,514,if (++jjround == 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,515,ReInitRounds();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,516,if (curChar < 64)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,518,long l = 1L << curChar;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,519,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,521,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,523,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,524,if ((0xfffffffbffffffffL & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,526,if (kind > 10)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,527,kind = 10;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,529,else if (curChar == 34)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,531,if (kind > 9)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,532,kind = 9;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,534,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,535,case 1:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,536,if ((0xfffffffbffffffffL & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,537,kind = 10;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,538,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,539,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,541,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,543,else if (curChar < 128)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,545,long l = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,546,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,548,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,550,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,551,if ((0xffffffffefffffffL & l) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,552,kind = 10;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,553,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,554,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,556,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,558,else
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,560,int hiByte = (int)(curChar >> 8);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,561,int i1 = hiByte >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,562,long l1 = 1L << (hiByte & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,563,int i2 = (curChar & 0xff) >> 6;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,564,long l2 = 1L << (curChar & 077);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,565,MatchLoop: do
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,567,switch(jjstateSet[--i])
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,569,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,570,"if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 10)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,571,kind = 10;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,572,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,573,default : break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,575,} while(i != startsAt);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,577,if (kind != 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,579,jjmatchedKind = kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,580,jjmatchedPos = curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,581,kind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,583,++curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,584,if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,585,return curPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,586,try { curChar = input_stream.readChar(); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,587,catch(java.io.IOException e) { return curPos; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,590,static final int[] jjnextStates = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,592,"private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,594,switch(hiByte)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,596,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,597,return ((jjbitVec2[i2] & l2) != 0L);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,598,default :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,599,if ((jjbitVec0[i1] & l1) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,600,return true;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,601,return false;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,604,public static final String[] jjstrLiteralImages = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,605,""""", null, null, null, null, null, null, ""\42"", null, null, null, null, null,"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,606,"null, null, ""\173"", ""\175"", ""\156\165\154\154"", ""\54"", ""\72"", ""\133"", ""\135"","
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,607,"""\164\162\165\145"", ""\146\141\154\163\145"", ""\55"", ""\56"", };"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,608,public static final String[] lexStateNames = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,609,"""DEFAULT"","
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,610,"""STRING_STATE"","
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,611,"""ESC_STATE"","
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,612,"""HEX_STATE"","
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,614,public static final int[] jjnewLexState = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,615,"-1, -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, 1, 3, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,616,"-1,"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,618,static final long[] jjtoToken = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,619,"0x3ffcee1L,"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,621,static final long[] jjtoSkip = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,622,"0x1eL,"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,624,static final long[] jjtoMore = {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,625,"0x1100L,"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,627,protected SimpleCharStream input_stream;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,628,private final int[] jjrounds = new int[4];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,629,private final int[] jjstateSet = new int[8];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,630,protected char curChar;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,631,public JsonParserTokenManager(SimpleCharStream stream){
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,632,if (SimpleCharStream.staticFlag)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,633,"throw new Error(""ERROR: Cannot use a static CharStream class with a non-static lexical analyzer."");"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,634,input_stream = stream;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,636,"public JsonParserTokenManager(SimpleCharStream stream, int lexState){"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,637,this(stream);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,638,SwitchTo(lexState);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,640,public void ReInit(SimpleCharStream stream)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,642,jjmatchedPos = jjnewStateCnt = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,643,curLexState = defaultLexState;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,644,input_stream = stream;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,645,ReInitRounds();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,647,private final void ReInitRounds()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,649,int i;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,650,jjround = 0x80000001;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,651,for (i = 4; i-- > 0;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,652,jjrounds[i] = 0x80000000;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,654,"public void ReInit(SimpleCharStream stream, int lexState)"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,656,ReInit(stream);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,657,SwitchTo(lexState);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,659,public void SwitchTo(int lexState)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,661,if (lexState >= 4 || lexState < 0)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,662,"throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,663,else
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,664,curLexState = lexState;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,667,protected Token jjFillToken()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,669,Token t = Token.newToken(jjmatchedKind);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,670,t.kind = jjmatchedKind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,671,String im = jjstrLiteralImages[jjmatchedKind];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,672,t.image = (im == null) ? input_stream.GetImage() : im;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,673,t.beginLine = input_stream.getBeginLine();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,674,t.beginColumn = input_stream.getBeginColumn();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,675,t.endLine = input_stream.getEndLine();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,676,t.endColumn = input_stream.getEndColumn();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,677,return t;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,680,int curLexState = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,681,int defaultLexState = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,682,int jjnewStateCnt;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,683,int jjround;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,684,int jjmatchedPos;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,685,int jjmatchedKind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,687,public Token getNextToken()
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,689,int kind;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,690,Token specialToken = null;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,691,Token matchedToken;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,692,int curPos = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,694,EOFLoop :
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,695,for (;;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,697,try
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,699,curChar = input_stream.BeginToken();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,701,catch(java.io.IOException e)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,703,jjmatchedKind = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,704,matchedToken = jjFillToken();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,705,return matchedToken;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,708,for (;;)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,710,switch(curLexState)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,712,case 0:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,713,try { input_stream.backup(0);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,714,while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,715,curChar = input_stream.BeginToken();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,717,catch (java.io.IOException e1) { continue EOFLoop; }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,718,jjmatchedKind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,719,jjmatchedPos = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,720,curPos = jjMoveStringLiteralDfa0_0();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,721,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,722,case 1:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,723,jjmatchedKind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,724,jjmatchedPos = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,725,curPos = jjMoveStringLiteralDfa0_1();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,726,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,727,case 2:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,728,jjmatchedKind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,729,jjmatchedPos = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,730,curPos = jjMoveStringLiteralDfa0_2();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,731,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,732,case 3:
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,733,jjmatchedKind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,734,jjmatchedPos = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,735,curPos = jjMoveStringLiteralDfa0_3();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,736,break;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,738,if (jjmatchedKind != 0x7fffffff)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,740,if (jjmatchedPos + 1 < curPos)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,741,input_stream.backup(curPos - jjmatchedPos - 1);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,742,if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,744,matchedToken = jjFillToken();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,745,if (jjnewLexState[jjmatchedKind] != -1)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,746,curLexState = jjnewLexState[jjmatchedKind];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,747,return matchedToken;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,749,else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,751,if (jjnewLexState[jjmatchedKind] != -1)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,752,curLexState = jjnewLexState[jjmatchedKind];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,753,continue EOFLoop;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,755,if (jjnewLexState[jjmatchedKind] != -1)
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,756,curLexState = jjnewLexState[jjmatchedKind];
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,757,curPos = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,758,jjmatchedKind = 0x7fffffff;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,759,try {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,760,curChar = input_stream.readChar();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,761,continue;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,763,catch (java.io.IOException e1) { }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,765,int error_line = input_stream.getEndLine();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,766,int error_column = input_stream.getEndColumn();
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,767,String error_after = null;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,768,boolean EOFSeen = false;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,769,try { input_stream.readChar(); input_stream.backup(1); }
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,770,catch (java.io.IOException e1) {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,771,EOFSeen = true;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,772,"error_after = curPos <= 1 ? """" : input_stream.GetImage();"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,773,if (curChar == '\n' || curChar == '\r') {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,774,error_line++;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,775,error_column = 0;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,777,else
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,778,error_column++;
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,780,if (!EOFSeen) {
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,781,input_stream.backup(1);
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,782,"error_after = curPos <= 1 ? """" : input_stream.GetImage();"
True,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,gson/src/main/java/com/google/gson/JsonParserTokenManager.java,784,"throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,19,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,20,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,23,* A class representing a Json primitive value. A primitive value
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,24,"* is either a String, a Java primitive, or a Java primitive"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,25,* wrapper type.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,29,public final class JsonPrimitive extends JsonElement {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,31,private Object value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,34,* Create a primitive containing a boolean value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,36,* @param bool the value to create the primitive with.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,38,public JsonPrimitive(Boolean bool) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,39,this.value = bool;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,43,* Create a primitive containing a {@link Number}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,45,* @param number the value to create the primitive with.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,47,public JsonPrimitive(Number number) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,48,this.value = number;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,52,* Create a primitive containing a String value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,54,* @param string the value to create the primitive with.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,56,public JsonPrimitive(String string) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,57,this.value = string;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,61,* Create a primitive containing a character. The character is turned into a one character String
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,62,* since Json only supports String.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,64,* @param c the value to create the primitive with.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,66,public JsonPrimitive(Character c) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,67,this.value = String.valueOf(c);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,71,* Create a primitive containing a character. The character is turned into a one character String
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,72,* since Json only supports String.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,74,* @param c the value to create the primitive with.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,76,public JsonPrimitive(char c) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,77,this.value = String.valueOf(c);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,81,"* Create a primitive using the specified Object. It must be an instance of {@link Number}, a"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,82,"* Java primitive type, or a String."
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,84,* @param primitive the value to create the primitive with.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,86,JsonPrimitive(Object primitive) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,87,setValue(primitive);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,90,void setValue(Object primitive) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,91,if (primitive instanceof Character) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,92,"// convert characters to strings since in JSON, characters are represented as a single"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,93,// character string
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,94,char c = ((Character)primitive).charValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,95,this.value = String.valueOf(c);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,96,} else {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,97,Preconditions.checkArgument(primitive instanceof Number
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,98,|| ObjectNavigator.isPrimitiveOrString(primitive));
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,99,this.value = primitive;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,104,* Check whether this primitive contains a boolean value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,106,"* @return true if this primitive contains a boolean value, false otherwise."
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,108,public boolean isBoolean() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,109,return value instanceof Boolean;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,113,* convenience method to get this element as a {@link Boolean}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,115,* @return get this element as a {@link Boolean}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,116,* @throws ClassCastException if the value contained is not a valid boolean value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,118,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,119,Boolean getAsBooleanWrapper() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,120,return (Boolean) value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,124,* convenience method to get this element as a boolean value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,126,* @return get this element as a primitive boolean value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,127,* @throws ClassCastException if the value contained is not a valid boolean value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,129,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,130,public boolean getAsBoolean() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,131,return ((Boolean) value).booleanValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,135,* Check whether this primitive contains a Number.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,137,"* @return true if this primitive contains a Number, false otherwise."
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,139,public boolean isNumber() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,140,return value instanceof Number;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,144,* convenience method to get this element as a Number.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,146,* @return get this element as a Number.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,147,* @throws ClassCastException if the value contained is not a valid Number.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,149,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,150,public Number getAsNumber() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,151,return (Number) value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,155,* Check whether this primitive contains a String value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,157,"* @return true if this primitive contains a String value, false otherwise."
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,159,public boolean isString() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,160,return value instanceof String;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,164,* convenience method to get this element as a String.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,166,* @return get this element as a String.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,167,* @throws ClassCastException if the value contained is not a valid String.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,169,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,170,public String getAsString() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,171,return (String) value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,175,* convenience method to get this element as a primitive double.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,177,* @return get this element as a primitive double.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,178,* @throws ClassCastException if the value contained is not a valid double.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,180,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,181,public double getAsDouble() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,182,return ((Number) value).doubleValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,186,* convenience method to get this element as a {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,188,* @return get this element as a {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,189,* @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,191,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,192,public BigDecimal getAsBigDecimal() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,193,if (value instanceof BigDecimal) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,194,return (BigDecimal) value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,195,} else {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,196,return new BigDecimal(value.toString());
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,201,* convenience method to get this element as a {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,203,* @return get this element as a {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,204,* @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,206,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,207,public BigInteger getAsBigInteger() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,208,if (value instanceof BigInteger) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,209,return (BigInteger) value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,210,} else {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,211,return new BigInteger(value.toString());
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,216,* convenience method to get this element as a float.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,218,* @return get this element as a float.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,219,* @throws ClassCastException if the value contained is not a valid float.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,221,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,222,public float getAsFloat() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,223,return ((Number) value).floatValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,227,* convenience method to get this element as a primitive long.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,229,* @return get this element as a primitive long.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,230,* @throws ClassCastException if the value contained is not a valid long.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,232,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,233,public long getAsLong() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,234,return ((Number) value).longValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,238,* convenience method to get this element as a primitive short.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,240,* @return get this element as a primitive short.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,241,* @throws ClassCastException if the value contained is not a valid short value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,243,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,244,public short getAsShort() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,245,return ((Number) value).shortValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,249,* convenience method to get this element as a primitive integer.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,251,* @return get this element as a primitive integer.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,252,* @throws ClassCastException if the value contained is not a valid integer.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,254,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,255,public int getAsInt() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,256,return ((Number) value).intValue();
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,260,* convenience method to get this element as an Object.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,262,* @return get this element as an Object that can be converted to a suitable value.
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,264,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,265,Object getAsObject() {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,266,return value;
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,269,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,270,protected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,271,if (value != null) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,272,if (value instanceof String) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,273,"sb.append('""');"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,274,sb.append(value);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,275,"sb.append('""');"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,277,} else {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,278,sb.append(value);
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,21,import java.util.Collection;
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,24,* A visitor that populates a primitive value from its JSON representation
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,28,final class JsonPrimitiveDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,30,"JsonPrimitiveDeserializationVisitor(JsonPrimitive json, Type type,"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,31,"ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,32,"TypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,33,JsonDeserializationContext context) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,34,"super(json, type, factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,37,@Override
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,38,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,39,protected T constructTarget() {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,40,return (T) objectConstructor.construct(targetType);
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,43,public void startVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,44,// do nothing
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,47,public void endVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,48,// do nothing
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,51,"public void visitCollection(@SuppressWarnings(""unchecked"")Collection collection,"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,52,Type componentType) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,53,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,54,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,57,"public void visitArray(Object array, Type componentType) {"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,58,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,59,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,62,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,63,public void visitPrimitiveValue(Object obj) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,64,JsonPrimitive jsonPrimitive = json.getAsJsonPrimitive();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,65,if (jsonPrimitive.isBoolean()) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,66,target = (T) jsonPrimitive.getAsBooleanWrapper();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,67,} else if (jsonPrimitive.isNumber()) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,68,target = (T) jsonPrimitive.getAsNumber();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,69,} else if (jsonPrimitive.isString()) {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,70,target = (T) jsonPrimitive.getAsString();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,71,} else {
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,72,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,76,"public void visitObjectField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,77,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,78,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,81,"public void visitCollectionField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,82,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,83,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,86,"public void visitArrayField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,87,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,88,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,91,"public void visitPrimitiveField(Field f, Type fType, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,92,// should not be called since this case should invoke JsonArrayDeserializationVisitor
True,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java,93,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,19,import java.io.PrintWriter;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,20,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,21,import java.util.Map;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,24,* Formats Json in a nicely indented way with a specified print margin.
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,25,* This printer tries to keep elements on the same line as much as possible
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,26,* while respecting right margin.
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,28,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,30,final class JsonPrintFormatter implements JsonFormatter {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,32,private final int printMargin;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,33,private final int indentationSize;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,34,private final int rightMargin;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,36,public static final int DEFAULT_PRINT_MARGIN = 80;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,37,public static final int DEFAULT_INDENTATION_SIZE = 2;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,38,public static final int DEFAULT_RIGHT_MARGIN = 4;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,40,public JsonPrintFormatter() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,41,"this(DEFAULT_PRINT_MARGIN, DEFAULT_INDENTATION_SIZE, DEFAULT_RIGHT_MARGIN);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,44,"public JsonPrintFormatter(int printMargin, int indentationSize, int rightMargin) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,45,this.printMargin = printMargin;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,46,this.indentationSize = indentationSize;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,47,this.rightMargin = rightMargin;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,50,private class JsonWriter {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,51,private final PrintWriter writer;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,52,private StringBuilder line;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,53,private int level;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,54,JsonWriter(PrintWriter writer) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,55,this.writer = writer;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,56,level = 0;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,57,line = new StringBuilder();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,60,void key(String key) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,61,"getLine().append('""');"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,62,getLine().append(key);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,63,"getLine().append('""');"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,66,void value(String value) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,67,getLine().append(value);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,70,void fieldSeparator() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,71,getLine().append(':');
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,72,breakLineIfNeeded();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,75,void elementSeparator() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,76,"getLine().append(',');"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,77,breakLineIfNeeded();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,80,void beginObject() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,81,++level;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,82,breakLineIfNeeded();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,83,getLine().append('{');
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,86,void endObject() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,87,getLine().append('}');
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,88,--level;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,91,void beginArray() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,92,++level;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,93,breakLineIfNeeded();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,94,getLine().append('[');
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,97,void endArray() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,98,getLine().append(']');
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,99,--level;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,102,private void breakLineIfNeeded() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,103,if (getLine().length() > printMargin - rightMargin) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,104,finishLine();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,108,private void finishLine() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,109,if (line != null) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,110,"writer.append(line).append(""\n"");"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,112,line = null;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,115,private StringBuilder getLine() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,116,if (line == null) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,117,createNewLine();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,119,return line;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,122,private void createNewLine() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,123,line = new StringBuilder();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,124,for (int i = 0; i < level; ++i) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,125,for (int j = 0; j < indentationSize; ++j) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,126,line.append(' ');
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,132,private class PrintFormattingVisitor implements JsonElementVisitor {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,133,"private final Map<Integer, Boolean> first;"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,134,private final JsonWriter writer;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,135,private final boolean serializeNulls;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,136,private int level = 0;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,138,"PrintFormattingVisitor(JsonWriter writer, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,139,this.writer = writer;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,140,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,141,"this.first = new HashMap<Integer, Boolean>();"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,144,private void addCommaCheckingFirst() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,145,if (first.get(level) != Boolean.FALSE) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,146,"first.put(level, false);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,147,} else {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,148,writer.elementSeparator();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,152,public void startArray(JsonArray array) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,153,"first.put(++level, true);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,154,writer.beginArray();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,157,"public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,158,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,159,writer.value(member.toString());
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,162,"public void visitArrayMember(JsonArray parent, JsonArray member, boolean first) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,163,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,166,"public void visitArrayMember(JsonArray parent, JsonObject member, boolean first) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,167,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,170,"public void visitNullArrayMember(JsonArray parent, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,171,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,174,public void endArray(JsonArray array) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,175,level--;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,176,writer.endArray();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,179,public void startObject(JsonObject object) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,180,writer.beginObject();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,183,"public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member,"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,184,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,185,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,186,writer.key(memberName);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,187,writer.fieldSeparator();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,188,writer.value(member.toString());
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,191,"public void visitObjectMember(JsonObject parent, String memberName, JsonArray member,"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,192,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,193,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,194,writer.key(memberName);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,195,writer.fieldSeparator();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,198,"public void visitObjectMember(JsonObject parent, String memberName, JsonObject member,"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,199,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,200,addCommaCheckingFirst();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,201,writer.key(memberName);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,202,writer.fieldSeparator();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,205,"public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,206,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,207,"visitObjectMember(parent, memberName, (JsonObject) null, isFirst);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,211,public void endObject(JsonObject object) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,212,writer.endObject();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,215,public void visitPrimitive(JsonPrimitive primitive) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,216,writer.value(primitive.toString());
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,219,public void visitNull() {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,220,"writer.value(""null"");"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,224,"public void format(JsonElement root, PrintWriter writer, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,225,if (root == null) {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,226,return;
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,228,JsonWriter jsonWriter = new JsonWriter(writer);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,229,JsonElementVisitor visitor =
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,230,"new JsonEscapingVisitor(new PrintFormattingVisitor(jsonWriter, serializeNulls));"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,231,"JsonTreeNavigator navigator = new JsonTreeNavigator(visitor, serializeNulls);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,232,navigator.navigate(root);
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,233,jsonWriter.finishLine();
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,22,* Context for serialization that is passed to a custom serializer during invocation of its
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,23,"* {@link JsonSerializer#serialize(Object, Type, JsonSerializationContext)} method."
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,25,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,27,public interface JsonSerializationContext {
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,30,* Invokes default serialization on the specified object.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,32,* @param src the object that needs to be serialized.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,33,* @return a tree of {@link JsonElement}s corresponding to the serialized form of {@code src}.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,35,public JsonElement serialize(Object src);
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,38,* Invokes default serialization on the specified object passing the specific type information.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,39,* It should never be invoked on the element received as a parameter of the
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,40,"* {@link JsonSerializer#serialize(Object, Type, JsonSerializationContext)} method. Doing"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,41,* so will result in an infinite loop since Gson will in-turn call the custom serializer again.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,43,* @param src the object that needs to be serialized.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,44,* @param typeOfSrc the actual genericized type of src object.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,45,* @return a tree of {@link JsonElement}s corresponding to the serialized form of {@code src}.
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,47,"public JsonElement serialize(Object src, Type typeOfSrc);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,22,* An implementation of serialization context for Gson.
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,24,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,26,final class JsonSerializationContextDefault implements JsonSerializationContext {
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,28,private final ObjectNavigatorFactory factory;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,29,private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,30,private final boolean serializeNulls;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,32,"JsonSerializationContextDefault(ObjectNavigatorFactory factory, boolean serializeNulls,"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,33,ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,34,this.factory = factory;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,35,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,36,this.serializers = serializers;
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,39,public JsonElement serialize(Object src) {
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,40,"return serialize(src, src.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,43,"public JsonElement serialize(Object src, Type typeOfSrc) {"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,44,"ObjectNavigator on = factory.create(src, typeOfSrc);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,45,JsonSerializationVisitor visitor =
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,46,"new JsonSerializationVisitor(factory, serializeNulls, serializers, this);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,47,on.accept(visitor);
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,48,return visitor.getJsonElement();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,19,import java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,20,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,22,import java.util.Collection;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,23,import java.util.Map;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,26,* A visitor that adds JSON elements corresponding to each field of an object
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,28,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,29,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,31,final class JsonSerializationVisitor implements ObjectNavigator.Visitor {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,33,private final ObjectNavigatorFactory factory;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,34,private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,35,private final boolean serializeNulls;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,37,private final JsonSerializationContext context;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,39,private JsonElement root;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,41,"JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,42,"ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,43,JsonSerializationContext context) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,44,this.factory = factory;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,45,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,46,this.serializers = serializers;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,47,this.context = context;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,50,public void endVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,51,// nothing to be done here
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,54,public void startVisitingObject(Object node) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,55,assignToRoot(new JsonObject());
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,58,"public void visitArray(Object array, Type arrayType) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,59,assignToRoot(new JsonArray());
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,60,int length = Array.getLength(array);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,61,TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,62,Type componentType = fieldTypeInfo.getSecondLevelType();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,63,for (int i = 0; i < length; ++i) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,64,"Object child = Array.get(array, i);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,65,"addAsArrayElement(componentType, child);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,69,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,70,"public void visitCollection(Collection collection, Type collectionType) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,71,assignToRoot(new JsonArray());
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,72,for (Object child : collection) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,73,Type childType = TypeUtils.getActualTypeForFirstTypeVariable(collectionType);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,74,if (childType == Object.class && child != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,75,// Try our luck some other way
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,76,childType = child.getClass();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,78,"addAsArrayElement(childType, child);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,82,"public void visitArrayField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,83,"if (!isFieldNull(f, obj)) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,84,"Object array = getFieldValue(f, obj);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,85,"addAsChildOfObject(f, typeOfF, array);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,89,"public void visitCollectionField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,90,"if (!isFieldNull(f, obj)) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,91,if (typeOfF == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,92,"throw new RuntimeException(""Can not handle non-generic collections"");"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,94,"Object collection = getFieldValue(f, obj);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,95,"addAsChildOfObject(f, typeOfF, collection);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,99,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,100,"public void visitEnum(Object obj, Type objType) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,101,JsonSerializer serializer = serializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,102,if (serializer == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,103,serializer = serializers.getHandlerFor(Enum.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,105,if (serializer == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,"throw new RuntimeException(""Register a JsonSerializer for Enum or """
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,107,+ obj.getClass().getName());
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,109,"assignToRoot(serializer.serialize(obj, objType, context));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,112,"public void visitObjectField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,"if (isFieldNull(f, obj)) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,114,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,115,"addChildAsElement(f, new JsonNull());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,117,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,118,"Object fieldValue = getFieldValue(f, obj);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,119,"addAsChildOfObject(f, typeOfF, fieldValue);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,123,"private void addAsChildOfObject(Field f, Type fieldType, Object fieldValue) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,124,"JsonElement childElement = getJsonElementForChild(fieldType, fieldValue);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,125,"addChildAsElement(f, childElement);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,128,"private void addChildAsElement(Field f, JsonElement childElement) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,129,FieldNamingStrategy namingPolicy = factory.getFieldNamingPolicy();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,130,"root.getAsJsonObject().add(namingPolicy.translateName(f), childElement);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,133,"private void addAsArrayElement(Type elementType, Object elementValue) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,134,if (elementValue == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,135,addNullAsArrayElement();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,136,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,137,"JsonElement childElement = getJsonElementForChild(elementType, elementValue);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,138,root.getAsJsonArray().add(childElement);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,142,private void addNullAsArrayElement() {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,143,root.getAsJsonArray().add(null);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,146,"private JsonElement getJsonElementForChild(Type fieldType, Object fieldValue) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,147,"ObjectNavigator on = factory.create(fieldValue, fieldType);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,148,JsonSerializationVisitor childVisitor =
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,149,"new JsonSerializationVisitor(factory, serializeNulls, serializers, context);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,150,on.accept(childVisitor);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,151,return childVisitor.getJsonElement();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,154,"public void visitPrimitiveField(Field f, Type typeOfF, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,155,"if (!isFieldNull(f, obj)) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,156,TypeInfo typeInfo = new TypeInfo(typeOfF);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,157,if (typeInfo.isPrimitiveOrStringAndNotAnArray()) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,158,"Object fieldValue = getFieldValue(f, obj);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,159,"addAsChildOfObject(f, typeOfF, fieldValue);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,160,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,161,"throw new IllegalArgumentException(""Not a primitive type"");"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,166,public void visitPrimitiveValue(Object obj) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,167,assignToRoot(new JsonPrimitive(obj));
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,170,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,171,"public boolean visitUsingCustomHandler(Object obj, Type objType) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,172,JsonSerializer serializer = serializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,173,if (serializer == null && obj instanceof Map) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,174,serializer = serializers.getHandlerFor(Map.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,176,if (serializer != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,177,"assignToRoot(serializer.serialize(obj, objType, context));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,178,return true;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,180,return false;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,183,private void assignToRoot(JsonElement newRoot) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,184,Preconditions.checkArgument(root == null);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,185,root = newRoot;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,188,"private boolean isFieldNull(Field f, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,189,"return getFieldValue(f, obj) == null;"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,"private Object getFieldValue(Field f, Object obj) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,193,try {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,return f.get(obj);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,195,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,196,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,200,public JsonElement getJsonElement() {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,201,return root;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,22,"* Interface representing a custom serializer for Json. You should write a custom serializer, if"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,23,* you are not happy with the default serialization done by Gson. You will also need to register
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,24,"* this serializer through {@link com.google.gson.GsonBuilder#registerTypeAdapter(Type, Object)}."
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,26,* <p>Let us look at example where defining a serializer will be useful. The {@code Id} class
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,27,* defined below has two fields: {@code clazz} and {@code value}.</p>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,29,* <p><pre>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,30,* public class Id&lt;T&gt; {
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,31,*   private final Class&lt;T&gt; clazz;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,32,*   private final long value;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,34,"*   public Id(Class&lt;T&gt; clazz, long value) {"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,35,*     this.clazz = clazz;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,36,*     this.value = value;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,39,*   public long getValue() {
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,40,*     return value;
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,43,* </pre></p>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,45,"* <p>The default serialization of {@code Id(com.foo.MyObject.class, 20L)} will be"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,46,"* <code>{""clazz"":com.foo.MyObject,""value"":20}</code>. Suppose, you just want the output to be"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,47,"* the value instead, which is {@code 20} in this case. You can achieve that by writing a custom"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,48,* serializer:</p>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,50,* <p><pre>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,51,* class IdSerializer implements JsonSerializer&lt;Id&gt;() {
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,52,"*   public JsonElement toJson(Id id, Type typeOfId, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,53,*     return new JsonPrimitive(id.getValue());
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,56,* </pre></p>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,58,* <p>You will also need to register {@code IdSerializer} with Gson as follows:</p>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,59,* <pre>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,60,"* Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new IdSerializer()).create();"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,61,* </pre>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,63,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,64,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,66,* @param <T> type for which the serializer is being registered. It is possible that a serializer
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,67,*        may be asked to serialize a specific generic type of the T.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,69,public interface JsonSerializer<T> {
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,72,* Gson invokes this call-back method during serialization when it encounters a field of the
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,73,* specified type.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,75,"* <p>In the implementation of this call-back method, you should consider invoking"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,76,"* {@link JsonSerializationContext#serialize(Object, Type)} method to create JsonElements for any"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,77,"* non-trivial field of the {@code src} object. However, you should never invoke it on the"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,78,* {@code src} object itself since that will cause an infinite loop (Gson will call your
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,79,* call-back method again).</p>
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,81,* @param src the object that needs to be converted to Json.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,82,* @param typeOfSrc the actual type (fully genericized version) of the source object.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,83,* @return a JsonElement corresponding to the specified object.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,85,"public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context);"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,22,* Decorators a {@code JsonSerializer} instance with exception handling.  This wrapper class
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,23,* ensures that a {@code JsonSerializer} will not propagate any exception other than a
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,24,* {@link JsonParseException}.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,26,* @param <T> type of the serializer being wrapped.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,28,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,29,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,31,class JsonSerializerExceptionWrapper<T> implements JsonSerializer<T> {
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,32,private final JsonSerializer<T> delegate;
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,35,* Returns a wrapped {@link JsonSerializer} object that has been decorated with
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,36,* {@link JsonParseException} handling.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,38,* @param delegate the {@code JsonSerializer} instance to be wrapped
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,39,* @throws IllegalArgumentException if {@code delegate} is {@code null}.
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,41,JsonSerializerExceptionWrapper(JsonSerializer<T> delegate) {
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,42,Preconditions.checkNotNull(delegate);
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,43,this.delegate = delegate;
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,46,"public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,47,try {
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,48,"return delegate.serialize(src, typeOfSrc, context);"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,49,} catch (JsonParseException e) {
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,50,// just rethrow the exception
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,51,throw e;
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,52,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,53,// throw as a JsonParseException
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,54,StringBuilder errorMsg = new StringBuilder()
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,55,".append(""The JsonSerializer "")"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,56,.append(delegate)
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,57,".append("" failed to serialized object "")"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,58,.append(src)
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,59,".append("" given the type "")"
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,60,.append(typeOfSrc);
True,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonSerializerExceptionWrapper.java,61,"throw new JsonParseException(errorMsg.toString(), e);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,19,import java.util.Map;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,22,* A navigator to navigate a tree of JsonElement nodes in Depth-first order
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,24,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,26,final class JsonTreeNavigator {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,27,private final JsonElementVisitor visitor;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,28,private final boolean visitNulls;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,30,"JsonTreeNavigator(JsonElementVisitor visitor, boolean visitNulls) {"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,31,this.visitor = visitor;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,32,this.visitNulls = visitNulls;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,35,public void navigate(JsonElement element) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,36,if (element == null || element.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,37,visitor.visitNull();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,38,} else if (element.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,39,JsonArray array = element.getAsJsonArray();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,40,visitor.startArray(array);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,41,boolean isFirst = true;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,42,for (JsonElement child : array) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,43,"visitChild(array, child, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,44,if (isFirst) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,45,isFirst = false;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,48,visitor.endArray(array);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,49,} else if (element.isJsonObject()){
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,50,JsonObject object = element.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,51,visitor.startObject(object);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,52,boolean isFirst = true;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,53,"for (Map.Entry<String, JsonElement> member : object.entrySet()) {"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,54,"visitChild(object, member.getKey(), member.getValue(), isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,55,if (isFirst) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,56,isFirst = false;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,59,visitor.endObject(object);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,60,} else { // must be JsonPrimitive
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,61,visitor.visitPrimitive(element.getAsJsonPrimitive());
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,65,"private void visitChild(JsonObject parent, String childName, JsonElement child, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,66,if (child != null) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,67,if (child.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,68,if (visitNulls) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,69,"visitor.visitNullObjectMember(parent, childName, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,70,navigate(child.getAsJsonNull());
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,72,} else if (child.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,73,JsonArray childAsArray = child.getAsJsonArray();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,74,"visitor.visitObjectMember(parent, childName, childAsArray, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,75,navigate(childAsArray);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,76,} else if (child.isJsonObject()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,77,JsonObject childAsObject = child.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,78,"visitor.visitObjectMember(parent, childName, childAsObject, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,79,navigate(childAsObject);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,80,} else { // is a JsonPrimitive
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,81,"visitor.visitObjectMember(parent, childName, child.getAsJsonPrimitive(), isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,86,"private void visitChild(JsonArray parent, JsonElement child, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,87,if (child == null || child.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,88,"visitor.visitNullArrayMember(parent, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,89,navigate(null);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,90,} else if (child.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,91,JsonArray childAsArray = child.getAsJsonArray();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,92,"visitor.visitArrayMember(parent, childAsArray, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,93,navigate(childAsArray);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,94,} else if (child.isJsonObject()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,95,JsonObject childAsObject = child.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,96,"visitor.visitArrayMember(parent, childAsObject, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,97,navigate(childAsObject);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,98,} else { // is a JsonPrimitive
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,99,"visitor.visitArrayMember(parent, child.getAsJsonPrimitive(), isFirst);"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,20,* A {@link FieldNamingStrategy} that ensures the JSON field names consist of only
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,21,* lower case letters and are separated by a particular {@code separatorString}.
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,23,*<p>The following is an example:</p>
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,24,* <pre>
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,25,* class StringWrapper {
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,26,"*   public String AStringField = ""abcd"";"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,29,"* LowerCamelCaseSeparatorNamingPolicy policy = new LowerCamelCaseSeparatorNamingPolicy(""_"");"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,30,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,31,"*     policy.translateName(StringWrapper.class.getField(""AStringField""));"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,33,"* assert(""a_string_field"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,34,* </pre>
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,36,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,38,class LowerCamelCaseSeparatorNamingPolicy extends CompositionFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,40,public LowerCamelCaseSeparatorNamingPolicy(String separatorString) {
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,41,"super(new CamelCaseSeparatorNamingPolicy(separatorString), new LowerCaseNamingPolicy());"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,23,* A {@link FieldNamingStrategy} that ensures the JSON field names consist of only
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,24,* lower case letters.
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,26,*<p>The following is an example:</p>
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,27,* <pre>
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,28,* class IntWrapper {
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,29,*   public int integerField = 0;
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,32,* LowerCaseNamingPolicy policy = new LowerCaseNamingPolicy();
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,33,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,34,"*     policy.translateName(IntWrapper.class.getField(""integerField""));"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,36,"* assert(""integerfield"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,37,* </pre>
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,39,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,41,class LowerCaseNamingPolicy extends RecursiveFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,43,@Override
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,44,"protected String translateName(String target, Type fieldType, Annotation[] annotations) {"
True,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCaseNamingPolicy.java,45,return target.toLowerCase();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,19,import java.lang.reflect.AccessibleObject;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,20,import java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,21,import java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,22,import java.lang.reflect.InvocationTargetException;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,23,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,24,import java.util.logging.Level;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,25,import java.util.logging.Logger;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,28,* This class contains a mapping of all the application specific
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,29,* {@link InstanceCreator} instances.  Registering an {@link InstanceCreator}
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,30,* with this class will override the default object creation that is defined
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,31,* by the ObjectConstructor that this class is wrapping.  Using this class
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,32,"* with the JSON framework provides the application with ""pluggable"" modules"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,33,* to customize framework to suit the application's needs.
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,35,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,37,final class MappedObjectConstructor implements ObjectConstructor {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,38,private final Logger log = Logger.getLogger(getClass().getName());
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,40,private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreatorMap =
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,41,new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,43,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,44,public <T> T construct(Type typeOfT) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,45,if (instanceCreatorMap.hasAnyHandlerFor(typeOfT)) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,46,InstanceCreator<T> creator = (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,47,return creator.createInstance(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,49,TypeInfo typeInfo = new TypeInfo(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,50,if (typeInfo.isEnum()) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,51,InstanceCreator<T> creator =
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,52,(InstanceCreator<T>) instanceCreatorMap.getHandlerFor(Enum.class);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,53,return creator.createInstance(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,55,return (T) constructWithNoArgConstructor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,58,"public Object constructArray(Type type, int length) {"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,59,"return Array.newInstance(TypeUtils.toRawClass(type), length);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,62,private <T> T constructWithNoArgConstructor(Type typeOfT) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,63,try {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,64,Constructor<T> constructor = getNoArgsConstructor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,65,if (constructor == null) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,66,"throw new RuntimeException((""No-args constructor for "" + typeOfT + "" does not exist. """
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,67,"+ ""Register an InstanceCreator with Gson for this type to fix this problem.""));"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,69,return constructor.newInstance();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,70,} catch (InstantiationException e) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,71,"throw new RuntimeException((""Unable to invoke no-args constructor for "" + typeOfT + "". """
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,72,"+ ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,73,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,74,"throw new RuntimeException((""Unable to invoke no-args constructor for "" + typeOfT + "". """
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,75,"+ ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,76,} catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,77,"throw new RuntimeException((""Unable to invoke no-args constructor for "" + typeOfT + "". """
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,78,"+ ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,82,"@SuppressWarnings({""unchecked"", ""cast""})"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,83,private <T> Constructor<T> getNoArgsConstructor(Type typeOfT) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,84,TypeInfo typeInfo = new TypeInfo(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,85,Class<T> clazz = (Class<T>) typeInfo.getRawClass();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,86,Constructor<T>[] declaredConstructors = (Constructor<T>[]) clazz.getDeclaredConstructors();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,87,"AccessibleObject.setAccessible(declaredConstructors, true);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,88,for (Constructor<T> constructor : declaredConstructors) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,89,if (constructor.getParameterTypes().length == 0) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,90,return constructor;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,93,return null;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,97,* Use this methods to register an {@link InstanceCreator} for a new type.
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,99,"* @param <T> the type of class to be mapped with its ""creator"""
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,100,* @param typeOfT the instance type that will be created
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,101,* @param creator the {@link InstanceCreator} instance to register
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,103,"<T> void register(Type typeOfT, InstanceCreator<? extends T> creator) {"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,104,if (instanceCreatorMap.hasSpecificHandlerFor(typeOfT)) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,105,"log.log(Level.WARNING, ""Overriding the existing InstanceCreator for "" + typeOfT);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,107,"instanceCreatorMap.register(typeOfT, creator);"
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,19,import java.util.Stack;
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,22,* A stack data structure that only does a memory reference comparison
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,23,* when looking for a particular item in the stack.  This stack does
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,24,* not allow {@code null} values to be added.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,26,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,28,final class MemoryRefStack<T> {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,29,private final Stack<T> stack = new Stack<T>();
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,32,* Adds a new element to the top of the stack.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,34,* @param obj the object to add to the stack
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,35,* @return the object that was added
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,37,public T push(T obj) {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,38,Preconditions.checkNotNull(obj);
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,40,return stack.push(obj);
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,44,* Removes the top element from the stack.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,46,* @return the element being removed from the stack
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,47,* @throws java.util.EmptyStackException thrown if the stack is empty
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,49,public T pop() {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,50,return stack.pop();
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,54,"* Retrieves the item from the top of the stack, but does not remove it."
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,56,* @return the item from the top of the stack
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,57,* @throws java.util.EmptyStackException thrown if the stack is empty
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,59,public T peek() {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,60,return stack.peek();
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,64,* Performs a memory reference check to see it the {@code obj} exists in
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,65,* the stack.
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,67,* @param obj the object to search for in the stack
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,68,* @return true if this object is already in the stack otherwise false
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,70,public boolean contains(T obj) {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,71,if (obj == null) {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,72,return false;
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,75,for (T stackObject : stack) {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,76,if (obj == stackObject) {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,77,return true;
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,80,return false;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,20,import java.util.Collection;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,21,import java.util.HashSet;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,24,* Exclude fields based on particular field modifiers.  For a list of possible
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,25,"* modifiers, see {@link java.lang.reflect.Modifier}."
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,30,final class ModifierBasedExclusionStrategy implements ExclusionStrategy {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,31,private final boolean skipSyntheticField;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,32,private final Collection<Integer> modifiers;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,34,"public ModifierBasedExclusionStrategy(boolean skipSyntheticFields, int... modifiers) {"
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,35,this.skipSyntheticField = skipSyntheticFields;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,36,this.modifiers = new HashSet<Integer>();
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,37,if (modifiers != null) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,38,for (int modifier : modifiers) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,39,this.modifiers.add(modifier);
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,44,public boolean shouldSkipField(Field f) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,45,if (skipSyntheticField && f.isSynthetic()) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,46,return true;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,48,int objectModifiers = f.getModifiers();
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,49,for (int modifier : modifiers) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,50,if ((objectModifiers & modifier) != 0) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,51,return true;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,54,return false;
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,57,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java,58,return false;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,23,* A {@link FieldNamingStrategy} that ensures the JSON field names begins with
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,24,* an upper case letter.
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,26,*<p>The following is an example:</p>
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,27,* <pre>
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,28,* class StringWrapper {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,29,"*   public String stringField = ""abcd"";"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,30,"*   public String _stringField = ""efg"";"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,33,* ModifyFirstLetterNamingPolicy policy =
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,34,*     new ModifyFirstLetterNamingPolicy(LetterModifier.UPPER);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,35,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,36,"*     policy.translateName(StringWrapper.class.getField(""stringField""));"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,38,"* assert(""StringField"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,40,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,41,"*     policy.translateName(StringWrapper.class.getField(""_stringField""));"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,43,"* assert(""_StringField"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,44,* </pre>
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,46,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,48,class ModifyFirstLetterNamingPolicy extends RecursiveFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,50,public enum LetterModifier {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,51,"UPPER,"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,52,LOWER;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,55,private final LetterModifier letterModifier;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,58,* Creates a new ModifyFirstLetterNamingPolicy that will either modify the first letter of the
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,59,* target name to either UPPER case or LOWER case depending on the {@code modifier} parameter.
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,61,* @param modifier the type of modification that should be performed
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,62,* @throws IllegalArgumentException if {@code modifier} is null
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,64,public ModifyFirstLetterNamingPolicy(LetterModifier modifier) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,65,Preconditions.checkNotNull(modifier);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,66,this.letterModifier = modifier;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,69,@Override
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,70,"protected String translateName(String target, Type fieldType, Annotation[] annotations) {"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,71,StringBuilder fieldNameBuilder = new StringBuilder();
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,72,int index = 0;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,73,char firstCharacter = target.charAt(index);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,75,while (index < target.length() - 1) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,76,if (Character.isLetter(firstCharacter)) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,77,break;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,80,fieldNameBuilder.append(firstCharacter);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,81,firstCharacter = target.charAt(++index);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,84,if (index == target.length()) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,85,return fieldNameBuilder.toString();
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,88,boolean capitalizeFirstLetter = (letterModifier == LetterModifier.UPPER);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,89,if (capitalizeFirstLetter && !Character.isUpperCase(firstCharacter)) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,90,"String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), target, ++index);"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,91,return fieldNameBuilder.append(modifiedTarget).toString();
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,92,} else if (!capitalizeFirstLetter && Character.isUpperCase(firstCharacter)) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,93,"String modifiedTarget = modifyString(Character.toLowerCase(firstCharacter), target, ++index);"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,94,return fieldNameBuilder.append(modifiedTarget).toString();
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,95,} else {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,96,return target;
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,100,"private String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {"
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,101,if (indexOfSubstring < srcString.length()) {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,102,return firstCharacter + srcString.substring(indexOfSubstring);
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,103,} else {
True,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java,104,return String.valueOf(firstCharacter);
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,22,"* This acts as a ""Null Object"" pattern for the {@link ExclusionStrategy}."
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,23,* Passing an instance of this class into the {@link ObjectNavigator} will
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,24,* make the {@link ObjectNavigator} parse/visit every field of the object
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,25,* being navigated.
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,29,final class NullExclusionStrategy implements ExclusionStrategy {
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,31,public boolean shouldSkipField(Field f) {
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,32,return false;
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,35,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,36,return false;
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,22,* Defines a generic object construction factory.  The purpose of this class
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,23,* is to construct a default instance of a class that can be used for object
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,24,* navigation while deserialization from its JSON representation.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,29,interface ObjectConstructor {
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,32,* Creates a new instance of the given type.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,34,* @param typeOfT the class type that should be instantiated
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,35,* @return a default instance of the provided class.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,37,public <T> T construct(Type typeOfT);
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,40,* Constructs an array type of the provided length.
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,42,* @param typeOfArrayElements type of objects in the array
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,43,* @param length size of the array
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,44,* @return new array of size length
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/ObjectConstructor.java,46,"public Object constructArray(Type typeOfArrayElements, int length);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,19,import java.lang.reflect.AccessibleObject;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,20,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,22,import java.util.Collection;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,25,* Provides ability to apply a visitor to an object and all of its fields recursively.
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,30,final class ObjectNavigator {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,32,public interface Visitor {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,34,* This is called before the object navigator starts visiting the current object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,36,void startVisitingObject(Object node);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,39,* This is called after the object navigator finishes visiting the current object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,41,void endVisitingObject(Object node);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,44,* This is called to visit the current object if it is an iterable
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,46,* @param componentType the type of each element of the component
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,48,"void visitCollection(@SuppressWarnings(""unchecked"") Collection collection, Type componentType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,51,* This is called to visit the current object if it is an array
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,53,"void visitArray(Object array, Type componentType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,56,* This is called to visit the current object if it is a primitive
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,58,void visitPrimitiveValue(Object obj);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,61,* This is called to visit an object field of the current object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,63,"void visitObjectField(Field f, Type typeOfF, Object obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,66,* This is called to visit a field of type Collection of the current object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,68,"void visitCollectionField(Field f, Type typeOfF, Object obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,71,* This is called to visit an array field of the current object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,73,"void visitArrayField(Field f, Type typeOfF, Object obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,76,* This is called to visit a primitive field of the current object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,78,"void visitPrimitiveField(Field f, Type typeOfF, Object obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,81,* This is called to visit an enum object
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,83,"public void visitEnum(Object obj, Type objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,86,* This is called to visit an object using a custom handler
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,87,"* @return true if a custom handler exists, false otherwise"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,89,"public boolean visitUsingCustomHandler(Object obj, Type objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,92,private final ExclusionStrategy exclusionStrategy;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,93,private final MemoryRefStack<Object> ancestors;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,94,private final Object obj;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,95,private final Type objType;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,98,* @param obj The object being navigated
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,99,* @param objType The (fully genericized) type of the object being navigated
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,100,* @param exclusionStrategy the concrete strategy object to be used to
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,101,*        filter out fields of an object.
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,"ObjectNavigator(Object obj, Type objType, ExclusionStrategy exclusionStrategy,"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,104,MemoryRefStack<Object> ancestors) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,105,Preconditions.checkNotNull(exclusionStrategy);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,106,Preconditions.checkNotNull(ancestors);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,108,this.obj = obj;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,109,this.objType = objType;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,110,this.exclusionStrategy = exclusionStrategy;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,111,this.ancestors = ancestors;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,115,* Navigate all the fields of the specified object.
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,116,"* If a field is null, it does not get visited."
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,118,public void accept(Visitor visitor) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119,if (obj == null) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,120,return;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,122,TypeInfo objTypeInfo = new TypeInfo(objType);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,123,if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,124,return;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,127,if (ancestors.contains(obj)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,128,"throw new IllegalStateException(""Circular reference found: "" + obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,130,ancestors.push(obj);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,132,try {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,133,if (objTypeInfo.isCollectionOrArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,134,if (objTypeInfo.isArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,135,"visitor.visitArray(obj, objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,136,} else { // must be a collection
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,137,"visitor.visitCollection((Collection<?>) obj, objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,139,} else if (objTypeInfo.isEnum()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,140,"visitor.visitEnum(obj, objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,141,} else if (objTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,142,visitor.visitPrimitiveValue(obj);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,143,} else {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,144,"if (!visitor.visitUsingCustomHandler(obj, objType)) {"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,145,visitor.startVisitingObject(obj);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,146,"// For all classes in the inheritance hierarchy (including the current class),"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,147,// visit all fields
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,148,for (Class<?> curr = objTypeInfo.getRawClass();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,149,curr != null && !curr.equals(Object.class); curr = curr.getSuperclass()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,150,if (!curr.isSynthetic()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,151,"navigateClassFields(obj, curr, visitor);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,154,visitor.endVisitingObject(obj);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,157,} finally {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,158,ancestors.pop();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,162,"private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) {"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,163,Field[] fields = clazz.getDeclaredFields();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,164,"AccessibleObject.setAccessible(fields, true);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,165,for (Field f : fields) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,166,"TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,167,Type actualTypeOfField = fieldTypeInfo.getActualType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,168,if (exclusionStrategy.shouldSkipField(f)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,169,continue; // skip
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,170,} else if (fieldTypeInfo.isCollectionOrArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,171,if (fieldTypeInfo.isArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,172,"visitor.visitArrayField(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,173,} else { // must be Collection
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,174,"visitor.visitCollectionField(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,176,} else if (fieldTypeInfo.isPrimitiveOrStringAndNotAnArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,177,"visitor.visitPrimitiveField(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,178,} else {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,179,"visitor.visitObjectField(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,184,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,185,"private static final Class[] PRIMITIVE_TYPES = { int.class, long.class, short.class, float.class,"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,186,"double.class, byte.class, boolean.class, Integer.class, Long.class, Short.class, Float.class,"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,187,"Double.class, Byte.class, Boolean.class };"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,189,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,190,static boolean isPrimitiveOrString(Object target) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,191,if (target instanceof String) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,192,return true;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,194,Class<?> classOfPrimitive = target.getClass();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,195,for (Class standardPrimitive : PRIMITIVE_TYPES) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,196,if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,197,return true;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,200,return false;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,22,* A factory class used to simplify {@link ObjectNavigator} creation.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,23,* This object holds on to a reference of the {@link ExclusionStrategy}
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,24,* that you'd like to use with the {@link ObjectNavigator}.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,26,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,28,final class ObjectNavigatorFactory {
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,29,private final ExclusionStrategy strategy;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,30,private final FieldNamingStrategy fieldNamingPolicy;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,31,private final MemoryRefStack<Object> stack;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,34,* Creates a factory object that will be able to create new
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,35,* {@link ObjectNavigator}s with the provided {@code strategy}
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,37,* @param strategy the exclusion strategy to use with every instance that
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,38,*        is created by this factory instance.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,39,* @param fieldNamingPolicy the naming policy that should be applied to field
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,40,*        names
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,42,"public ObjectNavigatorFactory(ExclusionStrategy strategy, FieldNamingStrategy fieldNamingPolicy) {"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,43,Preconditions.checkNotNull(fieldNamingPolicy);
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,44,this.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,45,this.fieldNamingPolicy = fieldNamingPolicy;
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,46,this.stack = new MemoryRefStack<Object>();
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,50,* Creates a new {@link ObjectNavigator} for this {@code srcObject}.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,52,"* @see #create(Object, Type)"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,53,* @param srcObject object to navigate
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,54,* @return a new instance of a {@link ObjectNavigator} ready to navigate the
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,55,*         {@code srcObject}.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,57,public ObjectNavigator create(Object srcObject) {
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,58,"return create(srcObject, srcObject.getClass());"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,62,"* Creates a new {@link ObjectNavigator} for this {@code srcObject},"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,63,* {@code type} pair.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,65,* @param srcObject object to navigate
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,66,"* @param type the ""actual"" type of this {@code srcObject}.  NOTE: this can"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,67,*        be a {@link java.lang.reflect.ParameterizedType} rather than a {@link Class}.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,68,* @return a new instance of a {@link ObjectNavigator} ready to navigate the
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,69,*         {@code srcObject} while taking into consideration the
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,70,*         {@code type}.
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,72,"public ObjectNavigator create(Object srcObject, Type type) {"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,73,"return new ObjectNavigator(srcObject, type, strategy, stack);"
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,76,FieldNamingStrategy getFieldNamingPolicy() {
True,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,77,return fieldNamingPolicy;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,19,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,21,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,22,import java.util.Map;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,23,import java.util.Set;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,24,import java.util.logging.Level;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,27,* A map that provides ability to associate handlers for a specific type or all of its sub-types
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,29,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,30,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,32,* @param <T> The handler that will be looked up by type
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,34,final class ParameterizedTypeHandlerMap<T> {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,36,"private final Map<Type, T> map = new HashMap<Type, T>();"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,37,private boolean modifiable = true;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,39,"public synchronized void register(Type typeOfT, T value) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,40,if (!modifiable) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,41,"throw new IllegalStateException(""Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,43,if (hasSpecificHandlerFor(typeOfT)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,44,"Gson.logger.log(Level.WARNING, ""Overriding the existing type handler for "" + typeOfT);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,46,"map.put(typeOfT, value);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,49,public synchronized void registerIfAbsent(ParameterizedTypeHandlerMap<T> other) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,50,if (!modifiable) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,51,"throw new IllegalStateException(""Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,53,"for (Map.Entry<Type, T> entry : other.entrySet()) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,54,if (!map.containsKey(entry.getKey())) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,55,"register(entry.getKey(), entry.getValue());"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,60,public synchronized void makeUnmodifiable() {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,61,modifiable = false;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,64,public synchronized T getHandlerFor(Type type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,65,T handler = map.get(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,66,if (handler == null && type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,67,"// a handler for a non-generic version is registered, so use that"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,68,Type rawType = ((ParameterizedType)type).getRawType();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,69,handler = map.get(rawType);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,71,return handler;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,74,public synchronized boolean hasAnyHandlerFor(Type type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,75,return getHandlerFor(type) != null;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,78,public synchronized boolean hasSpecificHandlerFor(Type type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,79,return map.containsKey(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,82,public synchronized ParameterizedTypeHandlerMap<T> copyOf() {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,83,ParameterizedTypeHandlerMap<T> copy = new ParameterizedTypeHandlerMap<T>();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,84,"for (Map.Entry<Type, T> entry : map.entrySet()) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,85,"copy.register(entry.getKey(), entry.getValue());"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,87,return copy;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,90,"public synchronized Set<Map.Entry<Type, T>> entrySet() {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,91,return map.entrySet();
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,19,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,21,import java.util.Arrays;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,24,* An immutable implementation of the {@link ParameterizedType} interface.  This object allows
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,25,* us to build a reflective {@link Type} objects on demand.  This object is used to support
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,26,* serialization and deserialization of classes with an {@code ParameterizedType} field where
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,27,* as least one of the actual type parameters is a {@code TypeVariable}.
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,29,* <p>Here's an example class:
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,30,* <pre>
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,31,* class Foo<T> {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,32,*   private List<T> someList;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,34,*   Foo(List<T> list) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,35,*     this.someList = list;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,38,* </pre>
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,40,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,41,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,43,final class ParameterizedTypeImpl implements ParameterizedType {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,45,private final Type rawType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,46,private final Type[] actualTypeArguments;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,47,private final Type owner;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,49,"public ParameterizedTypeImpl(Type rawType, Type[] actualTypeArguments, Type owner) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,50,this.rawType = rawType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,51,this.actualTypeArguments = actualTypeArguments;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,52,this.owner = owner;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,55,public Type getRawType() {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,56,return rawType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,59,public Type[] getActualTypeArguments() {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,60,return actualTypeArguments;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,63,public Type getOwnerType() {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,64,return owner;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,67,@Override
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,68,public boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,69,if (!(o instanceof  ParameterizedType)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,70,return false;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,71,} else {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,72,// Check that information is equivalent
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,73,ParameterizedType that = (ParameterizedType) o;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,74,if (this  == that)
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,75,return true;
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,77,Type thatOwner = that.getOwnerType();
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,78,Type thatRawType = that.getRawType();
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,80,return (owner == null ? thatOwner == null : owner.equals(thatOwner))
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,81,&& (rawType == null ? thatRawType == null : rawType.equals(thatRawType))
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,82,"&& Arrays.equals(actualTypeArguments, that.getActualTypeArguments());"
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,86,@Override
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,87,public int hashCode() {
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,88,return Arrays.hashCode(actualTypeArguments)
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,89,^ (owner == null ? 0 : owner.hashCode())
True,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,gson/src/main/java/com/google/gson/ParameterizedTypeImpl.java,90,^ (rawType == null ? 0 : rawType.hashCode());
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,1,/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 3.0 */
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,5,* This exception is thrown when parse errors are encountered.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,6,* You can explicitly create objects of this exception type by
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,7,* calling the method generateParseException in the generated
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,8,* parser.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,10,* You can modify this class to customize your error reporting
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,11,* mechanisms so long as you retain the public fields.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,13,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,14,final class ParseException extends Exception {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,17,"* This constructor is used by the method ""generateParseException"""
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,18,* in the generated parser.  Calling this constructor generates
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,19,"* a new object of this type with the fields ""currentToken"","
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,20,"* ""expectedTokenSequences"", and ""tokenImage"" set.  The boolean"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,21,"* flag ""specialConstructor"" is also set to true to indicate that"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,22,* this constructor was used to create this object.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,23,* This constructor calls its super class with the empty string
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,24,"* to force the ""toString"" method of parent class ""Throwable"" to"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,25,* print the error message in the form:
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,26,*     ParseException: <result of getMessage>
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,28,"public ParseException(Token currentTokenVal,"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,29,"int[][] expectedTokenSequencesVal,"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,30,String[] tokenImageVal
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,33,"super("""");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,34,specialConstructor = true;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,35,currentToken = currentTokenVal;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,36,expectedTokenSequences = expectedTokenSequencesVal;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,37,tokenImage = tokenImageVal;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,41,* The following constructors are for use by you for whatever
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,42,* purpose you can think of.  Constructing the exception in this
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,43,"* manner makes the exception behave in the normal way - i.e., as"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,44,"* documented in the class ""Throwable"".  The fields ""errorToken"","
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,45,"* ""expectedTokenSequences"", and ""tokenImage"" do not contain"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,46,* relevant information.  The JavaCC generated code does not use
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,47,* these constructors.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,50,public ParseException() {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,51,super();
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,52,specialConstructor = false;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,55,public ParseException(String message) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,56,super(message);
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,57,specialConstructor = false;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,61,* This variable determines which constructor was used to create
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,62,* this object and thereby affects the semantics of the
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,63,"* ""getMessage"" method (see below)."
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,65,protected boolean specialConstructor;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,68,* This is the last token that has been consumed successfully.  If
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,69,"* this object has been created due to a parse error, the token"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,70,* followng this token will (therefore) be the first error token.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,72,public Token currentToken;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,75,* Each entry in this array is an array of integers.  Each array
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,76,* of integers represents a sequence of tokens (by their ordinal
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,77,* values) that is expected at this point of the parse.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,79,public int[][] expectedTokenSequences;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,82,"* This is a reference to the ""tokenImage"" array of the generated"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,83,* parser within which the parse error occurred.  This array is
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,84,* defined in the generated ...Constants interface.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,86,public String[] tokenImage;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,89,* This method has the standard behavior when this object has been
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,90,"* created using the standard constructors.  Otherwise, it uses"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,91,"* ""currentToken"" and ""expectedTokenSequences"" to generate a parse"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,92,* error message and returns it.  If this object has been created
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,93,"* due to a parse error, and you do not catch it (it gets thrown"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,94,"* from the parser), then this method is called during the printing"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,95,"* of the final stack trace, and hence the correct error message"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,96,* gets displayed.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,98,public String getMessage() {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,99,if (!specialConstructor) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,100,return super.getMessage();
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,102,StringBuffer expected = new StringBuffer();
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,103,int maxSize = 0;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,104,for (int i = 0; i < expectedTokenSequences.length; i++) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,105,if (maxSize < expectedTokenSequences[i].length) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,106,maxSize = expectedTokenSequences[i].length;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,108,for (int j = 0; j < expectedTokenSequences[i].length; j++) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,109,"expected.append(tokenImage[expectedTokenSequences[i][j]]).append("" "");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,111,if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,112,"expected.append(""..."");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,114,"expected.append(eol).append(""    "");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,116,"String retval = ""Encountered \"""";"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,117,Token tok = currentToken.next;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,118,for (int i = 0; i < maxSize; i++) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,119,"if (i != 0) retval += "" "";"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,120,if (tok.kind == 0) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,121,retval += tokenImage[0];
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,122,break;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,124,retval += add_escapes(tok.image);
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,125,tok = tok.next;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,127,"retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,128,"retval += ""."" + eol;"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,129,if (expectedTokenSequences.length == 1) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,130,"retval += ""Was expecting:"" + eol + ""    "";"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,131,} else {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,132,"retval += ""Was expecting one of:"" + eol + ""    "";"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,134,retval += expected.toString();
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,135,return retval;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,139,* The end of line string for this machine.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,141,"protected String eol = System.getProperty(""line.separator"", ""\n"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,144,* Used to convert raw characters to their escaped version
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,145,* when these raw version cannot be used as part of an ASCII
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,146,* string literal.
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,148,protected String add_escapes(String str) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,149,StringBuffer retval = new StringBuffer();
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,150,char ch;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,151,for (int i = 0; i < str.length(); i++) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,152,switch (str.charAt(i))
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,154,case 0 :
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,155,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,156,case '\b':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,157,"retval.append(""\\b"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,158,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,159,case '\t':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,160,"retval.append(""\\t"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,161,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,162,case '\n':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,163,"retval.append(""\\n"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,164,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,165,case '\f':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,166,"retval.append(""\\f"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,167,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,168,case '\r':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,169,"retval.append(""\\r"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,170,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,171,"case '\""':"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,172,"retval.append(""\\\"""");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,173,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,174,case '\'':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,175,"retval.append(""\\\'"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,176,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,177,case '\\':
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,178,"retval.append(""\\\\"");"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,179,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,180,default:
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,181,if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,182,"String s = ""0000"" + Integer.toString(ch, 16);"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,183,"retval.append(""\\u"" + s.substring(s.length() - 4, s.length()));"
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,184,} else {
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,185,retval.append(ch);
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,187,continue;
True,gson/src/main/java/com/google/gson/ParseException.java,gson/src/main/java/com/google/gson/ParseException.java,190,return retval.toString();
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,20,* A simple utility class used to check method Preconditions.
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,22,* <pre>
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,23,* public long divideBy(long value) {
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,24,*   Preconditions.checkArgument(value != 0);
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,25,*   return this.value / value;
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,27,* </pre>
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,29,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,30,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,32,final class Preconditions {
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,33,public static void checkNotNull(Object obj) {
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,34,checkArgument(obj != null);
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,37,public static void checkArgument(boolean condition) {
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,38,if (!condition) {
True,gson/src/main/java/com/google/gson/Preconditions.java,gson/src/main/java/com/google/gson/Preconditions.java,39,"throw new IllegalArgumentException(""condition failed: "" + condition);"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,19,import java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,20,import java.lang.reflect.InvocationTargetException;
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,21,import java.lang.reflect.Method;
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,24,* Handles type conversion from some object to some primitive (or primitive
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,25,* wrapper instance).
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,29,final class PrimitiveTypeAdapter implements TypeAdapter {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,31,"@SuppressWarnings({""unchecked""})"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,32,"public <T> T adaptType(Object from, Class<T> to) {"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,33,Class<?> aClass = Primitives.wrap(to);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,34,if (Primitives.isWrapperType(aClass)) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,35,if (aClass == Character.class) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,36,String value = from.toString();
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,37,if (value.length() == 1) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,38,return (T) (Character) from.toString().charAt(0);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,39,} else {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,40,"throw new JsonParseException(""The value: "" + value + "" contains more than a character."");"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,44,try {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,45,Constructor<?> constructor = aClass.getConstructor(String.class);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,46,return (T) constructor.newInstance(from.toString());
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,47,} catch (NoSuchMethodException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,48,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,49,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,50,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,51,} catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,52,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,53,} catch (InstantiationException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,54,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,56,} else if (Enum.class.isAssignableFrom(to)) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,57,// Case where the type being adapted to is an Enum
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,58,// We will try to convert from.toString() to the enum
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,59,try {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,60,"Method valuesMethod = to.getMethod(""valueOf"", String.class);"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,61,"return (T) valuesMethod.invoke(null, from.toString());"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,62,} catch (NoSuchMethodException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,63,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,64,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,65,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,66,} catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,67,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,69,} else {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,70,throw new JsonParseException(
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,71,"""Can not adapt type "" + from.getClass() + "" to "" + to);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,19,import java.util.Collections;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,20,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,21,import java.util.Map;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,24,* Contains static utility methods pertaining to primitive types and their
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,25,* corresponding wrapper types.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,27,* @author Kevin Bourrillion
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,29,final class Primitives {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,30,private Primitives() {}
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,32,/** A map from primitive types to their corresponding wrapper types. */
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,33,"public static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPE;"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,35,/** A map from wrapper types to their corresponding primitive types. */
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,36,"public static final Map<Class<?>, Class<?>> WRAPPER_TO_PRIMITIVE_TYPE;"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,38,// Sad that we can't use a BiMap. :(
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,40,static {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,41,"Map<Class<?>, Class<?>> primToWrap = new HashMap<Class<?>, Class<?>>(16);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,42,"Map<Class<?>, Class<?>> wrapToPrim = new HashMap<Class<?>, Class<?>>(16);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,44,"add(primToWrap, wrapToPrim, boolean.class, Boolean.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,45,"add(primToWrap, wrapToPrim, byte.class, Byte.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,46,"add(primToWrap, wrapToPrim, char.class, Character.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,47,"add(primToWrap, wrapToPrim, double.class, Double.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,48,"add(primToWrap, wrapToPrim, float.class, Float.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,49,"add(primToWrap, wrapToPrim, int.class, Integer.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,50,"add(primToWrap, wrapToPrim, long.class, Long.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,51,"add(primToWrap, wrapToPrim, short.class, Short.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,52,"add(primToWrap, wrapToPrim, void.class, Void.class);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,54,PRIMITIVE_TO_WRAPPER_TYPE = Collections.unmodifiableMap(primToWrap);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,55,WRAPPER_TO_PRIMITIVE_TYPE = Collections.unmodifiableMap(wrapToPrim);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,58,"private static void add(Map<Class<?>, Class<?>> forward,"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,59,"Map<Class<?>, Class<?>> backward, Class<?> key, Class<?> value) {"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,60,"forward.put(key, value);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,61,"backward.put(value, key);"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,65,* Returns {@code true} if {@code type} is one of the nine
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,66,"* primitive-wrapper types, such as {@link Integer}."
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,68,* @see Class#isPrimitive
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,70,public static boolean isWrapperType(Class<?> type) {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,71,return WRAPPER_TO_PRIMITIVE_TYPE.containsKey(checkNotNull(type));
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,74,private static Class<?> checkNotNull(Class<?> type) {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,75,Preconditions.checkNotNull(type);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,76,return type;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,80,* Returns the corresponding wrapper type of {@code type} if it is a primitive
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,81,* type; otherwise returns {@code type} itself. Idempotent.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,82,* <pre>
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,83,*     wrap(int.class) == Integer.class
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,84,*     wrap(Integer.class) == Integer.class
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,85,*     wrap(String.class) == String.class
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,86,* </pre>
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,88,public static <T> Class<T> wrap(Class<T> type) {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,89,checkNotNull(type);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,91,// cast is safe: long.class and Long.class are both of type Class<Long>
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,92,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,93,Class<T> wrapped = (Class<T>) PRIMITIVE_TO_WRAPPER_TYPE.get(type);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,94,return (wrapped == null) ? type : wrapped;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,98,* Returns the corresponding primitive type of {@code type} if it is a
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,99,* wrapper type; otherwise returns {@code type} itself. Idempotent.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,100,* <pre>
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,101,*     unwrap(Integer.class) == int.class
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,102,*     unwrap(int.class) == int.class
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,103,*     unwrap(String.class) == String.class
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,104,* </pre>
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,106,public static <T> Class<T> unwrap(Class<T> type) {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,107,checkNotNull(type);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,109,// cast is safe: long.class and Long.class are both of type Class<Long>
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,110,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,111,Class<T> unwrapped = (Class<T>) WRAPPER_TO_PRIMITIVE_TYPE.get(type);
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,112,return (unwrapped == null) ? type : unwrapped;
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,20,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,24,* A mechanism for providing custom field naming in Gson.  This allows the client code to translate
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,25,* field names into a particular convention that is not supported as a normal Java field
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,26,"* declaration rules.  For example, Java does not support ""-"" characters in a field name."
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,30,abstract class RecursiveFieldNamingPolicy implements FieldNamingStrategy {
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,32,public final String translateName(Field f) {
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,33,Preconditions.checkNotNull(f);
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,34,"return translateName(f.getName(), f.getGenericType(), f.getAnnotations());"
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,38,* Performs the specific string translation.
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,40,* @param target the string object that will be manipulation/translated
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,41,* @param fieldType the actual type value of the field
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,42,* @param annotations the annotations set on the field
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,43,* @return the translated field name
True,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,gson/src/main/java/com/google/gson/RecursiveFieldNamingPolicy.java,45,"protected abstract String translateName(String target, Type fieldType, Annotation[] annotations);"
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,19,import com.google.gson.annotations.SerializedName;
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,21,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,24,* A {@link FieldNamingStrategy} that acts as a chain of responsibility.  If the
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,25,* {@link com.google.gson.annotations.SerializedName} annotation is applied to a field then this
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,26,* strategy will translate the name to the {@code serializedName.value()}; otherwise it delegates
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,27,* to the wrapped {@link FieldNamingStrategy}.
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,29,* <p>NOTE: this class performs JSON field name validation for any of the fields marked with
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,30,* an {@code @SerializedName} annotation.</p>
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,32,* @see SerializedName
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,34,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,36,class SerializedNameAnnotationInterceptingNamingPolicy implements FieldNamingStrategy {
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,37,private static final JsonFieldNameValidator fieldNameValidator = new JsonFieldNameValidator();
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,38,private final FieldNamingStrategy delegate;
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,40,public SerializedNameAnnotationInterceptingNamingPolicy(FieldNamingStrategy delegate) {
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,41,this.delegate = delegate;
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,44,public String translateName(Field f) {
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,45,Preconditions.checkNotNull(f);
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,46,SerializedName serializedName = f.getAnnotation(SerializedName.class);
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,47,if (serializedName != null) {
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,48,return fieldNameValidator.validate(serializedName.value());
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,49,} else {
True,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,gson/src/main/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicy.java,50,return delegate.translateName(f);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,1,/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 4.0 */
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,5,"* An implementation of interface CharStream, where the stream is assumed to"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,6,* contain only ASCII characters (without unicode processing).
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,9,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,10,final class SimpleCharStream
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,12,public static final boolean staticFlag = false;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,13,int bufsize;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,14,int available;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,15,int tokenBegin;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,16,public int bufpos = -1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,17,protected int bufline[];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,18,protected int bufcolumn[];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,20,protected int column = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,21,protected int line = 1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,23,protected boolean prevCharIsCR = false;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,24,protected boolean prevCharIsLF = false;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,26,protected java.io.Reader inputStream;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,28,protected char[] buffer;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,29,protected int maxNextCharInd = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,30,protected int inBuf = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,31,protected int tabSize = 8;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,33,protected void setTabSize(int i) { tabSize = i; }
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,34,protected int getTabSize(int i) { return tabSize; }
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,37,protected void ExpandBuff(boolean wrapAround)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,39,char[] newbuffer = new char[bufsize + 2048];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,40,int newbufline[] = new int[bufsize + 2048];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,41,int newbufcolumn[] = new int[bufsize + 2048];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,43,try
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,45,if (wrapAround)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,47,"System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,48,"System.arraycopy(buffer, 0, newbuffer,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,49,"bufsize - tokenBegin, bufpos);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,50,buffer = newbuffer;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,52,"System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,53,"System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,54,bufline = newbufline;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,56,"System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,57,"System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,58,bufcolumn = newbufcolumn;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,60,maxNextCharInd = (bufpos += (bufsize - tokenBegin));
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,62,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,64,"System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,65,buffer = newbuffer;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,67,"System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,68,bufline = newbufline;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,70,"System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,71,bufcolumn = newbufcolumn;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,73,maxNextCharInd = (bufpos -= tokenBegin);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,76,catch (Throwable t)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,78,throw new Error(t.getMessage());
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,82,bufsize += 2048;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,83,available = bufsize;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,84,tokenBegin = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,87,protected void FillBuff() throws java.io.IOException
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,89,if (maxNextCharInd == available)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,91,if (available == bufsize)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,93,if (tokenBegin > 2048)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,95,bufpos = maxNextCharInd = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,96,available = tokenBegin;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,98,else if (tokenBegin < 0)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,99,bufpos = maxNextCharInd = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,100,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,101,ExpandBuff(false);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,103,else if (available > tokenBegin)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,104,available = bufsize;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,105,else if ((tokenBegin - available) < 2048)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,106,ExpandBuff(true);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,107,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,108,available = tokenBegin;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,111,int i;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,112,try {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,113,"if ((i = inputStream.read(buffer, maxNextCharInd,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,114,available - maxNextCharInd)) == -1)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,116,inputStream.close();
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,117,throw new java.io.IOException();
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,119,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,120,maxNextCharInd += i;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,121,return;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,123,catch(java.io.IOException e) {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,124,--bufpos;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,125,backup(0);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,126,if (tokenBegin == -1)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,127,tokenBegin = bufpos;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,128,throw e;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,132,public char BeginToken() throws java.io.IOException
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,134,tokenBegin = -1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,135,char c = readChar();
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,136,tokenBegin = bufpos;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,138,return c;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,141,protected void UpdateLineColumn(char c)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,143,column++;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,145,if (prevCharIsLF)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,147,prevCharIsLF = false;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,148,line += (column = 1);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,150,else if (prevCharIsCR)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,152,prevCharIsCR = false;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,153,if (c == '\n')
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,155,prevCharIsLF = true;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,157,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,158,line += (column = 1);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,161,switch (c)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,163,case '\r' :
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,164,prevCharIsCR = true;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,165,break;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,166,case '\n' :
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,167,prevCharIsLF = true;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,168,break;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,169,case '\t' :
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,170,column--;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,171,column += (tabSize - (column % tabSize));
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,172,break;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,173,default :
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,174,break;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,177,bufline[bufpos] = line;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,178,bufcolumn[bufpos] = column;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,181,public char readChar() throws java.io.IOException
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,183,if (inBuf > 0)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,185,--inBuf;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,187,if (++bufpos == bufsize)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,188,bufpos = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,190,return buffer[bufpos];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,193,if (++bufpos >= maxNextCharInd)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,194,FillBuff();
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,196,char c = buffer[bufpos];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,198,UpdateLineColumn(c);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,199,return (c);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,203,* @deprecated
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,204,* @see #getEndColumn
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,207,public int getColumn() {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,208,return bufcolumn[bufpos];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,212,* @deprecated
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,213,* @see #getEndLine
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,216,public int getLine() {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,217,return bufline[bufpos];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,220,public int getEndColumn() {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,221,return bufcolumn[bufpos];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,224,public int getEndLine() {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,225,return bufline[bufpos];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,228,public int getBeginColumn() {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,229,return bufcolumn[tokenBegin];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,232,public int getBeginLine() {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,233,return bufline[tokenBegin];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,236,public void backup(int amount) {
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,238,inBuf += amount;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,239,if ((bufpos -= amount) < 0)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,240,bufpos += bufsize;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,243,"public SimpleCharStream(java.io.Reader dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,244,"int startcolumn, int buffersize)"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,246,inputStream = dstream;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,247,line = startline;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,248,column = startcolumn - 1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,250,available = bufsize = buffersize;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,251,buffer = new char[buffersize];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,252,bufline = new int[buffersize];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,253,bufcolumn = new int[buffersize];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,256,"public SimpleCharStream(java.io.Reader dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,257,int startcolumn)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,259,"this(dstream, startline, startcolumn, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,262,public SimpleCharStream(java.io.Reader dstream)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,264,"this(dstream, 1, 1, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,266,"public void ReInit(java.io.Reader dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,267,"int startcolumn, int buffersize)"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,269,inputStream = dstream;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,270,line = startline;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,271,column = startcolumn - 1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,273,if (buffer == null || buffersize != buffer.length)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,275,available = bufsize = buffersize;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,276,buffer = new char[buffersize];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,277,bufline = new int[buffersize];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,278,bufcolumn = new int[buffersize];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,280,prevCharIsLF = prevCharIsCR = false;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,281,tokenBegin = inBuf = maxNextCharInd = 0;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,282,bufpos = -1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,285,"public void ReInit(java.io.Reader dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,286,int startcolumn)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,288,"ReInit(dstream, startline, startcolumn, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,291,public void ReInit(java.io.Reader dstream)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,293,"ReInit(dstream, 1, 1, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,295,"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,296,"int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,298,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,301,"public SimpleCharStream(java.io.InputStream dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,302,"int startcolumn, int buffersize)"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,304,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,307,"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,308,int startcolumn) throws java.io.UnsupportedEncodingException
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,310,"this(dstream, encoding, startline, startcolumn, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,313,"public SimpleCharStream(java.io.InputStream dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,314,int startcolumn)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,316,"this(dstream, startline, startcolumn, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,319,"public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,321,"this(dstream, encoding, 1, 1, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,324,public SimpleCharStream(java.io.InputStream dstream)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,326,"this(dstream, 1, 1, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,329,"public void ReInit(java.io.InputStream dstream, String encoding, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,330,"int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,332,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,335,"public void ReInit(java.io.InputStream dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,336,"int startcolumn, int buffersize)"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,338,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,341,"public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,343,"ReInit(dstream, encoding, 1, 1, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,346,public void ReInit(java.io.InputStream dstream)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,348,"ReInit(dstream, 1, 1, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,350,"public void ReInit(java.io.InputStream dstream, String encoding, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,351,int startcolumn) throws java.io.UnsupportedEncodingException
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,353,"ReInit(dstream, encoding, startline, startcolumn, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,355,"public void ReInit(java.io.InputStream dstream, int startline,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,356,int startcolumn)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,358,"ReInit(dstream, startline, startcolumn, 4096);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,360,public String GetImage()
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,362,if (bufpos >= tokenBegin)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,363,"return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,364,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,365,"return new String(buffer, tokenBegin, bufsize - tokenBegin) +"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,366,"new String(buffer, 0, bufpos + 1);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,369,public char[] GetSuffix(int len)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,371,char[] ret = new char[len];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,373,if ((bufpos + 1) >= len)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,374,"System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,375,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,377,"System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,378,len - bufpos - 1);
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,379,"System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,382,return ret;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,385,public void Done()
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,387,buffer = null;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,388,bufline = null;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,389,bufcolumn = null;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,393,* Method to adjust line and column numbers for the start of a token.
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,395,"public void adjustBeginLineColumn(int newLine, int newCol)"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,397,int start = tokenBegin;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,398,int len;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,400,if (bufpos >= tokenBegin)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,402,len = bufpos - tokenBegin + inBuf + 1;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,404,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,406,len = bufsize - tokenBegin + bufpos + 1 + inBuf;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,409,"int i = 0, j = 0, k = 0;"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,410,"int nextColDiff = 0, columnDiff = 0;"
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,412,while (i < len &&
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,413,bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,415,bufline[j] = newLine;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,416,nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,417,bufcolumn[j] = newCol + columnDiff;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,418,columnDiff = nextColDiff;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,419,i++;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,422,if (i < len)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,424,bufline[j] = newLine++;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,425,bufcolumn[j] = newCol + columnDiff;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,427,while (i++ < len)
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,429,if (bufline[j = start % bufsize] != bufline[++start % bufsize])
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,430,bufline[j] = newLine++;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,431,else
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,432,bufline[j] = newLine;
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,436,line = bufline[j];
True,gson/src/main/java/com/google/gson/SimpleCharStream.java,gson/src/main/java/com/google/gson/SimpleCharStream.java,437,column = bufcolumn[j];
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,1,/* Generated By:JavaCC: Do not edit this line. Token.java Version 3.0 */
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,5,* Describes the input token stream.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,8,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,9,final class Token {
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,12,* An integer that describes the kind of this token.  This numbering
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,13,"* system is determined by JavaCCParser, and a table of these numbers is"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,14,* stored in the file ...Constants.java.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,16,public int kind;
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,19,* beginLine and beginColumn describe the position of the first character
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,20,* of this token; endLine and endColumn describe the position of the
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,21,* last character of this token.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,23,"public int beginLine, beginColumn, endLine, endColumn;"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,26,* The string image of the token.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,28,public String image;
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,31,* A reference to the next regular (non-special) token from the input
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,32,"* stream.  If this is the last token from the input stream, or if the"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,33,"* token manager has not read tokens beyond this one, this field is"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,34,* set to null.  This is true only if this token is also a regular
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,35,"* token.  Otherwise, see below for a description of the contents of"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,36,* this field.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,38,public Token next;
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,41,* This field is used to access special tokens that occur prior to this
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,42,"* token, but after the immediately preceding regular (non-special) token."
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,43,"* If there are no such special tokens, this field is set to null."
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,44,"* When there are more than one such special token, this field refers"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,45,"* to the last of these special tokens, which in turn refers to the next"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,46,"* previous special token through its specialToken field, and so on"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,47,* until the first special token (whose specialToken field is null).
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,48,* The next fields of special tokens refer to other special tokens that
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,49,* immediately follow it (without an intervening regular token).  If there
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,50,"* is no such token, this field is null."
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,52,public Token specialToken;
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,55,* Returns the image.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,57,public String toString()
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,59,return image;
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,63,"* Returns a new Token object, by default. However, if you want, you"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,64,* can create and return subclass objects based on the value of ofKind.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,65,* Simply add the cases to the switch for all those special cases.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,66,"* For example, if you have a subclass of Token called IDToken that"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,67,"* you want to create if ofKind is ID, simlpy add something like :"
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,69,*    case MyParserConstants.ID : return new IDToken();
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,71,* to the following switch statement. Then you can cast matchedToken
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,72,* variable to the appropriate type and use it in your lexical actions.
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,74,public static final Token newToken(int ofKind)
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,76,switch(ofKind)
True,gson/src/main/java/com/google/gson/Token.java,gson/src/main/java/com/google/gson/Token.java,78,default : return new Token();
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,1,/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 3.0 */
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,2,package com.google.gson;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,4,"@SuppressWarnings(""all"")"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,5,final class TokenMgrError extends Error
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,8,* Ordinals for various reasons why an Error of this type can be thrown.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,12,* Lexical error occured.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,14,static final int LEXICAL_ERROR = 0;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,17,* An attempt wass made to create a second instance of a static token manager.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,19,static final int STATIC_LEXER_ERROR = 1;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,22,* Tried to change to an invalid lexical state.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,24,static final int INVALID_LEXICAL_STATE = 2;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,27,* Detected (and bailed out of) an infinite loop in the token manager.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,29,static final int LOOP_DETECTED = 3;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,32,* Indicates the reason why the exception is thrown. It will have
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,33,* one of the above 4 values.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,35,int errorCode;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,38,* Replaces unprintable characters by their espaced (or unicode escaped)
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,39,* equivalents in the given string
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,41,protected static final String addEscapes(String str) {
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,42,StringBuffer retval = new StringBuffer();
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,43,char ch;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,44,for (int i = 0; i < str.length(); i++) {
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,45,switch (str.charAt(i))
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,47,case 0 :
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,48,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,49,case '\b':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,50,"retval.append(""\\b"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,51,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,52,case '\t':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,53,"retval.append(""\\t"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,54,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,55,case '\n':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,56,"retval.append(""\\n"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,57,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,58,case '\f':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,59,"retval.append(""\\f"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,60,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,61,case '\r':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,62,"retval.append(""\\r"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,63,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,64,"case '\""':"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,65,"retval.append(""\\\"""");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,66,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,67,case '\'':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,68,"retval.append(""\\\'"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,69,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,70,case '\\':
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,71,"retval.append(""\\\\"");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,72,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,73,default:
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,74,if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,75,"String s = ""0000"" + Integer.toString(ch, 16);"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,76,"retval.append(""\\u"" + s.substring(s.length() - 4, s.length()));"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,77,} else {
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,78,retval.append(ch);
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,80,continue;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,83,return retval.toString();
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,87,* Returns a detailed message for the Error when it is thrown by the
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,88,* token manager to indicate a lexical error.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,89,* Parameters :
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,90,*    EOFSeen     : indicates if EOF caused the lexicl error
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,91,*    curLexState : lexical state in which this error occured
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,92,*    errorLine   : line number when the error occured
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,93,*    errorColumn : column number when the error occured
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,94,*    errorAfter  : prefix that was seen before this error occured
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,95,*    curchar     : the offending character
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,96,* Note: You can customize the lexical error message by modifying this method.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,98,"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,99,"return(""Lexical error at line "" +"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,100,"errorLine + "", column "" +"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,101,"errorColumn + "".  Encountered: "" +"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,102,"(EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int)curChar + ""), "") +"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,103,"""after : \"""" + addEscapes(errorAfter) + ""\"""");"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,107,* You can also modify the body of this method to customize your error messages.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,108,"* For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,109,"* of end-users concern, so you can return something like :"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,111,"*     ""Internal Error : Please file a bug report .... """
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,113,* from this method for such cases in the release version of your parser.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,115,public String getMessage() {
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,116,return super.getMessage();
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,120,* Constructors of various flavors follow.
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,123,public TokenMgrError() {
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,126,"public TokenMgrError(String message, int reason) {"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,127,super(message);
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,128,errorCode = reason;
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,131,"public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {"
True,gson/src/main/java/com/google/gson/TokenMgrError.java,gson/src/main/java/com/google/gson/TokenMgrError.java,132,"this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,20,"* This class is responsible for adapting/converting an particular ""from"""
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,21,"* instance to an instance of type ""to""."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,23,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,25,interface TypeAdapter {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,28,"* Adapts an object instance ""from"" to and instance of type ""to""."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,30,* @param from the object to adapt
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,31,* @param to the Type/Class which this will convert to
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,32,"* @return the converted ""from"" instance to type ""to"""
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,34,"public <T> T adaptType(Object from, Class<T> to);"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,20,"* This class implements the {@link TypeAdapter} interface; however, if the"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,21,* from instance type is the same as the to type then this object will
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,22,"* terminate the chain early and return the ""from"" object to the calling"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,23,* class.
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,25,* If the incoming object does need some kind of conversion then this object
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,26,* will delegate to the {@link TypeAdapter} that it is wrapping.
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,30,final class TypeAdapterNotRequired implements TypeAdapter {
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,32,private final TypeAdapter delegate;
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,35,* Constructs a TypeAdapterNotRequired that will wrap the delegate instance
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,36,* that is passed in.
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,38,* @param delegate the TypeConverter to delegate to if this instance can
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,39,*        not handle the type adapting (can not be null)
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,41,TypeAdapterNotRequired(TypeAdapter delegate) {
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,42,Preconditions.checkNotNull(delegate);
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,43,this.delegate = delegate;
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,46,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,47,"public <T> T adaptType(Object from, Class<T> to) {"
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,48,if (to.isAssignableFrom(from.getClass())) {
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,49,return (T) from;
True,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,51,"return delegate.adaptType(from, to);"
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,20,import java.util.Collection;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,23,* Class that provides information relevant to different parts of a type.
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,25,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,26,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,28,class TypeInfo {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,29,protected final Type actualType;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,30,protected final Class<?> rawClass;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,32,TypeInfo(Type actualType) {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,33,this.actualType = actualType;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,34,rawClass = TypeUtils.toRawClass(actualType);
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,37,public final Type getActualType() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,38,return actualType;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,42,* Returns the corresponding wrapper type of {@code type} if it is a primitive
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,43,* type; otherwise returns {@code type} itself. Idempotent.
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,44,* <pre>
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,45,*     wrap(int.class) == Integer.class
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,46,*     wrap(Integer.class) == Integer.class
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,47,*     wrap(String.class) == String.class
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,48,* </pre>
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,50,public final Class<?> getWrappedClass() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,51,return Primitives.wrap(rawClass);
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,55,* @return the raw class associated with this type
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,57,public final Class<?> getRawClass() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,58,return rawClass;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,61,public final boolean isCollectionOrArray() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,62,return Collection.class.isAssignableFrom(rawClass) || isArray();
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,65,public final boolean isArray() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,66,return TypeUtils.isArray(rawClass);
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,69,public final boolean isEnum() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,70,return rawClass.isEnum();
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,73,public final boolean isPrimitive() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,74,return Primitives.isWrapperType(Primitives.wrap(rawClass));
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,77,public final boolean isString() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,78,return rawClass == String.class;
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,81,public final boolean isPrimitiveOrStringAndNotAnArray() {
True,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,82,return (isPrimitive() || isString()) && !isArray();
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,19,import java.lang.reflect.GenericArrayType;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,23,* Class to extract information about types used to define a generic array.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,25,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,26,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,28,final class TypeInfoArray extends TypeInfo {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,29,private final Class<?> componentRawType;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,30,private final Type secondLevel;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,32,TypeInfoArray(Type type) {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,33,super(type);
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,34,Class<?> rootComponentType = rawClass;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,35,while (rootComponentType.isArray()) {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,36,rootComponentType = rootComponentType.getComponentType();
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,38,this.componentRawType = rootComponentType;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,39,"this.secondLevel = extractSecondLevelType(actualType, rawClass);"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,42,"private static Type extractSecondLevelType(Type actualType, Class<?> rawClass) {"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,43,if (actualType instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,44,GenericArrayType castedType = (GenericArrayType) actualType;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,45,return castedType.getGenericComponentType();
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,46,} else {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,47,return rawClass.getComponentType();
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,52,* @return the raw type unwrapped of the second level of array.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,53,"* If the object is (single-dimensional or multi-dimensional) array, it is the class of the"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,54,"* elements of the array. For example, this method returns Foo.class for Foo[]."
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,55,"* It will return Foo[].class for Foo[][].  For Foo<String>[][] types, it will return the type"
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,56,* representing Foo<String>[] (i.e. {@code new TypeToken<Foo<String>[]>() {}.getType()}).
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,58,public Type getSecondLevelType() {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,59,return secondLevel;
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,63,* @return the raw type of the root component.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,64,* If the object is a single-dimensional array then the component type is the class of an
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,65,* element of the array.
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,66,* If the object is a multi-dimensional array then the component type is the class of the
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,67,"* inner-most array element. For example, the This method will return Foo.class for Foo[][][]."
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,69,public Class<?> getComponentRawType() {
True,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,70,return componentRawType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,20,import java.lang.reflect.GenericArrayType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,21,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,22,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,23,import java.lang.reflect.TypeVariable;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,24,import java.lang.reflect.WildcardType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,27,"* A static factory class used to construct the ""TypeInfo"" objects."
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,29,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,30,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,32,final class TypeInfoFactory {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,34,private TypeInfoFactory() {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,35,// Not instantiable since it provides factory methods only.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,38,public static TypeInfoArray getTypeInfoForArray(Type type) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,39,Preconditions.checkArgument(TypeUtils.isArray(type));
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,40,return new TypeInfoArray(type);
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,44,"* Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,45,"* ""TypeVariable"" in a parameterized type then it evaluates the real type."
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,47,* @param f the actual field object to retrieve the type from
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,48,* @param typeDefiningF the type that contains the field {@code f}
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,49,* @return the type information for the field
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,51,"public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,52,Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,53,Type type = f.getGenericType();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,54,"Type actualType = getActualType(type, typeDefiningF, classDefiningF);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,55,return new TypeInfo(actualType);
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,58,private static Type getActualType(
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,59,"Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,60,if (typeToEvaluate instanceof Class) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,61,return typeToEvaluate;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,62,} else if (typeToEvaluate instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,63,ParameterizedType castedType = (ParameterizedType) typeToEvaluate;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,64,Type owner = castedType.getOwnerType();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,65,Type[] actualTypeParameters =
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,66,"extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,67,Type rawType = castedType.getRawType();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,68,"return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,69,} else if (typeToEvaluate instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,70,GenericArrayType castedType = (GenericArrayType) typeToEvaluate;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,71,Type componentType = castedType.getGenericComponentType();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,72,"Type actualType = getActualType(componentType, parentType, rawParentClass);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,73,if (componentType.equals(actualType)) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,74,return castedType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,75,} else {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,76,if (actualType instanceof Class) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,77,return TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType));
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,78,} else {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,79,return new GenericArrayTypeImpl(actualType);
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,82,} else if (typeToEvaluate instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,83,// The class definition has the actual types used for the type variables.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,84,// Find the matching actual type for the Type Variable used for the field.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,85,"// For example, class Foo<A> { A a; }"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,86,// new Foo<Integer>(); defines the actual type of A to be Integer.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,87,"// So, to find the type of the field a, we will have to look at the class'"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,88,// actual type arguments.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,89,TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,90,TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,91,ParameterizedType objParameterizedType = (ParameterizedType) parentType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,92,"int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,93,Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,94,return actualTypeArguments[indexOfActualTypeArgument];
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,95,} else if (typeToEvaluate instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,96,WildcardType castedType = (WildcardType) typeToEvaluate;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,97,"return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,98,} else {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,99,"throw new IllegalArgumentException(""Type \'"" + typeToEvaluate + ""\' is not a Class, """
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,100,"+ ""ParameterizedType, GenericArrayType or TypeVariable. Can't extract type."");"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,104,private static Type[] extractRealTypes(
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,105,"Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,106,Preconditions.checkNotNull(actualTypeArguments);
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,108,Type[] retTypes = new Type[actualTypeArguments.length];
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,109,for (int i = 0; i < actualTypeArguments.length; ++i) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,110,"retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,112,return retTypes;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,115,"private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) {"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,116,for (int i = 0; i < types.length; ++i) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,117,if (type.equals(types[i])) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,118,return i;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,121,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,122,"""How can the type variable not be present in the class declaration!"");"
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,19,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,21,import java.util.Map;
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,24,* A convenience object for retrieving the map type information.
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,29,final class TypeInfoMap {
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,30,private final ParameterizedType mapType;
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,32,public TypeInfoMap(Type mapType) {
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,33,if (!(mapType instanceof ParameterizedType)) {
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,34,throw new IllegalArgumentException(
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,35,"""Map objects need to be parameterized unless you use a custom serializer. """
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,36,"+ ""Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType."");"
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,38,TypeInfo rawType = new TypeInfo(mapType);
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,39,Preconditions.checkArgument(Map.class.isAssignableFrom(rawType.getRawClass()));
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,40,this.mapType = (ParameterizedType) mapType;
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,43,public Type getKeyType() {
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,44,return mapType.getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,47,public Type getValueType() {
True,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,48,return mapType.getActualTypeArguments()[1];
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,19,import java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,20,import java.lang.reflect.GenericArrayType;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,21,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,22,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,25,* Utility class containing some methods for obtaining information on types.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,30,final class TypeUtils {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,33,* Returns the actual type matching up with the first type variable.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,34,"* So, for a {@code typeInfo} instance defined as:"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,35,* <pre>
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,36,"*   class Foo<A, B> {"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,38,"*   Type fooType = new TypeToken<Foo<Integer, String>>() {}.getType();"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,39,* </pre>
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,40,* <code>TypeUtils.getActualTypeForFirstTypeVariable(fooType)</code> will return Integer.class.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,42,static Type getActualTypeForFirstTypeVariable(Type type) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,43,if (type instanceof Class) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,44,return Object.class;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,45,} else if (type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,46,return ((ParameterizedType)type).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,47,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,48,return getActualTypeForFirstTypeVariable(((GenericArrayType)type).getGenericComponentType());
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,49,} else {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,50,"throw new IllegalArgumentException(""Type \'"" + type + ""\' is not a Class, """
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,51,"+ ""ParameterizedType, or GenericArrayType. Can't extract class."");"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,55,static boolean isArray(Type type) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,56,if (type instanceof Class) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,57,return ((Class<?>)type).isArray();
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,58,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,59,return true;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,60,} else {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,61,return false;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,66,* This method returns the actual raw class associated with the specified type.
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,68,static Class<?> toRawClass(Type type) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,69,if (type instanceof Class) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,70,return (Class<?>) type;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,71,} else if (type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,72,ParameterizedType actualType = (ParameterizedType)type;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,73,return toRawClass(actualType.getRawType());
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,74,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,75,GenericArrayType actualType = (GenericArrayType) type;
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,76,Class<?> rawClass = toRawClass(actualType.getGenericComponentType());
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,77,return wrapWithArray(rawClass);
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,78,} else {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,79,"throw new IllegalArgumentException(""Type \'"" + type + ""\' is not a Class, """
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,80,"+ ""ParameterizedType, or GenericArrayType. Can't extract class."");"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,84,static Class<?> wrapWithArray(Class<?> rawClass) {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,85,"return Array.newInstance(rawClass, 0).getClass();"
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,88,private TypeUtils() {
True,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,89,"// Class with just some static utility methods, should not be instantiated"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,19,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,23,* A {@link FieldNamingStrategy} that ensures the JSON field names consist of only
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,24,* upper case letters.
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,26,* <p>The following is an example:</p>
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,27,* <pre>
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,28,* class IntWrapper {
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,29,*   public int integerField = 0;
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,32,* UpperCaseNamingPolicy policy = new UpperCaseNamingPolicy();
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,33,* String translatedFieldName =
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,34,"*     policy.translateName(IntWrapper.class.getField(""integerField""));"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,36,"* assert(""INTEGERFIELD"".equals(translatedFieldName));"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,37,* </pre>
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,39,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,41,class UpperCaseNamingPolicy extends RecursiveFieldNamingPolicy {
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,43,@Override
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,44,"protected String translateName(String target, Type fieldType, Annotation[] annotations) {"
True,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,gson/src/main/java/com/google/gson/UpperCaseNamingPolicy.java,45,return target.toUpperCase();
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,20,* Class contain all constants for versioning support.
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,22,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,24,final class VersionConstants {
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,25,// Prevent instantiation
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,26,private VersionConstants() { }
True,gson/src/main/java/com/google/gson/VersionConstants.java,gson/src/main/java/com/google/gson/VersionConstants.java,28,static final double IGNORE_VERSIONS = -1D;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,19,import com.google.gson.annotations.Since;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,21,import java.lang.annotation.Annotation;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,22,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,25,* This strategy will exclude any files and/or class that are passed the
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,26,* {@link #version} value.
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,30,final class VersionExclusionStrategy implements ExclusionStrategy {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,31,private final double version;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,33,public VersionExclusionStrategy(double version) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,34,Preconditions.checkArgument(version >= 0.0D);
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,35,this.version = version;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,38,public boolean shouldSkipField(Field f) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,39,return !isValidVersion(f.getAnnotations());
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,42,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,43,return !isValidVersion(clazz.getAnnotations());
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,46,private boolean isValidVersion(Annotation[] annotations) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,47,for (Annotation annotation : annotations) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,48,if (annotation instanceof Since) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,49,double annotationVersion = ((Since) annotation).value();
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,50,if (annotationVersion > version) {
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,51,return false;
True,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,gson/src/main/java/com/google/gson/VersionExclusionStrategy.java,55,return true;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,17,package com.google.gson.annotations;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,19,import java.lang.annotation.ElementType;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,20,import java.lang.annotation.Retention;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,21,import java.lang.annotation.RetentionPolicy;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,22,import java.lang.annotation.Target;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,25,* An annotation that indicates this member should be exposed for JSON
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,26,* serialization or deserialization.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,28,* <p>This annotation has no effect unless you build {@link com.google.gson.Gson}
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,29,* with a {@link com.google.gson.GsonBuilder} and invoke
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,30,* {@link com.google.gson.GsonBuilder#excludeFieldsWithoutExposeAnnotation()}
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,31,* method.</p>
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,33,* <p>Here is an example of how this annotation is meant to be used:
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,34,* <p><pre>
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,35,* public class User {
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,36,*   &#64Expose private String firstName;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,37,*   &#64Expose private String lastName;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,38,*   &#64Expose private String emailAddress;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,39,*   private String password;
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,41,* </pre></p>
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,42,"* If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,43,"* methods will use the {@code password} field along-with {@code firstName}, {@code lastName},"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,44,"* and {@code emailAddress} for serialization and deserialization. However, if you created Gson"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,45,* with {@code Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()}
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,46,* then the {@code toJson()} and {@code fromJson()} methods of Gson will exclude the
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,47,* {@code password} field. This is because the {@code password} field is not marked with the
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,48,* {@code @Expose} annotation.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,50,* <p>Note that another way to achieve the same effect would have been to just mark the
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,51,"* {@code password} field as {@code transient}, and Gson would have excluded it even with default"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,52,* settings. The {@code @Expose} annotation is useful in a style of programming where you want to
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,53,* explicitly specify all fields that should get considered for serialization or deserialization.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,55,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,57,@Retention(RetentionPolicy.RUNTIME)
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,58,@Target(ElementType.FIELD)
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,59,public @interface Expose {
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,60,// This is a marker annotation with no additional properties
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,17,package com.google.gson.annotations;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,19,import java.lang.annotation.ElementType;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,20,import java.lang.annotation.Retention;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,21,import java.lang.annotation.RetentionPolicy;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,22,import java.lang.annotation.Target;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,25,* An annotation that indicates this member should be serialized to JSON with
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,26,* the provided name value as its field name.
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,28,"* <p>This annotation will override any {@link com.google.gson.FieldNamingPolicy}, including"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,29,"* the default field naming policy, that may have been set on the {@link com.google.gson.Gson}"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,30,* instance.  A different naming policy can set using the {@code GsonBuilder} class.  See
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,31,* {@link com.google.gson.GsonBuilder#setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)}
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,32,* for more information.</p>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,34,* <p>Here is an example of how this annotation is meant to be used:</p>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,35,* <pre>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,36,* public class SomeClassWithFields {
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,37,"*   &#64SerializedName(""name"") private final String someField;"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,38,*   private final String someOtherField;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,40,"*   public SomeClassWithFields(String a, String b) {"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,41,*     this.someField = a;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,42,*     this.someOtherField = b;
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,45,* </pre>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,47,* <p>The following shows the output that is generated when serializing an instance of the
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,48,* above example class:</p>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,49,* <pre>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,50,"* SomeClassWithFields objectToSerialize = new SomeClassWithFields(""a"", ""b"");"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,51,* Gson gson = new Gson();
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,52,* String jsonRepresentation = gson.toJson(objectToSerialize);
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,53,* System.out.println(jsonRepresentation);
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,55,* ===== OUTPUT =====
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,56,"* {""name"":""a"",""someOtherField"":""b""}"
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,57,* </pre>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,59,* <p>NOTE: The value you specify in this annotation must be a valid JSON field name.</p>
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,61,* @see com.google.gson.FieldNamingPolicy
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,63,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,65,@Retention(RetentionPolicy.RUNTIME)
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,66,@Target(ElementType.FIELD)
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,67,public @interface SerializedName {
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,70,* @return the desired name of the field when it is serialized
True,gson/src/main/java/com/google/gson/annotations/SerializedName.java,gson/src/main/java/com/google/gson/annotations/SerializedName.java,72,String value();
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,17,package com.google.gson.annotations;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,19,import java.lang.annotation.ElementType;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,20,import java.lang.annotation.Retention;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,21,import java.lang.annotation.RetentionPolicy;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,22,import java.lang.annotation.Target;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,25,* An annotation that indicates the version number since a member or a type has been present.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,26,* This annotation is useful to manage versioning of your Json classes for a web-service.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,28,* <p>
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,29,* This annotation has no effect unless you build {@link com.google.gson.Gson} with a
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,30,* {@link com.google.gson.GsonBuilder} and invoke
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,31,* {@link com.google.gson.GsonBuilder#setVersion(double)} method.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,33,* <p>Here is an example of how this annotation is meant to be used:</p>
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,34,* <pre>
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,35,* public class User {
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,36,*   private String firstName;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,37,*   private String lastName;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,38,*   &#64Since(1.0) private String emailAddress;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,39,*   &#64Since(1.0) private String password;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,40,*   &#64Since(1.1) private Address address;
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,42,* </pre>
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,44,"* <p>If you created Gson with {@code new Gson()}, the {@code toJson()} and {@code fromJson()}"
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,45,"* methods will use all the fields for serialization and deserialization. However, if you created"
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,46,* Gson with {@code Gson gson = new GsonBuilder().setVersion(1.0).create()} the the
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,47,* {@code toJson()} and {@code fromJson()} methods of Gson will exclude the {@code address} field
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,48,* since it's version number is set to {@code 1.1}.</p>
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,50,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,52,@Retention(RetentionPolicy.RUNTIME)
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,53,"@Target({ElementType.FIELD, ElementType.TYPE})"
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,54,public @interface Since {
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,56,* the value indicating a version number since this member
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,57,* or type has been present.
True,gson/src/main/java/com/google/gson/annotations/Since.java,gson/src/main/java/com/google/gson/annotations/Since.java,59,double value();
True,gson/src/main/java/com/google/gson/annotations/package-info.java,gson/src/main/java/com/google/gson/annotations/package-info.java,2,* This package provides annotations that can be used with {@link com.google.gson.Gson}.
True,gson/src/main/java/com/google/gson/annotations/package-info.java,gson/src/main/java/com/google/gson/annotations/package-info.java,4,"* @author Inderjeet Singh, Joel Leitch"
True,gson/src/main/java/com/google/gson/annotations/package-info.java,gson/src/main/java/com/google/gson/annotations/package-info.java,6,package com.google.gson.annotations;
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,2,* This package provides the {@link com.google.gson.Gson} class to convert Json to Java and
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,3,* vice-versa.
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,5,* <p>The primary class to use is {@link com.google.gson.Gson} which can be constructed with
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,6,* {@code new Gson()} (using default settings) or by using {@link com.google.gson.GsonBuilder}
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,7,* (to configure various options such as using versioning and so on).</p>
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,9,"* @author Inderjeet Singh, Joel Leitch"
True,gson/src/main/java/com/google/gson/package-info.java,gson/src/main/java/com/google/gson/package-info.java,11,package com.google.gson;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,17,package com.google.gson.reflect;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,19,import java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,20,import java.lang.reflect.GenericArrayType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,21,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,22,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,23,import java.lang.reflect.TypeVariable;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,24,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,25,import java.util.Map;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,28,* Represents a generic type {@code T}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,30,"* You can use this class to get the generic type for a class. For example,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,31,"* to get the generic type for <code>Collection&lt;Foo&gt;</code>, you can use:"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,32,* <p>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,33,* <code>Type typeOfCollectionOfFoo = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType()
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,34,* </code>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,36,* <p>Assumes {@code Type} implements {@code equals()} and {@code hashCode()}
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,37,* as a value (as opposed to identity) comparison.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,39,* Also implements {@link #isAssignableFrom(Type)} to check type-safe
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,40,* assignability.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,42,* @author Bob Lee
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,43,* @author Sven Mawson
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,45,public abstract class TypeToken<T> {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,47,final Class<? super T> rawType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,48,final Type type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,51,* Constructs a new type token. Derives represented class from type
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,52,* parameter.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,54,* <p>Clients create an empty anonymous subclass. Doing so embeds the type
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,55,* parameter in the anonymous class's type hierarchy so we can reconstitute
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,56,* it at runtime despite erasure.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,58,* <p>For example:
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,59,* <code>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,60,* {@literal TypeToken<List<String>> t = new TypeToken<List<String>>}(){}
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,61,* </code>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,63,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,64,protected TypeToken() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,65,this.type = getSuperclassTypeParameter(getClass());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,66,this.rawType = (Class<? super T>) getRawType(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,70,* Unsafe. Constructs a type token manually.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,72,"@SuppressWarnings({""unchecked""})"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,73,private TypeToken(Type type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,74,"this.rawType = (Class<? super T>) getRawType(nonNull(type, ""type""));"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,75,this.type = type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,78,"private static <T> T nonNull(T o, String message) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,79,if (o == null) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,80,throw new NullPointerException(message);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,82,return o;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,86,* Gets type from super class's type parameter.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,88,static Type getSuperclassTypeParameter(Class<?> subclass) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,89,Type superclass = subclass.getGenericSuperclass();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,90,if (superclass instanceof Class) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,91,"throw new RuntimeException(""Missing type parameter."");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,93,return ((ParameterizedType) superclass).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,97,* Gets type token from super class's type parameter.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,99,static TypeToken<?> fromSuperclassTypeParameter(Class<?> subclass) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,100,return new SimpleTypeToken<Object>(subclass);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,103,private static Class<?> getRawType(Type type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,104,if (type instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,105,// type is a normal class.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,106,return (Class<?>) type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,107,} else if (type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,108,ParameterizedType parameterizedType = (ParameterizedType) type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,110,// I'm not exactly sure why getRawType() returns Type instead of Class.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,111,// Neal isn't either but suspects some pathological case related
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,112,// to nested classes exists.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,113,Type rawType = parameterizedType.getRawType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,114,if (rawType instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,115,return (Class<?>) rawType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,117,"throw buildUnexpectedTypeError(rawType, Class.class);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,118,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,119,GenericArrayType genericArrayType = (GenericArrayType) type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,121,// TODO(jleitch): This is not the most efficient way to handle generic
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,122,"// arrays, but is there another way to extract the array class in a"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,123,"// non-hacky way (i.e. using String value class names- ""[L..."")?"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,124,Object rawArrayType = Array.newInstance(
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,125,"getRawType(genericArrayType.getGenericComponentType()), 0);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,126,return rawArrayType.getClass();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,127,} else {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,128,throw buildUnexpectedTypeError(
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,129,"type, ParameterizedType.class, GenericArrayType.class);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,134,* Gets the raw type.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,136,public Class<? super T> getRawType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,137,return rawType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,141,* Gets underlying {@code Type} instance.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,143,public Type getType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,144,return type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,148,* Check if this type is assignable from the given class object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,150,public boolean isAssignableFrom(Class<?> cls) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,151,return isAssignableFrom((Type) cls);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,155,* Check if this type is assignable from the given Type.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,157,public boolean isAssignableFrom(Type from) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,158,if (from == null) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,159,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,162,if (type.equals(from)) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,163,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,166,if (type instanceof Class) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,167,return rawType.isAssignableFrom(getRawType(from));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,168,} else if (type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,169,"return isAssignableFrom(from, (ParameterizedType) type,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,170,"new HashMap<String, Type>());"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,171,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,172,return rawType.isAssignableFrom(getRawType(from))
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,173,"&& isAssignableFrom(from, (GenericArrayType) type);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,174,} else {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,175,throw buildUnexpectedTypeError(
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,176,"type, Class.class, ParameterizedType.class, GenericArrayType.class);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,181,* Check if this type is assignable from the given type token.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,183,public boolean isAssignableFrom(TypeToken<?> token) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,184,return isAssignableFrom(token.getType());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,188,* Private helper function that performs some assignability checks for
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,189,* the provided GenericArrayType.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,191,"private static boolean isAssignableFrom(Type from, GenericArrayType to) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,192,Type toGenericComponentType = to.getGenericComponentType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,193,if (toGenericComponentType instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,194,Type t = from;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,195,if (from instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,196,t = ((GenericArrayType) from).getGenericComponentType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,197,} else if (from instanceof Class) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,198,Class<?> classType = (Class<?>) from;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,199,while (classType.isArray()) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,200,classType = classType.getComponentType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,202,t = classType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,204,"return isAssignableFrom(t, (ParameterizedType) toGenericComponentType,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,205,"new HashMap<String, Type>());"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,207,"// No generic defined on ""to""; therefore, return true and let other"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,208,// checks determine assignability
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,209,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,213,* Private recursive helper function to actually do the type-safe checking
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,214,* of assignability.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,216,"private static boolean isAssignableFrom(Type from, ParameterizedType to,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,217,"Map<String, Type> typeVarMap) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,219,if (from == null) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,220,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,223,if (to.equals(from)) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,224,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,227,// First figure out the class and any type information.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,228,Class<?> clazz = getRawType(from);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,229,ParameterizedType ptype = null;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,230,if (from instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,231,ptype = (ParameterizedType) from;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,234,// Load up parameterized variable info if it was parameterized.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,235,if (ptype != null) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,236,Type[] tArgs = ptype.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,237,TypeVariable<?>[] tParams = clazz.getTypeParameters();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,238,for (int i = 0; i < tArgs.length; i++) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,239,Type arg = tArgs[i];
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,240,TypeVariable<?> var = tParams[i];
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,241,while (arg instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,242,TypeVariable<?> v = (TypeVariable<?>) arg;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,243,arg = typeVarMap.get(v.getName());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,245,"typeVarMap.put(var.getName(), arg);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,248,// check if they are equivalent under our current mapping.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,249,"if (typeEquals(ptype, to, typeVarMap)) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,250,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,254,for (Type itype : clazz.getGenericInterfaces()) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,255,"if (isAssignableFrom(itype, to, new HashMap<String, Type>(typeVarMap))) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,256,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,260,"// Interfaces didn't work, try the superclass."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,261,Type sType = clazz.getGenericSuperclass();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,262,"if (isAssignableFrom(sType, to, new HashMap<String, Type>(typeVarMap))) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,263,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,266,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,270,"* Checks if two parameterized types are exactly equal, under the variable"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,271,* replacement described in the typeVarMap.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,273,"private static boolean typeEquals(ParameterizedType from,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,274,"ParameterizedType to, Map<String, Type> typeVarMap) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,275,if (from.getRawType().equals(to.getRawType())) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,276,Type[] fromArgs = from.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,277,Type[] toArgs = to.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,278,for (int i = 0; i < fromArgs.length; i++) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,279,"if (!matches(fromArgs[i], toArgs[i], typeVarMap)) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,280,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,283,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,285,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,289,* Checks if two types are the same or are equivalent under a variable mapping
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,290,* given in the type map that was provided.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,292,"private static boolean matches(Type from, Type to,"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,293,"Map<String, Type> typeMap) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,294,if (to.equals(from)) return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,296,if (from instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,297,return to.equals(typeMap.get(((TypeVariable<?>)from).getName()));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,300,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,304,* Hashcode for this object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,305,* @return hashcode for this object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,307,@Override public int hashCode() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,308,return type.hashCode();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,312,* Method to test equality.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,314,"* @return true if this object is logically equal to the specified object, false otherwise."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,316,@Override public boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,317,if (o == this) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,318,return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,320,if (!(o instanceof TypeToken<?>)) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,321,return false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,323,TypeToken<?> t = (TypeToken<?>) o;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,324,return type.equals(t.type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,328,* Returns a string representation of this object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,329,* @return a string representation of this object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,331,@Override public String toString() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,332,return type instanceof Class<?>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,333,? ((Class<?>) type).getName()
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,334,: type.toString();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,337,private static AssertionError buildUnexpectedTypeError(
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,338,"Type token, Class<?>... expected) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,340,// Build exception message
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,341,StringBuilder exceptionMessage =
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,342,"new StringBuilder(""Unexpected type. Expected one of: "");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,343,for (Class<?> clazz : expected) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,344,"exceptionMessage.append(clazz.getName()).append("", "");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,346,"exceptionMessage.append(""but got: "").append(token.getClass().getName())"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,347,".append("", for type token: "").append(token.toString()).append('.');"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,349,return new AssertionError(exceptionMessage.toString());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,353,* Gets type token for the given {@code Type} instance.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,355,public static TypeToken<?> get(Type type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,356,return new SimpleTypeToken<Object>(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,360,* Gets type token for the given {@code Class} instance.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,362,public static <T> TypeToken<T> get(Class<T> type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,363,return new SimpleTypeToken<T>(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,367,* Private static class to not create more anonymous classes than
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,368,* necessary.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,370,private static class SimpleTypeToken<T> extends TypeToken<T> {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,371,public SimpleTypeToken(Type type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,372,super(type);
True,gson/src/main/java/com/google/gson/reflect/package-info.java,gson/src/main/java/com/google/gson/reflect/package-info.java,2,* This package provides utility classes for finding type information for generic types.
True,gson/src/main/java/com/google/gson/reflect/package-info.java,gson/src/main/java/com/google/gson/reflect/package-info.java,4,"* @author Inderjeet Singh, Joel Leitch"
True,gson/src/main/java/com/google/gson/reflect/package-info.java,gson/src/main/java/com/google/gson/reflect/package-info.java,6,package com.google.gson.reflect;
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,22,* Tests for the {@link CamelCaseSeparatorNamingPolicy} class.
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,26,public class CamelCaseSeparatorNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,28,private static final Class<String> CLASS = String.class;
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,29,"private static final String UNDERSCORE = ""_"";"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,30,"private static final String MULTI_CHAR_SEPARATOR = ""_$_"";"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,32,public void testInvalidInstantiation() throws Exception {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,33,try {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,34,new CamelCaseSeparatorNamingPolicy(null);
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,35,"fail(""Null separator string is not supported"");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,36,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,38,try {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,39,"new CamelCaseSeparatorNamingPolicy("""");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,40,"fail(""Empty separator string is not supported"");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,41,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,43,try {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,44,"new CamelCaseSeparatorNamingPolicy("" "");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,45,"fail(""space separator string is not supported"");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,46,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,48,try {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,49,"new CamelCaseSeparatorNamingPolicy(""\n"");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,50,"fail(""new-line separator string is not supported"");"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,51,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,54,public void testUnderscoreSeparator() throws Exception {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,55,CamelCaseSeparatorNamingPolicy namingPolicy =
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,56,new CamelCaseSeparatorNamingPolicy(UNDERSCORE);
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,57,"String translatedName = namingPolicy.translateName(""testUnderscoreBetweenWords"", CLASS, null);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,58,"assertEquals(""test_Underscore_Between_Words"", translatedName);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,61,public void testMultiCharSeparator() throws Exception {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,62,CamelCaseSeparatorNamingPolicy namingPolicy =
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,63,new CamelCaseSeparatorNamingPolicy(MULTI_CHAR_SEPARATOR);
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,64,"String translatedName = namingPolicy.translateName(""testMultCharBetweenWords"", CLASS, null);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,65,"assertEquals(""test_$_Mult_$_Char_$_Between_$_Words"", translatedName);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,68,public void testNameBeginsWithCapital() throws Exception {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,69,CamelCaseSeparatorNamingPolicy namingPolicy = new CamelCaseSeparatorNamingPolicy(UNDERSCORE);
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,70,"String translatedName = namingPolicy.translateName(""TestNameBeginsWithCapital"", CLASS, null);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,71,"assertEquals(""Test_Name_Begins_With_Capital"", translatedName);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,74,public void testExceptionPossiblyIncorrectSeparation() throws Exception {
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,75,CamelCaseSeparatorNamingPolicy namingPolicy = new CamelCaseSeparatorNamingPolicy(UNDERSCORE);
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,76,"String translatedName = namingPolicy.translateName(""aURL"", CLASS, null);"
True,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java,77,"assertEquals(""a_U_R_L"", translatedName);"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,19,import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,23,import java.text.DateFormat;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,24,import java.text.SimpleDateFormat;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,25,import java.util.Date;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,28,* A simple unit test for the {@link DefaultDateTypeAdapter} class.
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,32,public class DefaultDateTypeAdapterTest extends TestCase {
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,34,public void testDateSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,35,int dateStyle = DateFormat.LONG;
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,36,DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,37,DateFormat formatter = DateFormat.getDateInstance(dateStyle);
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,38,Date currentDate = new Date();
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,40,"String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,41,"assertEquals(formatter.format(currentDate), dateString);"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,44,public void testDatePattern() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,45,"String pattern = ""yyyy-MM-dd"";"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,46,DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,47,DateFormat formatter = new SimpleDateFormat(pattern);
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,48,Date currentDate = new Date();
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,50,"String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,51,"assertEquals(formatter.format(currentDate), dateString);"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,54,public void testInvalidDatePattern() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,55,try {
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,56,"new DefaultDateTypeAdapter(""I am a bad Date pattern...."");"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,57,"fail(""Invalid date pattern should fail."");"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,58,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,24,import java.util.HashMap;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,25,import java.util.Map;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,28,* Unit test for the default JSON map serialization object located in the
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,29,* {@link DefaultTypeAdapters} class.
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,31,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,33,public class DefaultMapJsonSerializerTest extends TestCase {
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,35,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,36,private JsonSerializer<Map> mapSerializer;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,38,@Override
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,39,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,40,super.setUp();
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,41,mapSerializer = new DefaultTypeAdapters.MapTypeAdapter();
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,44,public void testEmptyMapNoTypeSerialization() {
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,45,"Map<String, String> emptyMap = new HashMap<String, String>();"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,46,try {
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,47,"mapSerializer.serialize(emptyMap, emptyMap.getClass(), null);"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,48,"fail(""Parameterized types need to have a ParameterizedType passed in, not a Class."");"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,49,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,52,public void testEmptyMapSerialization() {
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,53,"Type mapType = new TypeToken<Map<String, String>>() { }.getType();"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,54,"Map<String, String> emptyMap = new HashMap<String, String>();"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,55,"JsonElement element = mapSerializer.serialize(emptyMap, mapType, null);"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,57,assertTrue(element instanceof JsonObject);
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,58,JsonObject emptyMapJsonObject = (JsonObject) element;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,59,assertTrue(emptyMapJsonObject.entrySet().isEmpty());
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,19,import com.google.gson.DisjunctionExclusionStrategy;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,20,import com.google.gson.ExclusionStrategy;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,24,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,25,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,26,import java.util.List;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,29,* Unit tests for the {@link DisjunctionExclusionStrategy} class.
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,31,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,33,public class DisjunctionExclusionStrategyTest extends TestCase {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,35,"private static final ExclusionStrategy FALSE_STRATEGY = new MockExclusionStrategy(false, false);"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,36,"private static final ExclusionStrategy TRUE_STRATEGY = new MockExclusionStrategy(true, true);"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,37,private static final Class<?> CLAZZ = String.class;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,38,private static final Field FIELD = CLAZZ.getFields()[0];
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,40,public void testBadInstantiation() throws Exception {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,41,try {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,42,new DisjunctionExclusionStrategy();
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,43,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,45,try {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,46,ExclusionStrategy[] constructorParam = null;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,47,new DisjunctionExclusionStrategy(constructorParam);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,48,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,50,try {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,51,ExclusionStrategy[] constructorParam = new ExclusionStrategy[0];
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,52,new DisjunctionExclusionStrategy(constructorParam);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,53,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,55,try {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,56,List<ExclusionStrategy> constructorParam = null;
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,57,new DisjunctionExclusionStrategy(constructorParam);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,58,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,60,try {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,61,List<ExclusionStrategy> constructorParam = new LinkedList<ExclusionStrategy>();
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,62,new DisjunctionExclusionStrategy(constructorParam);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,63,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,66,public void testSkipFieldsWithMixedTrueAndFalse() throws Exception {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,67,DisjunctionExclusionStrategy strategy =
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,68,"new DisjunctionExclusionStrategy(FALSE_STRATEGY, TRUE_STRATEGY);"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,70,assertTrue(strategy.shouldSkipClass(CLAZZ));
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,71,assertTrue(strategy.shouldSkipField(FIELD));
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,74,public void testSkipFieldsWithFalseOnly() throws Exception {
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,75,DisjunctionExclusionStrategy strategy =  new DisjunctionExclusionStrategy(FALSE_STRATEGY);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,77,assertFalse(strategy.shouldSkipClass(CLAZZ));
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,78,assertFalse(strategy.shouldSkipField(FIELD));
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,22,* Performs some unit testing for the {@link Escaper} class.
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,26,public class EscaperTest extends TestCase {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,28,public void testNoSpecialCharacters() {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,29,"String value = ""Testing123"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,30,String escapedString = Escaper.escapeJsonString(value);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,31,"assertEquals(value, escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,34,public void testNewlineEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,35,"String containsNewline = ""123\n456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,36,String escapedString = Escaper.escapeJsonString(containsNewline);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,37,"assertEquals(""123\\n456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,40,public void testCarrageReturnEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,41,"String containsCarrageReturn = ""123\r456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,42,String escapedString = Escaper.escapeJsonString(containsCarrageReturn);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,43,"assertEquals(""123\\r456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,46,public void testTabEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,47,"String containsTab = ""123\t456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,48,String escapedString = Escaper.escapeJsonString(containsTab);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,49,"assertEquals(""123\\t456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,52,public void testQuoteEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,53,"String containsQuote = ""123\""456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,54,String escapedString = Escaper.escapeJsonString(containsQuote);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,55,"assertEquals(""123\\\""456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,58,public void testEqualsEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,59,"String containsEquals = ""123=456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,60,int index = containsEquals.indexOf('=');
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,61,"String unicodeValue = convertToUnicodeString(Character.codePointAt(containsEquals, index));"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,62,String escapedString = Escaper.escapeJsonString(containsEquals);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,63,"assertEquals(""123"" + unicodeValue + ""456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,66,public void testGreaterThanAndLessThanEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,67,"String containsLtGt = ""123>456<"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,68,int gtIndex = containsLtGt.indexOf('>');
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,69,int ltIndex = containsLtGt.indexOf('<');
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,70,"String gtAsUnicode = convertToUnicodeString(Character.codePointAt(containsLtGt, gtIndex));"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,71,"String ltAsUnicode = convertToUnicodeString(Character.codePointAt(containsLtGt, ltIndex));"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,73,String escapedString = Escaper.escapeJsonString(containsLtGt);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,74,"assertEquals(""123"" + gtAsUnicode + ""456"" + ltAsUnicode, escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,77,public void testAmpersandEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,78,"String containsAmp = ""123&456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,79,int ampIndex = containsAmp.indexOf('&');
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,80,"String ampAsUnicode = convertToUnicodeString(Character.codePointAt(containsAmp, ampIndex));"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,82,String escapedString = Escaper.escapeJsonString(containsAmp);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,83,"assertEquals(""123"" + ampAsUnicode + ""456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,85,char ampCharAsUnicode = '\u0026';
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,86,"String containsAmpUnicode = ""123"" + ampCharAsUnicode + ""456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,87,escapedString = Escaper.escapeJsonString(containsAmpUnicode);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,88,"assertEquals(""123"" + ampAsUnicode + ""456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,91,public void testSlashEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,92,"String containsSlash = ""123\\456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,93,String escapedString = Escaper.escapeJsonString(containsSlash);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,94,"assertEquals(""123\\\\456"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,97,public void testSingleQuoteNotEscaped() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,98,"String containsSingleQuote = ""123'456"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,99,String escapedString = Escaper.escapeJsonString(containsSingleQuote);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,100,"assertEquals(containsSingleQuote, escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,103,public void testRequiredEscapingUnicodeCharacter() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,104,char unicodeChar = '\u2028';
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,105,"String unicodeString = ""Testing"" + unicodeChar;"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,107,String escapedString = Escaper.escapeJsonString(unicodeString);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,108,assertFalse(unicodeString.equals(escapedString));
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,109,"assertEquals(""Testing\\u2028"", escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,112,public void testUnicodeCharacterStringNoEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,113,"String unicodeString = ""\u0065\u0066"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,115,String escapedString = Escaper.escapeJsonString(unicodeString);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,116,"assertEquals(unicodeString, escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,120,public void testChineseCharacterEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,121,"String unicodeString = ""\u597d\u597d\u597d"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,122,"String chineseString = ""好好好"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,123,"assertEquals(unicodeString, chineseString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,125,"String expectedEscapedString = ""\\u597d\\u597d\\u597d"";"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,126,String escapedString = Escaper.escapeJsonString(chineseString);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,127,"assertEquals(expectedEscapedString, escapedString);"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,131,private String convertToUnicodeString(int codepoint) {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,132,String hexValue = Integer.toHexString(codepoint);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,133,"StringBuilder sb = new StringBuilder(""\\u"");"
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,134,for (int i = 0; i < 4 - hexValue.length(); i++) {
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,135,sb.append(0);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,137,sb.append(hexValue);
True,gson/src/test/java/com/google/gson/EscaperTest.java,gson/src/test/java/com/google/gson/EscaperTest.java,139,return sb.toString().toLowerCase();
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,19,import com.google.gson.annotations.Expose;
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,23,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,26,* Unit tests for the {@link ExposeAnnotationBasedExclusionStrategy} class.
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,28,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,30,public class ExposeAnnotationBasedExclusionStrategyTest extends TestCase {
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,31,private ExposeAnnotationBasedExclusionStrategy strategy;
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,33,@Override
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,34,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,35,super.setUp();
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,36,strategy = new ExposeAnnotationBasedExclusionStrategy();
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,39,public void testNeverSkipClasses() throws Exception {
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,40,assertFalse(strategy.shouldSkipClass(MockObject.class));
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,43,public void testSkipNonAnnotatedFields() throws Exception {
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,44,"Field f = MockObject.class.getField(""hiddenField"");"
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,45,assertTrue(strategy.shouldSkipField(f));
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,48,public void testNeverSkipExposedAnnotatedFields() throws Exception {
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,49,"Field f = MockObject.class.getField(""exposedField"");"
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,50,assertFalse(strategy.shouldSkipField(f));
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,53,private static class MockObject {
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,54,@Expose
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,55,public final int exposedField = 0;
True,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,56,public final int hiddenField = 0;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,16,package com.google.gson;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,18,import com.google.gson.common.TestTypes.ArrayOfObjects;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,19,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,20,import com.google.gson.common.TestTypes.ClassWithNoFields;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,21,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,25,import java.lang.reflect.Modifier;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,26,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,27,import java.util.Arrays;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,28,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,29,import java.util.List;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,32,* Functional tests for Gson that depend on some internal package-protected elements of
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,33,* com.google.gson package and hence must be placed in the same package. We should make every
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,34,* attempt to migrate tests out of this class.
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,36,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,37,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,39,public class FunctionalWithInternalDependenciesTest extends TestCase {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,40,private static int INDENTATION_SIZE = 2;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,41,private static int PRINT_MARGIN = 100;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,42,private static int RIGHT_MARGIN = 8;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,44,private static boolean DEBUG = false;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,46,private GsonBuilder builder;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,48,@Override
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,49,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,50,super.setUp();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,51,builder = new GsonBuilder();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,54,public void testAnonymousLocalClassesSerialization() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,55,Gson gson = new Gson(new ObjectNavigatorFactory(new ModifierBasedExclusionStrategy(
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,56,"true, Modifier.TRANSIENT, Modifier.STATIC), Gson.DEFAULT_NAMING_POLICY));"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,57,"assertEquals(""{}"", gson.toJson(new ClassWithNoFields() {"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,58,// empty anonymous class
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,62,public void testPrettyPrintList() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,63,"JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,64,Gson gson = builder.setFormatter(formatter).create();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,65,BagOfPrimitives b = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,66,List<BagOfPrimitives> listOfB = new LinkedList<BagOfPrimitives>();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,67,for (int i = 0; i < 15; ++i) {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,68,listOfB.add(b);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,70,Type typeOfSrc = new TypeToken<List<BagOfPrimitives>>() {}.getType();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,71,"String json = gson.toJson(listOfB, typeOfSrc);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,72,print(json);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,73,assertPrintMargin(json);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,76,public void testPrettyPrintArrayOfObjects() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,77,"JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,78,Gson gson = builder.setFormatter(formatter).create();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,79,ArrayOfObjects target = new ArrayOfObjects();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,80,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,81,print(json);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,82,assertPrintMargin(json);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,85,public void testPrettyPrintArrayOfPrimitives() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,86,"JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,87,Gson gson = builder.setFormatter(formatter).create();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,88,"int[] ints = new int[] { 1, 2, 3, 4, 5 };"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,89,String json = gson.toJson(ints);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,90,"assertEquals(""[1,2,3,4,5]\n"", json);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,93,public void testPrettyPrintArrayOfPrimitiveArrays() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,94,"JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,95,Gson gson = builder.setFormatter(formatter).create();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,96,"int[][] ints = new int[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 0 }, { 10 } };"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,97,String json = gson.toJson(ints);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,98,"assertEquals(""[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\n"", json);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,101,public void testPrettyPrintListOfPrimitiveArrays() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,102,"JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,103,Gson gson = builder.setFormatter(formatter).create();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,104,"List<Integer[]> list = Arrays.asList(new Integer[][] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 },"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,105,"{ 9, 0 }, { 10 } });"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,106,String json = gson.toJson(list);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,107,"assertEquals(""[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\n"", json);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,110,public void testMultipleArrays() {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,111,"JsonFormatter formatter = new JsonPrintFormatter(PRINT_MARGIN, INDENTATION_SIZE, RIGHT_MARGIN);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,112,Gson gson = builder.setFormatter(formatter).create();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,113,"int[][][] ints = new int[][][] { {  { 1 }, { 2 } } };"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,114,String json = gson.toJson(ints);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,115,"assertEquals(""[[[1],[2]]]\n"", json);"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,118,private void print(String msg) {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,119,if (DEBUG) {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,120,System.out.println(msg);
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,124,private void assertPrintMargin(String str) {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,125,int position = 0;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,126,char[] chars = str.toCharArray();
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,127,"for (int i = 0; i < chars.length; ++i, ++position) {"
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,128,char c = chars[i];
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,129,if (c == '\n') {
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,130,position = 0;
True,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionalWithInternalDependenciesTest.java,132,assertTrue(position < PRINT_MARGIN + RIGHT_MARGIN);
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,24,import java.util.List;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,27,* Unit tests for the {@link GenericArrayTypeImpl} class.
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,29,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,32,public class GenericArrayTypeImplTest extends TestCase {
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,34,private Type parameterizedType;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,35,private Type genericArrayType;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,36,private GenericArrayTypeImpl ourType;
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,38,@Override
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,39,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,40,super.setUp();
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,41,parameterizedType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,42,genericArrayType = new TypeToken<List<String>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,43,ourType = new GenericArrayTypeImpl(parameterizedType);
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,46,public void testOurTypeFunctionality() throws Exception {
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,47,"assertEquals(parameterizedType, ourType.getGenericComponentType());"
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,48,"assertEquals(genericArrayType, ourType);"
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,49,"assertEquals(genericArrayType.hashCode(), ourType.hashCode());"
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,52,public void testNotEquals() throws Exception {
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,53,Type differentGenericArrayType = new TypeToken<List<String>[][]>() {}.getType();
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,55,assertFalse(differentGenericArrayType.equals(ourType));
True,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,gson/src/test/java/com/google/gson/GenericArrayTypeImplTest.java,56,assertFalse(ourType.equals(differentGenericArrayType));
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,22,* Unit tests for {@link GsonBuilder}.
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,24,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,26,public class GsonBuilderTest extends TestCase {
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,28,public void testCreatingMoreThanOnce() {
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,29,GsonBuilder builder = new GsonBuilder();
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,30,builder.create();
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,31,builder.create();
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,21,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,22,import java.math.BigInteger;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,23,import java.util.concurrent.atomic.AtomicInteger;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,24,import java.util.concurrent.atomic.AtomicLong;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,27,* Contains numerous tests involving registered type converters with a Gson instance.
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,29,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,32,public class GsonTypeAdapterTest extends TestCase {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,33,private Gson gson;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,35,@Override
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,36,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,37,super.setUp();
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,38,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,39,".registerTypeAdapter(AtomicLong.class, new ExceptionTypeAdapter())"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,40,".registerTypeAdapter(AtomicInteger.class, new AtomicIntegerTypeAdapter())"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,41,.create();
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,44,public void testDefaultTypeAdapterThrowsParseException() throws Exception {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,45,try {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,46,"gson.fromJson(""{\""abc\"":123}"", BigInteger.class);"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,47,"fail(""Should have thrown a JsonParseException"");"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,48,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,51,public void testTypeAdapterThrowsException() throws Exception {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,52,try {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,53,gson.toJson(new AtomicLong(0));
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,54,"fail(""Type Adapter should have thrown an exception"");"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,55,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,57,try {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,58,"gson.fromJson(""123"", AtomicLong.class);"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,59,"fail(""Type Adapter should have thrown an exception"");"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,60,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,63,public void testTypeAdapterProperlyConvertsTypes() throws Exception {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,64,int intialValue = 1;
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,65,AtomicInteger atomicInt = new AtomicInteger(intialValue);
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,66,String json = gson.toJson(atomicInt);
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,67,"assertEquals(intialValue + 1, Integer.parseInt(json));"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,69,"atomicInt = gson.fromJson(json, AtomicInteger.class);"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,70,"assertEquals(intialValue, atomicInt.get());"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,73,public void testTypeAdapterDoesNotAffectNonAdaptedTypes() throws Exception {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,74,"String expected = ""blah"";"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,75,String actual = gson.toJson(expected);
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,76,"assertEquals(""\"""" + expected + ""\"""", actual);"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,78,"actual = gson.fromJson(actual, String.class);"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,79,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,82,private static class ExceptionTypeAdapter
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,83,"implements JsonSerializer<AtomicLong>, JsonDeserializer<AtomicLong> {"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,84,public JsonElement serialize(
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,85,"AtomicLong src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,86,throw new IllegalStateException();
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,89,public AtomicLong deserialize(
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,90,"JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,91,throws JsonParseException {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,92,throw new IllegalStateException();
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,96,private static class AtomicIntegerTypeAdapter
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,97,"implements JsonSerializer<AtomicInteger>, JsonDeserializer<AtomicInteger> {"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,98,"public JsonElement serialize(AtomicInteger src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,99,return new JsonPrimitive(src.incrementAndGet());
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,102,"public AtomicInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,103,throws JsonParseException {
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,104,int intValue = json.getAsInt();
True,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java,105,return new AtomicInteger(--intValue);
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,21,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,24,* Tests for the {@link JavaFieldNamingPolicy} class.
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,26,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,28,public class JavaFieldNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,30,private JavaFieldNamingPolicy namingPolicy;
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,32,@Override
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,33,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,34,super.setUp();
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,35,namingPolicy = new JavaFieldNamingPolicy();
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,38,public void testFieldNamingPolicy() throws Exception {
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,39,Field f = String.class.getFields()[0];
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,40,"assertEquals(f.getName(), namingPolicy.translateName(f));"
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,43,public void testNullField() throws Exception {
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,44,try {
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,45,namingPolicy.translateName((Field) null);
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,46,"fail(""Should have thrown an exception"");"
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,47,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,19,import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,24,import java.text.DateFormat;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,25,import java.util.Date;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,28,* Simple unit tests for the {@link JsonDeserializerExceptionWrapper} class.
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,30,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,31,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,33,public class JsonDeserializerExceptionWrapperTest extends TestCase {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,35,private static final String DATE_STRING =
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,36,DateFormat.getDateInstance(DateFormat.LONG).format(new Date());
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,37,private static final JsonPrimitive PRIMITIVE_ELEMENT = new JsonPrimitive(DATE_STRING);
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,39,public void testRethrowJsonParseException() throws Exception {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,40,"String errorMsg = ""please rethrow me"";"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,41,JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer =
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,42,new JsonDeserializerExceptionWrapper<String>(
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,43,new ExceptionJsonDeserializer(new JsonParseException(errorMsg)));
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,45,try {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,46,"wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null);"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,47,"fail(""JsonParseException should have been thrown"");"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,48,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,49,assertNull(expected.getCause());
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,50,"assertEquals(errorMsg, expected.getMessage());"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,54,public void testWrappedExceptionPropagation() throws Exception {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,55,IllegalArgumentException exceptionToThrow = new IllegalArgumentException();
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,56,JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer =
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,57,new JsonDeserializerExceptionWrapper<String>(
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,58,new ExceptionJsonDeserializer(exceptionToThrow));
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,60,try {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,61,"wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null);"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,62,"fail(""JsonParseException should have been thrown"");"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,63,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,64,"assertEquals(exceptionToThrow, expected.getCause());"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,68,public void testProperSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,69,DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG);
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,70,JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer =
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,71,new JsonDeserializerExceptionWrapper<Date>(dateSerializer);
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,73,"Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null);"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,74,"Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null);"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,75,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,78,private static class ExceptionJsonDeserializer implements JsonDeserializer<String> {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,79,private final RuntimeException exceptionToThrow;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,81,public ExceptionJsonDeserializer(RuntimeException exceptionToThrow) {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,82,this.exceptionToThrow = exceptionToThrow;
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,85,"public String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,86,throws JsonParseException {
True,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,87,throw exceptionToThrow;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,22,* Performs some unit testing for the {@link JsonEscapingVisitor} class.
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,26,public class JsonEscapingVisitorTest extends TestCase {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,27,private StubbedJsonElementVisitor stubVisitor;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,28,private JsonEscapingVisitor escapingVisitor;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,30,@Override
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,31,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,32,super.setUp();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,33,stubVisitor = new StubbedJsonElementVisitor();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,34,escapingVisitor = new JsonEscapingVisitor(stubVisitor);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,37,public void testNonStringPrimitiveVisitation() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,38,boolean value = true;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,39,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,40,escapingVisitor.visitPrimitive(primitive);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,41,"assertEquals(value, stubVisitor.primitiveReceived.getAsBoolean());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,44,public void testStringPrimitiveVisitationNoEscapingRequired() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,45,"String value = ""Testing123"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,46,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,47,escapingVisitor.visitPrimitive(primitive);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,48,"assertEquals(value, stubVisitor.primitiveReceived.getAsObject());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,51,public void testStringPrimitiveVisitationEscapingRequired() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,52,"String value = ""Testing\""123"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,53,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,54,escapingVisitor.visitPrimitive(primitive);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,55,"assertEquals(Escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,58,public void testNonStringArrayVisitation() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,59,int value = 123;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,60,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,61,JsonArray array = new JsonArray();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,62,array.add(primitive);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,63,"escapingVisitor.visitArrayMember(array, primitive, true);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,64,"assertEquals(value, stubVisitor.primitiveReceived.getAsInt());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,67,public void testStringArrayVisitationNoEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,68,"String value = ""Testing123"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,69,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,70,JsonArray array = new JsonArray();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,71,array.add(primitive);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,72,"escapingVisitor.visitArrayMember(array, primitive, true);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,73,"assertEquals(value, stubVisitor.primitiveReceived.getAsString());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,76,public void testStringArrayVisitationEscapingRequired() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,77,"String value = ""Testing\""123"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,78,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,79,JsonArray array = new JsonArray();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,80,array.add(primitive);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,81,"escapingVisitor.visitArrayMember(array, primitive, true);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,82,"assertEquals(Escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,85,public void testNonStringFieldVisitation() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,86,"String fieldName = ""fieldName"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,87,int value = 123;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,88,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,89,JsonObject object = new JsonObject();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,90,"object.addProperty(fieldName, value);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,92,"escapingVisitor.visitObjectMember(object, fieldName, primitive, true);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,93,"assertEquals(value, stubVisitor.primitiveReceived.getAsInt());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,96,public void testStringFieldVisitationNoEscaping() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,97,"String fieldName = ""fieldName"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,98,"String value = ""Testing123"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,99,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,100,JsonObject object = new JsonObject();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,101,"object.addProperty(fieldName, value);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,103,"escapingVisitor.visitObjectMember(object, fieldName, primitive, true);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,104,"assertEquals(value, stubVisitor.primitiveReceived.getAsString());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,107,public void testStringFieldVisitationEscapingRequired() throws Exception {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,108,"String fieldName = ""fieldName"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,109,"String value = ""Testing\""123"";"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,110,JsonPrimitive primitive = new JsonPrimitive(value);
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,111,JsonObject object = new JsonObject();
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,112,"object.addProperty(fieldName, value);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,114,"escapingVisitor.visitObjectMember(object, fieldName, primitive, true);"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,115,"assertEquals(Escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,118,private static class StubbedJsonElementVisitor implements JsonElementVisitor {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,119,public JsonPrimitive primitiveReceived;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,121,public void endArray(JsonArray array) {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,122,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,125,public void endObject(JsonObject object) {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,126,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,129,public void startArray(JsonArray array) {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,130,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,133,public void startObject(JsonObject object) {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,134,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,137,"public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,138,primitiveReceived = member;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,141,"public void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,142,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,145,"public void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,146,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,149,public void visitObjectMember(
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,150,"JsonObject parent, String memberName, JsonPrimitive member, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,151,primitiveReceived = member;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,154,public void visitObjectMember(
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,155,"JsonObject parent, String memberName, JsonArray member, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,156,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,159,public void visitObjectMember(
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,160,"JsonObject parent, String memberName, JsonObject member, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,161,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,164,public void visitPrimitive(JsonPrimitive primitive) {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,165,primitiveReceived = primitive;
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,168,"public void visitNullArrayMember(JsonArray parent, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,169,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,172,public void visitNull() {
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,173,// Do nothing
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,176,"public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {"
True,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,177,// Do nothing
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,22,* Unit tests for the {@link JsonFieldNameValidator} class.
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,26,public class JsonFieldNameValidatorTest extends TestCase {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,28,private JsonFieldNameValidator validator;
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,30,@Override
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,31,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,32,super.setUp();
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,33,validator = new JsonFieldNameValidator();
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,36,public void testValidFieldBeginsWithDollarSign() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,37,"String fieldName = ""$abc"";"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,38,"assertEquals(fieldName, validator.validate(fieldName));"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,41,public void testValidFieldBeginsWithUnderscore() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,42,"String fieldName = ""_abc"";"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,43,"assertEquals(fieldName, validator.validate(fieldName));"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,46,public void testValidFieldBeginsWithLetter() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,47,"String fieldName = ""abc"";"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,48,"assertEquals(fieldName, validator.validate(fieldName));"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,51,public void testValidFieldMixingLetter() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,52,"String fieldName = ""$abc_12v$34"";"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,53,"assertEquals(fieldName, validator.validate(fieldName));"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,56,public void testInvalidFieldStartingWithNumbers() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,57,try {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,58,"validator.validate(""1abc"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,59,"fail(""Json field name can not start with a number"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,60,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,63,public void testInvalidFieldStartingTwoDollarSigns() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,64,try {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,65,"validator.validate(""$$abc"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,66,"fail(""Json field name can not start with a double dollar sign"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,67,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,70,public void testInvalidFieldStartingTwoUnderscores() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,71,try {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,72,"validator.validate(""__abc"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,73,"fail(""Json field name can not start with a double underscore"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,74,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,77,public void testInvalidFieldStartingDollarUnderscore() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,78,try {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,79,"validator.validate(""$_abc"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,80,"fail(""Json field name can not start with two non-alphabet characters"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,81,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,84,public void testKeywordAsFieldName() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,85,try {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,86,"validator.validate(""break"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,87,"fail(""Json field name can not be a reserved word"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,88,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,91,public void testInvalidCharacters() throws Exception {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,92,try {
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,93,"validator.validate(""abc.123"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,94,"fail(""Json field name can not contain a period character"");"
True,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java,95,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,19,import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,24,import java.text.DateFormat;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,25,import java.util.Date;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,28,* Simple unit tests for the {@link JsonSerializerExceptionWrapper} class.
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,30,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,31,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,33,public class JsonSerializerExceptionWrapperTest extends TestCase {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,35,public void testRethrowJsonParseException() throws Exception {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,36,"String errorMsg = ""please rethrow me"";"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,37,JsonSerializerExceptionWrapper<String> wrappedJsonSerializer =
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,38,new JsonSerializerExceptionWrapper<String>(
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,39,new ExceptionJsonSerializer(new JsonParseException(errorMsg)));
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,41,try {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,42,"wrappedJsonSerializer.serialize(""blah"", String.class, null);"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,43,"fail(""JsonParseException should have been thrown"");"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,44,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,45,assertNull(expected.getCause());
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,46,"assertEquals(errorMsg, expected.getMessage());"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,50,public void testWrappedExceptionPropagation() throws Exception {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,51,IllegalArgumentException exceptionToThrow = new IllegalArgumentException();
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,52,JsonSerializerExceptionWrapper<String> wrappedJsonSerializer =
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,53,new JsonSerializerExceptionWrapper<String>(
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,54,new ExceptionJsonSerializer(exceptionToThrow));
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,56,try {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,57,"wrappedJsonSerializer.serialize(""blah"", String.class, null);"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,58,"fail(""JsonParseException should have been thrown"");"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,59,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,60,"assertEquals(exceptionToThrow, expected.getCause());"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,64,public void testProperSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,65,Date now = new Date();
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,66,DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG);
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,67,JsonSerializerExceptionWrapper<Date> wrappedJsonSerializer =
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,68,new JsonSerializerExceptionWrapper<Date>(dateSerializer);
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,70,"JsonElement expected = dateSerializer.serialize(now, Date.class, null);"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,71,"JsonElement actual = wrappedJsonSerializer.serialize(now, Date.class, null);"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,72,"assertEquals(expected.getAsString(), actual.getAsString());"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,75,private static class ExceptionJsonSerializer implements JsonSerializer<String> {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,76,private final RuntimeException exceptionToThrow;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,78,public ExceptionJsonSerializer(RuntimeException exceptionToThrow) {
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,79,this.exceptionToThrow = exceptionToThrow;
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,82,"public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonSerializerExceptionWrapperTest.java,83,throw exceptionToThrow;
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,22,* Tests for the {@link LowerCamelCaseSeparatorNamingPolicy} class.
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,26,public class LowerCamelCaseSeparatorNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,28,private static final Class<String> CLASS = String.class;
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,29,"private static final String UNDERSCORE = ""_"";"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,31,private LowerCamelCaseSeparatorNamingPolicy namingPolicy;
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,33,@Override
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,34,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,35,super.setUp();
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,36,namingPolicy = new LowerCamelCaseSeparatorNamingPolicy(UNDERSCORE);
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,39,public void testNameBeginsWithLowerCase() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,40,"String translatedName = namingPolicy.translateName(""testNameBeginsWithLower"", CLASS, null);"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,41,"assertEquals(""test_name_begins_with_lower"", translatedName);"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,44,public void testNameBeginsWithUpperCase() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,45,"String translatedName = namingPolicy.translateName(""TestNameBeginsWithUpper"", CLASS, null);"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,46,"assertEquals(""test_name_begins_with_upper"", translatedName);"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,49,public void testExceptionPossiblyIncorrectSeparation() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,50,"String translatedName = namingPolicy.translateName(""aURL"", CLASS, null);"
True,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicyTest.java,51,"assertEquals(""a_u_r_l"", translatedName);"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,19,import com.google.gson.LowerCaseNamingPolicy;
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,24,* Tests for the {@link LowerCaseNamingPolicy} class.
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,26,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,28,public class LowerCaseNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,29,"private static final String ALL_LOWER = ""abcdefg"";"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,30,"private static final String ALL_UPPER = ""ABCDEFG"";"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,31,"private static final String MIXED = ""aBcdeFg"";"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,33,private LowerCaseNamingPolicy namingPolicy;
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,35,@Override
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,36,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,37,super.setUp();
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,38,namingPolicy = new LowerCaseNamingPolicy();
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,41,public void testAllLowerCase() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,42,"assertEquals(ALL_LOWER, namingPolicy.translateName(ALL_LOWER, String.class, null));"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,45,public void testAllUpperCase() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,46,"assertEquals(ALL_LOWER, namingPolicy.translateName(ALL_UPPER, String.class, null));"
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,49,public void testMixedCase() throws Exception {
True,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/LowerCaseNamingPolicyTest.java,50,"assertEquals(ALL_LOWER, namingPolicy.translateName(MIXED, String.class, null));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,19,import com.google.gson.MemoryRefStack;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,23,import java.util.EmptyStackException;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,26,* Unit tests for the {@link MemoryRefStack} class.
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,28,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,30,public class MemoryRefStackTest extends TestCase {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,31,private MemoryRefStack<MockObject> stack;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,33,@Override
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,34,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,35,super.setUp();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,36,stack = new MemoryRefStack<MockObject>();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,39,public void testPeekEmptyStack() throws Exception {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,40,try {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,41,stack.peek();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,42,} catch (EmptyStackException expected) { }
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,45,public void testPushPeekAndPop() throws Exception {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,46,MockObject obj = new MockObject();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,48,"assertEquals(obj, stack.push(obj));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,49,"assertEquals(obj, stack.peek());"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,50,"assertEquals(obj, stack.pop());"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,53,public void testPopTooMany() throws Exception {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,54,MockObject obj = new MockObject();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,55,stack.push(obj);
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,56,"assertEquals(obj, stack.pop());"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,58,try {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,59,stack.pop();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,60,} catch (EmptyStackException expected) { }
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,63,public void testContains() throws Exception {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,64,MockObject objA = new MockObject();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,65,MockObject objB = new MockObject();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,66,"assertEquals(objA, objB);"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,stack.push(objA);
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,69,assertFalse(stack.contains(objB));
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,70,assertTrue(stack.contains(objA));
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,73,private static class MockObject {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,74,private final int value = 1;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,76,@Override
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,77,public boolean equals(Object obj) {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,78,return obj instanceof MockObject && value == ((MockObject) obj).value;
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,81,@Override
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,82,public int hashCode() {
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,83,return value;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,19,import com.google.gson.ExclusionStrategy;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,21,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,24,* This is a configurable {@link ExclusionStrategy} that can be used for
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,25,* unit testing.
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,27,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,29,public class MockExclusionStrategy implements ExclusionStrategy {
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,30,private final boolean skipClass;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,31,private final boolean skipField;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,33,"public MockExclusionStrategy(boolean skipClass, boolean skipField) {"
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,34,this.skipClass = skipClass;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,35,this.skipField = skipField;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,38,public boolean shouldSkipField(Field f) {
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,39,return skipField;
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,42,public boolean shouldSkipClass(Class<?> clazz) {
True,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,gson/src/test/java/com/google/gson/MockExclusionStrategy.java,43,return skipClass;
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,22,* Unit test for the {@link com.google.gson.ModifyFirstLetterNamingPolicy} class.
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,26,public class ModifyFirstLetterNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,28,public void testInvalidConstruction() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,29,try {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,30,new ModifyFirstLetterNamingPolicy(null);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,31,"fail(""Null values are not allowed as a constructor parameters"");"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,32,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,35,public void testLowerCaseFirstLetter() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,36,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,37,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,38,"assertEquals(""blah"", policy.translateName(""Blah"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,39,"assertEquals(""blah"", policy.translateName(""blah"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,42,public void testUpperCaseFirstLetter() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,43,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,44,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,45,"assertEquals(""Blah"", policy.translateName(""blah"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,46,"assertEquals(""Blah"", policy.translateName(""Blah"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,49,public void testSingleCharacterField() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,50,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,51,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,52,"assertEquals(""B"", policy.translateName(""b"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,53,"assertEquals(""B"", policy.translateName(""B"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,56,public void testFieldStartsWithUnderscore() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,57,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,58,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,59,"assertEquals(""_Blah"", policy.translateName(""_blah"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,60,"assertEquals(""_Blah"", policy.translateName(""_Blah"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,63,public void testFieldStartsWithUnderscoreFollowedBySingleLetter() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,64,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,65,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,66,"assertEquals(""_B"", policy.translateName(""_b"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,67,"assertEquals(""_B"", policy.translateName(""_B"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,70,public void testFieldHasSingleNonLetter() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,71,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,72,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,73,"assertEquals(""_"", policy.translateName(""_"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,75,policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,76,"assertEquals(""_"", policy.translateName(""_"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,79,public void testFieldHasNoLetters() throws Exception {
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,80,ModifyFirstLetterNamingPolicy policy =
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,81,new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,82,"assertEquals(""$_$"", policy.translateName(""$_$"", String.class, null));"
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,84,policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);
True,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,gson/src/test/java/com/google/gson/ModifyFirstLetterNamingPolicyTest.java,85,"assertEquals(""$_$"", policy.translateName(""$_$"", String.class, null));"
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,19,import com.google.gson.NullExclusionStrategy;
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,24,* Unit test for the {@link NullExclusionStrategy} class.
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,26,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,28,public class NullExclusionStrategyTest extends TestCase {
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,29,private NullExclusionStrategy strategy;
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,31,@Override
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,32,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,33,super.setUp();
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,34,strategy = new NullExclusionStrategy();
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,37,public void testNeverSkipsClass() throws Exception {
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,38,assertFalse(strategy.shouldSkipClass(String.class));
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,41,public void testNeverSkipsField() throws Exception {
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,42,"assertFalse(strategy.shouldSkipField("""".getClass().getFields()[0]));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,24,import java.util.List;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,27,* Unit tests for the {@link ParameterizedTypeHandlerMap} class.
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,29,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,31,public class ParameterizedTypeHandlerMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,32,private ParameterizedTypeHandlerMap<String> paramMap;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,34,@Override
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,35,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,36,super.setUp();
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,37,paramMap = new ParameterizedTypeHandlerMap<String>();
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,40,public void testNullMap() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,41,assertFalse(paramMap.hasSpecificHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,42,assertFalse(paramMap.hasAnyHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,43,assertNull(paramMap.getHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,46,public void testHasGenericButNotSpecific() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,47,Type specificType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,48,"String handler = ""blah"";"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,49,"paramMap.register(List.class, handler);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,51,assertFalse(paramMap.hasSpecificHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,52,assertTrue(paramMap.hasSpecificHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,53,assertTrue(paramMap.hasAnyHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,54,assertTrue(paramMap.hasAnyHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,55,"assertEquals(handler, paramMap.getHandlerFor(specificType));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,58,public void testHasSpecificType() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,59,Type specificType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,60,"String handler = ""blah"";"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,61,"paramMap.register(specificType, handler);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,63,assertTrue(paramMap.hasSpecificHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,64,assertFalse(paramMap.hasSpecificHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,65,assertTrue(paramMap.hasAnyHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,66,assertFalse(paramMap.hasAnyHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,67,"assertEquals(handler, paramMap.getHandlerFor(specificType));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,70,public void testTypeOverridding() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,71,"String handler1 = ""blah1"";"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,72,"String handler2 = ""blah2"";"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,73,"paramMap.register(String.class, handler1);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,74,"paramMap.register(String.class, handler2);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,76,assertTrue(paramMap.hasSpecificHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,77,"assertEquals(handler2, paramMap.getHandlerFor(String.class));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,80,public void testMakeUnmodifiable() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,81,paramMap.makeUnmodifiable();
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,82,try {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,83,"paramMap.register(String.class, ""blah"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,84,"fail(""Can not register handlers when map is unmodifiable"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,85,} catch (IllegalStateException expected) { }
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,24,import java.util.List;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,27,* Unit tests for the {@link ParameterizedTypeImpl} class.
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,29,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,32,public class ParameterizedTypeImplTest extends TestCase {
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,34,private Type parameterizedType;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,35,private ParameterizedTypeImpl ourType;
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,37,@Override
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,38,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,39,super.setUp();
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,40,parameterizedType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,41,"ourType = new ParameterizedTypeImpl(List.class, new Type[] { String.class }, null);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,44,public void testOurTypeFunctionality() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,45,assertNull(ourType.getOwnerType());
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,46,"assertEquals(String.class, ourType.getActualTypeArguments()[0]);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,47,"assertEquals(List.class, ourType.getRawType());"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,48,"assertEquals(parameterizedType, ourType);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,49,"assertEquals(parameterizedType.hashCode(), ourType.hashCode());"
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,52,public void testNotEquals() throws Exception {
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,53,Type differentParameterizedType = new TypeToken<List<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,54,assertFalse(differentParameterizedType.equals(ourType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeImplTest.java,55,assertFalse(ourType.equals(differentParameterizedType));
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,19,import java.lang.reflect.InvocationTargetException;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,20,import java.lang.reflect.Method;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,21,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,24,* This class contains some test fixtures for Parameterized types. These classes should ideally
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,25,"* belong either in the common or functional package, but they are placed here because they need"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,26,* access to package protected elements of com.google.gson.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,28,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,29,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,31,public class ParamterizedTypeFixtures {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,33,public static class MyParameterizedType<T> {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,34,public final T value;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,35,public MyParameterizedType(T value) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,36,this.value = value;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,38,public T getValue() {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,39,return value;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,42,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,43,String valueAsJson = getExpectedJson(value);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,44,"return String.format(""{\""value\"":%s}"", valueAsJson);"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,47,private String getExpectedJson(Object obj) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,48,Class<?> clazz = obj.getClass();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,49,if (Primitives.isWrapperType(Primitives.wrap(clazz))) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,50,return obj.toString();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,51,} else if (obj.getClass().equals(String.class)) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,52,"return ""\"""" + obj.toString() + ""\"""";"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,53,} else {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,54,// Try invoking a getExpectedJson() method if it exists
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,55,try {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,56,"Method method = clazz.getMethod(""getExpectedJson"");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,57,Object results = method.invoke(obj);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,58,return (String) results;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,59,} catch (SecurityException e) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,60,throw new RuntimeException(e);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,61,} catch (NoSuchMethodException e) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,62,throw new RuntimeException(e);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,63,} catch (IllegalArgumentException e) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,64,throw new RuntimeException(e);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,65,} catch (IllegalAccessException e) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,66,throw new RuntimeException(e);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,67,} catch (InvocationTargetException e) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,68,throw new RuntimeException(e);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,73,@Override
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,74,public int hashCode() {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,75,return value == null ? 0 : value.hashCode();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,77,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,78,@Override
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,79,public boolean equals(Object obj) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,80,if (this == obj) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,81,return true;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,83,if (obj == null) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,84,return false;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,86,if (getClass() != obj.getClass()) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,87,return false;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,89,MyParameterizedType other = (MyParameterizedType) obj;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,90,if (value == null) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,91,if (other.value != null) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,92,return false;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,94,} else if (!value.equals(other.value)) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,95,return false;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,97,return true;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,101,public static class MyParameterizedTypeInstanceCreator<T>
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,102,implements InstanceCreator<MyParameterizedType<T>>{
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,103,private final T instanceOfT;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,105,* Caution the specified instance is reused by the instance creator for each call.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,106,* This means that the fields of the same objects will be overwritten by Gson.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,107,"* This is usually fine in tests since there we deserialize just once, but quite"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,108,* dangerous in practice.
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,110,* @param instanceOfT
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,112,public MyParameterizedTypeInstanceCreator(T instanceOfT) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,113,this.instanceOfT = instanceOfT;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,115,public MyParameterizedType<T> createInstance(Type type) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,116,return new MyParameterizedType<T>(instanceOfT);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,120,public static class MyParameterizedTypeAdapter<T>
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,121,"implements JsonSerializer<MyParameterizedType<T>>, JsonDeserializer<MyParameterizedType<T>> {"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,122,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,123,public static<T> String getExpectedJson(MyParameterizedType<T> obj) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,124,Class<T> clazz = (Class<T>) obj.value.getClass();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,125,boolean addQuotes = !clazz.isArray() && !Primitives.unwrap(clazz).isPrimitive();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,126,"StringBuilder sb = new StringBuilder(""{\"""");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,127,"sb.append(obj.value.getClass().getSimpleName()).append(""\"":"");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,128,if (addQuotes) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,129,"sb.append(""\"""");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,131,sb.append(obj.value.toString());
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,132,if (addQuotes) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,133,"sb.append(""\"""");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,135,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,136,return sb.toString();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,139,"public JsonElement serialize(MyParameterizedType<T> src, Type classOfSrc,"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,140,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,141,JsonObject json = new JsonObject();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,142,T value = src.getValue();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,143,"json.add(value.getClass().getSimpleName(), context.serialize(value));"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,144,return json;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,147,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,148,"public MyParameterizedType<T> deserialize(JsonElement json, Type typeOfT,"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,149,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,150,Type genericClass = TypeUtils.getActualTypeForFirstTypeVariable(typeOfT);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,151,TypeInfo typeInfo = new TypeInfo(genericClass);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,152,String className = typeInfo.getRawClass().getSimpleName();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,153,T value = (T) json.getAsJsonObject().get(className).getAsObject();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,154,if (typeInfo.isPrimitive()) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,155,PrimitiveTypeAdapter typeAdapter = new PrimitiveTypeAdapter();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,156,"value = (T) typeAdapter.adaptType(value, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,158,return new MyParameterizedType<T>(value);
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,22,* Performs some unit testing for the {@link PrimitiveTypeAdapter} class.
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,24,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,26,public class PrimitiveTypeAdapterTest extends TestCase {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,27,private PrimitiveTypeAdapter typeAdapter;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,29,@Override
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,30,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,31,super.setUp();
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,32,typeAdapter = new PrimitiveTypeAdapter();
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,35,public void testImproperConversion() throws Exception {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,36,double someValue = 1.0;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,37,try {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,38,"typeAdapter.adaptType(someValue, String.class);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,39,"fail(""Should not be able to convert incompatible types."");"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,40,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,43,public void testImproperCharacterConversion() throws Exception {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,44,"String someValue = ""test123"";"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,45,try {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,46,"typeAdapter.adaptType(someValue, Character.class);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,47,"fail(""Should not be able to convert incompatible types."");"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,48,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,51,public void testProperPrimitiveConversions() throws Exception {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,52,"String stringValue = ""1.0"";"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,53,"Double actualValue = typeAdapter.adaptType(stringValue, Double.class);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,54,"assertEquals(1.0, actualValue.doubleValue(), 0.0001);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,56,Double doubleValue = 1.0;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,57,"actualValue = typeAdapter.adaptType(doubleValue, Double.class);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,58,"assertEquals(1.0, actualValue.doubleValue(), 0.0001);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,60,"stringValue = ""A"";"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,61,"Character actualCharacter = typeAdapter.adaptType(stringValue, Character.class);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,62,"assertEquals('A', actualCharacter.charValue());"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,65,public void testProperEnumConversions() throws Exception {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,66,TestEnum expected = TestEnum.TEST1;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,67,"TestEnum actual = typeAdapter.adaptType(expected, TestEnum.class);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,68,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,71,private static enum TestEnum {
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,72,"TEST1, TEST2, TEST3"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,19,import com.google.gson.annotations.SerializedName;
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,23,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,26,* Unit tests for the {@link SerializedNameAnnotationInterceptingNamingPolicy} class.
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,28,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,30,public class SerializedNameAnnotationInterceptingNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,31,"private static final String ANNOTATED_FIELD_NAME = ""annotatedFieldName"";"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,33,private SerializedNameAnnotationInterceptingNamingPolicy policy;
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,35,@Override
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,36,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,37,super.setUp();
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,38,policy = new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,41,public void testFieldWithAnnotation() throws Exception {
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,42,"String fieldName = ""fieldWithAnnotation"";"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,43,Field f = SomeObject.class.getField(fieldName);
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,45,assertFalse(ANNOTATED_FIELD_NAME.equals(fieldName));
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,46,"assertEquals(ANNOTATED_FIELD_NAME, policy.translateName(f));"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,49,public void testFieldWithoutAnnotation() throws Exception {
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,50,"String fieldName = ""fieldWithoutAnnotation"";"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,51,Field f = SomeObject.class.getField(fieldName);
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,53,"assertEquals(fieldName, policy.translateName(f));"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,56,private static class SomeObject {
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,57,@SerializedName(ANNOTATED_FIELD_NAME) public final int fieldWithAnnotation = 1;
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,58,public final int fieldWithoutAnnotation = 1;
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,24,import java.util.List;
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,27,* Small test for the {@link TypeInfoArray}.
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,29,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,32,public class TypeInfoArrayTest extends TestCase {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,34,public void testArray() {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,35,"String[] a = {""a"", ""b"", ""c""};"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,36,TypeInfoArray typeInfo = new TypeInfoArray(a.getClass());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,37,"assertEquals(a.getClass(), typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,38,"assertEquals(String.class, typeInfo.getComponentRawType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,41,public void testArrayOfArrays() {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,42,String[][] a = {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,43,"new String[]{""a1"", ""a2"", ""a3""},"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,44,"new String[]{""b1"", ""b2"", ""b3""},"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,45,"new String[]{""c1"", ""c2"", ""c3""}};"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,46,TypeInfoArray typeInfo = new TypeInfoArray(a.getClass());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,47,"assertEquals(a.getClass(), typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,48,"assertEquals(String.class, typeInfo.getComponentRawType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,49,"assertEquals(String[].class, typeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,52,public void testParameterizedArray() {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,53,Type type = new TypeToken<List<String>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,54,TypeInfoArray typeInfo = new TypeInfoArray(type);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,55,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,56,"assertEquals(List.class, typeInfo.getComponentRawType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,59,public void testParameterizedArrayOfArrays() {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,60,Type type = new TypeToken<List<String>[][]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,61,Type secondLevelType = new TypeToken<List<String>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,63,TypeInfoArray typeInfo = new TypeInfoArray(type);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,64,"assertEquals(List[][].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,65,"assertEquals(secondLevelType, typeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,66,"assertEquals(List.class, typeInfo.getComponentRawType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,69,public void testNestedParameterizedArray() {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,70,Type type = new TypeToken<List<List<String>>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,71,Type secondLevelType = new TypeToken<List<List<String>>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,73,TypeInfoArray typeInfo = new TypeInfoArray(type);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,74,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,75,"assertEquals(secondLevelType, typeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,76,"assertEquals(List.class, typeInfo.getComponentRawType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,79,public void testPrimitiveArray() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,80,TypeInfoArray arrayTypeInfo = new TypeInfoArray(int[].class);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,82,assertTrue(arrayTypeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,83,"assertEquals(int.class, arrayTypeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,84,assertFalse(arrayTypeInfo.isPrimitiveOrStringAndNotAnArray());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,87,public void testStringArray() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,88,TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,90,assertTrue(arrayTypeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,91,"assertEquals(String.class, arrayTypeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,92,"assertEquals(String[].class, arrayTypeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,95,public void testPrimitiveArrayType() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,96,TypeInfoArray typeInfo = new TypeInfoArray(long[].class);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,97,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,98,"assertEquals(long.class, typeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,99,"assertEquals(long[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,102,public void testStringArrayType() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,103,TypeInfoArray typeInfo = new TypeInfoArray(String[].class);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,104,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,105,"assertEquals(String[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,106,"assertEquals(String.class, typeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,109,public void testArrayAsParameterizedTypes() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,110,Type type = new TypeToken<List<String>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,111,Type secondLevelType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,113,TypeInfoArray typeInfo = new TypeInfoArray(type);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,114,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,115,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,116,"assertEquals(secondLevelType, typeInfo.getSecondLevelType());"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,118,Type actualType = typeInfo.getActualType();
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,119,"assertEquals(type, actualType);"
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,120,Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType);
True,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,121,"assertEquals(String.class, actualTypeForFirstTypeVariable);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,23,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,24,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,25,import java.util.List;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,28,* Small test to ensure that the TypeInfoFactory is return the object that we expect.
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,30,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,31,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,33,public class TypeInfoFactoryTest extends TestCase {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,35,private static Type OBJ_TYPE = new TypeToken<ObjectWithDifferentFields<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,36,private ObjectWithDifferentFields<Integer> obj;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,38,@Override
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,39,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,40,super.setUp();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,41,obj = new ObjectWithDifferentFields<Integer>();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,44,public void testSimpleField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,45,"Field f = obj.getClass().getField(""simpleField"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,46,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,48,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,49,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,50,"assertEquals(String.class, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,51,"assertEquals(String.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,54,public void testEnumField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,55,"Field f = obj.getClass().getField(""enumField"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,56,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,58,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,59,assertTrue(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,60,"assertEquals(ObjectWithDifferentFields.TestEnum.class, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,61,"assertEquals(ObjectWithDifferentFields.TestEnum.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,64,public void testParameterizedTypeField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,65,Type listType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,66,"Field f = obj.getClass().getField(""simpleParameterizedType"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,67,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,69,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,70,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,71,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,72,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,75,public void testNestedParameterizedTypeField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,76,Type listType = new TypeToken<List<List<String>>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,77,"Field f = obj.getClass().getField(""simpleNestedParameterizedType"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,78,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,80,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,81,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,82,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,83,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,86,public void testGenericArrayTypeField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,87,Type listType = new TypeToken<List<String>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,88,"Field f = obj.getClass().getField(""simpleGenericArray"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,89,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,91,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,92,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,93,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,94,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,97,public void testTypeVariableField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,98,"Field f = obj.getClass().getField(""typeVariableObj"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,99,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,101,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,102,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,103,"assertEquals(Integer.class, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,104,"assertEquals(Integer.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,107,public void testTypeVariableArrayField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,108,"Field f = obj.getClass().getField(""typeVariableArray"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,109,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,111,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,112,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,113,"assertEquals(Integer[].class, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,114,"assertEquals(Integer[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,117,public void testMutliDimensionalTypeVariableArrayField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,118,"Field f = obj.getClass().getField(""mutliDimensionalTypeVariableArray"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,119,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,121,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,122,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,123,"assertEquals(Integer[][][].class, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,124,"assertEquals(Integer[][][].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,127,public void testParameterizedTypeVariableField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,128,Type listType = new TypeToken<List<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,129,"Field f = obj.getClass().getField(""listOfTypeVariables"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,130,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,132,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,133,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,134,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,135,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,138,public void testNestedParameterizedTypeVariableField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,139,Type listType = new TypeToken<List<List<Integer>>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,140,"Field f = obj.getClass().getField(""listOfListsOfTypeVariables"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,141,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,143,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,144,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,145,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,146,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,149,public void testParameterizedTypeVariableArrayField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,150,Type listType = new TypeToken<List<Integer>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,151,"Field f = obj.getClass().getField(""listOfTypeVariablesArray"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,152,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,154,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,155,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,156,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,157,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,160,public void testWildcardField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,161,Type listType = new TypeToken<List<Object>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,162,"Field f = obj.getClass().getField(""listWithWildcard"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,163,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,165,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,166,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,167,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,168,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,171,public void testArrayOfWildcardField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,172,Type listType = new TypeToken<List<Object>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,173,"Field f = obj.getClass().getField(""arrayOfListWithWildcard"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,174,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,176,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,177,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,178,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,179,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,182,public void testListStringWildcardField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,183,Type listType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,184,"Field f = obj.getClass().getField(""listWithStringWildcard"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,185,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,187,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,188,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,189,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,190,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,193,public void testArrayOfListStringWildcardField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,194,Type listType = new TypeToken<List<String>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,195,"Field f = obj.getClass().getField(""arrayOfListWithStringWildcard"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,196,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,198,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,199,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,200,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,201,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,204,public void testListTypeVariableWildcardField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,205,Type listType = new TypeToken<List<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,206,"Field f = obj.getClass().getField(""listWithTypeVariableWildcard"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,207,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,209,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,210,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,211,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,212,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,215,public void testArrayOfListTypeVariableWildcardField() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,216,Type listType = new TypeToken<List<Integer>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,217,"Field f = obj.getClass().getField(""arrayOfListWithTypeVariableWildcard"");"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,218,"TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,220,assertTrue(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,221,assertFalse(typeInfo.isEnum());
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,222,"assertEquals(listType, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,223,"assertEquals(List[].class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,226,private static class ObjectWithDifferentFields<T> {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,227,public static enum TestEnum {
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,228,"TEST_1, TEST_2;"
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,231,public String simpleField;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,232,public TestEnum enumField;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,233,public List<String> simpleParameterizedType;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,234,public List<List<String>> simpleNestedParameterizedType;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,235,public List<String>[] simpleGenericArray;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,237,public T typeVariableObj;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,238,public T[] typeVariableArray;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,239,public T[][][] mutliDimensionalTypeVariableArray;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,240,public List<T> listOfTypeVariables;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,241,public List<List<T>> listOfListsOfTypeVariables;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,242,public List<T>[] listOfTypeVariablesArray;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,244,public List<?> listWithWildcard;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,245,public List<?>[] arrayOfListWithWildcard;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,246,public List<? extends String> listWithStringWildcard;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,247,public List<? extends String>[] arrayOfListWithStringWildcard;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,249,public List<? extends T> listWithTypeVariableWildcard;
True,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,250,public List<? extends T>[] arrayOfListWithTypeVariableWildcard;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,24,import java.util.HashMap;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,25,import java.util.List;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,26,import java.util.Map;
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,29,* Unit test for the default JSON map serialization object located in the
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,30,* {@link DefaultTypeAdapters} class.
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,32,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,34,public class TypeInfoMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,36,public void testInvalidConstruction() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,37,try {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,38,new TypeInfoMap(String.class);
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,39,"fail(""Must be a ParameterizedType"");"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,40,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,43,public void testNonMapConstruction() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,44,try {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,45,Type parameterizedMapType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,46,new TypeInfoMap(parameterizedMapType);
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,47,"fail(""The raw type must be a Map"");"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,48,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,51,public void testBasicGetters() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,52,"Type parameterizedMapType = new TypeToken<Map<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,53,TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType);
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,55,"assertEquals(String.class, mapTypeInfo.getKeyType());"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,56,"assertEquals(Integer.class, mapTypeInfo.getValueType());"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,59,public void testMapImplementations() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,60,"Type parameterizedMapType = new TypeToken<HashMap<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,61,TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType);
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,63,"assertEquals(String.class, mapTypeInfo.getKeyType());"
True,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,64,"assertEquals(Integer.class, mapTypeInfo.getValueType());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,24,import java.util.List;
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,27,* Exercising the construction of the Parameter object and ensure the
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,28,* proper types are returned.
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,32,public class TypeInfoTest extends TestCase {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,34,public void testPrimitive() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,35,TypeInfo typeInfo = new TypeInfo(boolean.class);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,37,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,38,assertFalse(typeInfo.isString());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,39,assertTrue(typeInfo.isPrimitive());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,40,"assertEquals(boolean.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,41,"assertEquals(Boolean.class, typeInfo.getWrappedClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,44,public void testPrimitiveWrapper() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,45,TypeInfo typeInfo = new TypeInfo(Integer.class);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,47,"assertEquals(Integer.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,48,assertTrue(typeInfo.isPrimitive());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,49,assertTrue(typeInfo.isPrimitiveOrStringAndNotAnArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,52,public void testString() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,53,TypeInfo typeInfo = new TypeInfo(String.class);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,55,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,56,assertFalse(typeInfo.isPrimitive());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,57,"assertEquals(String.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,58,assertTrue(typeInfo.isPrimitiveOrStringAndNotAnArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,61,public void testObject() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,62,TypeInfo typeInfo = new TypeInfo(Object.class);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,64,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,65,assertFalse(typeInfo.isPrimitive());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,66,"assertEquals(Object.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,67,assertFalse(typeInfo.isPrimitiveOrStringAndNotAnArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,70,public void testPrimitiveType() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,71,TypeInfo typeInfo = new TypeInfo(long.class);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,72,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,73,"assertEquals(long.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,76,public void testObjectType() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,77,TypeInfo typeInfo = new TypeInfo(String.class);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,78,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,79,assertTrue(typeInfo.isString());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,80,"assertEquals(String.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,83,public void testParameterizedTypes() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,84,Type type = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,85,TypeInfo typeInfo = new TypeInfo(type);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,87,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,88,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,89,"assertEquals(type, typeInfo.getActualType());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,92,public void testGenericizedGenericType() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,93,Type type = new TypeToken<List<List<String>>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,94,Type genericType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,96,TypeInfo typeInfo = new TypeInfo(type);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,97,assertFalse(typeInfo.isArray());
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,98,"assertEquals(List.class, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,99,Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(type);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,100,"assertEquals(genericType, actualTypeForFirstTypeVariable);"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,102,typeInfo = new TypeInfo(genericType);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,103,actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(genericType);
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,104,"assertEquals(String.class, actualTypeForFirstTypeVariable);"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,107,public void testStrangeTypeParameters() throws Exception {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,108,try {
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,109,new TypeInfo(new Type() {});
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,110,"fail(""Should not be able to determine this unknown type"");"
True,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,111,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,23,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,24,import java.util.Collection;
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,25,import java.util.Map;
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,28,* Unit tests for {@link TypeUtils}.
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,30,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,32,public class TypeUtilsTest extends TestCase {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,33,"private static final Type MAP_TYPE = new TypeToken<Map<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,35,public void testGetActualTypeForFirstTypeVariable() {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,36,"assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE));"
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,39,public void testIsArrayForNonArrayClasses() {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,40,assertFalse(TypeUtils.isArray(Boolean.class));
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,41,assertFalse(TypeUtils.isArray(MAP_TYPE));
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,44,public void testIsArrayForArrayClasses() {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,45,assertTrue(TypeUtils.isArray(String[].class));
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,46,assertTrue(TypeUtils.isArray(Integer[][].class));
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,47,assertTrue(TypeUtils.isArray(Collection[].class));
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,50,public void testToRawClassForNonGenericClasses() {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,51,"assertEquals(String.class, TypeUtils.toRawClass(String.class));"
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,54,public void testToRawClassForGenericClasses() {
True,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,55,"assertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE));"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,19,import com.google.gson.LowerCaseNamingPolicy;
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,20,import com.google.gson.UpperCaseNamingPolicy;
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,25,* Tests for the {@link LowerCaseNamingPolicy} class.
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,27,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,29,public class UpperCaseNamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,30,"private static final String ALL_LOWER = ""abcdefg"";"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,31,"private static final String ALL_UPPER = ""ABCDEFG"";"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,32,"private static final String MIXED = ""aBcdeFg"";"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,34,private UpperCaseNamingPolicy namingPolicy;
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,36,@Override
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,37,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,38,super.setUp();
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,39,namingPolicy = new UpperCaseNamingPolicy();
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,42,public void testAllLowerCase() throws Exception {
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,43,"assertEquals(ALL_UPPER, namingPolicy.translateName(ALL_LOWER, String.class, null));"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,46,public void testAllUpperCase() throws Exception {
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,47,"assertEquals(ALL_UPPER, namingPolicy.translateName(ALL_UPPER, String.class, null));"
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,50,public void testMixedCase() throws Exception {
True,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,gson/src/test/java/com/google/gson/UpperCaseNamingPolicyTest.java,51,"assertEquals(ALL_UPPER, namingPolicy.translateName(MIXED, String.class, null));"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,19,import com.google.gson.annotations.Since;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,23,import java.lang.reflect.Field;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,26,* Unit tests for the {@link VersionExclusionStrategy} class.
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,28,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,30,public class VersionExclusionStrategyTest extends TestCase {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,31,private static final double VERSION = 5.0D;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,33,public void testDisallowNegativeValuesAndFailFast() throws Exception {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,34,try {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,35,new VersionExclusionStrategy(-1.0D);
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,36,"fail(""should have thrown an exception."");"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,37,} catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,40,public void testClassAndFieldAreAtSameVersion() throws Exception {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,41,Class<MockObject> clazz = MockObject.class;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,42,"Field f = clazz.getField(""someField"");"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,43,VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION);
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,45,assertFalse(strategy.shouldSkipClass(clazz));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,46,assertFalse(strategy.shouldSkipField(f));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,49,public void testClassAndFieldAreBehindInVersion() throws Exception {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,50,Class<MockObject> clazz = MockObject.class;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,51,"Field f = clazz.getField(""someField"");"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,52,VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION + 1);
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,54,assertFalse(strategy.shouldSkipClass(clazz));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,55,assertFalse(strategy.shouldSkipField(f));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,58,public void testClassAndFieldAreAheadInVersion() throws Exception {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,59,Class<MockObject> clazz = MockObject.class;
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,60,"Field f = clazz.getField(""someField"");"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,61,VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1);
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,63,assertTrue(strategy.shouldSkipClass(clazz));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,64,assertTrue(strategy.shouldSkipField(f));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,67,@Since(VERSION)
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,68,private static class MockObject {
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,69,@Since(VERSION)
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,70,public final int someField = 0;
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,17,package com.google.gson.common;
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,19,import junit.framework.Assert;
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,21,import java.util.Collection;
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,24,* Handy asserts that we wish were present in {@link Assert}
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,25,* so that we didn't have to write them.
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,27,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,29,public class MoreAsserts {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,31,"public static void assertEquals(int[] expected, int[] target) {"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,32,if (expected == null) {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,33,Assert.assertNull(target);
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,35,"Assert.assertEquals(expected.length, target.length);"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,36,for (int i = 0; i < expected.length; ++i) {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,37,"Assert.assertEquals(expected[i], target[i]);"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,41,"public static void assertEquals(Integer[] expected, Integer[] target) {"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,42,if (expected == null) {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,43,Assert.assertNull(target);
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,45,"Assert.assertEquals(expected.length, target.length);"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,46,for (int i = 0; i < expected.length; ++i) {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,47,"Assert.assertEquals(expected[i], target[i]);"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,52,* Asserts that the specified {@code value} is not present in {@code collection}
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,53,* @param collection the collection to look into
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,54,* @param value the value that needs to be checked for presence
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,56,"public static <T> void assertContains(Collection<T> collection, T value) {"
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,57,for (T entry : collection) {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,58,if (entry.equals(value)) {
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,59,return;
True,gson/src/test/java/com/google/gson/common/MoreAsserts.java,gson/src/test/java/com/google/gson/common/MoreAsserts.java,62,"Assert.fail(value + "" not present in "" + collection);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,17,package com.google.gson.common;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,19,import com.google.gson.annotations.SerializedName;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,22,* Types used for testing JSON serialization and deserialization
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,24,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,25,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,27,public class TestTypes {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,29,public static class StringWrapper {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,30,public final String someConstantStringInstanceField;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,32,StringWrapper() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,33,"this(""Blah"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,36,public StringWrapper(String value) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,37,someConstantStringInstanceField = value;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,41,public static class BagOfPrimitives {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,42,public static final long DEFAULT_VALUE = 0;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,43,public final long longValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,44,public final int intValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,45,public final boolean booleanValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,46,public final String stringValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,48,public BagOfPrimitives() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,49,"this(DEFAULT_VALUE, 0, false, """");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,52,"public BagOfPrimitives(long longValue, int intValue, boolean booleanValue, String stringValue) {"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,53,this.longValue = longValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,54,this.intValue = intValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,55,this.booleanValue = booleanValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,56,this.stringValue = stringValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,59,public int getIntValue() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,60,return intValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,63,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,64,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,65,"sb.append(""{"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,66,"sb.append(""\""longValue\"":"").append(longValue).append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,67,"sb.append(""\""intValue\"":"").append(intValue).append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,68,"sb.append(""\""booleanValue\"":"").append(booleanValue).append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,69,"sb.append(""\""stringValue\"":\"""").append(stringValue).append(""\"""");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,70,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,71,return sb.toString();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,74,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,75,public int hashCode() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,76,final int prime = 31;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,77,int result = 1;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,78,result = prime * result + (booleanValue ? 1231 : 1237);
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,79,result = prime * result + intValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,80,result = prime * result + (int) (longValue ^ (longValue >>> 32));
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,81,result = prime * result + ((stringValue == null) ? 0 : stringValue.hashCode());
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,82,return result;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,85,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,86,public boolean equals(Object obj) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,87,if (this == obj)
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,88,return true;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,89,if (obj == null)
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,90,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,91,if (getClass() != obj.getClass())
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,92,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,93,BagOfPrimitives other = (BagOfPrimitives) obj;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,94,if (booleanValue != other.booleanValue)
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,95,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,96,if (intValue != other.intValue)
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,97,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,98,if (longValue != other.longValue)
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,99,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,100,if (stringValue == null) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,101,if (other.stringValue != null)
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,102,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,103,} else if (!stringValue.equals(other.stringValue))
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,104,return false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,105,return true;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,108,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,109,public String toString() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,110,"return String.format(""(longValue=%d,intValue=%d,booleanValue=%b,stringValue=%s)"","
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,111,"longValue, intValue, booleanValue, stringValue);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,115,public static class BagOfPrimitiveWrappers {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,116,private final Long longValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,117,private final Integer intValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,118,private final Boolean booleanValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,120,public BagOfPrimitiveWrappers() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,121,"this(0L, 0, false);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,124,"public BagOfPrimitiveWrappers(Long longValue, Integer intValue, Boolean booleanValue) {"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,125,this.longValue = longValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,126,this.intValue = intValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,127,this.booleanValue = booleanValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,130,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,131,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,132,"sb.append(""{"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,133,"sb.append(""\""longValue\"":"").append(longValue).append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,134,"sb.append(""\""intValue\"":"").append(intValue).append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,135,"sb.append(""\""booleanValue\"":"").append(booleanValue);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,136,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,137,return sb.toString();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,141,public static class PrimitiveArray {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,142,private final long[] longArray;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,144,public PrimitiveArray() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,145,this(new long[0]);
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,148,public PrimitiveArray(long[] longArray) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,149,this.longArray = longArray;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,152,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,153,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,154,"sb.append(""{\""longArray\"":["");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,156,boolean first = true;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,157,for (long l : longArray) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,158,if (!first) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,159,"sb.append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,160,} else {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,161,first = false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,163,sb.append(l);
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,166,"sb.append(""]}"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,167,return sb.toString();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,171,public static class ClassWithNoFields {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,172,// Nothing here.. .
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,173,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,174,public boolean equals(Object other) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,175,return other.getClass() == ClassWithNoFields.class;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,179,public static class Nested {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,180,private final BagOfPrimitives primitive1;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,181,private final BagOfPrimitives primitive2;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,183,public Nested() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,184,"this(null, null);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,187,"public Nested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,188,this.primitive1 = primitive1;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,189,this.primitive2 = primitive2;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,192,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,193,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,194,"sb.append(""{"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,195,appendFields(sb);
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,196,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,197,return sb.toString();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,200,public void appendFields(StringBuilder sb) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,201,if (primitive1 != null) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,202,"sb.append(""\""primitive1\"":"").append(primitive1.getExpectedJson());"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,204,if (primitive1 != null && primitive2 != null) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,205,"sb.append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,207,if (primitive2 != null) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,208,"sb.append(""\""primitive2\"":"").append(primitive2.getExpectedJson());"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,213,public static class ClassWithTransientFields {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,214,public final transient long transientLongValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,215,private final long[] longValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,217,public ClassWithTransientFields() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,218,this(0L);
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,221,public ClassWithTransientFields(long value) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,222,longValue = new long[] { value };
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,223,transientLongValue = value + 1;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,226,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,227,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,228,"sb.append(""{"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,229,"sb.append(""\""longValue\"":["").append(longValue[0]).append(""]"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,230,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,231,return sb.toString();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,235,public static class ClassWithCustomTypeConverter {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,236,private final BagOfPrimitives bag;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,237,private final int value;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,239,public ClassWithCustomTypeConverter() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,240,"this(new BagOfPrimitives(), 10);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,243,public ClassWithCustomTypeConverter(int value) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,244,"this(new BagOfPrimitives(value, value, false, """"), value);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,247,"public ClassWithCustomTypeConverter(BagOfPrimitives bag, int value) {"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,248,this.bag = bag;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,249,this.value = value;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,252,public BagOfPrimitives getBag() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,253,return bag;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,256,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,257,"return ""{\""url\"":\"""" + bag.getExpectedJson() + ""\"",\""value\"":"" + value + ""}"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,260,public int getValue() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,261,return value;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,265,public static class ArrayOfObjects {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,266,private final BagOfPrimitives[] elements;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,267,public ArrayOfObjects() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,268,elements = new BagOfPrimitives[3];
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,269,for (int i = 0; i < elements.length; ++i) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,270,"elements[i] = new BagOfPrimitives(i, i+2, false, ""i""+i);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,273,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,274,"StringBuilder sb = new StringBuilder(""{\""elements\"":["");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,275,boolean first = true;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,276,for (BagOfPrimitives element : elements) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,277,if (first) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,278,first = false;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,279,} else {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,280,"sb.append("","");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,282,sb.append(element.getExpectedJson());
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,284,"sb.append(""]}"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,285,return sb.toString();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,289,public static enum MyEnum {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,290,"VALUE1, VALUE2;"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,292,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,293,"return ""\"""" + toString() + ""\"""";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,297,public static class ClassOverridingEquals {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,298,public ClassOverridingEquals ref;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,300,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,301,if (ref == null) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,302,"return ""{}"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,304,"return ""{\""ref\"":"" + ref.getExpectedJson() + ""}"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,306,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,307,public boolean equals(Object obj) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,308,return true;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,311,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,312,public int hashCode() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,313,return 1;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,317,public static class ClassWithArray {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,318,public final Object[] array;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,319,public ClassWithArray() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,320,array = null;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,323,public ClassWithArray(Object[] array) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,324,this.array = array;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,328,public static class ClassWithObjects {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,329,public final BagOfPrimitives bag;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,330,public ClassWithObjects() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,331,this(new BagOfPrimitives());
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,333,public ClassWithObjects(BagOfPrimitives bag) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,334,this.bag = bag;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,338,public static class ClassWithSerializedNameFields {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,339,"@SerializedName(""fooBar"") public final int f;"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,341,public ClassWithSerializedNameFields() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,342,this(1);
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,344,public ClassWithSerializedNameFields(int f) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,345,this.f = f;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,348,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,349,"return '{' + ""\""fooBar\"":"" + f + '}';"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,19,import com.google.gson.common.MoreAsserts;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,20,import com.google.gson.common.TestTypes.MyEnum;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,21,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,25,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,26,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,27,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,30,* Functional tests for Json serialization and deserialization of arrays.
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,32,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,33,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,35,public class ArrayTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,36,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,38,@Override
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,39,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,40,super.setUp();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,41,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,44,public void testTopLevelArrayOfIntsSerialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,45,"int[] target = {1, 2, 3, 4, 5, 6, 7, 8, 9};"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,46,"assertEquals(""[1,2,3,4,5,6,7,8,9]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,49,public void testTopLevelArrayOfIntsDeserialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,50,"int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,51,"int[] actual = gson.fromJson(""[1,2,3,4,5,6,7,8,9]"", int[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,52,"MoreAsserts.assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,55,public void testEmptyArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,56,int[] target = {};
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,57,"assertEquals(""[]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,60,public void testEmptyArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,61,"int[] actualObject = gson.fromJson(""[]"", int[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,62,assertTrue(actualObject.length == 0);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,64,"Integer[] actualObject2 = gson.fromJson(""[]"", Integer[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,65,assertTrue(actualObject2.length == 0);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,68,public void testNullsInArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,69,"String[] array = {""foo"", null, ""bar""};"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,70,"String expected = ""[\""foo\"",null,\""bar\""]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,71,String json = gson.toJson(array);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,72,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,75,public void testNullsInArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,76,"String json = ""[\""foo\"",null,\""bar\""]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,77,"String[] expected = {""foo"", null, ""bar""};"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,78,"String[] target = gson.fromJson(json, expected.getClass());"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,79,for (int i = 0; i < expected.length; ++i) {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,80,"assertEquals(expected[i], target[i]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,84,public void testArrayOfStringsSerialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,85,"String[] target = {""Hello"", ""World""};"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,86,"assertEquals(""[\""Hello\"",\""World\""]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,89,public void testArrayOfStringsDeserialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,90,"String json = ""[\""Hello\"",\""World\""]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,91,"String[] target = gson.fromJson(json, String[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,92,"assertEquals(""Hello"", target[0]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,93,"assertEquals(""World"", target[1]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,96,public void testTopLevelEnumInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,97,"String json = ""["" + MyEnum.VALUE1.getExpectedJson() + ""]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,98,"MyEnum target = gson.fromJson(json, MyEnum.class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,99,"assertEquals(json, ""["" + target.getExpectedJson() + ""]"");"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,102,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,103,public void testArrayOfCollectionSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,104,"StringBuilder sb = new StringBuilder(""["");"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,105,int arraySize = 3;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,107,Type typeToSerialize = new TypeToken<Collection<Integer>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,108,Collection<Integer>[] arrayOfCollection = new ArrayList[arraySize];
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,109,for (int i = 0; i < arraySize; ++i) {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,110,int startValue = (3 * i) + 1;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,111,"sb.append('[').append(startValue).append(',').append(startValue + 1).append(']');"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,112,ArrayList<Integer> tmpList = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,113,tmpList.add(startValue);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,114,tmpList.add(startValue + 1);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,115,arrayOfCollection[i] = tmpList;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,117,if (i < arraySize - 1) {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,118,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,121,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,123,"String json = gson.toJson(arrayOfCollection, typeToSerialize);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,124,"assertEquals(sb.toString(), json);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,127,public void testArrayOfCollectionDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,128,"String json = ""[[1,2],[3,4]]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,129,Type type = new TypeToken<Collection<Integer>[]>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,130,"Collection<Integer>[] target = gson.fromJson(json, type);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,132,"assertEquals(2, target.length);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,133,"MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,134,"MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,20,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,21,import com.google.gson.common.MoreAsserts;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,22,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,23,import com.google.gson.common.TestTypes.MyEnum;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,24,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,26,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,28,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,29,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,30,import java.util.Arrays;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,31,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,32,import java.util.Iterator;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,33,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,36,* Functional tests for Json serialization and deserialization of collections.
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,38,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,39,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,41,public class CollectionTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,42,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,44,@Override
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,45,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,46,super.setUp();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,47,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,50,public void testTopLevelCollectionOfIntegersSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,51,"Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,52,Type targetType = new TypeToken<Collection<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,53,"String json = gson.toJson(target, targetType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,54,"assertEquals(""[1,2,3,4,5,6,7,8,9]"", json);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,57,public void testTopLevelCollectionOfIntegersDeserialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,58,"String json = ""[0,1,2,3,4,5,6,7,8,9]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,59,Type collectionType = new TypeToken<Collection<Integer>>() { }.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,60,"Collection<Integer> target = gson.fromJson(json, collectionType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,61,"int[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,62,"MoreAsserts.assertEquals(expected, toIntArray(target));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,65,public void testTopLevelListOfIntegerCollectionsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,66,"String json = ""[[1,2,3],[4,5,6],[7,8,9]]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,67,Type collectionType = new TypeToken<Collection<Collection<Integer>>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,68,"List<Collection<Integer>> target = gson.fromJson(json, collectionType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,69,int[][] expected = new int[3][3];
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,70,for (int i = 0; i < 3; ++i) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,71,int start = (3 * i) + 1;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,72,for (int j = 0; j < 3; ++j) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,73,expected[i][j] = start + j;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,77,for (int i = 0; i < 3; i++) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,78,"MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i)));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,82,public void testNullsInListSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,83,List<String> list = new ArrayList<String>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,84,"list.add(""foo"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,85,list.add(null);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,86,"list.add(""bar"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,87,"String expected = ""[\""foo\"",null,\""bar\""]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,88,Type typeOfList = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,89,"String json = gson.toJson(list, typeOfList);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,90,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,93,public void testNullsInListDeserialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,94,List<String> expected = new ArrayList<String>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,95,"expected.add(""foo"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,96,expected.add(null);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,97,"expected.add(""bar"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,98,"String json = ""[\""foo\"",null,\""bar\""]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,99,Type expectedType = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,100,"List<String> target = gson.fromJson(json, expectedType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,101,for (int i = 0; i < expected.size(); ++i) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,102,"assertEquals(expected.get(i), target.get(i));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,106,public void testCollectionOfStringsSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,107,List<String> target = new ArrayList<String>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,108,"target.add(""Hello"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,109,"target.add(""World"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,110,"assertEquals(""[\""Hello\"",\""World\""]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,113,public void testCollectionOfBagOfPrimitivesSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,114,List<BagOfPrimitives> target = new ArrayList<BagOfPrimitives>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,115,"BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, ""blah"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,116,"BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, ""blahB"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,117,target.add(objA);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,118,target.add(objB);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,120,String result = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,121,"assertTrue(result.startsWith(""[""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,122,"assertTrue(result.endsWith(""]""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,123,for (BagOfPrimitives obj : target) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,124,assertTrue(result.contains(obj.getExpectedJson()));
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,128,public void testCollectionOfEnumsSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,129,Type type = new TypeToken<Collection<MyEnum>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,130,Collection<MyEnum> target = new ArrayList<MyEnum>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,131,target.add(MyEnum.VALUE1);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,132,target.add(MyEnum.VALUE2);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,133,"String expectedJson = ""[\""VALUE1\"",\""VALUE2\""]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,134,String actualJson = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,135,"assertEquals(expectedJson, actualJson);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,136,"actualJson = gson.toJson(target, type);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,137,"assertEquals(expectedJson, actualJson);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,140,public void testCollectionOfEnumsDeserialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,141,Type type = new TypeToken<Collection<MyEnum>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,142,"String json = ""[\""VALUE1\"",\""VALUE2\""]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,143,"Collection<MyEnum> target = gson.fromJson(json, type);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,144,"MoreAsserts.assertContains(target, MyEnum.VALUE1);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,145,"MoreAsserts.assertContains(target, MyEnum.VALUE2);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,148,public void testCollectionOfStringsDeserialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,149,"String json = ""[\""Hello\"",\""World\""]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,150,Type collectionType = new TypeToken<Collection<String>>() { }.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,151,"Collection<String> target = gson.fromJson(json, collectionType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,153,"assertTrue(target.contains(""Hello""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,154,"assertTrue(target.contains(""World""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,157,public void testRawCollectionOfIntegersSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,158,"Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,159,"assertEquals(""[1,2,3,4,5,6,7,8,9]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,162,public void testRawCollectionDeserializationNotAlllowed() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,163,"String json = ""[0,1,2,3,4,5,6,7,8,9]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,164,try {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,165,"gson.fromJson(json, Collection.class);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,166,"fail(""Can not deserialize a non-genericized collection."");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,167,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,169,"json = ""[\""Hello\"", \""World\""]"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,170,try {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,171,"gson.fromJson(json, Collection.class);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,172,"fail(""Can not deserialize a non-genericized collection."");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,173,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,176,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,177,public void testRawCollectionOfBagOfPrimitivesNotAllowed() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,178,try {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,179,"BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, ""stringValue"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,180,"String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,181,"Collection target = gson.fromJson(json, Collection.class);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,182,"assertEquals(2, target.size());"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,183,for (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,184,"assertEquals(bag.getExpectedJson(), bag1.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,186,"fail(""Raw collection of objects should not work"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,187,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,191,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,192,private static int[] toIntArray(Collection collection) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,193,int[] ints = new int[collection.size()];
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,194,int i = 0;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,195,for (Iterator iterator = collection.iterator(); iterator.hasNext(); ++i) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,196,Object obj = iterator.next();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,197,if (obj instanceof Integer) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,198,ints[i] = ((Integer)obj).intValue();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,199,} else if (obj instanceof Long) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,200,ints[i] = ((Long)obj).intValue();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,203,return ints;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,20,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,21,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,22,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,23,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,24,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,25,import com.google.gson.JsonPrimitive;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,26,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,27,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,28,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,29,import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,31,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,33,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,36,* Functional tests for the support of custom serializer and deserializers.
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,38,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,39,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,41,public class CustomTypeAdaptersTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,42,private GsonBuilder builder;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,44,@Override
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,45,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,46,super.setUp();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,47,builder = new GsonBuilder();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,50,public void testCustomSerializers() {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,51,Gson gson = builder.registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,52,"ClassWithCustomTypeConverter.class, new JsonSerializer<ClassWithCustomTypeConverter>() {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,53,"public JsonElement serialize(ClassWithCustomTypeConverter src, Type typeOfSrc,"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,54,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,55,JsonObject json = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,56,"json.addProperty(""bag"", 5);"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,57,"json.addProperty(""value"", 25);"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,58,return json;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,60,}).create();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,61,ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,62,"assertEquals(""{\""bag\"":5,\""value\"":25}"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,65,public void testCustomDeserializers() {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,66,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,67,"ClassWithCustomTypeConverter.class, new JsonDeserializer<ClassWithCustomTypeConverter>() {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,68,"public ClassWithCustomTypeConverter deserialize(JsonElement json, Type typeOfT,"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,69,JsonDeserializationContext context) {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,70,JsonObject jsonObject = json.getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,71,"int value = jsonObject.get(""bag"").getAsInt();"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,72,"return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,73,"value, false, """"), value);"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,75,}).create();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,76,"String json = ""{\""bag\"":5,\""value\"":25}"";"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,77,"ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,78,"assertEquals(5, target.getBag().getIntValue());"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,81,public void testCustomNestedSerializers() {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,82,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,83,"BagOfPrimitives.class, new JsonSerializer<BagOfPrimitives>() {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,84,"public JsonElement serialize(BagOfPrimitives src, Type typeOfSrc,"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,85,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,86,return new JsonPrimitive(6);
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,88,}).create();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,89,ClassWithCustomTypeConverter target = new ClassWithCustomTypeConverter();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,90,"assertEquals(""{\""bag\"":6,\""value\"":10}"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,93,public void testCustomNestedDeserializers() {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,94,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,95,"BagOfPrimitives.class, new JsonDeserializer<BagOfPrimitives>() {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,96,"public BagOfPrimitives deserialize(JsonElement json, Type typeOfT,"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,97,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,98,int value = json.getAsInt();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,99,"return new BagOfPrimitives(value, value, false, """");"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,101,}).create();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,102,"String json = ""{\""bag\"":7,\""value\"":25}"";"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,103,"ClassWithCustomTypeConverter target = gson.fromJson(json, ClassWithCustomTypeConverter.class);"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,104,"assertEquals(7, target.getBag().getIntValue());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,20,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,21,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,25,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,26,import java.math.BigDecimal;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,27,import java.math.BigInteger;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,28,import java.net.URI;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,29,import java.net.URL;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,30,import java.text.DateFormat;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,31,import java.text.SimpleDateFormat;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,32,import java.util.Date;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,33,import java.util.HashSet;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,34,import java.util.LinkedHashMap;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,35,import java.util.Locale;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,36,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,37,import java.util.Set;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,40,* Functional test for Json serialization and deserialization for common classes for which default
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,41,* support is provided in Gson.
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,43,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,44,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,46,public class DefaultTypeAdaptersTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,47,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,49,@Override
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,50,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,51,super.setUp();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,52,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,55,public void testUrlSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,56,"String urlValue = ""http://google.com/"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,57,URL url = new URL(urlValue);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,58,"assertEquals('""' + urlValue + '""', gson.toJson(url));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,61,public void testUrlDeserialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,62,"String urlValue = ""http://google.com/"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,63,"String json = '""' + urlValue + '""';"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,64,"URL target = gson.fromJson(json, URL.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,65,"assertEquals(urlValue, target.toExternalForm());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,68,public void testUriSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,69,"String uriValue = ""http://google.com/"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,70,URI uri = new URI(uriValue);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,71,"assertEquals('""' + uriValue + '""', gson.toJson(uri));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,74,public void testUriDeserialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,75,"String uriValue = ""http://google.com/"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,76,"String json = '""' + uriValue + '""';"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,77,"URI target = gson.fromJson(json, URI.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,78,"assertEquals(uriValue, target.toASCIIString());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,81,public void testLocaleSerializationWithLanguage() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,82,"Locale target = new Locale(""en"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,83,"assertEquals(""\""en\"""", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,86,public void testLocaleDeserializationWithLanguage() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,87,"String json = ""\""en\"""";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,88,"Locale locale = gson.fromJson(json, Locale.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,89,"assertEquals(""en"", locale.getLanguage());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,92,public void testLocaleSerializationWithLanguageCountry() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,93,Locale target = Locale.CANADA_FRENCH;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,94,"assertEquals(""\""fr_CA\"""", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,97,public void testLocaleDeserializationWithLanguageCountry() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,98,"String json = ""\""fr_CA\"""";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,99,"Locale locale = gson.fromJson(json, Locale.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,100,"assertEquals(Locale.CANADA_FRENCH, locale);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,103,public void testLocaleSerializationWithLanguageCountryVariant() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,104,"Locale target = new Locale(""de"", ""DE"", ""EURO"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,105,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,106,"assertEquals(""\""de_DE_EURO\"""", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,109,public void testLocaleDeserializationWithLanguageCountryVariant() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,110,"String json = ""\""de_DE_EURO\"""";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,111,"Locale locale = gson.fromJson(json, Locale.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,112,"assertEquals(""de"", locale.getLanguage());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,113,"assertEquals(""DE"", locale.getCountry());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,114,"assertEquals(""EURO"", locale.getVariant());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,117,public void testMapSerialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,118,"Map<String, Integer> map = new LinkedHashMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,119,"map.put(""a"", 1);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,120,"map.put(""b"", 2);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,121,"Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,122,"String json = gson.toJson(map, typeOfMap);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,123,"assertTrue(json.contains(""\""a\"":1""));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,124,"assertTrue(json.contains(""\""b\"":2""));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,127,public void testMapDeserialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,128,"String json = ""{\""a\"":1,\""b\"":2}"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,129,"Type typeOfMap = new TypeToken<Map<String,Integer>>(){}.getType();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,130,"Map<String, Integer> target = gson.fromJson(json, typeOfMap);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,131,"assertEquals(1, target.get(""a"").intValue());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,132,"assertEquals(2, target.get(""b"").intValue());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,135,public void testMapSerializationEmpty() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,136,"Map<String, Integer> map = new LinkedHashMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,137,"Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,138,"String json = gson.toJson(map, typeOfMap);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,139,"assertEquals(""{}"", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,142,public void testBigDecimalFieldSerialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,143,"ClassWithBigDecimal target = new ClassWithBigDecimal(""-122.01e-21"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,144,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,145,"String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}'));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,146,"assertEquals(target.value, new BigDecimal(actual));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,149,public void testBigDecimalFieldDeserialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,150,"ClassWithBigDecimal expected = new ClassWithBigDecimal(""-122.01e-21"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,151,String json = expected.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,152,"ClassWithBigDecimal actual = gson.fromJson(json, ClassWithBigDecimal.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,153,"assertEquals(expected.value, actual.value);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,156,public void testBadValueForBigDecimalDeserialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,157,try {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,158,"gson.fromJson(""{\""value\""=1.5e-1.0031}"", ClassWithBigDecimal.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,159,"fail(""Exponent of a BigDecimal must be an integer value."");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,160,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,163,public void testBigIntegerFieldSerialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,164,"ClassWithBigInteger target = new ClassWithBigInteger(""23232323215323234234324324324324324324"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,165,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,166,"assertEquals(target.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,169,public void testBigIntegerFieldDeserialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,170,"ClassWithBigInteger expected = new ClassWithBigInteger(""879697697697697697697697697697697697"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,171,String json = expected.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,172,"ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,173,"assertEquals(expected.value, actual.value);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,176,public void testSetSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,177,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,178,HashSet<String> s = new HashSet<String>();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,179,"s.add(""blah"");"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,180,String json = gson.toJson(s);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,181,"assertEquals(""[\""blah\""]"", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,183,"json = gson.toJson(s, Set.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,184,"assertEquals(""[\""blah\""]"", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,187,public void testDefaultDateSerialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,188,Date now = new Date();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,189,String json = gson.toJson(now);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,190,"assertEquals(""\"""" + DateFormat.getDateInstance().format(now) + ""\"""", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,193,public void testDefaultDateSerializationUsingBuilder() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,194,Gson gson = new GsonBuilder().create();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,195,Date now = new Date();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,196,String json = gson.toJson(now);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,197,"assertEquals(""\"""" + DateFormat.getDateInstance().format(now) + ""\"""", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,200,public void testDateSerializationWithPattern() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,201,"String pattern = ""yyyy-MM-dd"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,202,DateFormat formatter = new SimpleDateFormat(pattern);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,203,Gson gson = new GsonBuilder().setDateFormat(DateFormat.LONG).setDateFormat(pattern).create();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,204,Date now = new Date();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,205,String json = gson.toJson(now);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,206,"assertEquals(""\"""" + formatter.format(now) + ""\"""", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,209,private static class ClassWithBigDecimal {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,210,BigDecimal value;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,211,ClassWithBigDecimal() { }
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,212,ClassWithBigDecimal(String value) {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,213,this.value = new BigDecimal(value);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,215,String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,216,"return ""{\""value\"":"" + value.toEngineeringString() + ""}"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,220,private static class ClassWithBigInteger {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,221,BigInteger value;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,222,ClassWithBigInteger() { }
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,223,ClassWithBigInteger(String value) {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,224,this.value = new BigInteger(value);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,226,String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,227,"return ""{\""value\"":"" + value + ""}"";"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,19,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,23,public class EscapingTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,24,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,26,@Override
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,27,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,28,super.setUp();
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,29,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,32,public void testEscapingQuotesInStringArray() throws Exception {
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,33,"String[] valueWithQuotes = { ""beforeQuote\""afterQuote"" };"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,34,String jsonRepresentation = gson.toJson(valueWithQuotes);
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,35,"String[] target = gson.fromJson(jsonRepresentation, String[].class);"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,36,"assertEquals(1, target.length);"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,37,"assertEquals(valueWithQuotes[0], target[0]);"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,40,public void testEscapingObjectFields() throws Exception {
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,41,"BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, ""test with\"" <script>"");"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,42,String jsonRepresentation = gson.toJson(objWithPrimitives);
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,43,"assertFalse(jsonRepresentation.contains(""<""));"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,44,"assertFalse(jsonRepresentation.contains("">""));"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,45,"assertTrue(jsonRepresentation.contains(""\\\""""));"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,47,"BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,48,"assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,21,import com.google.gson.annotations.Expose;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,26,"* Unit tests for the regarding functional ""@Expose"" type tests."
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,28,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,30,public class ExposeFieldsTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,32,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,34,@Override
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,35,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,36,super.setUp();
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,37,gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,40,public void testNullExposeFieldSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,41,"ClassWithExposedFields object = new ClassWithExposedFields(null, 1);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,42,String json = gson.toJson(object);
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,44,"assertEquals(object.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,47,public void testArrayWithOneNullExposeFieldObjectSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,48,"ClassWithExposedFields object1 = new ClassWithExposedFields(1, 1);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,49,"ClassWithExposedFields object2 = new ClassWithExposedFields(null, 1);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,50,"ClassWithExposedFields object3 = new ClassWithExposedFields(2, 2);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,51,"ClassWithExposedFields[] objects = { object1, object2, object3 };"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,53,String json = gson.toJson(objects);
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,54,String expected = new StringBuilder()
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,55,".append('[').append(object1.getExpectedJson()).append(',')"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,56,".append(object2.getExpectedJson()).append(',')"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,57,.append(object3.getExpectedJson()).append(']')
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,58,.toString();
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,60,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,63,public void testExposeAnnotationSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,64,"ClassWithExposedFields target = new ClassWithExposedFields(1, 2);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,65,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,68,public void testExposeAnnotationDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,69,"String json = '{' + ""\""a\"":"" + 3 + "",\""b\"":"" + 4 + '}';"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,70,"ClassWithExposedFields target = gson.fromJson(json, ClassWithExposedFields.class);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,72,"assertEquals(3, (int) target.a);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,73,assertNull(target.b);
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,76,public void testNoExposedFieldSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,77,ClassWithNoExposedFields obj = new ClassWithNoExposedFields();
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,78,String json = gson.toJson(obj);
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,80,"assertEquals(""{}"", json);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,83,public void testNoExposedFieldDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,84,"String json = '{' + ""\""a\"":"" + 4 + "",\""b\"":"" + 5 + '}';"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,85,"ClassWithNoExposedFields obj = gson.fromJson(json, ClassWithNoExposedFields.class);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,87,"assertEquals(0, obj.a);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,88,"assertEquals(1, obj.b);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,91,private static class ClassWithExposedFields {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,92,@Expose private final Integer a;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,93,private final Integer b;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,95,ClassWithExposedFields() {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,96,"this(null, null);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,99,"public ClassWithExposedFields(Integer a, Integer b) {"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,100,this.a = a;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,101,this.b = b;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,104,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,105,if (a == null) {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,106,"return ""{}"";"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,108,"return '{' + ""\""a\"":"" + a + '}';"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,111,public String getExpectedJsonWithoutAnnotations() {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,112,StringBuilder stringBuilder = new StringBuilder();
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,113,boolean requiresComma = false;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,114,stringBuilder.append('{');
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,115,if (a != null) {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,116,"stringBuilder.append(""\""a\"":"").append(a);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,117,requiresComma = true;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,119,if (b != null) {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,120,if (requiresComma) {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,121,"stringBuilder.append(',');"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,123,"stringBuilder.append(""\""b\"":"").append(b);"
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,125,stringBuilder.append('}');
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,126,return stringBuilder.toString();
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,130,private static class  ClassWithNoExposedFields {
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,131,private final int a = 0;
True,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,132,private final int b = 1;
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,24,* Functional tests for internationalized strings.
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,26,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,28,public class InternationalizationTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,29,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,31,@Override
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,32,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,33,super.setUp();
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,34,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,38,public void testStringsWithRawChineseCharactersSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,39,"String target = ""好好好"";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,40,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,41,"String expected = ""\""\\u597d\\u597d\\u597d\"""";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,42,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,46,public void testStringsWithRawChineseCharactersDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,47,"String expected = ""好好好"";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,48,"String json = ""\"""" + expected + ""\"""";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,49,"String actual = gson.fromJson(json, String.class);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,50,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,53,public void testStringsWithUnicodeChineseCharactersSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,54,"String target = ""\u597d\u597d\u597d"";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,55,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,56,"String expected = ""\""\\u597d\\u597d\\u597d\"""";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,57,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,60,public void testStringsWithUnicodeChineseCharactersDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,61,"String expected = ""\u597d\u597d\u597d"";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,62,"String json = ""\"""" + expected + ""\"""";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,63,"String actual = gson.fromJson(json, String.class);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,64,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,67,public void testStringsWithUnicodeChineseCharactersEscapedDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,68,"String json = ""\"""" + ""\\u597d\\u597d\\u597d"" + ""\"""";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,69,"String actual = gson.fromJson(json, String.class);"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,70,"String expected = ""\u597d\u597d\u597d"";"
True,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,gson/src/test/java/com/google/gson/functional/InternationalizationTest.java,71,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,18,import com.google.gson.FieldNamingPolicy;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,21,import com.google.gson.common.TestTypes.ClassWithSerializedNameFields;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,22,import com.google.gson.common.TestTypes.StringWrapper;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,24,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,27,* Functional tests for naming policies.
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,29,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,32,public class NamingPolicyTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,34,private GsonBuilder builder;
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,36,@Override
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,37,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,38,super.setUp();
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,39,builder = new GsonBuilder();
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,42,public void testGsonWithNonDefaultFieldNamingPolicySerialization() {
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,43,Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,44,"StringWrapper target = new StringWrapper(""blah"");"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,45,"assertEquals(""{\""SomeConstantStringInstanceField\"":\"""""
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,46,"+ target.someConstantStringInstanceField + ""\""}"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,49,public void testGsonWithNonDefaultFieldNamingPolicyDeserialiation() {
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,50,Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,51,"StringWrapper target = new StringWrapper(""SomeValue"");"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,52,String jsonRepresentation = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,53,"StringWrapper deserializedObject = gson.fromJson(jsonRepresentation, StringWrapper.class);"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,54,"assertEquals(target.someConstantStringInstanceField,"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,55,deserializedObject.someConstantStringInstanceField);
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,58,public void testGsonWithSerializedNameFieldNamingPolicySerialization() {
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,59,Gson gson = builder.create();
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,60,ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5);
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,61,String actual = gson.toJson(expected);
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,62,"assertEquals(expected.getExpectedJson(), actual);"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,65,public void testGsonWithSerializedNameFieldNamingPolicyDeserialization() {
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,66,Gson gson = builder.create();
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,67,ClassWithSerializedNameFields expected = new ClassWithSerializedNameFields(5);
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,68,ClassWithSerializedNameFields actual =
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,69,"gson.fromJson(expected.getExpectedJson(), ClassWithSerializedNameFields.class);"
True,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,70,"assertEquals(expected.f, actual.f);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,21,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,22,import com.google.gson.JsonNull;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,23,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,24,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,25,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,26,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,27,import com.google.gson.common.TestTypes.ClassWithObjects;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,29,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,31,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,34,* Functional tests for the different cases for serializing (or ignoring) null fields and object.
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,36,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,37,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,39,public class NullObjectAndFieldTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,40,private GsonBuilder gsonBuilder;
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,42,@Override
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,43,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,44,super.setUp();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,45,gsonBuilder = new GsonBuilder().serializeNulls();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,48,public void testTopLevelNullObjectSerialization() {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,49,Gson gson = gsonBuilder.create();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,50,String actual = gson.toJson(null);
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,51,"assertEquals(""null"", actual);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,53,"actual = gson.toJson(null, String.class);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,54,"assertEquals(""null"", actual);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,57,public void testTopLevelNullObjectDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,58,Gson gson = gsonBuilder.create();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,59,"String actual = gson.fromJson(""null"", String.class);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,60,assertNull(actual);
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,63,public void testExplicitSerializationOfNulls() {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,64,Gson gson = gsonBuilder.create();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,65,ClassWithObjects target = new ClassWithObjects(null);
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,66,String actual = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,67,"String expected = ""{\""bag\"":null}"";"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,68,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,71,public void testExplicitDeserializationOfNulls() throws Exception {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,72,Gson gson = gsonBuilder.create();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,73,"ClassWithObjects target = gson.fromJson(""{\""bag\"":null}"", ClassWithObjects.class);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,74,assertNull(target.bag);
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,77,public void testCustomSerializationOfNulls() {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,78,"gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer());"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,79,Gson gson = gsonBuilder.create();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,80,ClassWithObjects target = new ClassWithObjects(new BagOfPrimitives());
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,81,String actual = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,82,"String expected = ""{\""bag\"":null}"";"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,83,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,86,private static class ClassWithObjectsSerializer implements JsonSerializer<ClassWithObjects> {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,87,"public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,88,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,89,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,90,"obj.add(""bag"", new JsonNull());"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,91,return obj;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,20,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,21,import com.google.gson.common.TestTypes.ArrayOfObjects;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,22,import com.google.gson.common.TestTypes.BagOfPrimitiveWrappers;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,23,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,24,import com.google.gson.common.TestTypes.ClassOverridingEquals;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,25,import com.google.gson.common.TestTypes.ClassWithArray;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,26,import com.google.gson.common.TestTypes.ClassWithNoFields;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,27,import com.google.gson.common.TestTypes.ClassWithObjects;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,28,import com.google.gson.common.TestTypes.ClassWithTransientFields;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,29,import com.google.gson.common.TestTypes.MyEnum;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,30,import com.google.gson.common.TestTypes.Nested;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,31,import com.google.gson.common.TestTypes.PrimitiveArray;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,33,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,35,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,36,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,37,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,38,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,39,import java.util.Queue;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,40,import java.util.Set;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,41,import java.util.SortedSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,42,import java.util.TreeSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,45,* Functional tests for Json serialization and deserialization of regular classes.
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,47,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,48,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,50,public class ObjectTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,51,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,53,@Override
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,54,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,55,super.setUp();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,56,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,59,public void testBagOfPrimitivesSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,60,"BagOfPrimitives target = new BagOfPrimitives(10, 20, false, ""stringValue"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,61,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,64,public void testBagOfPrimitivesDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,65,"BagOfPrimitives src = new BagOfPrimitives(10, 20, false, ""stringValue"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,66,String json = src.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,67,"BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,68,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,71,public void testBagOfPrimitiveWrappersSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,72,"BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,73,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,76,public void testBagOfPrimitiveWrappersDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,77,"BagOfPrimitiveWrappers target = new BagOfPrimitiveWrappers(10L, 20, false);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,78,String jsonString = target.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,79,"target = gson.fromJson(jsonString, BagOfPrimitiveWrappers.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,80,"assertEquals(jsonString, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,83,public void testDirectedAcyclicGraphSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,84,ContainsReferenceToSelfType a = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,85,ContainsReferenceToSelfType b = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,86,ContainsReferenceToSelfType c = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,87,a.children.add(b);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,88,a.children.add(c);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,89,b.children.add(c);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,90,assertNotNull(gson.toJson(a));
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,93,public void testDirectedAcyclicGraphDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,94,"String json = ""{\""children\"":[{\""children\"":[{\""children\"":[]}]},{\""children\"":[]}]}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,95,"ContainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,96,assertNotNull(target);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,97,"assertEquals(2, target.children.size());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,100,public void testClassWithTransientFieldsSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,101,ClassWithTransientFields target = new ClassWithTransientFields(1L);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,102,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,105,public void testClassWithTransientFieldsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,106,"String json = ""{\""longValue\"":[1]}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,107,"ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,108,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,111,public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,112,throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,113,"String json = ""{\""transientLongValue\"":1,\""longValue\"":[1]}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,114,"ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,115,assertFalse(target.transientLongValue != 1);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,118,public void testClassWithNoFieldsSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,119,"assertEquals(""{}"", gson.toJson(new ClassWithNoFields()));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,122,public void testClassWithNoFieldsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,123,"String json = ""{}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,124,"ClassWithNoFields target = gson.fromJson(json, ClassWithNoFields.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,125,ClassWithNoFields expected = new ClassWithNoFields();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,126,"assertEquals(expected, target);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,129,public void testNestedSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,130,"Nested target = new Nested(new BagOfPrimitives(10, 20, false, ""stringValue""),"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,131,"new BagOfPrimitives(30, 40, true, ""stringValue""));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,132,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,135,public void testNestedDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,136,"String json = ""{\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false,"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,137,"+ ""\""stringValue\"":\""stringValue\""},\""primitive2\"":{\""longValue\"":30,\""intValue\"":40,"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,138,"+ ""\""booleanValue\"":true,\""stringValue\"":\""stringValue\""}}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,139,"Nested target = gson.fromJson(json, Nested.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,140,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,143,public void testInheritenceSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,144,"SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, ""stringValue""),"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,145,"new BagOfPrimitives(30, 40, true, ""stringValue""));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,146,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,149,public void testInheritenceDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,150,"String json = ""{\""value\"":5,\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,151,"+ ""\""booleanValue\"":false,\""stringValue\"":\""stringValue\""},\""primitive2\"":"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,152,"+ ""{\""longValue\"":30,\""intValue\"":40,\""booleanValue\"":true,"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,153,"+ ""\""stringValue\"":\""stringValue\""}}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,154,"SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,155,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,158,public void testNullSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,159,"assertEquals("""", gson.toJson(null));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,162,public void testNullDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,163,try {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,164,"gson.fromJson("""", Object.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,165,"fail(""Null strings should not be allowed"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,166,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,170,public void testNullFieldsSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,171,"Nested target = new Nested(new BagOfPrimitives(10, 20, false, ""stringValue""), null);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,172,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,175,public void testNullFieldsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,176,"String json = ""{\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,177,"+ "",\""stringValue\"":\""stringValue\""}}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,178,"Nested target = gson.fromJson(json, Nested.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,179,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,182,public void testArrayOfObjectsSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,183,ArrayOfObjects target = new ArrayOfObjects();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,184,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,187,public void testArrayOfObjectsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,188,String json = new ArrayOfObjects().getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,189,"ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,190,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,193,public void testArrayOfArraysSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,194,ArrayOfArrays target = new ArrayOfArrays();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,195,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,198,public void testArrayOfArraysDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,199,String json = new ArrayOfArrays().getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,200,"ArrayOfArrays target = gson.fromJson(json, ArrayOfArrays.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,201,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,204,public void testClassWithEnumFieldSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,205,ClassWithEnumFields target = new ClassWithEnumFields();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,206,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,209,public void testClassWithEnumFieldDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,210,String json = new ClassWithEnumFields().getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,211,"ClassWithEnumFields target = gson.fromJson(json, ClassWithEnumFields.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,212,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,215,public void testTopLevelEnumSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,216,MyEnum target = MyEnum.VALUE1;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,217,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,220,public void testTopLevelEnumDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,221,String json = MyEnum.VALUE1.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,222,"MyEnum target = gson.fromJson(json, MyEnum.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,223,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,226,public void testSubInterfacesOfCollectionSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,227,List<Integer> list = new LinkedList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,228,list.add(0);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,229,list.add(1);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,230,list.add(2);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,231,list.add(3);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,232,Queue<Long> queue = new LinkedList<Long>();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,233,queue.add(0L);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,234,queue.add(1L);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,235,queue.add(2L);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,236,queue.add(3L);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,237,Set<Float> set = new TreeSet<Float>();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,238,set.add(0.1F);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,239,set.add(0.2F);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,240,set.add(0.3F);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,241,set.add(0.4F);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,242,SortedSet<Character> sortedSet = new TreeSet<Character>();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,243,sortedSet.add('a');
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,244,sortedSet.add('b');
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,245,sortedSet.add('c');
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,246,sortedSet.add('d');
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,247,ClassWithSubInterfacesOfCollection target =
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,248,"new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,249,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,252,public void testSubInterfacesOfCollectionDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,253,"String json = ""{\""list\"":[0,1,2,3],\""queue\"":[0,1,2,3],\""set\"":[0.1,0.2,0.3,0.4],"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,254,"+ ""\""sortedSet\"":[\""a\"",\""b\"",\""c\"",\""d\""]"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,255,"//        + "",\""navigableSet\"":[\""abc\"",\""def\"",\""ghi\"",\""jkl\""]"""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,257,ClassWithSubInterfacesOfCollection target = gson.fromJson(
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,258,"json, ClassWithSubInterfacesOfCollection.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,259,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,263,* Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,265,public void testNullArraysDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,266,"String json = ""{\""array\"": null}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,267,"ClassWithArray target = gson.fromJson(json, ClassWithArray.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,268,assertNull(target.array);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,272,* Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,274,public void testNullObjectFieldsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,275,"String json = ""{\""bag\"": null}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,276,"ClassWithObjects target = gson.fromJson(json, ClassWithObjects.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,277,assertNull(target.bag);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,280,public void testEmptyCollectionInAnObjectDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,281,"String json = ""{\""children\"":[]}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,282,"ContainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,283,assertNotNull(target);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,284,assertTrue(target.children.isEmpty());
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,287,public void testPrimitiveArrayInAnObjectDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,288,"String json = ""{\""longArray\"":[0,1,2,3,4,5,6,7,8,9]}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,289,"PrimitiveArray target = gson.fromJson(json, PrimitiveArray.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,290,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,294,* Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,296,public void testNullPrimitiveFieldsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,297,"String json = ""{\""longValue\"":null}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,298,"BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,299,"assertEquals(BagOfPrimitives.DEFAULT_VALUE, target.longValue);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,302,public void testReallyLongStringsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,303,StringBuilder sb = new StringBuilder(8096);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,304,"sb.append(""Once upon a time there was a really long string that caused a StackOverFlowError\n"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,305,"sb.append(""and now it is fixed and instead throws a JsonParserException.....Yippie!!!\n"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,306,"sb.append(""Wow....that is a really long string that is meant to be an exception stack trace, "");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,307,"sb.append(""but is not :( \n\n\n\n\n\n."");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,308,"sb.append(""lalalalala \n\n\n."");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,309,"sb.append(""C'est la vie!!! \n\n\n\n\n"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,311,for (int i = 0; i < 10; i++) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,312,sb.append(sb.toString());
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,315,while (true) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,316,try {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,317,String stackTrace = sb.toString();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,318,sb.append(stackTrace);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,319,"String json = ""{\""message\"":\""Error message.\"","""
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,320,"+ ""\""stackTrace\"":\"""" + stackTrace + ""\""}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,321,parseLongJson(json);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,322,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,323,break;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,328,public void testEmptyCollectionInAnObjectSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,329,ContainsReferenceToSelfType target = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,330,"assertEquals(""{\""children\"":[]}"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,333,private void parseLongJson(String json) throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,334,"ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,335,"assertTrue(target.message.contains(""Error""));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,336,"assertTrue(target.stackTrace.contains(""Yippie""));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,339,public void testCircularSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,340,ContainsReferenceToSelfType a = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,341,ContainsReferenceToSelfType b = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,342,a.children.add(b);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,343,b.children.add(a);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,344,try {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,345,gson.toJson(a);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,346,"fail(""Circular types should not get printed!"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,347,} catch (IllegalStateException expected) { }
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,350,public void testSelfReferenceSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,351,ClassOverridingEquals objA = new ClassOverridingEquals();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,352,objA.ref = objA;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,354,try {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,355,gson.toJson(objA);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,356,"fail(""Circular reference to self can not be serialized!"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,357,} catch (IllegalStateException expected) { }
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,360,public void testPrivateNoArgConstructorDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,361,ClassWithPrivateNoArgsConstructor target =
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,362,"gson.fromJson(""{\""a\"":20}"", ClassWithPrivateNoArgsConstructor.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,363,"assertEquals(20, target.a);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,366,public void testAnonymousLocalClassesSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,367,"assertEquals("""", gson.toJson(new ClassWithNoFields() {"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,368,// empty anonymous class
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,372,public void testPrimitiveArrayFieldSerialization() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,373,"PrimitiveArray target = new PrimitiveArray(new long[] { 1L, 2L, 3L });"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,374,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,377,public static class ClassWithSubInterfacesOfCollection {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,378,private List<Integer> list;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,379,private Queue<Long> queue;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,380,private Set<Float> set;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,381,private SortedSet<Character> sortedSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,383,ClassWithSubInterfacesOfCollection() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,386,"public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,387,SortedSet<Character> sortedSet) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,388,this.list = list;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,389,this.queue = queue;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,390,this.set = set;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,391,this.sortedSet = sortedSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,394,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,395,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,396,"sb.append(""{"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,397,"sb.append(""\""list\"":"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,398,"append(sb, list).append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,399,"sb.append(""\""queue\"":"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,400,"append(sb, queue).append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,401,"sb.append(""\""set\"":"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,402,"append(sb, set).append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,403,"sb.append(""\""sortedSet\"":"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,404,"append(sb, sortedSet);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,405,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,406,return sb.toString();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,409,"private StringBuilder append(StringBuilder sb, Collection<?> c) {"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,410,"sb.append(""["");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,411,boolean first = true;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,412,for (Object o : c) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,413,if (!first) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,414,"sb.append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,415,} else {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,416,first = false;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,418,if (o instanceof String || o instanceof Character) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,419,"sb.append('\""');"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,421,sb.append(o.toString());
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,422,if (o instanceof String || o instanceof Character) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,423,"sb.append('\""');"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,426,"sb.append(""]"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,427,return sb;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,431,private static class ContainsReferenceToSelfType {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,432,public Collection<ContainsReferenceToSelfType> children =
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,433,new ArrayList<ContainsReferenceToSelfType>();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,436,private static class SubTypeOfNested extends Nested {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,437,private final long value = 5;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,439,public SubTypeOfNested() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,440,"this(null, null);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,443,"public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,444,"super(primitive1, primitive2);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,447,@Override
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,448,public void appendFields(StringBuilder sb) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,449,"sb.append(""\""value\"":"").append(value).append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,450,super.appendFields(sb);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,454,private static class ArrayOfArrays {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,455,private final BagOfPrimitives[][] elements;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,456,public ArrayOfArrays() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,457,elements = new BagOfPrimitives[3][2];
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,458,for (int i = 0; i < elements.length; ++i) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,459,BagOfPrimitives[] row = elements[i];
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,460,for (int j = 0; j < row.length; ++j) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,461,"row[j] = new BagOfPrimitives(i+j, i*j, false, i+""_""+j);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,465,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,466,"StringBuilder sb = new StringBuilder(""{\""elements\"":["");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,467,boolean first = true;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,468,for (BagOfPrimitives[] row : elements) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,469,if (first) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,470,first = false;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,471,} else {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,472,"sb.append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,474,boolean firstOfRow = true;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,475,"sb.append(""["");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,476,for (BagOfPrimitives element : row) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,477,if (firstOfRow) {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,478,firstOfRow = false;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,479,} else {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,480,"sb.append("","");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,482,sb.append(element.getExpectedJson());
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,484,"sb.append(""]"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,486,"sb.append(""]}"");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,487,return sb.toString();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,491,private static class ClassWithEnumFields {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,492,private final MyEnum value1 = MyEnum.VALUE1;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,493,private final MyEnum value2 = MyEnum.VALUE2;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,494,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,495,"return ""{\""value1\"":\"""" + value1 + ""\"",\""value2\"":\"""" + value2 + ""\""}"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,499,private static class ClassWithPrivateNoArgsConstructor {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,500,public int a;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,501,private ClassWithPrivateNoArgsConstructor() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,502,a = 10;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,506,private static class ExceptionHolder {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,507,public final String message;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,508,public final String stackTrace;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,509,public ExceptionHolder() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,510,"this("""", """");"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,512,"public ExceptionHolder(String message, String stackTrace) {"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,513,this.message = message;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,514,this.stackTrace = stackTrace;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,21,import com.google.gson.ParamterizedTypeFixtures.MyParameterizedType;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,22,import com.google.gson.ParamterizedTypeFixtures.MyParameterizedTypeAdapter;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,23,import com.google.gson.ParamterizedTypeFixtures.MyParameterizedTypeInstanceCreator;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,24,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,25,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,27,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,29,import java.io.Reader;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,30,import java.io.StringReader;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,31,import java.io.StringWriter;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,32,import java.io.Writer;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,33,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,34,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,35,import java.util.Arrays;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,36,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,39,* Functional tests for the serialization and deserialization of parameterized types in Gson.
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,41,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,42,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,44,public class ParameterizedTypesTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,45,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,47,@Override
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,48,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,49,super.setUp();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,50,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,53,public void testParameterizedTypesSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,54,MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,55,Type typeOfSrc = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,56,"String json = gson.toJson(src, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,57,"assertEquals(src.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,60,public void testParameterizedTypeDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,61,BagOfPrimitives bag = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,62,MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,63,Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,64,BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,65,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,66,"expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,67,.create();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,69,String json = expected.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,70,"MyParameterizedType<Integer> actual = gson.fromJson(json, expectedType);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,71,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,74,public void testTypesWithMultipleParametersSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,75,"MultiParameters<Integer, Float, Double, String, BagOfPrimitives> src ="
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,76,"new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,77,"""abc"", new BagOfPrimitives());"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,78,"Type typeOfSrc = new TypeToken<MultiParameters<Integer, Float, Double, String,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,79,BagOfPrimitives>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,80,"String json = gson.toJson(src, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,81,"String expected = ""{\""a\"":10,\""b\"":1.0,\""c\"":2.1,\""d\"":\""abc\"","""
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,82,"+ ""\""e\"":{\""longValue\"":0,\""intValue\"":0,\""booleanValue\"":false,\""stringValue\"":\""\""}}"";"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,83,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,86,public void testTypesWithMultipleParametersDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,87,"Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,88,BagOfPrimitives>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,89,"String json = ""{\""a\"":10,\""b\"":1.0,\""c\"":2.1,\""d\"":\""abc\"","""
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,90,"+ ""\""e\"":{\""longValue\"":0,\""intValue\"":0,\""booleanValue\"":false,\""stringValue\"":\""\""}}"";"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,91,"MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target ="
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,92,"gson.fromJson(json, typeOfTarget);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,93,"MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected ="
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,94,"new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,95,"""abc"", new BagOfPrimitives());"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,96,"assertEquals(expected, target);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,99,public void testParameterizedTypeWithCustomSerializer() {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,100,Type ptIntegerType = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,101,Type ptStringType = new TypeToken<MyParameterizedType<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,102,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,103,".registerTypeAdapter(ptIntegerType, new MyParameterizedTypeAdapter<Integer>())"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,104,".registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,105,.create();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,106,MyParameterizedType<Integer> intTarget = new MyParameterizedType<Integer>(10);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,107,"String json = gson.toJson(intTarget, ptIntegerType);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,108,"assertEquals(MyParameterizedTypeAdapter.<Integer>getExpectedJson(intTarget), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,110,"MyParameterizedType<String> stringTarget = new MyParameterizedType<String>(""abc"");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,111,"json = gson.toJson(stringTarget, ptStringType);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,112,"assertEquals(MyParameterizedTypeAdapter.<String>getExpectedJson(stringTarget), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,115,public void testParameterizedTypesWithCustomDeserializer() {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,116,Type ptIntegerType = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,117,Type ptStringType = new TypeToken<MyParameterizedType<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,118,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,119,"ptIntegerType, new MyParameterizedTypeAdapter<Integer>())"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,120,".registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,121,".registerTypeAdapter(ptStringType, new MyParameterizedTypeInstanceCreator<String>(""""))"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,122,".registerTypeAdapter(ptIntegerType,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,123,new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0)))
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,124,.create();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,126,MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,127,String json = MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,128,"MyParameterizedType<Integer> intTarget = gson.fromJson(json, ptIntegerType);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,129,"assertEquals(10, (int) intTarget.value);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,131,"MyParameterizedType<String> srcStr = new MyParameterizedType<String>(""abc"");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,132,json = MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,133,"MyParameterizedType<String> stringTarget = gson.fromJson(json, ptStringType);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,134,"assertEquals(""abc"", stringTarget.value);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,137,public void testParameterizedTypesWithWriterSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,138,Writer writer = new StringWriter();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,139,MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,140,Type typeOfSrc = new TypeToken<MyParameterizedType<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,141,"gson.toJson(src, typeOfSrc, writer);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,142,"assertEquals(src.getExpectedJson(), writer.toString());"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,145,public void testParameterizedTypeWithReaderDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,146,BagOfPrimitives bag = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,147,MyParameterizedType<BagOfPrimitives> expected = new MyParameterizedType<BagOfPrimitives>(bag);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,148,Type expectedType = new TypeToken<MyParameterizedType<BagOfPrimitives>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,149,BagOfPrimitives bagDefaultInstance = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,150,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,151,"expectedType, new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance))"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,152,.create();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,154,Reader json = new StringReader(expected.getExpectedJson());
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,155,"MyParameterizedType<Integer> actual = gson.fromJson(json, expectedType);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,156,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,159,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,160,public void testVariableTypeFieldsAndGenericArraysSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,161,Integer obj = 0;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,162,"Integer[] array = { 1, 2, 3 };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,163,List<Integer> list = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,164,list.add(4);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,165,list.add(5);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,166,"List<Integer>[] arrayOfLists = new List[] { list, list };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,168,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,169,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,170,"new ObjectWithTypeVariables<Integer>(obj, array, list, arrayOfLists, list, arrayOfLists);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,171,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,173,"assertEquals(objToSerialize.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,176,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,177,public void testVariableTypeFieldsAndGenericArraysDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,178,Integer obj = 0;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,179,"Integer[] array = { 1, 2, 3 };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,180,List<Integer> list = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,181,list.add(4);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,182,list.add(5);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,183,"List<Integer>[] arrayOfLists = new List[] { list, list };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,185,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,186,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,187,"new ObjectWithTypeVariables<Integer>(obj, array, list, arrayOfLists, list, arrayOfLists);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,188,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,189,"ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,191,"assertEquals(objAfterDeserialization.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,194,public void testVariableTypeDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,195,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,196,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,197,"new ObjectWithTypeVariables<Integer>(0, null, null, null, null, null);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,198,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,199,"ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,201,"assertEquals(objAfterDeserialization.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,204,public void testVariableTypeArrayDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,205,"Integer[] array = { 1, 2, 3 };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,207,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,208,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,209,"new ObjectWithTypeVariables<Integer>(null, array, null, null, null, null);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,210,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,211,"ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,213,"assertEquals(objAfterDeserialization.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,216,public void testParameterizedTypeWithVariableTypeDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,217,List<Integer> list = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,218,list.add(4);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,219,list.add(5);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,221,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,222,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,223,"new ObjectWithTypeVariables<Integer>(null, null, list, null, null, null);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,224,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,225,"ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,227,"assertEquals(objAfterDeserialization.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,230,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,231,public void testParameterizedTypeGenericArraysDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,232,List<Integer> list = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,233,list.add(1);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,234,list.add(2);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,235,"List<Integer>[] arrayOfLists = new List[] { list, list };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,237,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,238,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,239,"new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,240,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,241,"ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,243,"assertEquals(objAfterDeserialization.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,247,* An test object that has fields that are type variables.
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,249,"* @param <T> Enforce T to be a string to make writing the ""toExpectedJson"" method easier."
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,251,private static class ObjectWithTypeVariables<T extends Number> {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,252,private final T typeParameterObj;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,253,private final T[] typeParameterArray;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,254,private final List<T> listOfTypeParameters;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,255,private final List<T>[] arrayOfListOfTypeParameters;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,256,private final List<? extends T> listOfWildcardTypeParameters;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,257,private final List<? extends T>[] arrayOfListOfWildcardTypeParameters;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,259,public ObjectWithTypeVariables() {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,260,"this(null, null, null, null, null, null);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,263,"public ObjectWithTypeVariables(T obj, T[] array, List<T> list, List<T>[] arrayOfList,"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,264,"List<? extends T> wildcardList, List<? extends T>[] arrayOfWildcardList) {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,265,this.typeParameterObj = obj;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,266,this.typeParameterArray = array;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,267,this.listOfTypeParameters = list;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,268,this.arrayOfListOfTypeParameters = arrayOfList;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,269,this.listOfWildcardTypeParameters = wildcardList;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,270,this.arrayOfListOfWildcardTypeParameters = arrayOfWildcardList;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,273,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,274,"StringBuilder sb = new StringBuilder().append(""{"");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,276,boolean needsComma = false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,277,if (typeParameterObj != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,278,"sb.append(""\""typeParameterObj\"":"").append(toString(typeParameterObj));"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,279,needsComma = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,282,if (typeParameterArray != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,283,if (needsComma) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,284,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,286,"sb.append(""\""typeParameterArray\"":["");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,287,"appendObjectsToBuilder(sb, Arrays.asList(typeParameterArray));"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,288,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,289,needsComma = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,292,if (listOfTypeParameters != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,293,if (needsComma) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,294,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,296,"sb.append(""\""listOfTypeParameters\"":["");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,297,"appendObjectsToBuilder(sb, listOfTypeParameters);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,298,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,299,needsComma = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,302,if (arrayOfListOfTypeParameters != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,303,if (needsComma) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,304,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,306,"sb.append(""\""arrayOfListOfTypeParameters\"":["");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,307,"appendObjectsToBuilder(sb, arrayOfListOfTypeParameters);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,308,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,309,needsComma = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,312,if (listOfWildcardTypeParameters != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,313,if (needsComma) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,314,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,316,"sb.append(""\""listOfWildcardTypeParameters\"":["");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,317,"appendObjectsToBuilder(sb, listOfWildcardTypeParameters);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,318,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,319,needsComma = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,322,if (arrayOfListOfWildcardTypeParameters != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,323,if (needsComma) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,324,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,326,"sb.append(""\""arrayOfListOfWildcardTypeParameters\"":["");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,327,"appendObjectsToBuilder(sb, arrayOfListOfWildcardTypeParameters);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,328,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,329,needsComma = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,331,sb.append('}');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,332,return sb.toString();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,335,"private void appendObjectsToBuilder(StringBuilder sb, Iterable<? extends T> iterable) {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,336,boolean isFirst = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,337,for (T obj : iterable) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,338,if (!isFirst) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,339,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,341,isFirst = false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,342,sb.append(toString(obj));
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,346,"private void appendObjectsToBuilder(StringBuilder sb, List<? extends T>[] arrayOfList) {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,347,boolean isFirst = true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,348,for (List<? extends T> list : arrayOfList) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,349,if (!isFirst) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,350,"sb.append(',');"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,352,isFirst = false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,353,if (list != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,354,sb.append('[');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,355,"appendObjectsToBuilder(sb, list);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,356,sb.append(']');
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,357,} else {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,358,"sb.append(""null"");"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,363,public String toString(T obj) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,364,return obj.toString();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,368,"private static class MultiParameters<A, B, C, D, E> {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,369,A a;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,370,B b;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,371,C c;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,372,D d;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,373,E e;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,374,MultiParameters() {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,376,"MultiParameters(A a, B b, C c, D d, E e) {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,377,super();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,378,this.a = a;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,379,this.b = b;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,380,this.c = c;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,381,this.d = d;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,382,this.e = e;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,384,@Override
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,385,public int hashCode() {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,386,final int prime = 31;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,387,int result = 1;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,388,result = prime * result + ((a == null) ? 0 : a.hashCode());
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,389,result = prime * result + ((b == null) ? 0 : b.hashCode());
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,390,result = prime * result + ((c == null) ? 0 : c.hashCode());
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,391,result = prime * result + ((d == null) ? 0 : d.hashCode());
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,392,result = prime * result + ((e == null) ? 0 : e.hashCode());
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,393,return result;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,395,@Override
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,396,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,397,public boolean equals(Object obj) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,398,if (this == obj) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,399,return true;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,401,if (obj == null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,402,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,404,if (getClass() != obj.getClass()) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,405,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,407,"MultiParameters<A, B, C, D, E> other = (MultiParameters<A, B, C, D, E>) obj;"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,408,if (a == null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,409,if (other.a != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,410,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,412,} else if (!a.equals(other.a)) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,413,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,415,if (b == null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,416,if (other.b != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,417,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,419,} else if (!b.equals(other.b)) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,420,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,422,if (c == null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,423,if (other.c != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,424,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,426,} else if (!c.equals(other.c)) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,427,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,429,if (d == null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,430,if (other.d != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,431,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,433,} else if (!d.equals(other.d)) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,434,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,436,if (e == null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,437,if (other.e != null) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,438,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,440,} else if (!e.equals(other.e)) {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,441,return false;
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,443,return true;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,20,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,24,import java.math.BigDecimal;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,25,import java.math.BigInteger;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,28,"* Functional tests for Json primitive values: String, integers, and floating point numbers."
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,30,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,31,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,33,public class PrimitiveTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,34,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,36,@Override
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,37,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,38,super.setUp();
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,39,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,42,public void testStringValueSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,43,"String value = ""someRandomStringValue"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,44,"assertEquals('""' + value + '""', gson.toJson(value));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,47,public void testStringValueDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,48,"String value = ""someRandomStringValue"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,49,"String actual = gson.fromJson(""\"""" + value + ""\"""", String.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,50,"assertEquals(value, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,53,public void testSingleQuoteInStringSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,54,"String valueWithQuotes = ""beforeQuote'afterQuote"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,55,String jsonRepresentation = gson.toJson(valueWithQuotes);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,56,"assertEquals(valueWithQuotes, gson.fromJson(jsonRepresentation, String.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,59,public void testSingleQuoteInStringDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,60,"String value = ""beforeQuote'afterQuote"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,61,"String actual = gson.fromJson(""\"""" + value + ""\"""", String.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,62,"assertEquals(value, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,65,public void testEscapingQuotesInStringSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,66,"String valueWithQuotes = ""beforeQuote\""afterQuote"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,67,String jsonRepresentation = gson.toJson(valueWithQuotes);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,68,"String target = gson.fromJson(jsonRepresentation, String.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,69,"assertEquals(valueWithQuotes, target);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,72,public void testEscapingQuotesInStringDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,73,"String value = ""beforeQuote\\\""afterQuote"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,74,"String actual = gson.fromJson(""\"""" + value + ""\"""", String.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,75,"String expected = ""beforeQuote\""afterQuote"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,76,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,79,public void testStringValueAsSingleElementArraySerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,80,"String[] target = {""abc""};"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,81,"assertEquals(""[\""abc\""]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,82,"assertEquals(""[\""abc\""]"", gson.toJson(target, String[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,85,public void testStringValueAsSingleElementArrayDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,86,"String value = ""someRandomStringValue"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,87,"String actual = gson.fromJson(""[\"""" + value + ""\""]"", String.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,88,"assertEquals(value, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,91,public void testPrimitiveIntegerAutoboxedSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,92,"assertEquals(""1"", gson.toJson(1));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,95,public void testPrimitiveIntegerAutoboxedDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,96,int expected = 1;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,97,"int actual = gson.fromJson(""1"", int.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,98,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,100,"actual = gson.fromJson(""1"", Integer.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,101,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,104,public void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,105,int target[] = {-9332};
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,106,"assertEquals(""[-9332]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,107,"assertEquals(""[-9332]"", gson.toJson(target, int[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,108,"assertEquals(""[-9332]"", gson.toJson(target, Integer[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,111,public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,112,int expected = 1;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,113,"int actual = gson.fromJson(""[1]"", int.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,114,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,116,"actual = gson.fromJson(""[1]"", Integer.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,117,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,120,public void testReallyLongValuesSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,121,long value = 333961828784581L;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,122,"assertEquals(""333961828784581"", gson.toJson(value));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,125,public void testReallyLongValuesDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,126,"String json = ""333961828784581"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,127,"long value = gson.fromJson(json, Long.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,128,"assertEquals(333961828784581L, value);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,131,public void testPrimitiveLongAutoboxedSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,132,"assertEquals(""1"", gson.toJson(1L, long.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,133,"assertEquals(""1"", gson.toJson(1L, Long.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,136,public void testPrimitiveLongAutoboxedDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,137,long expected = 1L;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,138,"long actual = gson.fromJson(""1"", long.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,139,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,141,"actual = gson.fromJson(""1"", Long.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,142,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,145,public void testPrimitiveLongAutoboxedInASingleElementArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,146,long[] target = {-23L};
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,147,"assertEquals(""[-23]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,148,"assertEquals(""[-23]"", gson.toJson(target, long[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,149,"assertEquals(""[-23]"", gson.toJson(target, Long[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,152,public void testPrimitiveLongAutoboxedInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,153,long expected = 1L;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,154,"long actual = gson.fromJson(""[1]"", long.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,155,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,157,"actual = gson.fromJson(""[1]"", Long.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,158,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,161,public void testPrimitiveBooleanAutoboxedSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,162,"assertEquals(""true"", gson.toJson(true));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,163,"assertEquals(""false"", gson.toJson(false));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,166,public void testPrimitiveBooleanAutoboxedDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,167,"assertEquals(Boolean.FALSE, gson.fromJson(""[false]"", Boolean.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,168,"assertEquals(Boolean.TRUE, gson.fromJson(""[true]"", Boolean.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,170,"boolean value = gson.fromJson(""false"", boolean.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,171,"assertEquals(false, value);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,172,"value = gson.fromJson(""true"", boolean.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,173,"assertEquals(true, value);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,176,public void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,177,boolean target[] = {false};
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,178,"assertEquals(""[false]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,179,"assertEquals(""[false]"", gson.toJson(target, boolean[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,180,"assertEquals(""[false]"", gson.toJson(target, Boolean[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,183,public void testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,184,"assertEquals(Boolean.FALSE, gson.fromJson(""[false]"", Boolean.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,185,"assertEquals(Boolean.TRUE, gson.fromJson(""[true]"", Boolean.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,187,"boolean value = gson.fromJson(""[false]"", boolean.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,188,"assertEquals(false, value);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,189,"value = gson.fromJson(""[true]"", boolean.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,190,"assertEquals(true, value);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,193,public void testPrimitiveDoubleAutoboxedSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,194,"assertEquals(""-122.08234335"", gson.toJson(-122.08234335));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,195,"assertEquals(""122.08112002"", gson.toJson(new Double(122.08112002)));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,198,public void testPrimitiveDoubleAutoboxedDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,199,"double actual = gson.fromJson(""-122.08858585"", double.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,200,"assertEquals(-122.08858585, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,202,"actual = gson.fromJson(""122.023900008000"", Double.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,203,"assertEquals(122.023900008, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,206,public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,207,double[] target = {-122.08D};
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,208,"assertEquals(""[-122.08]"", gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,209,"assertEquals(""[-122.08]"", gson.toJson(target, double[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,210,"assertEquals(""[-122.08]"", gson.toJson(target, Double[].class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,213,public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,214,double expected = -122.08;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,215,"double actual = gson.fromJson(""[-122.08]"", double.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,216,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,218,"actual = gson.fromJson(""[-122.08]"", Double.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,219,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,222,public void testBigDecimalSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,223,"BigDecimal target = new BigDecimal(""-122.0e-21"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,224,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,225,"assertEquals(target, new BigDecimal(json));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,228,public void testBigDecimalDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,229,"BigDecimal target = new BigDecimal(""-122.0e-21"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,230,"String json = ""-122.0e-21"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,231,"assertEquals(target, gson.fromJson(json, BigDecimal.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,234,public void testBigDecimalInASingleElementArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,235,"BigDecimal[] target = {new BigDecimal(""-122.08e-21"")};"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,236,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,237,String actual = extractElementFromArray(json);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,238,"assertEquals(target[0], new BigDecimal(actual));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,240,"json = gson.toJson(target, BigDecimal[].class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,241,actual = extractElementFromArray(json);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,242,"assertEquals(target[0], new BigDecimal(actual));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,245,public void testBigDecimalInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,246,"BigDecimal expected = new BigDecimal(""-122.08e-21"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,247,"BigDecimal actual = gson.fromJson(""[-122.08e-21]"", BigDecimal.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,248,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,251,public void testSmallValueForBigDecimalSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,252,"BigDecimal target = new BigDecimal(""1.55"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,253,String actual = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,254,"assertEquals(target.toString(), actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,257,public void testSmallValueForBigDecimalDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,258,"BigDecimal expected = new BigDecimal(""1.55"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,259,"BigDecimal actual = gson.fromJson(""1.55"", BigDecimal.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,260,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,263,public void testBigIntegerSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,264,"BigInteger target = new BigInteger(""12121211243123245845384534687435634558945453489543985435"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,265,"assertEquals(target.toString(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,268,public void testBigIntegerDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,269,"String json = ""12121211243123245845384534687435634558945453489543985435"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,270,BigInteger target = new BigInteger(json);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,271,"assertEquals(target, gson.fromJson(json, BigInteger.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,274,public void testBigIntegerInASingleElementArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,275,"BigInteger[] target = {new BigInteger(""1212121243434324323254365345367456456456465464564564"")};"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,276,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,277,String actual = extractElementFromArray(json);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,278,"assertEquals(target[0], new BigInteger(actual));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,280,"json = gson.toJson(target, BigInteger[].class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,281,actual = extractElementFromArray(json);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,282,"assertEquals(target[0], new BigInteger(actual));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,285,public void testBigIntegerInASingleElementArrayDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,286,"BigInteger expected = new BigInteger(""34343434343424242423432323243243242"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,287,"BigInteger actual = gson.fromJson(""[34343434343424242423432323243243242]"", BigInteger.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,288,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,291,public void testSmallValueForBigIntegerSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,292,"BigInteger target = new BigInteger(""15"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,293,String actual = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,294,"assertEquals(target.toString(), actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,297,public void testSmallValueForBigIntegerDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,298,"BigInteger expected = new BigInteger(""15"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,299,"BigInteger actual = gson.fromJson(""15"", BigInteger.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,300,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,303,public void testBadValueForBigIntegerDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,304,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,305,"gson.fromJson(""15.099"", BigInteger.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,306,"fail(""BigInteger can not be decimal values."");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,307,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,310,private String extractElementFromArray(String json) {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,311,"return json.substring(json.indexOf('[') + 1, json.indexOf(']'));"
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,20,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,21,import com.google.gson.common.TestTypes.ClassWithTransientFields;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,22,import com.google.gson.common.TestTypes.Nested;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,23,import com.google.gson.common.TestTypes.PrimitiveArray;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,25,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,27,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,28,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,31,* Functional tests for print formatting.
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,33,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,34,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,36,public class PrintFormattingTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,38,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,39,public void testCompactFormattingLeavesNoWhiteSpace() {
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,40,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,41,List list = new ArrayList();
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,42,list.add(new BagOfPrimitives());
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,43,list.add(new Nested());
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,44,list.add(new PrimitiveArray());
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,45,list.add(new ClassWithTransientFields());
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,47,String json = gson.toJson(list);
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,48,assertContainsNoWhiteSpace(json);
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,51,private static void assertContainsNoWhiteSpace(String str) {
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,52,for (char c : str.toCharArray()) {
True,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java,53,assertFalse(Character.isWhitespace(c));
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,20,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,24,import java.io.Reader;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,25,import java.io.StringReader;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,26,import java.io.StringWriter;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,27,import java.io.Writer;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,30,* Functional tests for the support of {@link Reader}s and {@link Writer}s.
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,32,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,33,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,35,public class ReadersWritersTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,36,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,38,@Override
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,39,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,40,super.setUp();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,41,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,44,public void testWriterForSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,45,Writer writer = new StringWriter();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,46,BagOfPrimitives src = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,47,"gson.toJson(src, writer);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,48,"assertEquals(src.getExpectedJson(), writer.toString());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,51,public void testReaderForDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,52,BagOfPrimitives expected = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,53,Reader json = new StringReader(expected.getExpectedJson());
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,54,"BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,55,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,58,public void testTopLevelNullObjectSerializationWithWriter() {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,59,StringWriter writer = new StringWriter();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,60,"gson.toJson(null, writer);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,61,"assertEquals("""", writer.toString());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,64,public void testTopLevelNullObjectDeserializationWithReader() {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,65,"StringReader reader = new StringReader(""null"");"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,66,"Integer nullIntObject = gson.fromJson(reader, Integer.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,67,assertNull(nullIntObject);
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,70,public void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls() {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,71,Gson gson = new GsonBuilder().serializeNulls().create();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,72,StringWriter writer = new StringWriter();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,73,"gson.toJson(null, writer);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,74,"assertEquals(""null"", writer.toString());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,77,public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls() {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,78,Gson gson = new GsonBuilder().serializeNulls().create();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,79,"StringReader reader = new StringReader(""null"");"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,80,"Integer nullIntObject = gson.fromJson(reader, Integer.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,81,assertNull(nullIntObject);
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,20,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,21,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,22,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,23,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,24,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,25,import com.google.gson.common.TestTypes.ClassOverridingEquals;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,27,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,29,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,32,* Functional tests that do not fall neatly into any of the existing classification.
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,34,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,35,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,37,public class UncategorizedTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,39,private Gson gson = null;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,41,@Override
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,42,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,43,super.setUp();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,44,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,47,public void testInvalidJsonDeserializationFails() throws Exception {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,48,try {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,49,"gson.fromJson(""adfasdf1112,,,\"":"", BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,50,"fail(""Bad JSON should throw a ParseException"");"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,51,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,53,try {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,54,"gson.fromJson(""{adfasdf1112,,,\"":}"", BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,55,"fail(""Bad JSON should throw a ParseException"");"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,56,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,59,public void testObjectEqualButNotSameSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,60,ClassOverridingEquals objA = new ClassOverridingEquals();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,61,ClassOverridingEquals objB = new ClassOverridingEquals();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,62,objB.ref = objA;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,63,String json = gson.toJson(objB);
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,64,"assertEquals(objB.getExpectedJson(), json);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,67,public void testStaticFieldsAreNotSerialized() {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,68,BagOfPrimitives target = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,69,"assertFalse(gson.toJson(target).contains(""DEFAULT_VALUE""));"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,73,* This test ensures that a custom deserializer is able to return a derived class instance for a
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,74,"* base class object. For a motivation for this test, see Issue 37 and"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,75,* http://groups.google.com/group/google-gson/browse_thread/thread/677d56e9976d7761
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,77,public void testReturningDerivedClassesDuringDeserialization() {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,78,"Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new BaseTypeAdapter()).create();"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,79,"String json = ""{\""opType\"":\""OP1\""}"";"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,80,"Base base = gson.fromJson(json, Base.class);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,81,assertTrue(base instanceof Derived1);
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,82,"assertEquals(OperationType.OP1, base.opType);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,84,"json = ""{\""opType\"":\""OP2\""}"";"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,85,"base = gson.fromJson(json, Base.class);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,86,assertTrue(base instanceof Derived2);
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,87,"assertEquals(OperationType.OP2, base.opType);"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,90,"private enum OperationType { OP1, OP2 }"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,91,private static class Base {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,92,OperationType opType;
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,94,private static class Derived1 extends Base {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,95,Derived1() { opType = OperationType.OP1; }
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,97,private static class Derived2 extends Base {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,98,Derived2() { opType = OperationType.OP2; }
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,100,private static class BaseTypeAdapter implements JsonDeserializer<Base> {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,101,"public Base deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,102,throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,103,"String opTypeStr = json.getAsJsonObject().get(""opType"").getAsString();"
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,104,OperationType opType = OperationType.valueOf(opTypeStr);
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,105,switch (opType) {
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,106,case OP1:
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,107,return new Derived1();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,108,case OP2:
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,109,return new Derived2();
True,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,gson/src/test/java/com/google/gson/functional/UncategorizedTest.java,111,"throw new JsonParseException(""unknown type: "" + json);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,20,import com.google.gson.annotations.Since;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,21,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,26,* Functional tests for versioning support in Gson.
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,28,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,29,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,31,public class VersioningTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,32,private static final int A = 0;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,33,private static final int B = 1;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,34,private static final int C = 2;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,35,private static final int D = 3;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,37,private GsonBuilder builder;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,39,@Override
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,40,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,41,super.setUp();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,42,builder = new GsonBuilder();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,45,public void testVersionedClassesSerialization() {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,46,Gson gson = builder.setVersion(1.0).create();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,47,String json1 = gson.toJson(new Version1());
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,48,String json2 = gson.toJson(new Version1_1());
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,49,"assertEquals(json1, json2);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,52,public void testVersionedClassesDeserialization() {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,53,Gson gson = builder.setVersion(1.0).create();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,54,"String json = ""{\""a\"":3,\""b\"":4,\""c\"":5}"";"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,55,"Version1 version1 = gson.fromJson(json, Version1.class);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,56,"assertEquals(3, version1.a);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,57,"assertEquals(4, version1.b);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,58,"Version1_1 version1_1 = gson.fromJson(json, Version1_1.class);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,59,"assertEquals(3, version1_1.a);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,60,"assertEquals(4, version1_1.b);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,61,"assertEquals(C, version1_1.c);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,64,public void testIgnoreLaterVersionClassSerialization() {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,65,Gson gson = builder.setVersion(1.0).create();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,66,"assertEquals("""", gson.toJson(new Version1_2()));"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,69,public void testIgnoreLaterVersionClassDeserialization() {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,70,Gson gson = builder.setVersion(1.0).create();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,71,"String json = ""{\""a\"":3,\""b\"":4,\""c\"":5,\""d\"":6}"";"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,72,"Version1_2 version1_2 = gson.fromJson(json, Version1_2.class);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,73,"// Since the class is versioned to be after 1.0, all fields should get set to"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,74,// their default values.
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,75,"assertEquals(A, version1_2.a);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,76,"assertEquals(B, version1_2.b);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,77,"assertEquals(C, version1_2.c);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,78,"assertEquals(D, version1_2.d);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,81,public void testVersionedGsonWithUnversionedClassesSerialization() {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,82,Gson gson = builder.setVersion(1.0).create();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,83,"BagOfPrimitives target = new BagOfPrimitives(10, 20, false, ""stringValue"");"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,84,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,87,public void testVersionedGsonWithUnversionedClassesDeserialization() {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,88,Gson gson = builder.setVersion(1.0).create();
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,89,"String json = ""{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false}"";"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,91,"BagOfPrimitives expected = new BagOfPrimitives(10, 20, false, null);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,92,"BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,93,"assertEquals(expected, actual);"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,96,private static class Version1 {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,97,int a = A;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,98,@Since(1.0) int b = B;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,101,private static class Version1_1 extends Version1 {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,102,@Since(1.1) int c = C;
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,105,@Since(1.2)
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,106,private static class Version1_2 extends Version1_1 {
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,107,int d = D;

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,19,mport com.google.gson.internal.bind.MiniGson;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,mport com.google.gson.internal.bind.TypeAdapter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,21,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,22,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,23,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,24,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,25,mport com.google.gson.stream.MalformedJsonException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,24,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,31,import com.google.gson.internal.bind.MiniGson;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,32,import com.google.gson.internal.bind.ReflectiveTypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,33,import com.google.gson.internal.bind.TypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,34,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,35,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,36,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,37,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,38,import com.google.gson.stream.MalformedJsonException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,186,TypeAdapter.Factory factory = new ReflectiveTypeAdapter.FactoryImpl() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,187,@Override
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"public boolean skipField(Class<?> declaringClazz, Field f, Type declaredType) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,189,// TODO: support deserialization policy as well
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,return Gson.this.serializationExclusionStrategy.shouldSkipField(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,191,"new FieldAttributes(declaringClazz, f, declaredType));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,196,.factory(factory)
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,34,inal class ReflectiveTypeAdapter<T> extends TypeAdapter<T>  {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,35,ublic static final Factory FACTORY = new Factory() {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,36,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,37,lass<? super T> raw = type.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,39,f (!Object.class.isAssignableFrom(raw)) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,40,eturn null; // it's a primitive!
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,43,/ TODO: use Joel's constructor calling code (with setAccessible)
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,44,onstructor<? super T> constructor;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,45,ry {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,46,onstructor = raw.getDeclaredConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,47, catch (NoSuchMethodException e) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,48,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,51,"eturn new ReflectiveTypeAdapter<T>(constructor, getBoundFields(context, type, raw));"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,54,"rivate Map<String, BoundField> getBoundFields("
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,55,"iniGson context, TypeToken<?> type, Class<?> raw) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,56,"ap<String, BoundField> result = new LinkedHashMap<String, BoundField>();"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,57,hile (raw != Object.class) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,58,or (Field field : raw.getDeclaredFields()) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,59,ield.setAccessible(true); // TODO: don't call setAccessible unless necessary
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,60,"ype fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,61,"oundField boundField = createBoundField(context, field, TypeToken.get(fieldType));"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,62,"esult.put(boundField.name, boundField);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,64,"ype = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,65,aw = type.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,67,eturn result;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,34,public final class ReflectiveTypeAdapter<T> extends TypeAdapter<T>  {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,35,public static final Factory FACTORY = new FactoryImpl();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,114,public static class FactoryImpl implements Factory {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,115,"public boolean skipField(Class<?> declaringClazz, Field f, Type declaringType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,116,return false;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,118,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,119,Class<? super T> raw = type.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,121,if (!Object.class.isAssignableFrom(raw)) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,122,return null; // it's a primitive!
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,125,// TODO: use Joel's constructor calling code (with setAccessible)
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,126,Constructor<? super T> constructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,127,try {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,128,constructor = raw.getDeclaredConstructor();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,129,} catch (NoSuchMethodException e) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,130,return null;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,133,"return new ReflectiveTypeAdapter<T>(constructor, getBoundFields(context, type, raw));"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,136,"private Map<String, BoundField> getBoundFields("
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,137,"MiniGson context, TypeToken<?> type, Class<?> raw) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,138,"Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,139,Type declaredType = type.getType();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,140,while (raw != Object.class) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,141,for (Field field : raw.getDeclaredFields()) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,142,"if (skipField(raw, field, declaredType)) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,143,continue;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,145,field.setAccessible(true); // TODO: don't call setAccessible unless necessary
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,146,"Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,147,"BoundField boundField = createBoundField(context, field, TypeToken.get(fieldType));"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,148,"result.put(boundField.name, boundField);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,150,"type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,151,raw = type.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,153,return result;

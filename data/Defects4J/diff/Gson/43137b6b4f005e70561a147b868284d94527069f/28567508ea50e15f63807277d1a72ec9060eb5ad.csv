is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,21,mport java.lang.reflect.Field;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,22,mport java.lang.reflect.InvocationTargetException;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,24,mport java.util.logging.Level;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,25,mport java.util.logging.Logger;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,27,mport sun.misc.Unsafe;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,40,rivate static final Logger log = Logger.getLogger(MappedObjectConstructor.class.getName());
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,41,rivate static final Unsafe THE_UNSAFE = getUnsafe();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,34,private static final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,59,rivate static Unsafe getUnsafe() {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,60,ry {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,61,"ield f = Unsafe.class.getDeclaredField(""theUnsafe"");"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,62,.setAccessible(true);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,63,eturn (Unsafe) f.get(null);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,64, catch (NoSuchFieldException e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,65,hrow new Error();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,66, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,67,hrow new Error();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,80,f (constructor == null) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,81,eturn (T) THE_UNSAFE.allocateInstance(clazz);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,83,eturn constructor.newInstance();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,84, catch (InstantiationException e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,85,"hrow new RuntimeException((""Unable to invoke no-args constructor for "" + typeOfT + "". """
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,86," ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,87, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,88,"hrow new RuntimeException((""Unable to invoke no-args constructor for "" + typeOfT + "". """
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,89," ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,90, catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,61,return constructor == null
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,62,? unsafeAllocator.newInstance(clazz)
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,63,: constructor.newInstance();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,64,} catch (Exception e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,107, Use this methods to register an {@link InstanceCreator} for a new type.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,109," @param <T> the type of class to be mapped with its ""creator"""
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,110, @param typeOfT the instance type that will be created
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,111, @param creator the {@link InstanceCreator} instance to register
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,113,"T> void register(Type typeOfT, InstanceCreator<? extends T> creator) {"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,114,f (instanceCreatorMap.hasSpecificHandlerFor(typeOfT)) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,115,"og.log(Level.WARNING, ""Overriding the existing InstanceCreator for {0}"", typeOfT);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,117,"nstanceCreatorMap.register(typeOfT, creator);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,19,import java.io.ObjectInputStream;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,20,import java.io.ObjectStreamClass;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,21,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,22,import java.lang.reflect.Method;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,25,* Do sneaky things to allocate objects without invoking their constructors.
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,28,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,30,abstract class UnsafeAllocator {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,31,public abstract <T> T newInstance(Class<T> c) throws Exception;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,33,public static UnsafeAllocator create() {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,34,// try JVM
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,35,// public class Unsafe {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,36,//   public Object allocateInstance(Class<?> type);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,38,try {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,39,"Class<?> unsafeClass = Class.forName(""sun.misc.Unsafe"");"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,40,"Field f = unsafeClass.getDeclaredField(""theUnsafe"");"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,41,f.setAccessible(true);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,42,final Object unsafe = f.get(null);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,43,"final Method allocateInstance = unsafeClass.getMethod(""allocateInstance"", Class.class);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,44,return new UnsafeAllocator() {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,45,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,46,public <T> T newInstance(Class<T> c) throws Exception {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,47,"return (T) allocateInstance.invoke(unsafe, c);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,50,} catch (Exception ignored) {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,53,"// try dalvikvm, pre-gingerbread"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,54,// public class ObjectInputStream {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,55,//   private static native Object newInstance(
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,56,"//     Class<?> instantiationClass, Class<?> constructorClass);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,58,try {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,59,final Method newInstance = ObjectInputStream.class
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,60,".getDeclaredMethod(""newInstance"", Class.class, Class.class);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,61,newInstance.setAccessible(true);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,62,return new UnsafeAllocator() {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,63,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,64,public <T> T newInstance(Class<T> c) throws Exception {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,65,"return (T) newInstance.invoke(null, c, Object.class);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,68,} catch (Exception ignored) {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,71,"// try dalvivkm, post-gingerbread"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,72,// public class ObjectStreamClass {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,73,//   private static native int getConstructorId(Class<?> c);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,74,"//   private static native Object newInstance(Class<?> instantiationClass, int methodId);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,76,try {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,77,Method getConstructorId = ObjectStreamClass.class
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,78,".getDeclaredMethod(""getConstructorId"", Class.class);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,79,getConstructorId.setAccessible(true);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,80,"final int constructorId = (Integer) getConstructorId.invoke(null, Object.class);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,81,final Method newInstance = ObjectStreamClass.class
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,82,".getDeclaredMethod(""newInstance"", Class.class, int.class);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,83,newInstance.setAccessible(true);
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,84,return new UnsafeAllocator() {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,85,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,86,public <T> T newInstance(Class<T> c) throws Exception {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,87,"return (T) newInstance.invoke(null, c, constructorId);"
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,90,} catch (Exception ignored) {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,93,// give up
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,94,return new UnsafeAllocator() {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,95,public <T> T newInstance(Class<T> c) throws InstantiationException {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/UnsafeAllocator.java,96,"throw new UnsupportedOperationException(""Cannot allocate "" + c);"

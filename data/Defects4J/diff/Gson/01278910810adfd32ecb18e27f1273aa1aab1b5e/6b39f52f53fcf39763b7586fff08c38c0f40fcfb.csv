is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,31,* Interface to provide ability to read multiple {@link JsonElement}s from a stream
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,32,* asynchronously.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,34,* @since 1.4
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,36,public interface AsyncReader {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,39,* Parse and return one {@link JsonElement}
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,40,* @since 1.4
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,42,public JsonElement readElement();
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,53,eturn parser.parse();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,68,JsonElement element = parser.parse();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,69,return element;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,82,* Returns {@link AsyncReader} to allow reading of multiple {@link JsonElement}s from the
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,83,* specified reader asynchronously.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,85,* @param json The data stream containing JSON elements concatenated to each other.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,86,* @return {@link AsyncReader} for reading {@link JsonElement}s asynchronously.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,87,* @throws JsonParseException if the incoming stream is malformed JSON.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,88,* @since 1.4
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,90,public AsyncReader parseAsync(Reader json) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,91,return new AsyncReaderJavacc(json);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,94,private static class AsyncReaderJavacc implements AsyncReader {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,95,private final JsonParserJavacc parser;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,96,private AsyncReaderJavacc(Reader json) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,97,parser = new JsonParserJavacc(json);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,100,public JsonElement readElement() {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,101,try {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,102,JsonElement element = parser.parse();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,103,return element;
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,104,} catch (TokenMgrError e) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,105,"throw new JsonParseException(""Failed parsing JSON source to Json"", e);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,106,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,107,"throw new JsonParseException(""Failed parsing JSON source to Json"", e);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,108,} catch (StackOverflowError e) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,109,"throw new JsonParseException(""Failed parsing JSON source to Json"", e);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,110,} catch (OutOfMemoryError e) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,111,"throw new JsonParseException(""Failed parsing JSON source to Json"", e);"
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,19,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,23,import java.io.CharArrayReader;
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,24,import java.io.CharArrayWriter;
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,58,public void testReadWriteTwoObjects() throws Exception {
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,59,Gson gson= new Gson();
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,60,CharArrayWriter writer= new CharArrayWriter();
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,61,"BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, ""one"");"
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,62,writer.write(gson.toJson(expectedOne).toCharArray());
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,63,"BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, ""two"");"
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,64,writer.write(gson.toJson(expectedTwo).toCharArray());
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,65,CharArrayReader reader = new CharArrayReader(writer.toCharArray());
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,67,JsonParserJavacc parser = new JsonParserJavacc(reader);
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,68,JsonElement element1 = parser.parse();
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,69,JsonElement element2 = parser.parse();
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,70,"BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,71,"assertEquals(""one"", actualOne.stringValue);"
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,72,"BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,73,"assertEquals(""two"", actualTwo.stringValue);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,20,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,21,import com.google.gson.JsonParser;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,22,import com.google.gson.JsonParser.AsyncReader;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,27,import java.io.CharArrayReader;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,28,import java.io.CharArrayWriter;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,29,import java.io.IOException;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,90,public void testReadWriteTwoStrings() throws IOException {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,91,Gson gson= new Gson();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,92,CharArrayWriter writer= new CharArrayWriter();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,93,"writer.write(gson.toJson(""one"").toCharArray());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,94,"writer.write(gson.toJson(""two"").toCharArray());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,95,CharArrayReader reader = new CharArrayReader(writer.toCharArray());
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,96,JsonParser parser = new JsonParser();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,97,AsyncReader asyncReader = parser.parseAsync(reader);
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,98,"String actualOne = gson.fromJson(asyncReader.readElement(), String.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,99,"assertEquals(""one"", actualOne);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,100,"String actualTwo = gson.fromJson(asyncReader.readElement(), String.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,101,"assertEquals(""two"", actualTwo);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,104,public void testReadWriteTwoObjects() throws IOException {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,105,Gson gson= new Gson();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,106,CharArrayWriter writer= new CharArrayWriter();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,107,"BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, ""one"");"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,108,writer.write(gson.toJson(expectedOne).toCharArray());
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,109,"BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, ""two"");"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,110,writer.write(gson.toJson(expectedTwo).toCharArray());
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,111,CharArrayReader reader = new CharArrayReader(writer.toCharArray());
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,112,JsonParser parser = new JsonParser();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,113,AsyncReader asyncReader = parser.parseAsync(reader);
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,114,"BagOfPrimitives actualOne = gson.fromJson(asyncReader.readElement(), BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,115,"assertEquals(""one"", actualOne.stringValue);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,116,"BagOfPrimitives actualTwo = gson.fromJson(asyncReader.readElement(), BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,117,"assertEquals(""two"", actualTwo.stringValue);"

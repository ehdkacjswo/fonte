is_addition,old_file_path,new_file_path,line_num,content
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,22,import com.google.gson.stream.JsonToken;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,86,if (reader.peek() == JsonToken.NULL) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,87,reader.nextNull(); // TODO: does this belong here?
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,88,return null;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,102,if (collection == null) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,103,writer.nullValue(); // TODO: better policy here?
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,104,return;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,6,* You may obtain a copy of the License at
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,14,* limitations under the License.
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,17,package com.google.gson.mini;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,19,import com.google.gson.internal.$Gson$Types;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,20,import com.google.gson.reflect.TypeToken;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,21,import com.google.gson.stream.JsonReader;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,22,import com.google.gson.stream.JsonToken;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,23,import com.google.gson.stream.JsonWriter;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,24,import java.io.IOException;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,25,import java.lang.reflect.Constructor;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,26,import java.lang.reflect.ParameterizedType;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,27,import java.lang.reflect.Type;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,28,import java.util.LinkedHashMap;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,29,import java.util.Map;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,32,* Adapt a homogeneous collection of objects.
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,34,"final class MapTypeAdapter<V> extends TypeAdapter<Map<String, V>> {"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,35,public static final Factory FACTORY = new Factory() {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,36,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,37,Type type = typeToken.getType();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,38,if (!(type instanceof ParameterizedType)) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,39,return null;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,42,Class<? super T> rawType = typeToken.getRawType();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,43,if (!Map.class.isAssignableFrom(rawType)) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,44,return null;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,47,"Type[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawType);"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,48,if (keyAndValueTypes[0] != String.class) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,49,return null; // TODO: return an array-style map adapter
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,51,TypeAdapter<?> valueAdapter = context.getAdapter(TypeToken.get(keyAndValueTypes[1]));
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,53,Class<?> constructorType;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,55,if (rawType == Map.class) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,56,constructorType = LinkedHashMap.class;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,57,} else {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,58,constructorType = rawType;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,61,Constructor<?> constructor;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,62,try {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,63,constructor = constructorType.getConstructor();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,64,} catch (NoSuchMethodException e) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,65,return null;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,68,"@SuppressWarnings(""unchecked"") // we don't define a type parameter for the key or value types"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,69,"TypeAdapter<T> result = new MapTypeAdapter(valueAdapter, constructor);"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,70,return result;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,74,private final TypeAdapter<V> valueTypeAdapter;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,75,"private final Constructor<? extends Map<String, V>> constructor;"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,77,"public MapTypeAdapter(TypeAdapter<V> valueTypeAdapter,"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,78,"Constructor<? extends Map<String, V>> constructor) {"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,79,this.valueTypeAdapter = valueTypeAdapter;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,80,this.constructor = constructor;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,83,"public Map<String, V> read(JsonReader reader) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,84,if (reader.peek() == JsonToken.NULL) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,85,reader.nextNull(); // TODO: does this belong here?
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,86,return null;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,89,"Map<String, V> map = MiniGson.newInstance(constructor);"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,90,reader.beginObject();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,91,while (reader.hasNext()) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,92,String key = reader.nextName();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,93,V value = valueTypeAdapter.read(reader);
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,94,"map.put(key, value);"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,96,reader.endObject();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,97,return map;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,100,"public void write(JsonWriter writer, Map<String, V> map) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,101,if (map == null) {
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,102,writer.nullValue(); // TODO: better policy here?
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,103,return;
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,106,writer.beginObject();
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,107,"for (Map.Entry<String, V> entry : map.entrySet()) {"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,108,writer.name(entry.getKey());
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,109,"valueTypeAdapter.write(writer, entry.getValue());"
True,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,extras/src/main/java/com/google/gson/mini/MapTypeAdapter.java,111,writer.endObject();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,42,factories.add(MapTypeAdapter.FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,69,// TODO: create a cache here
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,97,ublic void factory(TypeAdapter.Factory factory) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,99,public Builder factory(TypeAdapter.Factory factory) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,101,return this;
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,101,"ublic <T> void typeAdapter(final Class<T> type, final TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,104,"public <T> Builder typeAdapter(final Class<T> type, final TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,106,return this;
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,105,"ublic <T> void typeAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,109,"public <T> Builder typeAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,111,return this;
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,109,"ublic <T> void typeHierarchyAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,114,"public <T> Builder typeHierarchyAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,116,return this;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,22,import com.google.gson.stream.JsonToken;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,39,/ TODO: does this catch primitives?
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,40,eturn null;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,40,return null; // it's a primitive!
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,44,onstructor<T> constructor;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,44,Constructor<? super T> constructor;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,46,onstructor = (Constructor<T>) raw.getDeclaredConstructor();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,46,constructor = raw.getDeclaredConstructor();
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,70,rivate final Constructor<T> constructor;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,70,private final Constructor<? super T> constructor;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,74,"eflectiveTypeAdapter(Constructor<T> constructor, Map<String, BoundField<?>> map) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,74,"ReflectiveTypeAdapter(Constructor<? super T> constructor, Map<String, BoundField<?>> map) {"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,81, instance = MiniGson.newInstance(constructor);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,81,if (reader.peek() == JsonToken.NULL) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,82,reader.nextNull(); // TODO: does this belong here?
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,83,return null;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,86,"@SuppressWarnings(""unchecked"") // the '? super T' is a raw T (the only kind we can construct)"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,87,T instance = (T) MiniGson.newInstance(constructor);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,107,if (value == null) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,108,writer.nullValue(); // TODO: better policy here?
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,109,return;
False,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,49,eader.setLenient(true); // TODO: why?
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,49,reader.setLenient(true);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,19,import com.google.gson.reflect.TypeToken;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,20,import com.google.gson.stream.JsonReader;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,21,import com.google.gson.stream.JsonWriter;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,24,import java.util.Collections;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,25,import java.util.LinkedHashMap;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,27,import java.util.Map;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,32,private MiniGson miniGson = new MiniGson.Builder().build();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,33,private TypeAdapter<Truck> truckAdapter = miniGson.getAdapter(Truck.class);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,34,"private TypeAdapter<Map<String, Double>> mapAdapter"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,35,"= miniGson.getAdapter(new TypeToken<Map<String, Double>>() {});"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,27,"erson jesse = new Person(""Jesse"", 29);"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,28,"erson jodie = new Person(""Jodie"", 29);"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,30,"ruck.passengers = Arrays.asList(jesse, jodie);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,39,"truck.passengers = Arrays.asList(new Person(""Jesse"", 29), new Person(""Jodie"", 29));"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,33,iniGson miniGson = new MiniGson.Builder().build();
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,34,ypeAdapter<Truck> truckAdapter = miniGson.getAdapter(Truck.class);
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,36,tring json = truckAdapter.toJson(truck);
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,39,"son.replace('\""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,44,"truckAdapter.toJson(truck).replace('\""', '\''));"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,46,iniGson miniGson = new MiniGson.Builder().build();
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,47,ypeAdapter<Truck> truckAdapter = miniGson.getAdapter(Truck.class);
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,51,erson jesse = truck.passengers.get(0);
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,52,"ssertEquals(""Jesse"", jesse.name);"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,53,"ssertEquals(29, jesse.age);"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,54,erson jodie = truck.passengers.get(1);
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,55,"ssertEquals(""Jodie"", jodie.name);"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,56,"ssertEquals(29, jodie.age);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,52,"assertEquals(Arrays.asList(new Person(""Jesse"", 29), new Person(""Jodie"", 29)), truck.passengers);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,55,public void testSerializeNullField() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,56,Truck truck = new Truck();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,57,truck.passengers = null;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,58,"assertEquals(""{'horsePower':0.0,'passengers':null}"","
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,59,"truckAdapter.toJson(truck).replace('\""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,62,public void testDeserializeNullField() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,63,"Truck truck = truckAdapter.fromJson(""{'horsePower':0.0,'passengers':null}"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,64,assertNull(truck.passengers);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,67,public void testSerializeNullObject() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,68,Truck truck = new Truck();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,69,truck.passengers = Arrays.asList((Person) null);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,70,"assertEquals(""{'horsePower':0.0,'passengers':[null]}"","
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,71,"truckAdapter.toJson(truck).replace('\""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,74,public void testDeserializeNullObject() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,75,"Truck truck = truckAdapter.fromJson(""{'horsePower':0.0,'passengers':[null]}"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,76,"assertEquals(Arrays.asList((Person) null), truck.passengers);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,79,public void testSerializeWithCustomTypeAdapter() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,80,usePersonNameAdapter();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,81,Truck truck = new Truck();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,82,"truck.passengers = Arrays.asList(new Person(""Jesse"", 29), new Person(""Jodie"", 29));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,83,"assertEquals(""{'horsePower':0.0,'passengers':['Jesse','Jodie']}"","
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,84,"truckAdapter.toJson(truck).replace('\""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,87,public void testDeserializeWithCustomTypeAdapter() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,88,usePersonNameAdapter();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,89,"Truck truck = truckAdapter.fromJson(""{'horsePower':0.0,'passengers':['Jesse','Jodie']}"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,90,"assertEquals(Arrays.asList(new Person(""Jesse"", -1), new Person(""Jodie"", -1)), truck.passengers);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,93,private void usePersonNameAdapter() {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,94,TypeAdapter<Person> personNameAdapter = new TypeAdapter<Person>() {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,95,@Override public Person read(JsonReader reader) throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,96,String name = reader.nextString();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,97,"return new Person(name, -1);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,99,"@Override public void write(JsonWriter writer, Person value) throws IOException {"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,100,writer.value(value.name);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,103,"miniGson = new MiniGson.Builder().typeAdapter(Person.class, personNameAdapter).build();"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,104,truckAdapter = miniGson.getAdapter(Truck.class);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,107,public void testSerializeMap() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,108,"Map<String, Double> map = new LinkedHashMap<String, Double>();"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,109,"map.put(""a"", 5.0);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,110,"map.put(""b"", 10.0);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,111,"assertEquals(""{'a':5.0,'b':10.0}"", mapAdapter.toJson(map).replace('""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,114,public void testDeserializeMap() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,115,"Map<String, Double> map = new LinkedHashMap<String, Double>();"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,116,"map.put(""a"", 5.0);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,117,"map.put(""b"", 10.0);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,118,"assertEquals(map, mapAdapter.fromJson(""{'a':5.0,'b':10.0}""));"
False,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,61,ist<Person> passengers;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,123,List<Person> passengers = Collections.emptyList();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,136,@Override public boolean equals(Object o) {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,137,return o instanceof Person
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,138,&& ((Person) o).name.equals(name)
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,139,&& ((Person) o).age == age;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,141,@Override public int hashCode() {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,142,return name.hashCode() ^ age;

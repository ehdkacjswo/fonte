is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,104,static final boolean DEFAULT_LENIENT = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,105,static final boolean DEFAULT_PRETTY_PRINT = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,106,static final boolean DEFAULT_ESCAPE_HTML = true;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,107,static final boolean DEFAULT_SERIALIZE_NULLS = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,108,static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,109,static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,133,private final boolean lenient;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,180,"ollections.<Type, InstanceCreator<?>>emptyMap(), false, false, DEFAULT_JSON_NON_EXECUTABLE,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,181,"rue, false, false, LongSerializationPolicy.DEFAULT,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,182,ollections.<TypeAdapterFactory>emptyList());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,187,"Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,189,"DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,"LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"oolean prettyPrinting, boolean serializeSpecialFloatingPointValues,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,196,"boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,204,this.lenient = lenient;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,717,* Returns a new JSON writer configured for the settings on this Gson instance.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,719,public JsonReader newJsonReader(Reader reader) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,720,JsonReader jsonReader = new JsonReader(reader);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,721,jsonReader.setLenient(lenient);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,722,return jsonReader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,798,sonReader jsonReader = new JsonReader(json);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,816,JsonReader jsonReader = newJsonReader(json);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,825,sonReader jsonReader = new JsonReader(json);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,843,JsonReader jsonReader = newJsonReader(json);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,19,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,35,import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,36,import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,37,import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,38,import static com.google.gson.Gson.DEFAULT_LENIENT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,39,import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,40,import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,41,import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,77,rivate boolean serializeNulls;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,86,private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,81,rivate boolean complexMapKeySerialization;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,82,rivate boolean serializeSpecialFloatingPointValues;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,83,rivate boolean escapeHtmlChars = true;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,84,rivate boolean prettyPrinting;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,85,rivate boolean generateNonExecutableJson;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,90,private boolean complexMapKeySerialization = DEFAULT_COMPLEX_MAP_KEYS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,91,private boolean serializeSpecialFloatingPointValues = DEFAULT_SPECIALIZE_FLOAT_VALUES;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,92,private boolean escapeHtmlChars = DEFAULT_ESCAPE_HTML;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,93,private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,94,private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,95,private boolean lenient = DEFAULT_LENIENT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,365,"* By default, Gson is strict and only accepts JSON as specified by"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,366,"* <a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. This option makes the parser"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,367,* liberal in what it accepts.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,369,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,370,* @see JsonReader#setLenient(boolean)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,372,public GsonBuilder setLenient() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,373,lenient = true;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,374,return this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,547,"enerateNonExecutableJson, escapeHtmlChars, prettyPrinting,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,570,"generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,297," Configure this parser to be  be liberal in what it accepts. By default,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,297,"* Configure this parser to be liberal in what it accepts. By default,"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,2,* Copyright (C) 2016 The Gson Authors
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,21,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,24,import static java.util.Collections.singletonList;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,27,* Functional tests for leniency option.
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,29,public class LeniencyTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,31,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,33,@Override
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,34,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,35,super.setUp();
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,36,gson = new GsonBuilder().setLenient().create();
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,39,public void testLenientFromJson() {
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,40,"List<String> json = gson.fromJson("""""
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,41,"+ ""[ # One!\n"""
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,42,"+ ""  'Hi' #Element!\n"""
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,43,"+ ""] # Array!"", new TypeToken<List<String>>() {}.getType());"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,44,"assertEquals(singletonList(""Hi""), json);"

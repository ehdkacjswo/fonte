is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,322,"SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,147,if (serializer == null && obj != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,148,serializer = serializers.getHandlerFor(obj.getClass());
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,111, else if (objTypeInfo.getActualType() == Object.class) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,111,} else if (objTypeInfo.getActualType() == Object.class
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,112,&& isPrimitiveOrString(objectToVisit)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,113,"// TODO(Joel): this is only used for deserialization of ""primitves"""
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,114,//             we should rethink this!!!
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,118,or (Class<?> curr = objTypeInfo.getRawClass();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119,urr != null && !curr.equals(Object.class); curr = curr.getSuperclass()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,121,Class<?> topLevelClass = (objTypeInfo.getRawClass() == Object.class)
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,122,? objectToVisit.getClass() : objTypeInfo.getRawClass();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,123,for (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,124,curr = curr.getSuperclass()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,136,private boolean isPrimitiveOrString(Object objectToVisit) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,137,Class<?> realClazz = objectToVisit.getClass();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,138,return realClazz == Object.class || realClazz == String.class
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,139,|| Primitives.unwrap(realClazz).isPrimitive();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,141,"isitor.visitFieldUsingCustomHandler(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,152,"visitor.visitFieldUsingCustomHandler(f, actualTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,58,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,34,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,43,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,57,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,71,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,88,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,158,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,193,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,219,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,296,"SuppressWarnings(""unchecked"")"
False,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java,54,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,56,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,226,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,69,"SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,24,import com.google.gson.common.TestTypes.ClassWithObjects;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,31,import java.math.BigDecimal;
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,185,public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,186,"Object[] objs = new Object[]{1, ""abc"", 0.3f, 5L};"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,187,String json = gson.toJson(objs);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,188,"assertTrue(json.contains(""abc""));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,189,"assertTrue(json.contains(""0.3""));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,190,"assertTrue(json.contains(""5""));"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,193,public void testArrayOfPrimitivesAsObjectsDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,194,"String json = ""[1,'abc',0.3,5]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,195,"Object[] objs = gson.fromJson(json, Object[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,196,"assertEquals(1, objs[0]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,197,"assertEquals(""abc"", objs[1]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,198,"assertEquals(new BigDecimal(""0.3""), objs[2]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,199,"assertEquals(5, objs[3]);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,202,public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,203,"String json = ""[1,'abc',{a:1},5]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,204,try {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,205,"gson.fromJson(json, Object[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,206,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,210,public void testArrayWithoutTypeInfoDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,211,"String json = ""[1,'abc',[1,2],5]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,212,try {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,213,"gson.fromJson(json, Object[].class);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,214,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,218,public void testObjectArrayWithNonPrimitivesSerializaiton() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,219,ClassWithObjects classWithObjects = new ClassWithObjects();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,220,BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,221,String classWithObjectsJson = gson.toJson(classWithObjects);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,222,String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,224,"Object[] objects = new Object[] { classWithObjects, bagOfPrimitives };"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,225,String json = gson.toJson(objects);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,227,assertTrue(json.contains(classWithObjectsJson));
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,228,assertTrue(json.contains(bagOfPrimitivesJson));
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,286,"SuppressWarnings({ ""unchecked"", ""unused"" })"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,286,"@SuppressWarnings(""unchecked"")"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,303,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java,gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java,124,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,68,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,85,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,292,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,304,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,120,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java,170,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,78,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,175,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,252,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java,85,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,154,"SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,20,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,21,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,22,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,23,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,24,import java.util.Queue;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,25,import java.util.Set;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,26,import java.util.SortedSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,27,import java.util.TreeSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,29,import junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,22,mport com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,34,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,36,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,37,mport java.math.BigDecimal;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,38,mport java.util.ArrayList;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,39,mport java.util.Collection;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,40,mport java.util.LinkedList;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,41,mport java.util.List;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,42,mport java.util.Queue;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,43,mport java.util.Set;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,44,mport java.util.SortedSet;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,45,mport java.util.TreeSet;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,258,public void testArrayOfObjectsAsFields() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,259,ClassWithObjects classWithObjects = new ClassWithObjects();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,260,BagOfPrimitives bagOfPrimitives = new BagOfPrimitives();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,261,"String stringValue = ""someStringValueInArray"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,262,String classWithObjectsJson = gson.toJson(classWithObjects);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,263,String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,265,ClassWithArray classWithArray = new ClassWithArray(
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,266,"new Object[] { stringValue, classWithObjects, bagOfPrimitives });"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,267,String json = gson.toJson(classWithArray);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,269,assertTrue(json.contains(classWithObjectsJson));
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,270,assertTrue(json.contains(bagOfPrimitivesJson));
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,271,"assertTrue(json.contains(""\"""" + stringValue + ""\""""));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,354,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,381,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,395,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,488,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,573,ublic void testArrayOfPrimitivesAsObjectsSerialization() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,574,"bject[] objs = new Object[]{1, ""abc"", 0.3f, 5L};"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,575,tring json = gson.toJson(objs);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,576,"ssertTrue(json.contains(""abc""));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,577,"ssertTrue(json.contains(""0.3""));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,578,"ssertTrue(json.contains(""5""));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,581,ublic void testArrayOfPrimitivesAsObjectsDeserialization() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,582,"tring json = ""[1,'abc',0.3,5]"";"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,583,"bject[] objs = gson.fromJson(json, Object[].class);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,584,"ssertEquals(1, objs[0]);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,585,"ssertEquals(""abc"", objs[1]);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,586,"ssertEquals(new BigDecimal(""0.3""), objs[2]);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,587,"ssertEquals(5, objs[3]);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,590,ublic void testArrayOfObjectsWithoutTypeInfoDeserialization() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,591,"tring json = ""[1,'abc',{a:1},5]"";"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,592,ry {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,593,"son.fromJson(json, Object[].class);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,594, catch (JsonParseException expected) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,598,ublic void testArrayWithoutTypeInfoDeserialization() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,599,"tring json = ""[1,'abc',[1,2],5]"";"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,600,ry {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,601,"son.fromJson(json, Object[].class);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,602, catch (JsonParseException expected) {
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,274,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,390,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,466,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,470,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,75,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,gson/src/test/java/com/google/gson/metrics/PerformanceTest.java,85,"SuppressWarnings(""unused"")"

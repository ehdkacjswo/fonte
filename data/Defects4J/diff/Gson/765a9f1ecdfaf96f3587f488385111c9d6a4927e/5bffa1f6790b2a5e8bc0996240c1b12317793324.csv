is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,17,package com.google.gson.stream;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,19,import java.io.Closeable;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,20,import java.io.EOFException;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,21,import java.io.IOException;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,22,import java.io.Reader;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,23,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,24,import java.util.List;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,27,"* Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,28,* encoded value as a stream of tokens. This stream includes both literal
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,29,"* values (strings, numbers, booleans, and nulls) as well as the begin and"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,30,* end delimiters of objects and arrays. The tokens are traversed in
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,31,"* depth-first order, the same order that they appear in the JSON document."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,32,"* Within JSON objects, name/value pairs are represented by a single token."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,34,* <h3>Parsing JSON</h3>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,35,"* To create a recursive descent parser your own JSON streams, first create an"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,36,* entry point method that creates a {@code JsonReader}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,38,"* <p>Next, create handler methods for each structure in your JSON text. You'll"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,39,* need a method for each object type and for each array type.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,40,* <ul>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,41,"*   <li>Within <strong>array handling</strong> methods, first call {@link"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,42,*       #beginArray} to consume the array's opening bracket. Then create a
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,43,"*       while loop that accumulates values, terminating when {@link #hasNext}"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,44,"*       is false. Finally, read the array's closing bracket by calling {@link"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,45,*       #endArray}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,46,"*   <li>Within <strong>object handling</strong> methods, first call {@link"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,47,*       #beginObject} to consume the object's opening brace. Then create a
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,48,*       while loop that assigns values to local variables based on their name.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,49,"*       This loop should terminate when {@link #hasNext} is false. Finally,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,50,*       read the object's closing brace by calling {@link #endObject}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,51,* </ul>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,52,"* <p>When a nested object or array is encountered, delegate to the"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,53,* corresponding handler method.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,55,"* <p>When an unknown name is encountered, strict parsers should fail with an"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,56,* exception. Lenient parsers should call {@link #skipValue()} to recursively
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,57,"* skip the value's nested tokens, which may otherwise conflict."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,59,"* <p>If a value may be null, you should first check using {@link #peek()}."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,60,* Null literals can be consumed using either {@link #nextNull()} or {@link
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,61,* #skipValue()}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,63,* <h3>Example</h3>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,64,* Suppose we'd like to parse a stream of messages such as the following: <pre> {@code
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,67,"*     ""id"": 912345678901,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,68,"*     ""text"": ""How do I read a JSON stream in Java?"","
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,69,"*     ""geo"": null,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,70,"*     ""user"": {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,71,"*       ""name"": ""json_newb"","
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,72,"*       ""followers_count"": 41"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,76,"*     ""id"": 912345678902,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,77,"*     ""text"": ""@json_newb just use JsonReader!"","
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,78,"*     ""geo"": [50.454722, -104.606667],"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,79,"*     ""user"": {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,80,"*       ""name"": ""jesse"","
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,81,"*       ""followers_count"": 2"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,84,* ]}</pre>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,85,* This code implements the parser for the above structure: <pre>   {@code
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,87,*   public List<Message> readJsonStream(InputStream in) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,88,"*     JsonReader reader = new JsonReader(new InputStreamReader(in, ""UTF-8""));"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,89,*     return readMessagesArray(reader);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,92,*   public List<Message> readMessagesArray(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,93,*     List<Message> messages = new ArrayList<Message>();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,95,*     reader.beginArray();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,96,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,97,*       messages.add(readMessage(reader));
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,99,*     reader.endArray();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,100,*     return messages;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,103,*   public Message readMessage(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,104,*     long id = -1;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,105,*     String text = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,106,*     User user = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,107,*     List<Double> geo = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,109,*     reader.beginObject();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,110,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,111,*       String name = reader.nextName();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,112,"*       if (name.equals(""id"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,113,*         id = reader.nextLong();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,114,"*       } else if (name.equals(""text"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,115,*         text = reader.nextString();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,116,"*       } else if (name.equals(""geo"") && reader.peek() != JsonToken.NULL) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,117,*         geo = readDoublesArray(reader);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,118,"*       } else if (name.equals(""user"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,119,*         user = readUser(reader);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,120,*       } else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,121,*         reader.skipValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,124,*     reader.endObject();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,125,"*     return new Message(id, text, user, geo);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,128,*   public List<Double> readDoublesArray(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,129,*     List<Double> doubles = new ArrayList<Double>();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,131,*     reader.beginArray();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,132,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,133,*       doubles.add(reader.nextDouble());
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,135,*     reader.endArray();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,136,*     return doubles;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,139,*   public User readUser(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,140,*     String username = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,141,*     int followersCount = -1;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,143,*     reader.beginObject();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,144,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,145,*       String name = reader.nextName();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,146,"*       if (name.equals(""name"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,147,*         username = reader.nextString();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,148,"*       } else if (name.equals(""followers_count"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,149,*         followersCount = reader.nextInt();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,150,*       } else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,151,*         reader.skipValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,154,*     reader.endObject();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,155,"*     return new User(username, followersCount);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,156,*   }}</pre>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,158,* <h3>Number Handling</h3>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,159,* This reader permits numeric values to be read as strings and string values to
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,160,"* be read as numbers. For example, both elements of the JSON array {@code"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,161,"* [1, ""1""]} may be read using either {@link #nextInt} or {@link #nextString}."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,162,* This behavior is intended to prevent lossy numeric conversions: double is
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,163,* JavaScript's only numeric type and very large values like {@code
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,164,* 9007199254740993} cannot be represented exactly on that platform. To minimize
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,165,"* precision loss, extremely large values should be written and read as strings"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,166,* in JSON.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,168,"* <a name=""nonexecuteprefix""/><h3>Non-Execute Prefix</h3>"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,169,* Web servers that serve private data using JSON may be vulnerable to <a
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,170,"* href=""http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery"">Cross-site"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,171,"* request forgery</a> attacks. In such an attack, a malicious site gains access"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,172,* to a private JSON file by executing it with an HTML {@code <script>} tag.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,174,"* <p>Prefixing JSON files with <code>"")]}'\n""</code> makes them non-executable"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,175,"* by {@code <script>} tags, disarming the attack. Since the prefix is malformed"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,176,"* JSON, strict parsing fails when it is encountered. This class permits the"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,177,* non-execute prefix when {@link #setLenient(boolean) lenient parsing} is
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,178,* enabled.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,180,* <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,181,* of this class are not thread safe.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,183,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,185,public final class JsonReader implements Closeable {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,187,/** The only non-execute prefix this parser permits */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,188,"private static final char[] NON_EXECUTE_PREFIX = "")]}'\n"".toCharArray();"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,190,/** The input JSON. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,191,private final Reader in;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,193,/** True to accept non-spec compliant JSON */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,194,private boolean lenient = false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,197,"* Use a manual buffer to easily read and unread upcoming characters, and"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,198,* also so we can create strings without an intermediate StringBuilder.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,200,private final char[] buffer = new char[1024];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,201,private int pos = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,202,private int limit = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,204,private final List<JsonScope> stack = new ArrayList<JsonScope>();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,206,push(JsonScope.EMPTY_DOCUMENT);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,210,"* True if we've already read the next token. If we have, the string value"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,211,* for that token will be assigned to {@code value} if such a string value
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,212,* exists. And the token type will be assigned to {@code token} if the token
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,213,"* type is known. The token type may be null for literals, since we derive"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,214,* that lazily.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,216,private boolean hasToken;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,219,* The type of the next token to be returned by {@link #peek} and {@link
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,220,"* #advance}, or {@code null} if it is unknown and must first be derived"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,221,* from {@code value}. This value is undefined if {@code hasToken} is false.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,223,private JsonToken token;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,225,/** The text of the next name. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,226,private String name;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,228,/** The text of the next literal value. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,229,private String value;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,231,/** True if we're currently handling a skipValue() call. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,232,private boolean skipping = false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,235,* Creates a new instance that reads a JSON-encoded stream from {@code in}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,237,public JsonReader(Reader in) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,238,if (in == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,239,"throw new NullPointerException(""in == null"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,241,this.in = in;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,245,"* Configure this parser to be  be liberal in what it accepts. By default,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,246,* this parser is strict and only accepts JSON as specified by <a
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,247,"* href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. Setting the"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,248,* parser to lenient causes it to ignore the following syntax errors:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,250,* <ul>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,251,"*   <li>Streams that start with the <a href=""#nonexecuteprefix"">non-execute"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,252,"*       prefix</a>, <code>"")]}'\n""</code>."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,253,"*   <li>Streams that include multiple top-level values. With strict parsing,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,254,*       each stream must contain exactly one top-level value.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,255,"*   <li>Top-level values of any type. With strict parsing, the top-level"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,256,*       value must be an object or an array.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,257,*   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,258,*       Double#isInfinite() infinities}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,259,*   <li>End of line comments starting with {@code //} or {@code #} and
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,260,*       ending with a newline character.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,261,*   <li>C-style comments starting with {@code /*} and ending with
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,262,*       {@code *}{@code /}. Such comments may not be nested.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,263,*   <li>Names that are unquoted or {@code 'single quoted'}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,264,*   <li>Strings that are unquoted or {@code 'single quoted'}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,265,"*   <li>Array elements separated by {@code ;} instead of {@code ,}."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,266,*   <li>Unnecessary array separators. These are interpreted as if null
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,267,*       was the omitted value.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,268,*   <li>Names and values separated by {@code =} or {@code =>} instead of
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,269,*       {@code :}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,270,"*   <li>Name/value pairs separated by {@code ;} instead of {@code ,}."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,271,* </ul>
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,273,public void setLenient(boolean lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,274,this.lenient = lenient;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,278,* Returns true if this parser is liberal in what it accepts.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,280,public boolean isLenient() {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,281,return lenient;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,285,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,286,* beginning of a new array.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,288,public void beginArray() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,289,expect(JsonToken.BEGIN_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,293,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,294,* end of the current array.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,296,public void endArray() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,297,expect(JsonToken.END_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,301,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,302,* beginning of a new object.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,304,public void beginObject() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,305,expect(JsonToken.BEGIN_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,309,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,310,* end of the current array.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,312,public void endObject() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,313,expect(JsonToken.END_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,317,* Consumes {@code expected}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,319,private void expect(JsonToken expected) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,320,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,321,if (token != expected) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,322,"throw new IllegalStateException(""Expected "" + expected + "" but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,324,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,328,* Returns true if the current array or object has another element.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,330,public boolean hasNext() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,331,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,332,return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,336,* Returns the type of the next token without consuming it.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,338,public JsonToken peek() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,339,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,341,if (token == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,342,decodeLiteral();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,345,return token;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,349,* Ensures that a token is ready. After this call either {@code token} or
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,350,* {@code value} will be non-null. To ensure {@code token} has a definitive
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,351,"* value, use {@link #peek()}"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,353,private JsonToken quickPeek() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,354,if (hasToken) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,355,return token;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,358,switch (peekStack()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,359,case EMPTY_DOCUMENT:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,360,if (lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,361,consumeNonExecutePrefix();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,363,replaceTop(JsonScope.NONEMPTY_DOCUMENT);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,364,JsonToken firstToken = nextValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,365,if (!lenient && firstToken != JsonToken.BEGIN_ARRAY && firstToken != JsonToken.BEGIN_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,366,"syntaxError(""Expected JSON document to start with '[' or '{'"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,368,return firstToken;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,369,case EMPTY_ARRAY:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,370,return nextInArray(true);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,371,case NONEMPTY_ARRAY:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,372,return nextInArray(false);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,373,case EMPTY_OBJECT:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,374,return nextInObject(true);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,375,case DANGLING_NAME:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,376,return objectValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,377,case NONEMPTY_OBJECT:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,378,return nextInObject(false);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,379,case NONEMPTY_DOCUMENT:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,380,try {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,381,JsonToken token = nextValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,382,if (lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,383,return token;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,384,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,385,"throw syntaxError(""Expected EOF"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,387,} catch (EOFException e) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,388,hasToken = true; // TODO: avoid throwing here?
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,389,return token = JsonToken.END_DOCUMENT;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,391,case CLOSED:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,392,"throw new IllegalStateException(""JsonReader is closed"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,393,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,394,throw new AssertionError();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,399,* Consumes the non-execute prefix if it exists.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,401,private void consumeNonExecutePrefix() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,402,// fast forward through the leading whitespace
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,403,nextNonWhitespace();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,404,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,406,if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,407,return;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,410,for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,411,if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,412,return; // not a security token!
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,416,// we consumed a security token!
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,417,pos += NON_EXECUTE_PREFIX.length;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,421,* Advances the cursor in the JSON stream to the next token.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,423,private JsonToken advance() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,424,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,426,JsonToken result = token;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,427,hasToken = false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,428,token = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,429,value = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,430,name = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,431,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,435,"* Returns the next token, a {@link JsonToken#NAME property name}, and"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,436,* consumes it.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,438,* @throws IOException if the next token in the stream is not a property
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,439,*     name.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,441,public String nextName() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,442,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,443,if (token != JsonToken.NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,444,"throw new IllegalStateException(""Expected a name but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,446,String result = name;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,447,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,448,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,452,"* Returns the {@link JsonToken#STRING string} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,453,"* consuming it. If the next token is a number, this method will return its"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,454,* string form.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,456,* @throws IllegalStateException if the next token is not a string or if
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,457,*     this reader is closed.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,459,public String nextString() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,460,peek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,461,if (value == null || (token != JsonToken.STRING && token != JsonToken.NUMBER)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,462,"throw new IllegalStateException(""Expected a string but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,465,String result = value;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,466,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,467,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,471,"* Returns the {@link JsonToken#BOOLEAN boolean} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,472,* consuming it.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,474,* @throws IllegalStateException if the next token is not a boolean or if
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,475,*     this reader is closed.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,477,public boolean nextBoolean() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,478,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,479,if (value == null || token == JsonToken.STRING) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,480,"throw new IllegalStateException(""Expected a boolean but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,483,boolean result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,484,"if (value.equalsIgnoreCase(""true"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,485,result = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,486,"} else if (value.equalsIgnoreCase(""false"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,487,result = false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,488,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,489,"throw new IllegalStateException(""Not a boolean: "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,492,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,493,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,497,* Consumes the next token from the JSON stream and asserts that it is a
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,498,* literal null.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,500,* @throws IllegalStateException if the next token is not null or if this
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,501,*     reader is closed.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,503,public void nextNull() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,504,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,505,if (value == null || token == JsonToken.STRING) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,506,"throw new IllegalStateException(""Expected null but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,509,"if (!value.equalsIgnoreCase(""null"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,510,"throw new IllegalStateException(""Not a null: "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,513,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,517,"* Returns the {@link JsonToken#NUMBER double} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,518,"* consuming it. If the next token is a string, this method will attempt to"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,519,* parse it as a double.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,521,* @throws IllegalStateException if the next token is not a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,522,* @throws NumberFormatException if the next literal value cannot be parsed
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,523,"*     as a double, or is non-finite."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,525,public double nextDouble() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,526,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,527,if (value == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,528,"throw new IllegalStateException(""Expected a double but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,531,double result = Double.parseDouble(value);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,533,"if ((result >= 1.0d && value.startsWith(""0""))) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,534,"throw new NumberFormatException(""JSON forbids octal prefixes: "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,537,if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,538,"throw new NumberFormatException(""JSON forbids NaN and infinities: "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,541,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,542,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,546,"* Returns the {@link JsonToken#NUMBER long} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,547,"* consuming it. If the next token is a string, this method will attempt to"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,548,* parse it as a long. If the next token's numeric value cannot be exactly
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,549,"* represented by a Java {@code long}, this method throws."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,551,* @throws IllegalStateException if the next token is not a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,552,* @throws NumberFormatException if the next literal value cannot be parsed
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,553,"*     as a number, or exactly represented as a long."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,555,public long nextLong() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,556,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,557,if (value == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,558,"throw new IllegalStateException(""Expected a long but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,561,long result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,562,try {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,563,result = Long.parseLong(value);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,564,} catch (NumberFormatException ignored) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,565,double asDouble = Double.parseDouble(value); // don't catch this NumberFormatException
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,566,result = (long) asDouble;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,567,if ((double) result != asDouble) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,568,throw new NumberFormatException(value);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,572,"if (result >= 1L && value.startsWith(""0"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,573,"throw new NumberFormatException(""JSON forbids octal prefixes: "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,576,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,577,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,581,"* Returns the {@link JsonToken#NUMBER int} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,582,"* consuming it. If the next token is a string, this method will attempt to"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,583,* parse it as an int. If the next token's numeric value cannot be exactly
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,584,"* represented by a Java {@code int}, this method throws."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,586,* @throws IllegalStateException if the next token is not a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,587,* @throws NumberFormatException if the next literal value cannot be parsed
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,588,"*     as a number, or exactly represented as an int."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,590,public int nextInt() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,591,quickPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,592,if (value == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,593,"throw new IllegalStateException(""Expected an int but was "" + peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,596,int result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,597,try {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,598,result = Integer.parseInt(value);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,599,} catch (NumberFormatException ignored) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,600,double asDouble = Double.parseDouble(value); // don't catch this NumberFormatException
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,601,result = (int) asDouble;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,602,if ((double) result != asDouble) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,603,throw new NumberFormatException(value);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,607,"if (result >= 1L && value.startsWith(""0"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,608,"throw new NumberFormatException(""JSON forbids octal prefixes: "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,611,advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,612,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,616,* Closes this JSON reader and the underlying {@link Reader}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,618,public void close() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,619,hasToken = false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,620,value = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,621,token = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,622,stack.clear();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,623,stack.add(JsonScope.CLOSED);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,624,in.close();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,628,"* Skips the next value recursively. If it is an object or array, all nested"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,629,* elements are skipped. This method is intended for use when the JSON token
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,630,* stream contains unrecognized or unhandled values.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,632,public void skipValue() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,633,skipping = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,634,try {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,635,int count = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,636,do {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,637,JsonToken token = advance();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,638,if (token == JsonToken.BEGIN_ARRAY || token == JsonToken.BEGIN_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,639,count++;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,640,} else if (token == JsonToken.END_ARRAY || token == JsonToken.END_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,641,count--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,643,} while (count != 0);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,644,} finally {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,645,skipping = false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,649,private JsonScope peekStack() {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,650,return stack.get(stack.size() - 1);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,653,private JsonScope pop() {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,654,return stack.remove(stack.size() - 1);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,657,private void push(JsonScope newTop) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,658,stack.add(newTop);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,662,* Replace the value on the top of the stack with the given value.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,664,private void replaceTop(JsonScope newTop) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,665,"stack.set(stack.size() - 1, newTop);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,668,private JsonToken nextInArray(boolean firstElement) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,669,if (firstElement) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,670,replaceTop(JsonScope.NONEMPTY_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,671,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,672,/* Look for a comma before each element after the first element. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,673,switch (nextNonWhitespace()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,674,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,675,pop();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,676,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,677,return token = JsonToken.END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,678,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,679,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,680,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,681,break;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,682,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,683,"throw syntaxError(""Unterminated array"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,687,switch (nextNonWhitespace()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,688,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,689,if (firstElement) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,690,pop();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,691,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,692,return token = JsonToken.END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,694,"// fall-through to handle "",]"""
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,695,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,696,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,697,"/* In lenient mode, a 0-length literal means 'null' */"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,698,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,699,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,700,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,701,"value = ""null"";"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,702,return token = JsonToken.NULL;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,703,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,704,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,705,return nextValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,709,private JsonToken nextInObject(boolean firstElement) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,711,* Read delimiters. Either a comma/semicolon separating this and the
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,712,"* previous name-value pair, or a close brace to denote the end of the"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,713,* object.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,715,if (firstElement) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,716,/* Peek to see if this is the empty object. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,717,switch (nextNonWhitespace()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,718,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,719,pop();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,720,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,721,return token = JsonToken.END_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,722,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,723,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,725,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,726,switch (nextNonWhitespace()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,727,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,728,pop();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,729,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,730,return token = JsonToken.END_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,731,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,732,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,733,break;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,734,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,735,"throw syntaxError(""Unterminated object"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,739,/* Read the name. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,740,int quote = nextNonWhitespace();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,741,switch (quote) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,742,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,743,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,744,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,745,name = nextString((char) quote);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,746,break;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,747,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,748,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,749,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,750,name = nextLiteral();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,751,if (name.isEmpty()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,752,"throw syntaxError(""Expected name"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,756,replaceTop(JsonScope.DANGLING_NAME);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,757,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,758,return token = JsonToken.NAME;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,761,private JsonToken objectValue() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,763,* Read the name/value separator. Usually a colon ':'. In lenient mode
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,764,"* we also accept an equals sign '=', or an arrow ""=>""."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,766,switch (nextNonWhitespace()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,767,case ':':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,768,break;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,769,case '=':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,770,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,771,if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,772,pos++;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,774,break;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,775,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,776,"throw syntaxError(""Expected ':'"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,779,replaceTop(JsonScope.NONEMPTY_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,780,return nextValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,783,private JsonToken nextValue() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,784,int c = nextNonWhitespace();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,785,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,786,case '{':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,787,push(JsonScope.EMPTY_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,788,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,789,return token = JsonToken.BEGIN_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,791,case '[':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,792,push(JsonScope.EMPTY_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,793,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,794,return token = JsonToken.BEGIN_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,796,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,797,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,798,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,799,value = nextString((char) c);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,800,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,801,return token = JsonToken.STRING;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,803,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,804,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,805,return readLiteral();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,810,* Returns true once {@code limit - pos >= minimum}. If the data is
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,811,"* exhausted before that many characters are available, this returns"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,812,* false.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,814,private boolean fillBuffer(int minimum) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,815,if (limit != pos) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,816,limit -= pos;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,817,"System.arraycopy(buffer, pos, buffer, 0, limit);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,818,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,819,limit = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,822,pos = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,823,int total;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,824,"while ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,825,limit += total;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,826,if (limit >= minimum) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,827,return true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,830,return false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,833,private int nextNonWhitespace() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,834,while (pos < limit || fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,835,int c = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,836,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,837,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,838,case ' ':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,839,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,840,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,841,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,843,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,844,if (pos == limit && !fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,845,return c;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,848,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,849,char peek = buffer[pos];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,850,switch (peek) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,851,case '*':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,852,// skip a /* c-style comment */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,853,pos++;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,854,"if (!skipTo(""*/"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,855,"throw syntaxError(""Unterminated comment"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,857,pos += 2;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,858,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,860,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,861,// skip a // end-of-line comment
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,862,pos++;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,863,skipToEndOfLine();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,864,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,866,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,867,return c;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,870,case '#':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,872,* Skip a # hash end-of-line comment. The JSON RFC doesn't
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,873,"* specify this behaviour, but it's required to parse"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,874,* existing documents. See http://b/2571423.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,876,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,877,skipToEndOfLine();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,878,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,880,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,881,return c;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,884,"throw new EOFException(""End of input"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,887,private void checkLenient() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,888,if (!lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,889,"throw syntaxError(""Use JsonReader.setLenient(true) to accept malformed JSON"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,894,* Advances the position until after the next newline character. If the line
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,895,"* is terminated by ""\r\n"", the '\n' must be consumed as whitespace by the"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,896,* caller.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,898,private void skipToEndOfLine() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,899,while (pos < limit || fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,900,char c = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,901,if (c == '\r' || c == '\n') {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,902,break;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,907,private boolean skipTo(String toFind) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,908,outer:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,909,for (; pos + toFind.length() < limit || fillBuffer(toFind.length()); pos++) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,910,for (int c = 0; c < toFind.length(); c++) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,911,if (buffer[pos + c] != toFind.charAt(c)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,912,continue outer;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,915,return true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,917,return false;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,921,"* Returns the string up to but not including {@code quote}, unescaping any"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,922,* character escape sequences encountered along the way. The opening quote
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,923,"* should have already been read. This consumes the closing quote, but does"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,924,* not include it in the returned string.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,926,"* @param quote either ' or ""."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,927,* @throws NumberFormatException if any unicode escape sequences are
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,928,*     malformed.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,930,private String nextString(char quote) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,931,StringBuilder builder = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,932,do {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,933,/* the index of the first character not yet appended to the builder. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,934,int start = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,935,while (pos < limit) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,936,int c = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,938,if (c == quote) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,939,if (skipping) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,940,"return ""skipped!"";"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,941,} else if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,942,"return new String(buffer, start, pos - start - 1);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,943,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,944,"builder.append(buffer, start, pos - start - 1);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,945,return builder.toString();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,948,} else if (c == '\\') {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,949,if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,950,builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,952,"builder.append(buffer, start, pos - start - 1);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,953,builder.append(readEscapeCharacter());
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,954,start = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,958,if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,959,builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,961,"builder.append(buffer, start, pos - start);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,962,} while (fillBuffer(1));
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,964,"throw syntaxError(""Unterminated string"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,968,* Returns the string up to but not including any delimiter characters. This
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,969,* does not consume the delimiter character.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,971,private String nextLiteral() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,972,StringBuilder builder = null;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,973,do {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,974,/* the index of the first character not yet appended to the builder. */
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,975,int start = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,976,while (pos < limit) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,977,int c = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,978,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,979,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,980,case '\\':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,981,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,982,case '#':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,983,case '=':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,984,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,986,case '{':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,987,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,988,case '[':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,989,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,990,case ':':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,991,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,992,case ' ':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,993,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,994,case '\f':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,995,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,996,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,997,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,998,if (skipping) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,999,"return ""skipped!"";"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1000,} else if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1001,"return new String(buffer, start, pos - start);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1002,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1003,"builder.append(buffer, start, pos - start);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1004,return builder.toString();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1009,if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1010,builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1012,"builder.append(buffer, start, pos - start);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1013,} while (fillBuffer(1));
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1015,return builder.toString();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1018,@Override public String toString() {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1019,"return getClass().getSimpleName() + "" near "" + getSnippet();"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1023,* Unescapes the character identified by the character or characters that
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1024,* immediately follow a backslash. The backslash '\' should have already
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1025,"* been read. This supports both unicode escapes ""u000A"" and two-character"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1026,"* escapes ""\n""."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1028,* @throws NumberFormatException if any unicode escape sequences are
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1029,*     malformed.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1031,private char readEscapeCharacter() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1032,if (pos == limit && !fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1033,"throw syntaxError(""Unterminated escape sequence"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1036,char escaped = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1037,switch (escaped) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1038,case 'u':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1039,if (pos + 4 > limit && !fillBuffer(4)) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1040,"throw syntaxError(""Unterminated escape sequence"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1042,"String hex = new String(buffer, pos, 4);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1043,pos += 4;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1044,"return (char) Integer.parseInt(hex, 16);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1046,case 't':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1047,return '\t';
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1049,case 'b':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1050,return '\b';
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1052,case 'n':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1053,return '\n';
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1055,case 'r':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1056,return '\r';
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1058,case 'f':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1059,return '\f';
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1061,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1062,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1063,case '\\':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1064,default:
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1065,return escaped;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1070,"* Reads a null, boolean, numeric or unquoted string literal value."
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1072,private JsonToken readLiteral() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1073,String literal = nextLiteral();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1074,if (literal.isEmpty()) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1075,"throw syntaxError(""Expected literal value"");"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1077,value = literal;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1078,hasToken = true;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1079,return token = null; // use decodeLiteral() to get the token type
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1083,* Assigns {@code nextToken} based on the value of {@code nextValue}.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1085,private void decodeLiteral() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1086,"if (value.equalsIgnoreCase(""null"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1087,token = JsonToken.NULL;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1088,"} else if (value.equalsIgnoreCase(""true"") || value.equalsIgnoreCase(""false"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1089,token = JsonToken.BOOLEAN;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1090,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1091,try {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1092,Double.parseDouble(value); // this work could potentially be cached
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1093,token = JsonToken.NUMBER;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1094,} catch (NumberFormatException ignored) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1095,// this must be an unquoted string
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1096,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1097,token = JsonToken.STRING;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1103,* Throws a new IO exception with the given message and a context snippet
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1104,* with this reader's content.
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1106,private IOException syntaxError(String message) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1107,"throw new JsonSyntaxException(message + "" near "" + getSnippet());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1110,private CharSequence getSnippet() {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1111,StringBuilder snippet = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1112,"int beforePos = Math.min(pos, 20);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1113,"snippet.append(buffer, pos - beforePos, beforePos);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1114,"int afterPos = Math.min(limit - pos, 20);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1115,"snippet.append(buffer, pos, afterPos);"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1116,return snippet;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1119,"@SuppressWarnings(""serial"")"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1120,private static class JsonSyntaxException extends IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1121,private JsonSyntaxException(String s) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1122,super(s);
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,17,package com.google.gson.stream;
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,20,* Lexical scoping elements within a JSON reader or writer.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,22,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,24,enum JsonScope {
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,27,* An array with no elements requires no separators or newlines before
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,28,* it is closed.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,30,"EMPTY_ARRAY,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,33,* A array with at least one value requires a comma and newline before
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,34,* the next element.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,36,"NONEMPTY_ARRAY,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,39,* An object with no name/value pairs requires no separators or newlines
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,40,* before it is closed.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,42,"EMPTY_OBJECT,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,45,* An object whose most recent element is a key. The next element must
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,46,* be a value.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,48,"DANGLING_NAME,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,51,* An object with at least one name/value pair requires a comma and
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,52,* newline before the next element.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,54,"NONEMPTY_OBJECT,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,57,* No object or array has been started.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,59,"EMPTY_DOCUMENT,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,62,* A document with at an array or object.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,64,"NONEMPTY_DOCUMENT,"
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,67,* A document that's been closed and cannot be accessed.
True,gson/src/main/java/com/google/gson/stream/JsonScope.java,gson/src/main/java/com/google/gson/stream/JsonScope.java,69,"CLOSED,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,17,package com.google.gson.stream;
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,20,"* A structure, name or value type in a JSON-encoded string."
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,22,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,24,public enum JsonToken {
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,27,* The opening of a JSON array. Written using {@link JsonWriter#beginObject}
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,28,* and read using {@link JsonReader#beginObject}.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,30,"BEGIN_ARRAY,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,33,* The closing of a JSON array. Written using {@link JsonWriter#endArray}
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,34,* and read using {@link JsonReader#endArray}.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,36,"END_ARRAY,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,39,* The opening of a JSON object. Written using {@link JsonWriter#beginObject}
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,40,* and read using {@link JsonReader#beginObject}.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,42,"BEGIN_OBJECT,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,45,* The closing of a JSON object. Written using {@link JsonWriter#endObject}
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,46,* and read using {@link JsonReader#endObject}.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,48,"END_OBJECT,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,51,"* A JSON property name. Within objects, tokens alternate between names and"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,52,* their values. Written using {@link JsonWriter#name} and read using {@link
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,53,* JsonReader#nextName}
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,55,"NAME,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,58,* A JSON string.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,60,"STRING,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,63,"* A JSON number represented in this API by a Java {@code double}, {@code"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,64,"* long}, or {@code int}."
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,66,"NUMBER,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,69,* A JSON {@code true} or {@code false}.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,71,"BOOLEAN,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,74,* A JSON {@code null}.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,76,"NULL,"
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,79,* The end of the JSON stream. This sentinel value is returned by {@link
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,80,* JsonReader#peek()} to signal that the JSON-encoded value has no more
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,81,* tokens.
True,gson/src/main/java/com/google/gson/stream/JsonToken.java,gson/src/main/java/com/google/gson/stream/JsonToken.java,83,END_DOCUMENT
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,17,package com.google.gson.stream;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,19,import java.io.Closeable;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,20,import java.io.IOException;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,21,import java.io.Writer;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,22,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,23,import java.util.List;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,26,"* Writes a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,27,"* encoded value to a stream, one token at a time. The stream includes both"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,28,"* literal values (strings, numbers, booleans and nulls) as well as the begin"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,29,* and end delimiters of objects and arrays.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,31,* <h3>Encoding JSON</h3>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,32,"* To encode your data as JSON, create a new {@code JsonWriter}. Each JSON"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,33,* document must contain one top-level array or object. Call methods on the
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,34,"* writer as you walk the structure's contents, nesting arrays and objects as"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,35,* necessary:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,36,* <ul>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,37,"*   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}."
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,38,*       Write each of the array's elements with the appropriate {@link #value}
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,39,*       methods or by nesting other arrays and objects. Finally close the array
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,40,*       using {@link #endArray()}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,41,"*   <li>To write <strong>objects</strong>, first call {@link #beginObject()}."
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,42,*       Write each of the object's properties by alternating calls to
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,43,*       {@link #name} with the property's value. Write property values with the
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,44,*       appropriate {@link #value} method or by nesting other objects or arrays.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,45,*       Finally close the object using {@link #endObject()}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,46,* </ul>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,48,* <h3>Example</h3>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,49,* Suppose we'd like to encode a stream of messages such as the following: <pre> {@code
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,52,"*     ""id"": 912345678901,"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,53,"*     ""text"": ""How do I stream JSON in Java?"","
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,54,"*     ""geo"": null,"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,55,"*     ""user"": {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,56,"*       ""name"": ""json_newb"","
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,57,"*       ""followers_count"": 41"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,61,"*     ""id"": 912345678902,"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,62,"*     ""text"": ""@json_newb just use JsonWriter!"","
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,63,"*     ""geo"": [50.454722, -104.606667],"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,64,"*     ""user"": {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,65,"*       ""name"": ""jesse"","
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,66,"*       ""followers_count"": 2"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,69,* ]}</pre>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,70,* This code encodes the above structure: <pre>   {@code
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,71,"*   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,72,"*     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, ""UTF-8""));"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,73,*     writer.setIndentSpaces(4);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,74,"*     writeMessagesArray(writer, messages);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,75,*     writer.close();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,78,"*   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,79,*     writer.beginArray();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,80,*     for (Message message : messages) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,81,"*       writeMessage(writer, message);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,83,*     writer.endArray();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,86,"*   public void writeMessage(JsonWriter writer, Message message) throws IOException {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,87,*     writer.beginObject();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,88,"*     writer.name(""id"").value(message.getId());"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,89,"*     writer.name(""text"").value(message.getText());"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,90,*     if (message.getGeo() != null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,91,"*       writer.name(""geo"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,92,"*       writeDoublesArray(writer, message.getGeo());"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,93,*     } else {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,94,"*       writer.name(""geo"").nullValue();"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,96,"*     writer.name(""user"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,97,"*     writeUser(writer, message.getUser());"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,98,*     writer.endObject();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,101,"*   public void writeUser(JsonWriter writer, User user) throws IOException {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,102,*     writer.beginObject();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,103,"*     writer.name(""name"").value(user.getName());"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,104,"*     writer.name(""followers_count"").value(user.getFollowersCount());"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,105,*     writer.endObject();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,108,"*   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,109,*     writer.beginArray();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,110,*     for (Double value : doubles) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,111,*       writer.value(value);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,113,*     writer.endArray();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,114,*   }}</pre>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,116,* <p>Each {@code JsonWriter} may be used to write a single JSON stream.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,117,* Instances of this class are not thread safe. Calls that would result in a
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,118,* malformed JSON string will fail with an {@link IllegalStateException}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,120,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,122,public final class JsonWriter implements Closeable {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,124,"/** The output data, containing at most one top-level array or object. */"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,125,private final Writer out;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,127,private final List<JsonScope> stack = new ArrayList<JsonScope>();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,129,stack.add(JsonScope.EMPTY_DOCUMENT);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,133,* A string containing a full set of spaces for a single level of
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,134,"* indentation, or null for no pretty printing."
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,136,private String indent;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,139,"* The name/value separator; either "":"" or "": ""."
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,141,"private String separator = "":"";"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,144,* Creates a new instance that writes a JSON-encoded stream to {@code out}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,145,"* For best performance, ensure {@link Writer} is buffered; wrapping in"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,146,* {@link java.io.BufferedWriter BufferedWriter} if necessary.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,148,public JsonWriter(Writer out) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,149,if (out == null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,150,"throw new NullPointerException(""out == null"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,152,this.out = out;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,156,* Sets the indentation string to be repeated for each level of indentation
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,157,* in the encoded document. If {@code indent.isEmpty()} the encoded document
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,158,* will be compact. Otherwise the encoded document will be more
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,159,* human-readable.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,161,* @param indent a string containing only whitespace.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,163,public void setIndent(String indent) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,164,if (indent.isEmpty()) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,165,this.indent = null;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,166,"this.separator = "":"";"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,167,} else {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,168,this.indent = indent;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,169,"this.separator = "": "";"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,174,* Begins encoding a new array. Each call to this method must be paired with
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,175,* a call to {@link #endArray}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,177,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,179,public JsonWriter beginArray() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,180,"return open(JsonScope.EMPTY_ARRAY, ""["");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,184,* Ends encoding the current array.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,186,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,188,public JsonWriter endArray() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,189,"return close(JsonScope.EMPTY_ARRAY, JsonScope.NONEMPTY_ARRAY, ""]"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,193,* Begins encoding a new object. Each call to this method must be paired
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,194,* with a call to {@link #endObject}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,196,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,198,public JsonWriter beginObject() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,199,"return open(JsonScope.EMPTY_OBJECT, ""{"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,203,* Ends encoding the current object.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,205,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,207,public JsonWriter endObject() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,208,"return close(JsonScope.EMPTY_OBJECT, JsonScope.NONEMPTY_OBJECT, ""}"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,212,* Enters a new scope by appending any necessary whitespace and the given
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,213,* bracket.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,215,"private JsonWriter open(JsonScope empty, String openBracket) throws IOException {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,216,beforeValue(true);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,217,stack.add(empty);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,218,out.write(openBracket);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,219,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,223,* Closes the current scope by appending any necessary whitespace and the
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,224,* given bracket.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,226,"private JsonWriter close(JsonScope empty, JsonScope nonempty, String closeBracket)"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,227,throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,228,JsonScope context = peek();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,229,if (context != nonempty && context != empty) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,230,"throw new IllegalStateException(""Nesting problem: "" + stack);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,233,stack.remove(stack.size() - 1);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,234,if (context == nonempty) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,235,newline();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,237,out.write(closeBracket);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,238,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,242,* Returns the value on the top of the stack.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,244,private JsonScope peek() {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,245,return stack.get(stack.size() - 1);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,249,* Replace the value on the top of the stack with the given value.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,251,private void replaceTop(JsonScope topOfStack) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,252,"stack.set(stack.size() - 1, topOfStack);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,256,* Encodes the property name.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,258,* @param name the name of the forthcoming value. May not be null.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,259,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,261,public JsonWriter name(String name) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,262,if (name == null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,263,"throw new NullPointerException(""name == null"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,265,beforeName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,266,string(name);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,267,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,271,* Encodes {@code value}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,273,"* @param value the literal string value, or null to encode a null literal."
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,274,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,276,public JsonWriter value(String value) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,277,if (value == null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,278,return nullValue();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,280,beforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,281,string(value);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,282,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,286,* Encodes {@code null}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,288,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,290,public JsonWriter nullValue() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,291,beforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,292,"out.write(""null"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,293,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,297,* Encodes {@code value}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,299,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,301,public JsonWriter value(boolean value) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,302,beforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,303,"out.write(value ? ""true"" : ""false"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,304,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,308,* Encodes {@code value}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,310,* @param value a finite value. May not be {@link Double#isNaN() NaNs} or
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,311,*     {@link Double#isInfinite() infinities}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,312,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,314,public JsonWriter value(double value) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,315,if (Double.isNaN(value) || Double.isInfinite(value)) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,316,"throw new IllegalArgumentException(""Numeric values must be finite, but was "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,318,beforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,319,out.append(Double.toString(value));
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,320,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,324,* Encodes {@code value}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,326,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,328,public JsonWriter value(long value) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,329,beforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,330,out.write(Long.toString(value));
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,331,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,335,* Encodes {@code value}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,337,* @param value a finite value. May not be {@link Double#isNaN() NaNs} or
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,338,*     {@link Double#isInfinite() infinities}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,339,* @return this writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,341,public JsonWriter value(Number value) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,342,if (value == null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,343,return nullValue();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,346,String string = value.toString();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,347,"if (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,348,"throw new IllegalArgumentException(""Numeric values must be finite, but was "" + value);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,350,beforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,351,out.append(string);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,352,return this;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,356,* Ensures all buffered data is written to the underlying {@link Writer}
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,357,* and flushes that writer.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,359,public void flush() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,360,out.flush();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,364,* Flushes and closes this writer and the underlying {@link Writer}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,366,* @throws IOException if the JSON document is incomplete.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,368,public void close() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,369,out.close();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,371,if (peek() != JsonScope.NONEMPTY_DOCUMENT) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,372,"throw new IOException(""Incomplete document"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,376,private void string(String value) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,377,"out.write(""\"""");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,378,"for (int i = 0, length = value.length(); i < length; i++) {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,379,char c = value.charAt(i);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,382,"* From RFC 4627, ""All Unicode characters may be placed within the"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,383,* quotation marks except for the characters that must be escaped:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,384,"* quotation mark, reverse solidus, and the control characters"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,385,"* (U+0000 through U+001F)."""
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,387,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,388,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,389,case '\\':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,390,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,391,out.write('\\');
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,392,out.write(c);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,393,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,395,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,396,"out.write(""\\t"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,397,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,399,case '\b':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,400,"out.write(""\\b"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,401,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,403,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,404,"out.write(""\\n"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,405,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,407,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,408,"out.write(""\\r"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,409,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,411,case '\f':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,412,"out.write(""\\f"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,413,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,415,default:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,416,if (c <= 0x1F) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,417,"out.write(String.format(""\\u%04x"", (int) c));"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,418,} else {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,419,out.write(c);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,421,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,425,"out.write(""\"""");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,428,private void newline() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,429,if (indent == null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,430,return;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,433,"out.write(""\n"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,434,for (int i = 1; i < stack.size(); i++) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,435,out.write(indent);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,440,* Inserts any necessary separators and whitespace before a name. Also
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,441,* adjusts the stack to expect the name's value.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,443,private void beforeName() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,444,JsonScope context = peek();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,445,if (context == JsonScope.NONEMPTY_OBJECT) { // first in object
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,446,"out.write(',');"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,447,} else if (context != JsonScope.EMPTY_OBJECT) { // not in an object!
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,448,"throw new IllegalStateException(""Nesting problem: "" + stack);"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,450,newline();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,451,replaceTop(JsonScope.DANGLING_NAME);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,455,"* Inserts any necessary separators and whitespace before a literal value,"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,456,"* inline array, or inline object. Also adjusts the stack to expect either a"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,457,* closing bracket or another element.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,459,"* @param root true if the value is a new array or object, the two values"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,460,*     permitted as top-level elements.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,462,private void beforeValue(boolean root) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,463,switch (peek()) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,464,case EMPTY_DOCUMENT: // first in document
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,465,if (!root) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,466,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,467,"""JSON must start with an array or an object."");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,469,replaceTop(JsonScope.NONEMPTY_DOCUMENT);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,470,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,472,case EMPTY_ARRAY: // first in array
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,473,replaceTop(JsonScope.NONEMPTY_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,474,newline();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,475,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,477,case NONEMPTY_ARRAY: // another in array
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,478,"out.append(',');"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,479,newline();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,480,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,482,case DANGLING_NAME: // value for name
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,483,out.append(separator);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,484,replaceTop(JsonScope.NONEMPTY_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,485,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,487,case NONEMPTY_DOCUMENT:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,488,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,489,"""JSON must have only one top-level value."");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,491,default:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,492,"throw new IllegalStateException(""Nesting problem: "" + stack);"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,17,package com.google.gson.stream;
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,21,import java.io.IOException;
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,22,import java.io.StringReader;
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,24,public final class JsonReaderTest extends TestCase {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,26,public void testReadArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,27,"JsonReader reader = new JsonReader(new StringReader(""[true, true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,28,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,29,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,30,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,31,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,32,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,35,public void testReadEmptyArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,36,"JsonReader reader = new JsonReader(new StringReader(""[]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,37,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,38,assertFalse(reader.hasNext());
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,39,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,40,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,43,public void testReadObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,44,JsonReader reader = new JsonReader(new StringReader(
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,45,"""{\""a\"": \""android\"", \""b\"": \""banana\""}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,46,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,47,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,48,"assertEquals(""android"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,49,"assertEquals(""b"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,50,"assertEquals(""banana"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,51,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,52,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,55,public void testReadEmptyObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,56,"JsonReader reader = new JsonReader(new StringReader(""{}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,57,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,58,assertFalse(reader.hasNext());
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,59,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,60,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,63,public void testSkipObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,64,JsonReader reader = new JsonReader(new StringReader(
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,65,"""{\""a\"": { \""c\"": [], \""d\"": [true, true, {}] }, \""b\"": \""banana\""}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,66,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,67,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,68,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,69,"assertEquals(""b"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,70,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,71,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,72,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,75,public void testHelloWorld() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,76,"String json = ""{\n"" +"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,77,"""   \""hello\"": true,\n"" +"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,78,"""   \""foo\"": [\""world\""]\n"" +"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,80,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,81,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,82,"assertEquals(""hello"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,83,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,84,"assertEquals(""foo"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,85,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,86,"assertEquals(""world"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,87,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,88,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,89,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,92,public void testNulls() {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,93,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,94,new JsonReader(null);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,95,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,96,} catch (NullPointerException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,100,public void testEmptyString() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,101,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,102,"new JsonReader(new StringReader("""")).beginArray();"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,103,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,105,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,106,"new JsonReader(new StringReader("""")).beginObject();"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,107,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,111,public void testNoTopLevelObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,112,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,113,"new JsonReader(new StringReader(""true"")).nextBoolean();"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,114,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,118,public void testCharacterUnescaping() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,119,"String json = ""[\""a\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,120,"+ ""\""a\\\""\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,124,"+ ""\""\\b\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,125,"+ ""\""\\f\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,126,"+ ""\""\\n\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,127,"+ ""\""\\r\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,128,"+ ""\""\\t\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,135,"+ ""\""\\u0000\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,136,"+ ""\""\\u0019\"","""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,137,"+ ""\""\\u20AC\"""""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,139,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,140,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,141,"assertEquals(""a"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,142,"assertEquals(""a\"""", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,143,"assertEquals(""\"""", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,144,"assertEquals("":"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,145,"assertEquals("","", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,146,"assertEquals(""\b"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,147,"assertEquals(""\f"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,148,"assertEquals(""\n"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,149,"assertEquals(""\r"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,150,"assertEquals(""\t"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,151,"assertEquals("" "", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,152,"assertEquals(""\\"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,153,"assertEquals(""{"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,154,"assertEquals(""}"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,155,"assertEquals(""["", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,156,"assertEquals(""]"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,157,"assertEquals(""\0"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,158,"assertEquals(""\u0019"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,159,"assertEquals(""\u20AC"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,160,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,161,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,164,public void testIntegersWithFractionalPartSpecified() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,165,"JsonReader reader = new JsonReader(new StringReader(""[1.0,1.0,1.0]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,166,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,167,"assertEquals(1.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,168,"assertEquals(1, reader.nextInt());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,169,"assertEquals(1L, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,172,public void testDoubles() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,173,"String json = ""[-0.0,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,174,"+ ""1.0,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,175,"+ ""1.7976931348623157E308,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,176,"+ ""4.9E-324,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,177,"+ ""0.0,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,178,"+ ""-0.5,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,179,"+ ""2.2250738585072014E-308,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,180,"+ ""3.141592653589793,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,181,"+ ""2.718281828459045]"";"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,182,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,183,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,184,"assertEquals(-0.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,185,"assertEquals(1.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,186,"assertEquals(1.7976931348623157E308, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,187,"assertEquals(4.9E-324, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,188,"assertEquals(0.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,189,"assertEquals(-0.5, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,190,"assertEquals(2.2250738585072014E-308, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,191,"assertEquals(3.141592653589793, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,192,"assertEquals(2.718281828459045, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,193,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,194,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,197,public void testStrictNonFiniteDoubles() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,198,"String json = ""[NaN]"";"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,199,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,200,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,201,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,202,reader.nextDouble();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,203,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,204,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,208,public void testLenientNonFiniteDoubles() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,209,"String json = ""[NaN, -Infinity, Infinity]"";"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,210,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,211,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,212,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,213,assertTrue(Double.isNaN(reader.nextDouble()));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,214,"assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,215,"assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,216,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,219,public void testLongs() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,220,"String json = ""[0,0,0,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,221,"+ ""1,1,1,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,222,"+ ""-1,-1,-1,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,223,"+ ""-9223372036854775808,"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,224,"+ ""9223372036854775807]"";"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,225,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,226,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,227,"assertEquals(0L, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,228,"assertEquals(0, reader.nextInt());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,229,"assertEquals(0.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,230,"assertEquals(1L, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,231,"assertEquals(1, reader.nextInt());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,232,"assertEquals(1.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,233,"assertEquals(-1L, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,234,"assertEquals(-1, reader.nextInt());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,235,"assertEquals(-1.0, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,236,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,237,reader.nextInt();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,238,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,239,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,241,"assertEquals(Long.MIN_VALUE, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,242,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,243,reader.nextInt();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,244,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,245,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,247,"assertEquals(Long.MAX_VALUE, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,248,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,249,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,253,"* This test fails because there's no double for 9223372036854775806, and"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,254,* our long parsing uses Double.parseDouble() for fractional values.
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,256,public void testHighPrecisionLong() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,257,"String json = ""[9223372036854775806.000]"";"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,258,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,259,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,260,"assertEquals(9223372036854775806L, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,261,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,264,public void testNumberWithOctalPrefix() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,265,"String json = ""[01]"";"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,266,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,267,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,268,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,269,reader.nextInt();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,270,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,271,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,273,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,274,reader.nextLong();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,275,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,276,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,278,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,279,reader.nextDouble();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,280,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,281,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,283,"assertEquals(""01"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,284,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,285,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,288,public void testBooleans() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,289,"JsonReader reader = new JsonReader(new StringReader(""[true,false]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,290,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,291,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,292,"assertEquals(false, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,293,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,294,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,297,public void testMixedCaseLiterals() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,298,"JsonReader reader = new JsonReader(new StringReader(""[True,TruE,False,FALSE,NULL,nulL]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,299,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,300,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,301,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,302,"assertEquals(false, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,303,"assertEquals(false, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,304,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,305,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,306,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,307,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,310,public void testMissingValue() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,311,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,312,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,313,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,314,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,315,reader.nextString();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,316,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,317,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,321,public void testPrematureEndOfInput() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,322,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":true,""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,323,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,324,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,325,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,326,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,327,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,328,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,329,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,333,public void testPrematurelyClosed() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,334,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,335,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":[]}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,336,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,337,reader.close();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,338,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,339,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,340,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,343,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,344,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":[]}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,345,reader.close();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,346,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,347,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,348,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,351,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,352,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,353,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,354,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,355,reader.peek();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,356,reader.close();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,357,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,358,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,359,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,363,public void testNextFailuresDoNotAdvance() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,364,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,365,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,366,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,367,reader.nextString();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,368,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,369,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,371,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,372,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,373,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,374,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,375,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,377,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,378,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,379,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,380,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,382,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,383,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,384,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,385,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,387,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,388,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,389,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,390,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,392,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,393,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,394,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,395,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,397,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,398,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,399,reader.nextString();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,400,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,401,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,403,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,404,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,405,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,406,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,408,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,409,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,410,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,411,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,413,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,414,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,415,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,416,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,418,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,419,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,420,reader.close();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,423,public void testStringNullIsNotNull() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,424,"JsonReader reader = new JsonReader(new StringReader(""[\""null\""]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,425,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,426,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,427,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,428,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,429,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,433,public void testNullLiteralIsNotAString() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,434,"JsonReader reader = new JsonReader(new StringReader(""[null]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,435,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,436,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,437,reader.nextString();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,438,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,439,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,443,public void testStrictNameValueSeparator() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,444,"JsonReader reader = new JsonReader(new StringReader(""{\""a\""=true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,445,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,446,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,447,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,448,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,449,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,450,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,453,"reader = new JsonReader(new StringReader(""{\""a\""=>true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,454,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,455,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,456,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,457,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,458,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,459,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,463,public void testLenientNameValueSeparator() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,464,"JsonReader reader = new JsonReader(new StringReader(""{\""a\""=true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,465,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,466,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,467,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,468,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,470,"reader = new JsonReader(new StringReader(""{\""a\""=>true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,471,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,472,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,473,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,474,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,477,public void testStrictComments() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,478,"JsonReader reader = new JsonReader(new StringReader(""[// comment \n true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,479,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,480,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,481,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,482,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,483,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,486,"reader = new JsonReader(new StringReader(""[# comment \n true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,487,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,488,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,489,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,490,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,491,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,494,"reader = new JsonReader(new StringReader(""[/* comment */ true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,495,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,496,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,497,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,498,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,499,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,503,public void testLenientComments() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,504,"JsonReader reader = new JsonReader(new StringReader(""[// comment \n true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,505,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,506,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,507,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,509,"reader = new JsonReader(new StringReader(""[# comment \n true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,510,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,511,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,512,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,514,"reader = new JsonReader(new StringReader(""[/* comment */ true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,515,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,516,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,517,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,520,public void testStrictUnquotedNames() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,521,"JsonReader reader = new JsonReader(new StringReader(""{a:true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,522,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,523,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,524,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,525,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,526,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,530,public void testLenientUnquotedNames() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,531,"JsonReader reader = new JsonReader(new StringReader(""{a:true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,532,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,533,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,534,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,537,public void testStrictSingleQuotedNames() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,538,"JsonReader reader = new JsonReader(new StringReader(""{'a':true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,539,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,540,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,541,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,542,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,543,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,547,public void testLenientSingleQuotedNames() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,548,"JsonReader reader = new JsonReader(new StringReader(""{'a':true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,549,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,550,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,551,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,554,public void testStrictUnquotedStrings() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,555,"JsonReader reader = new JsonReader(new StringReader(""[a]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,556,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,557,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,558,reader.nextString();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,559,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,560,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,564,public void testLenientUnquotedStrings() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,565,"JsonReader reader = new JsonReader(new StringReader(""[a]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,566,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,567,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,568,"assertEquals(""a"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,571,public void testStrictSingleQuotedStrings() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,572,"JsonReader reader = new JsonReader(new StringReader(""['a']""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,573,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,574,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,575,reader.nextString();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,576,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,577,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,581,public void testLenientSingleQuotedStrings() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,582,"JsonReader reader = new JsonReader(new StringReader(""['a']""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,583,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,584,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,585,"assertEquals(""a"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,588,public void testStrictSemicolonDelimitedArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,589,"JsonReader reader = new JsonReader(new StringReader(""[true;true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,590,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,591,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,592,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,593,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,594,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,595,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,599,public void testLenientSemicolonDelimitedArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,600,"JsonReader reader = new JsonReader(new StringReader(""[true;true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,601,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,602,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,603,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,604,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,607,public void testStrictSemicolonDelimitedNameValuePair() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,608,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":true;\""b\"":true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,609,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,610,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,611,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,612,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,613,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,614,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,615,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,619,public void testLenientSemicolonDelimitedNameValuePair() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,620,"JsonReader reader = new JsonReader(new StringReader(""{\""a\"":true;\""b\"":true}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,621,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,622,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,623,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,624,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,625,"assertEquals(""b"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,628,public void testStrictUnnecessaryArraySeparators() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,629,"JsonReader reader = new JsonReader(new StringReader(""[true,,true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,630,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,631,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,632,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,633,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,634,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,635,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,638,"reader = new JsonReader(new StringReader(""[,true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,639,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,640,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,641,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,642,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,643,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,646,"reader = new JsonReader(new StringReader(""[true,]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,647,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,648,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,649,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,650,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,651,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,652,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,655,"reader = new JsonReader(new StringReader(""[,]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,656,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,657,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,658,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,659,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,660,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,664,public void testLenientUnnecessaryArraySeparators() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,665,"JsonReader reader = new JsonReader(new StringReader(""[true,,true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,666,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,667,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,668,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,669,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,670,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,671,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,673,"reader = new JsonReader(new StringReader(""[,true]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,674,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,675,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,676,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,677,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,678,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,680,"reader = new JsonReader(new StringReader(""[true,]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,681,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,682,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,683,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,684,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,685,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,687,"reader = new JsonReader(new StringReader(""[,]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,688,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,689,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,690,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,691,reader.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,692,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,695,public void testStrictMultipleTopLevelValues() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,696,"JsonReader reader = new JsonReader(new StringReader(""[] []""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,697,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,698,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,699,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,700,reader.peek();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,701,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,702,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,706,public void testLenientMultipleTopLevelValues() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,707,"JsonReader reader = new JsonReader(new StringReader(""[] true {}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,708,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,709,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,710,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,711,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,712,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,713,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,714,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,717,public void testStrictTopLevelValueType() {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,718,"JsonReader reader = new JsonReader(new StringReader(""true""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,719,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,720,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,721,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,722,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,726,public void testLenientTopLevelValueType() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,727,"JsonReader reader = new JsonReader(new StringReader(""true""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,728,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,729,"assertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,732,public void testStrictNonExecutePrefix() {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,733,"JsonReader reader = new JsonReader(new StringReader("")]}'\n []""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,734,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,735,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,736,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,737,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,741,public void testLenientNonExecutePrefix() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,742,"JsonReader reader = new JsonReader(new StringReader("")]}'\n []""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,743,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,744,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,745,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,746,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,749,public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,750,"JsonReader reader = new JsonReader(new StringReader(""\r\n \t)]}'\n []""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,751,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,752,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,753,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,754,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,757,public void testLenientPartialNonExecutePrefix() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,758,"JsonReader reader = new JsonReader(new StringReader("")]}' []""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,759,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,760,"assertEquals("")"", reader.nextString()); // lenient is almost too lenient!"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,761,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,762,reader.peek();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,763,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,764,} catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,17,package com.google.gson.stream;
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,21,import java.io.IOException;
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,22,import java.io.StringWriter;
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,23,import java.math.BigDecimal;
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,24,import java.math.BigInteger;
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,26,public final class JsonWriterTest extends TestCase {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,28,public void testWrongTopLevelType() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,29,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,30,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,31,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,32,"jsonWriter.value(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,33,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,34,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,38,public void testTwoNames() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,39,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,40,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,41,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,42,"jsonWriter.name(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,43,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,44,"jsonWriter.name(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,45,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,46,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,50,public void testNameWithoutValue() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,51,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,52,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,53,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,54,"jsonWriter.name(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,55,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,56,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,57,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,58,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,62,public void testValueWithoutName() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,63,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,64,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,65,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,66,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,67,jsonWriter.value(true);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,68,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,69,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,73,public void testMultipleTopLevelValues() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,74,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,75,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,76,jsonWriter.beginArray().endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,77,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,78,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,79,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,80,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,84,public void testBadNestingObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,85,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,86,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,87,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,88,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,89,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,90,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,91,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,92,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,96,public void testBadNestingArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,97,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,98,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,99,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,100,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,101,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,102,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,103,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,104,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,108,public void testNullName() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,109,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,110,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,111,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,112,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,113,jsonWriter.name(null);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,114,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,115,} catch (NullPointerException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,119,public void testNullStringValue() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,120,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,121,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,122,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,123,"jsonWriter.name(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,124,jsonWriter.value((String) null);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,125,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,126,"assertEquals(""{\""a\"":null}"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,129,public void testNonFiniteDoubles() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,130,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,131,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,132,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,133,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,134,jsonWriter.value(Double.NaN);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,135,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,136,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,138,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,139,jsonWriter.value(Double.NEGATIVE_INFINITY);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,140,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,141,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,143,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,144,jsonWriter.value(Double.POSITIVE_INFINITY);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,145,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,146,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,150,public void testNonFiniteBoxedDoubles() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,151,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,152,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,153,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,154,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,155,jsonWriter.value(new Double(Double.NaN));
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,156,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,157,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,159,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,160,jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,161,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,162,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,164,try {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,165,jsonWriter.value(new Double(Double.POSITIVE_INFINITY));
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,166,fail();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,167,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,171,public void testDoubles() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,172,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,173,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,174,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,175,jsonWriter.value(-0.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,176,jsonWriter.value(1.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,177,jsonWriter.value(Double.MAX_VALUE);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,178,jsonWriter.value(Double.MIN_VALUE);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,179,jsonWriter.value(0.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,180,jsonWriter.value(-0.5);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,181,jsonWriter.value(Double.MIN_NORMAL);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,182,jsonWriter.value(Math.PI);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,183,jsonWriter.value(Math.E);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,184,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,185,jsonWriter.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,186,"assertEquals(""[-0.0,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,187,"+ ""1.0,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,188,"+ ""1.7976931348623157E308,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,189,"+ ""4.9E-324,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,190,"+ ""0.0,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,191,"+ ""-0.5,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,192,"+ ""2.2250738585072014E-308,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,193,"+ ""3.141592653589793,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,194,"+ ""2.718281828459045]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,197,public void testLongs() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,198,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,199,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,200,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,201,jsonWriter.value(0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,202,jsonWriter.value(1);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,203,jsonWriter.value(-1);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,204,jsonWriter.value(Long.MIN_VALUE);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,205,jsonWriter.value(Long.MAX_VALUE);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,206,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,207,jsonWriter.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,208,"assertEquals(""[0,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,209,"+ ""1,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,210,"+ ""-1,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,211,"+ ""-9223372036854775808,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,212,"+ ""9223372036854775807]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,215,public void testNumbers() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,216,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,217,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,218,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,219,"jsonWriter.value(new BigInteger(""0""));"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,220,"jsonWriter.value(new BigInteger(""9223372036854775808""));"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,221,"jsonWriter.value(new BigInteger(""-9223372036854775809""));"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,222,"jsonWriter.value(new BigDecimal(""3.141592653589793238462643383""));"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,223,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,224,jsonWriter.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,225,"assertEquals(""[0,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,226,"+ ""9223372036854775808,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,227,"+ ""-9223372036854775809,"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,228,"+ ""3.141592653589793238462643383]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,231,public void testBooleans() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,232,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,233,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,234,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,235,jsonWriter.value(true);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,236,jsonWriter.value(false);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,237,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,238,"assertEquals(""[true,false]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,241,public void testNulls() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,242,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,243,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,244,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,245,jsonWriter.nullValue();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,246,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,247,"assertEquals(""[null]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,250,public void testStrings() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,251,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,252,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,253,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,254,"jsonWriter.value(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,255,"jsonWriter.value(""a\"""");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,256,"jsonWriter.value(""\"""");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,257,"jsonWriter.value("":"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,258,"jsonWriter.value("","");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,259,"jsonWriter.value(""\b"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,260,"jsonWriter.value(""\f"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,261,"jsonWriter.value(""\n"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,262,"jsonWriter.value(""\r"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,263,"jsonWriter.value(""\t"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,264,"jsonWriter.value("" "");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,265,"jsonWriter.value(""\\"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,266,"jsonWriter.value(""{"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,267,"jsonWriter.value(""}"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,268,"jsonWriter.value(""["");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,269,"jsonWriter.value(""]"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,270,"jsonWriter.value(""\0"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,271,"jsonWriter.value(""\u0019"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,272,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,273,"assertEquals(""[\""a\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,274,"+ ""\""a\\\""\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,278,"+ ""\""\\b\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,279,"+ ""\""\\f\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,280,"+ ""\""\\n\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,281,"+ ""\""\\r\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,282,"+ ""\""\\t\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,289,"+ ""\""\\u0000\"","""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,290,"+ ""\""\\u0019\""]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,293,public void testEmptyArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,294,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,295,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,296,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,297,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,298,"assertEquals(""[]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,301,public void testEmptyObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,302,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,303,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,304,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,305,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,306,"assertEquals(""{}"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,309,public void testObjectsInArrays() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,310,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,311,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,312,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,313,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,314,"jsonWriter.name(""a"").value(5);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,315,"jsonWriter.name(""b"").value(false);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,316,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,317,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,318,"jsonWriter.name(""c"").value(6);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,319,"jsonWriter.name(""d"").value(true);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,320,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,321,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,322,"assertEquals(""[{\""a\"":5,\""b\"":false},"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,323,"+ ""{\""c\"":6,\""d\"":true}]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,326,public void testArraysInObjects() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,327,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,328,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,329,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,330,"jsonWriter.name(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,331,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,332,jsonWriter.value(5);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,333,jsonWriter.value(false);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,334,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,335,"jsonWriter.name(""b"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,336,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,337,jsonWriter.value(6);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,338,jsonWriter.value(true);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,339,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,340,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,341,"assertEquals(""{\""a\"":[5,false],"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,342,"+ ""\""b\"":[6,true]}"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,345,public void testDeepNestingArrays() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,346,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,347,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,348,for (int i = 0; i < 20; i++) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,349,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,351,for (int i = 0; i < 20; i++) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,352,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,354,"assertEquals(""[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,357,public void testDeepNestingObjects() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,358,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,359,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,360,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,361,for (int i = 0; i < 20; i++) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,362,"jsonWriter.name(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,363,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,365,for (int i = 0; i < 20; i++) {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,366,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,368,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,369,"assertEquals(""{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,370,"+ ""{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,371,"+ ""}}}}}}}}}}}}}}}}}}}}}"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,374,public void testRepeatedName() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,375,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,376,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,377,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,378,"jsonWriter.name(""a"").value(true);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,379,"jsonWriter.name(""a"").value(false);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,380,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,381,// JsonWriter doesn't attempt to detect duplicate names
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,382,"assertEquals(""{\""a\"":true,\""a\"":false}"", stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,385,public void testPrettyPrintObject() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,386,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,387,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,388,"jsonWriter.setIndent(""   "");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,390,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,391,"jsonWriter.name(""a"").value(true);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,392,"jsonWriter.name(""b"").value(false);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,393,"jsonWriter.name(""c"").value(5.0);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,394,"jsonWriter.name(""e"").nullValue();"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,395,"jsonWriter.name(""f"").beginArray();"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,396,jsonWriter.value(6.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,397,jsonWriter.value(7.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,398,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,399,"jsonWriter.name(""g"").beginObject();"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,400,"jsonWriter.name(""h"").value(8.0);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,401,"jsonWriter.name(""i"").value(9.0);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,402,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,403,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,405,"String expected = ""{\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,406,"+ ""   \""a\"": true,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,407,"+ ""   \""b\"": false,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,408,"+ ""   \""c\"": 5.0,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,409,"+ ""   \""e\"": null,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,410,"+ ""   \""f\"": [\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,411,"+ ""      6.0,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,412,"+ ""      7.0\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,413,"+ ""   ],\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,414,"+ ""   \""g\"": {\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,415,"+ ""      \""h\"": 8.0,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,416,"+ ""      \""i\"": 9.0\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,417,"+ ""   }\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,419,"assertEquals(expected, stringWriter.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,422,public void testPrettyPrintArray() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,423,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,424,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,425,"jsonWriter.setIndent(""   "");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,427,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,428,jsonWriter.value(true);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,429,jsonWriter.value(false);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,430,jsonWriter.value(5.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,431,jsonWriter.nullValue();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,432,jsonWriter.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,433,"jsonWriter.name(""a"").value(6.0);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,434,"jsonWriter.name(""b"").value(7.0);"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,435,jsonWriter.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,436,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,437,jsonWriter.value(8.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,438,jsonWriter.value(9.0);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,439,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,440,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,442,"String expected = ""[\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,443,"+ ""   true,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,444,"+ ""   false,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,445,"+ ""   5.0,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,446,"+ ""   null,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,447,"+ ""   {\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,448,"+ ""      \""a\"": 6.0,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,449,"+ ""      \""b\"": 7.0\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,450,"+ ""   },\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,451,"+ ""   [\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,452,"+ ""      8.0,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,453,"+ ""      9.0\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,454,"+ ""   ]\n"""
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,456,"assertEquals(expected, stringWriter.toString());"

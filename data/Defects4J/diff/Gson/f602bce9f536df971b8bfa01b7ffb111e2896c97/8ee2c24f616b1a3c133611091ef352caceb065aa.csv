is_addition,old_file_path,new_file_path,line_num,content
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,198,Override public T read(JsonReader reader) throws IOException {
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,199,sonElement jsonElement = Streams.parse(reader);
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,198,@Override public T read(JsonReader in) throws IOException {
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,199,JsonElement jsonElement = Streams.parse(in);
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,215,"Override public void write(JsonWriter writer, T value) throws IOException {"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,215,"@Override public void write(JsonWriter out, T value) throws IOException {"
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,234,"treams.write(clone, writer);"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,234,"Streams.write(clone, out);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,Override public Double read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,256,eader.nextNull();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,@Override public Double read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,256,in.nextNull();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,259,eturn reader.nextDouble();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,259,return in.nextDouble();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,"Override public void write(JsonWriter writer, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,"@Override public void write(JsonWriter out, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,riter.nullValue();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,out.nullValue();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,riter.value(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,out.value(value);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,278,Override public Float read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,279,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,280,eader.nextNull();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,278,@Override public Float read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,279,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,280,in.nextNull();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,283,eturn (float) reader.nextDouble();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,283,return (float) in.nextDouble();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,285,"Override public void write(JsonWriter writer, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,285,"@Override public void write(JsonWriter out, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,287,riter.nullValue();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,287,out.nullValue();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,292,riter.value(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,292,out.value(value);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,310,Override public Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,311,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,312,eader.nextNull();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,310,@Override public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,311,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,312,in.nextNull();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,315,eturn reader.nextLong();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,315,return in.nextLong();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,317,"Override public void write(JsonWriter writer, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,317,"@Override public void write(JsonWriter out, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,319,riter.nullValue();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,319,out.nullValue();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,322,riter.value(value.toString());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,322,out.value(value.toString());
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,831,Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,831,@Override public T read(JsonReader in) throws IOException {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,835,eturn delegate.read(reader);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,835,return delegate.read(in);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,838,"Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,838,"@Override public void write(JsonWriter out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,842,"elegate.write(writer, value);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,842,"delegate.write(out, value);"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,64,"* <p>New applications should prefer {@link TypeAdapter}, whose streaming API"
True,gson/src/main/java/com/google/gson/JsonDeserializer.java,gson/src/main/java/com/google/gson/JsonDeserializer.java,65,* is more efficient than this interface's tree API.
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,63,"* <p>New applications should prefer {@link TypeAdapter}, whose streaming API"
True,gson/src/main/java/com/google/gson/JsonSerializer.java,gson/src/main/java/com/google/gson/JsonSerializer.java,64,* is more efficient than this interface's tree API.
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,50,Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,50,@Override public T read(JsonReader in) throws IOException {
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,52,eturn delegate().read(reader);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,52,return delegate().read(in);
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,54,sonElement value = Streams.parse(reader);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,54,JsonElement value = Streams.parse(in);
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,61,"Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,61,"@Override public void write(JsonWriter out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,63,"elegate().write(writer, value);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,63,"delegate().write(out, value);"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,67,riter.nullValue();
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,67,out.nullValue();
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,71,"treams.write(tree,writer);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,71,"Streams.write(tree, out);"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,19,mport com.google.gson.internal.bind.JsonTreeReader;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,20,import com.google.gson.internal.bind.JsonTreeReader;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,30,/ TODO: nice documentation
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,31,* Converts between Java objects and JSON. Applications use type adapters both
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,32,"* for customizing types' JSON forms, and for JSON conversions."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,34,* <h3>Defining a type's JSON form</h3>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,35,* By default Gson converts application classes to JSON using its built-in type
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,36,* adapters. Change your Java objects' JSON representation by subclassing {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,37,* TypeAdapter} and registering the subclass with a {@code GsonBuilder}. Here's
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,38,"* an example of a type adapter for an (X,Y) coordinate point: <pre>   {@code"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,40,*   public class PointAdapter extends TypeAdapter<Point> {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,41,*     public Point read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,42,*       if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,43,*         reader.nextNull();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,44,*         return null;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,46,*       String xy = reader.nextString();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,47,"*       String[] parts = xy.split("","");"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,48,*       int x = Integer.parseInt(parts[0]);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,49,*       int y = Integer.parseInt(parts[1]);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,50,"*       return new Point(x, y);"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,52,"*     public void write(JsonWriter writer, Point value) throws IOException {"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,53,*       if (value == null) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,54,*         writer.nullValue();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,55,*         return;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,57,"*       String xy = value.getX() + "","" + value.getY();"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,58,*       writer.value(xy);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,60,*   }}</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,61,"* With this type adapter installed, Gson will convert {@code Points} to JSON as"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,62,"* strings like {@code ""5,8""} rather than objects like {@code {""x"":5,""y"":8}}. In"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,63,* this case the type adapter binds a rich Java class to a compact JSON value.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,65,* <p>The {@link #read(JsonReader) read()} method must read exactly one value
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,66,"* and {@link #write(JsonWriter,Object) write()} must write exactly one value."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,67,* For primitive types this is means readers should make exactly one call to
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,68,* <code>next<i>Type</i>()</code> and writers should make exactly one call to
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,69,"* one of <code>value()</code> or <code>nullValue()</code>. For composite types,"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,70,"* type adapters should start with a call to <code>begin<i>Type</i>()</code>,"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,71,"* convert the entire contents of the object or array, and finish with a call"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,72,* to <code>end<i>Type</i>()</code>. Failing to convert a value or converting
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,73,* too many values will disrupt the cadence of the caller and may cause the
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,74,* application to crash.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,76,* <p>Type adapters should be prepared to read null from the stream and write it
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,77,* to the stream. If your {@code Gson} instance has been configured to {@link
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,78,"* GsonBuilder#serializeNulls()}, these will be written to the final document."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,79,* Otherwise the value (and the corresponding name when writing to a JSON
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,80,* object) will be omitted automatically. In either case your type adapter must
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,81,* handle null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,83,"* <p>To use a custom type adapter with Gson, you must <i>register</i> it with a"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,84,* {@link GsonBuilder}: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,86,*   GsonBuilder builder = new GsonBuilder();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,87,"*   builder.registerTypeAdapter(Point.class, new PointAdapter());"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,89,*   Gson gson = builder.create();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,90,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,92,* <h3>JSON Conversion</h3>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,93,* <p>Retrieve a type adapter from a {@code Gson} instance to deserialize a JSON
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,94,* document into a Java object: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,96,"*   String json = ""{'origin':'0,0','points':['1,2','3,4']}"";"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,97,*   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,98,*   Graph graph = graphAdapter.fromJson(json);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,99,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,100,* ...or serialize a Java object to a JSON document: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,102,*   Graph graph = new Graph(...);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,103,*   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,104,*   String json = graphAdapter.toJson(graph);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,105,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,107,"* <p>Type adapters are <strong>type-specific</strong>. For example, a {@code"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,108,* TypeAdapter<Date>} can convert {@code Date} instances to JSON and JSON to
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,109,"* instances of {@code Date}, but cannot convert any other types."
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,37,ublic abstract T read(JsonReader reader) throws IOException;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,38,"ublic abstract void write(JsonWriter writer, T value) throws IOException;"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,40,ublic final String toJson(T value) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,41,tringWriter stringWriter = new StringWriter();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,42,"oJson(stringWriter, value);"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,43,eturn stringWriter.toString();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,116,"* Writes one JSON value (an array, object, string, number, boolean or null)"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,117,* for {@code value}.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,119,* @param value the Java object to write. May be null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,121,"public abstract void write(JsonWriter out, T value) throws IOException;"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,124,* Converts {@code value} to a JSON document and writes it to {@code out}.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,125,"* Unlike Gson's similar {@link Gson#toJson(JsonElement, Appendable) toJson}"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,126,"* method, this write is strict. Create a {@link"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,127,* JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,128,"* {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,129,* writing.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,131,* @param value the Java object to convert. May be null.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,51,ublic final T fromJson(String json) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,52,eturn fromJson(new StringReader(json));
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,55,ublic final T fromJson(Reader in) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,56,sonReader reader = new JsonReader(in);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,57,eader.setLenient(true);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,58,eturn read(reader);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,139,* Converts {@code value} to a JSON document. Unlike Gson's similar {@link
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,140,"* Gson#toJson(Object) toJson} method, this write is strict. Create a {@link"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,141,* JsonWriter#setLenient(boolean) lenient} {@code JsonWriter} and call
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,142,"* {@link #write(com.google.gson.stream.JsonWriter, Object)} for lenient"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,143,* writing.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,145,* @param value the Java object to convert. May be null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,147,public final String toJson(T value) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,148,StringWriter stringWriter = new StringWriter();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,149,"toJson(stringWriter, value);"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,150,return stringWriter.toString();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,61,ublic JsonElement toJsonTree(T src) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,154,* Converts {@code value} to a JSON tree.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,156,* @param value the Java object to convert. May be null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,157,* @return the converted JSON tree. May be {@link JsonNull}.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,159,public JsonElement toJsonTree(T value) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,65,"rite(jsonWriter, src);"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,163,"write(jsonWriter, value);"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,72,ublic T fromJsonTree(JsonElement json) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,171,"* Reads one JSON value (an array, object, string, number, boolean or null)"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,172,* and converts it to a Java object. Returns the converted object.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,174,* @return the converted Java object. May be null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,176,public abstract T read(JsonReader in) throws IOException;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,179,* Converts the JSON document in {@code in} to a Java object. Unlike Gson's
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,180,"* similar {@link Gson#fromJson(java.io.Reader, Class) fromJson} method, this"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,181,* read is strict. Create a {@link JsonReader#setLenient(boolean) lenient}
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,182,* {@code JsonReader} and call {@link #read(JsonReader)} for lenient reading.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,184,* @return the converted Java object. May be null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,186,public final T fromJson(Reader in) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,187,JsonReader reader = new JsonReader(in);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,188,reader.setLenient(true); // TODO: non-lenient?
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,189,return read(reader);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,193,* Converts the JSON document in {@code json} to a Java object. Unlike Gson's
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,194,"* similar {@link Gson#fromJson(String, Class) fromJson} method, this read is"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,195,* strict. Create a {@link JsonReader#setLenient(boolean) lenient} {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,196,* JsonReader} and call {@link #read(JsonReader)} for lenient reading.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,198,* @return the converted Java object. May be null.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,200,public final T fromJson(String json) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,201,return fromJson(new StringReader(json));
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,205,* Converts {@code jsonTree} to a Java object.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,207,* @param jsonTree the Java object to convert. May be {@link JsonNull}.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,209,public T fromJsonTree(JsonElement jsonTree) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,74,sonReader jsonReader = new JsonTreeReader(json);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,211,JsonReader jsonReader = new JsonTreeReader(jsonTree);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,220,* Creates type adapters for set of related types. Type adapter factories are
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,221,* most useful when several types share similar structure in their JSON form.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,223,* <h3>Example: Converting enums to lowercase</h3>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,224,"* In this example, we implement a factory that creates type adapters for all"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,225,"* enums. The type adapters will write enums in lowercase, despite the fact"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,226,* that they're defined in {@code CONSTANT_CASE} in the corresponding Java
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,227,* model: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,229,*   public class LowercaseEnumTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,230,"*     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,231,*       Class<T> rawType = (Class<T>) type.getRawType();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,232,*       if (!rawType.isEnum()) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,233,*         return null;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,236,"*       final Map<String, T> lowercaseToConstant = new HashMap<String, T>();"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,237,*       for (T constant : rawType.getEnumConstants()) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,238,"*         lowercaseToConstant.put(toLowercase(constant), constant);"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,241,*       return new TypeAdapter<T>() {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,242,"*         public void write(JsonWriter out, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,243,*           if (value == null) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,244,*             out.nullValue();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,245,*           } else {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,246,*             out.value(toLowercase(value));
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,250,*         public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,251,*           if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,252,*             reader.nextNull();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,253,*             return null;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,254,*           } else {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,255,*             return lowercaseToConstant.get(reader.nextString());
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,261,*     private String toLowercase(Object o) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,262,*       return o.toString().toLowerCase(Locale.US);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,265,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,267,* <p>Type adapter factories select which types they provide type adapters
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,268,"* for. If a factory cannot support a given type, it must return null when"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,269,* that type is passed to {@link #create}. Factories should expect {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,270,* create()} to be called on them for many types and should return null for
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,271,* most of those types. In the above example the factory returns null for
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,272,* calls to {@code create()} where {@code type} is not an enum.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,274,"* <p>A factory is typically called once per type, but the returned type"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,275,* adapter may be used many times. It is most efficient to do expensive work
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,276,* like reflection in {@code create()} so that the type adapter's {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,277,* read()} and {@code write()} methods can be very fast. In this example the
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,278,* mapping from lowercase name to enum value is computed eagerly.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,280,"* <p>As with type adapters, factories must be <i>registered</i> with a {@link"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,281,* GsonBuilder} for them to take effect: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,283,*  GsonBuilder builder = new GsonBuilder();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,284,*  builder.registerTypeAdapterFactory(new LowercaseEnumTypeAdapterFactory());
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,286,*  Gson gson = builder.create();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,287,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,288,"* If multiple factories support the same type, the factory registered earlier"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,289,* takes precedence.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,291,* <h3>Example: composing other type adapters</h3>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,292,* In this example we implement a factory for Guava's {@code Multiset}
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,293,* collection type. The factory can be used to create type adapters for
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,294,* multisets of any element type: the type adapter for {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,295,* Multiset<String>} is different from the type adapter for {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,296,* Multiset<URL>}.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,298,* <p>The type adapter <i>delegates</i> to another type adapter for the
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,299,* multiset elements. It figures out the element type by reflecting on the
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,300,* multiset's type token. A {@code Gson} is passed in to {@code create} for
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,301,* just this purpose: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,303,*   public class MultisetTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,304,"*     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,305,*       Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,306,*       if (typeToken.getRawType() != Multiset.class
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,307,*           || !(type instanceof ParameterizedType)) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,308,*         return null;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,311,*       Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,312,*       TypeAdapter<?> elementAdapter = gson.getAdapter(TypeToken.get(elementType));
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,313,*       return (TypeAdapter<T>) newMultisetAdapter(elementAdapter);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,316,*     private <E> TypeAdapter<Multiset<E>> newMultisetAdapter(
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,317,*         final TypeAdapter<E> elementAdapter) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,318,*       return new TypeAdapter<Multiset<E>>() {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,319,"*         public void write(JsonWriter out, Multiset<E> value) throws IOException {"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,320,*           if (value == null) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,321,*             out.nullValue();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,322,*             return;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,325,*           out.beginArray();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,326,*           for (Multiset.Entry<E> entry : value.entrySet()) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,327,*             out.value(entry.getCount());
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,328,"*             elementAdapter.write(out, entry.getElement());"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,330,*           out.endArray();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,333,*         public Multiset<E> read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,334,*           if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,335,*             in.nextNull();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,336,*             return null;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,339,*           Multiset<E> result = LinkedHashMultiset.create();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,340,*           in.beginArray();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,341,*           while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,342,*             int count = in.nextInt();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,343,*             E element = elementAdapter.read(in);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,344,"*             result.add(element, count);"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,346,*           in.endArray();
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,347,*           return result;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,352,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,353,* Delegating from one type adapter to another is extremely powerful; it's
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,354,* the foundation of how Gson converts Java objects and collections. Whenever
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,355,* possible your factory should retrieve its delegate type adapter in the
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,356,* {@code create()} method; this ensures potentially-expensive type adapter
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,357,* creation happens only once.
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,364,"* Returns a type adapter for {@code type}, or null if this factory doesn't"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,365,* support {@code type}.
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,123,Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,123,@Override public T read(JsonReader in) throws IOException {
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,125,eader.skipValue();
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,125,in.skipValue();
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,128,eturn delegate().read(reader);
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,128,return delegate().read(in);
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,131,"Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,131,"@Override public void write(JsonWriter out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,133,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,133,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,136,"elegate().write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,136,"delegate().write(out, value);"
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,62,ublic Object read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,63,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,64,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,62,public Object read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,63,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,64,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,69,eader.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,70,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,71, instance = componentTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,69,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,70,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,71,E instance = componentTypeAdapter.read(in);
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,74,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,74,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,83,"Override public void write(JsonWriter writer, Object array) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,83,"@Override public void write(JsonWriter out, Object array) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,85,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,85,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,89,riter.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,89,out.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,92,"omponentTypeAdapter.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,92,"componentTypeAdapter.write(out, value);"
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,94,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,94,out.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,36,ublic BigDecimal read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,37,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,38,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,36,public BigDecimal read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,37,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,38,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,42,eturn new BigDecimal(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,42,return new BigDecimal(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,49,"ublic void write(JsonWriter writer, BigDecimal value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,50,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,49,"public void write(JsonWriter out, BigDecimal value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,50,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,35,ublic BigInteger read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,36,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,37,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,35,public BigInteger read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,36,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,37,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,41,eturn new BigInteger(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,41,return new BigInteger(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,48,"ublic void write(JsonWriter writer, BigInteger value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,49,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,48,"public void write(JsonWriter out, BigInteger value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,49,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,71,ublic Collection<E> read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,72,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,73,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,71,public Collection<E> read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,72,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,73,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,78,eader.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,79,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,80, instance = elementTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,78,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,79,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,80,E instance = elementTypeAdapter.read(in);
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,83,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,83,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,87,"ublic void write(JsonWriter writer, Collection<E> collection) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,87,"public void write(JsonWriter out, Collection<E> collection) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,89,riter.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,89,out.nullValue(); // TODO: better policy here?
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,93,riter.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,93,out.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,95,"lementTypeAdapter.write(writer, element);"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,95,"elementTypeAdapter.write(out, element);"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,97,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,97,out.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,60,Override public Date read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,61,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,62,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,60,@Override public Date read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,61,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,62,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,65,eturn deserializeToDate(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,65,return deserializeToDate(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,84,"Override public synchronized void write(JsonWriter writer, Date value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,84,"@Override public synchronized void write(JsonWriter out, Date value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,86,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,86,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,90,riter.value(dateFormatAsString);
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,90,out.value(dateFormatAsString);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,159,"ublic Map<K, V> read(JsonReader reader) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,160,sonToken peek = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,159,"public Map<K, V> read(JsonReader in) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,160,JsonToken peek = in.peek();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,162,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,162,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,169,eader.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,170,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,171,eader.beginArray(); // entry array
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,172, key = keyTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,173, value = valueTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,169,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,170,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,171,in.beginArray(); // entry array
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,172,K key = keyTypeAdapter.read(in);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,173,V value = valueTypeAdapter.read(in);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,178,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,178,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,180,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,180,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,182,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,183,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,184,sonReaderInternalAccess.INSTANCE.promoteNameToValue(reader);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,185, key = keyTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,186, value = valueTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,182,in.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,183,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,184,JsonReaderInternalAccess.INSTANCE.promoteNameToValue(in);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,185,K key = keyTypeAdapter.read(in);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,186,V value = valueTypeAdapter.read(in);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,192,eader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,192,in.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,197,"ublic void write(JsonWriter writer, Map<K, V> map) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,197,"public void write(JsonWriter out, Map<K, V> map) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,199,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,199,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,204,riter.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,204,out.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,206,riter.name(String.valueOf(entry.getKey()));
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,207,"alueTypeAdapter.write(writer, entry.getValue());"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,206,out.name(String.valueOf(entry.getKey()));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,207,"valueTypeAdapter.write(out, entry.getValue());"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,209,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,209,out.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,225,riter.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,225,out.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,227,riter.beginArray(); // entry array
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,228,"treams.write(keys.get(i), writer);"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,229,"alueTypeAdapter.write(writer, values.get(i));"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,230,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,227,out.beginArray(); // entry array
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,228,"Streams.write(keys.get(i), out);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,229,"valueTypeAdapter.write(out, values.get(i));"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,230,out.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,232,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,232,out.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,234,riter.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,234,out.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,237,riter.name(keyToString(keyElement));
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,238,"alueTypeAdapter.write(writer, values.get(i));"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,237,out.name(keyToString(keyElement));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,238,"valueTypeAdapter.write(out, values.get(i));"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,240,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,240,out.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,52,Override public Object read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,53,sonToken token = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,52,@Override public Object read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,53,JsonToken token = in.peek();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,57,eader.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,58,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,59,ist.add(read(reader));
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,57,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,58,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,59,list.add(read(in));
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,61,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,61,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,66,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,67,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,68,"ap.put(reader.nextName(), read(reader));"
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,66,in.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,67,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,68,"map.put(in.nextName(), read(in));"
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,70,eader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,70,in.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,74,eturn reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,74,return in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,77,eturn reader.nextDouble();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,77,return in.nextDouble();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,80,eturn reader.nextBoolean();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,80,return in.nextBoolean();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,83,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,83,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,91,"Override public void write(JsonWriter writer, Object value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,91,"@Override public void write(JsonWriter out, Object value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,93,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,93,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,99,riter.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,100,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,99,out.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,100,out.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,104,"ypeAdapter.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,104,"typeAdapter.write(out, value);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,157,ublic T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,158,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,159,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,157,public T read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,158,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,159,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,168,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,169,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,170,tring name = reader.nextName();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,168,in.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,169,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,170,String name = in.nextName();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,174,eader.skipValue();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,174,in.skipValue();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,176,"ield.read(reader, instance);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,176,"field.read(in, instance);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,184,eader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,184,in.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,189,"ublic void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,189,"public void write(JsonWriter out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,191,riter.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,191,out.nullValue(); // TODO: better policy here?
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,195,riter.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,195,out.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,199,riter.name(boundField.name);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,200,"oundField.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,199,out.name(boundField.name);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,200,"boundField.write(out, value);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,206,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,206,out.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,49,ublic synchronized java.sql.Date read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,50,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,51,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,49,public synchronized java.sql.Date read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,50,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,51,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,55,inal long utilDate = format.parse(reader.nextString()).getTime();
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,55,final long utilDate = format.parse(in.nextString()).getTime();
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,63,"ublic synchronized void write(JsonWriter writer, java.sql.Date value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,64,riter.value(value == null ? null : format.format(value));
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,63,"public synchronized void write(JsonWriter out, java.sql.Date value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,64,out.value(value == null ? null : format.format(value));
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,49,Override public synchronized Time read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,50,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,51,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,49,@Override public synchronized Time read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,50,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,51,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,55,ate date = format.parse(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,55,Date date = format.parse(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,62,"Override public synchronized void write(JsonWriter writer, Time value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,63,riter.value(value == null ? null : format.format(value));
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,62,"@Override public synchronized void write(JsonWriter out, Time value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,63,out.value(value == null ? null : format.format(value));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,39,ublic T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,40,eturn delegate.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,39,public T read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,40,return delegate.read(in);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,45,"ublic void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,45,"public void write(JsonWriter out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,68,"hosen.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,68,"chosen.write(out, value);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,55,ublic BitSet read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,56,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,57,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,55,public BitSet read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,56,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,57,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,62,eader.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,62,in.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,64,sonToken tokenType = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,64,JsonToken tokenType = in.peek();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,69,et = reader.nextInt() != 0;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,69,set = in.nextInt() != 0;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,72,et = reader.nextBoolean();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,72,set = in.nextBoolean();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,75,tring stringValue = reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,75,String stringValue = in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,90,okenType = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,90,tokenType = in.peek();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,92,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,92,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,96,"ublic void write(JsonWriter writer, BitSet src) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,96,"public void write(JsonWriter out, BitSet src) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,98,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,98,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,102,riter.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,102,out.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,105,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,105,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,107,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,107,out.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,115,ublic Boolean read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,116,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,117,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,115,public Boolean read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,116,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,117,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,119, else if (reader.peek() == JsonToken.STRING) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,119,} else if (in.peek() == JsonToken.STRING) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,121,eturn Boolean.parseBoolean(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,121,return Boolean.parseBoolean(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,123,eturn reader.nextBoolean();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,123,return in.nextBoolean();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,126,"ublic void write(JsonWriter writer, Boolean value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,126,"public void write(JsonWriter out, Boolean value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,128,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,128,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,131,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,131,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,140,Override public Boolean read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,141,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,142,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,140,@Override public Boolean read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,141,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,142,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,145,eturn Boolean.valueOf(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,145,return Boolean.valueOf(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,148,"Override public void write(JsonWriter writer, Boolean value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,149,"riter.value(value == null ? ""null"" : value.toString());"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,148,"@Override public void write(JsonWriter out, Boolean value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,149,"out.value(value == null ? ""null"" : value.toString());"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,158,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,159,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,160,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,158,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,159,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,160,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,164,nt intValue = reader.nextInt();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,164,int intValue = in.nextInt();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,171,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,172,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,171,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,172,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,181,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,182,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,183,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,181,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,182,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,183,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,187,eturn (short) reader.nextInt();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,187,return (short) in.nextInt();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,193,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,194,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,193,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,194,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,203,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,204,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,205,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,203,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,204,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,205,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,209,eturn reader.nextInt();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,209,return in.nextInt();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,215,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,216,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,215,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,216,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,225,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,226,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,227,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,225,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,226,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,227,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,231,eturn reader.nextLong();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,231,return in.nextLong();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,237,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,238,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,237,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,238,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,244,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,245,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,246,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,244,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,245,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,246,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,249,eturn (float) reader.nextDouble();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,249,return (float) in.nextDouble();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,252,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,253,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,252,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,253,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,259,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,260,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,261,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,259,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,260,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,261,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,264,eturn reader.nextDouble();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,264,return in.nextDouble();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,267,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,268,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,267,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,268,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,274,ublic Number read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,275,sonToken jsonToken = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,274,public Number read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,275,JsonToken jsonToken = in.peek();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,278,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,278,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,281,eturn new LazilyParsedNumber(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,281,return new LazilyParsedNumber(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,287,"ublic void write(JsonWriter writer, Number value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,288,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,287,"public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,288,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,296,ublic Character read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,297,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,298,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,296,public Character read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,297,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,298,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,301,eturn reader.nextString().charAt(0);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,301,return in.nextString().charAt(0);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,304,"ublic void write(JsonWriter writer, Character value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,305,riter.value(value == null ? null : String.valueOf(value));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,304,"public void write(JsonWriter out, Character value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,305,out.value(value == null ? null : String.valueOf(value));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,314,ublic String read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,315,sonToken peek = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,314,public String read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,315,JsonToken peek = in.peek();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,317,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,317,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,322,eturn Boolean.toString(reader.nextBoolean());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,322,return Boolean.toString(in.nextBoolean());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,324,eturn reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,324,return in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,327,"ublic void write(JsonWriter writer, String value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,328,riter.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,327,"public void write(JsonWriter out, String value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,328,out.value(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,336,ublic StringBuilder read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,337,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,338,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,336,public StringBuilder read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,337,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,338,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,341,eturn new StringBuilder(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,341,return new StringBuilder(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,344,"ublic void write(JsonWriter writer, StringBuilder value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,345,riter.value(value == null ? null : value.toString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,344,"public void write(JsonWriter out, StringBuilder value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,345,out.value(value == null ? null : value.toString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,354,ublic StringBuffer read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,355,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,356,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,354,public StringBuffer read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,355,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,356,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,359,eturn new StringBuffer(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,359,return new StringBuffer(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,362,"ublic void write(JsonWriter writer, StringBuffer value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,363,riter.value(value == null ? null : value.toString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,362,"public void write(JsonWriter out, StringBuffer value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,363,out.value(value == null ? null : value.toString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,372,ublic URL read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,373,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,374,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,372,public URL read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,373,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,374,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,377,tring nextString = reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,377,String nextString = in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,381,"ublic void write(JsonWriter writer, URL value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,382,riter.value(value == null ? null : value.toExternalForm());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,381,"public void write(JsonWriter out, URL value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,382,out.value(value == null ? null : value.toExternalForm());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,390,ublic URI read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,391,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,392,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,390,public URI read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,391,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,392,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,396,tring nextString = reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,396,String nextString = in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,403,"ublic void write(JsonWriter writer, URI value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,404,riter.value(value == null ? null : value.toASCIIString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,403,"public void write(JsonWriter out, URI value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,404,out.value(value == null ? null : value.toASCIIString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,412,ublic InetAddress read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,413,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,414,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,412,public InetAddress read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,413,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,414,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,417,eturn InetAddress.getByName(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,417,return InetAddress.getByName(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,420,"ublic void write(JsonWriter writer, InetAddress value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,421,riter.value(value == null ? null : value.getHostAddress());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,420,"public void write(JsonWriter out, InetAddress value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,421,out.value(value == null ? null : value.getHostAddress());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,430,ublic UUID read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,431,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,432,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,430,public UUID read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,431,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,432,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,435,eturn java.util.UUID.fromString(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,435,return java.util.UUID.fromString(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,438,"ublic void write(JsonWriter writer, UUID value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,439,riter.value(value == null ? null : value.toString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,438,"public void write(JsonWriter out, UUID value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,439,out.value(value == null ? null : value.toString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,454,Override public Timestamp read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,455,ate date = dateTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,454,@Override public Timestamp read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,455,Date date = dateTypeAdapter.read(in);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,459,"Override public void write(JsonWriter writer, Timestamp value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,460,"ateTypeAdapter.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,459,"@Override public void write(JsonWriter out, Timestamp value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,460,"dateTypeAdapter.write(out, value);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,475,ublic Calendar read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,476,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,477,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,475,public Calendar read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,476,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,477,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,480,eader.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,480,in.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,487,hile (reader.peek() != JsonToken.END_OBJECT) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,488,tring name = reader.nextName();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,489,nt value = reader.nextInt();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,487,while (in.peek() != JsonToken.END_OBJECT) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,488,String name = in.nextName();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,489,int value = in.nextInt();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,504,eader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,504,in.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,509,"ublic void write(JsonWriter writer, Calendar value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,509,"public void write(JsonWriter out, Calendar value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,511,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,511,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,514,riter.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,515,riter.name(YEAR);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,516,riter.value(value.get(Calendar.YEAR));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,517,riter.name(MONTH);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,518,riter.value(value.get(Calendar.MONTH));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,519,riter.name(DAY_OF_MONTH);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,520,riter.value(value.get(Calendar.DAY_OF_MONTH));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,521,riter.name(HOUR_OF_DAY);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,522,riter.value(value.get(Calendar.HOUR_OF_DAY));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,523,riter.name(MINUTE);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,524,riter.value(value.get(Calendar.MINUTE));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,525,riter.name(SECOND);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,526,riter.value(value.get(Calendar.SECOND));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,527,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,514,out.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,515,out.name(YEAR);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,516,out.value(value.get(Calendar.YEAR));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,517,out.name(MONTH);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,518,out.value(value.get(Calendar.MONTH));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,519,out.name(DAY_OF_MONTH);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,520,out.value(value.get(Calendar.DAY_OF_MONTH));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,521,out.name(HOUR_OF_DAY);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,522,out.value(value.get(Calendar.HOUR_OF_DAY));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,523,out.name(MINUTE);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,524,out.value(value.get(Calendar.MINUTE));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,525,out.name(SECOND);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,526,out.value(value.get(Calendar.SECOND));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,527,out.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,536,ublic Locale read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,537,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,538,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,536,public Locale read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,537,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,538,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,541,tring locale = reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,541,String locale = in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,564,"ublic void write(JsonWriter writer, Locale value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,565,riter.value(value == null ? null : value.toString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,564,"public void write(JsonWriter out, Locale value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,565,out.value(value == null ? null : value.toString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,572,Override public JsonElement read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,573,witch (reader.peek()) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,572,@Override public JsonElement read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,573,switch (in.peek()) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,575,eturn new JsonPrimitive(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,575,return new JsonPrimitive(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,577,tring number = reader.nextString();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,577,String number = in.nextString();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,580,eturn new JsonPrimitive(reader.nextBoolean());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,580,return new JsonPrimitive(in.nextBoolean());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,582,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,582,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,586,eader.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,587,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,588,rray.add(read(reader));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,586,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,587,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,588,array.add(read(in));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,590,eader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,590,in.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,594,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,595,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,596,"bject.add(reader.nextName(), read(reader));"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,594,in.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,595,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,596,"object.add(in.nextName(), read(in));"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,598,eader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,598,in.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,609,"Override public void write(JsonWriter writer, JsonElement value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,609,"@Override public void write(JsonWriter out, JsonElement value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,611,riter.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,611,out.nullValue();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,615,riter.value(primitive.getAsNumber());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,615,out.value(primitive.getAsNumber());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,617,riter.value(primitive.getAsBoolean());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,617,out.value(primitive.getAsBoolean());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,619,riter.value(primitive.getAsString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,619,out.value(primitive.getAsString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,623,riter.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,623,out.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,625,"rite(writer, e);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,625,"write(out, e);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,627,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,627,out.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,630,riter.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,630,out.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,632,riter.name(e.getKey());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,633,"rite(writer, e.getValue());"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,632,out.name(e.getKey());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,633,"write(out, e.getValue());"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,635,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,635,out.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,652,ublic T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,653,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,654,eader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,652,public T read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,653,if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,654,in.nextNull();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,657,"eturn Enum.valueOf(classOfT, reader.nextString());"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,657,"return Enum.valueOf(classOfT, in.nextString());"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,660,"ublic void write(JsonWriter writer, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,661,riter.value(value == null ? null : value.name());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,660,"public void write(JsonWriter out, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,661,out.value(value == null ? null : value.name());
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,97,Override public Person read(JsonReader reader) throws IOException {
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,98,tring name = reader.nextString();
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,97,@Override public Person read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,98,String name = in.nextString();
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,101,"Override public void write(JsonWriter writer, Person value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,102,riter.value(value.name);
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,101,"@Override public void write(JsonWriter out, Person value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,102,out.value(value.name);
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,121,Override public Foo read(JsonReader reader) throws IOException {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,122,"eturn new Foo(reader.nextString() + "" via "" + name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,121,@Override public Foo read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,122,"return new Foo(in.nextString() + "" via "" + name);"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,124,"Override public void write(JsonWriter writer, Foo value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,125,"riter.value(value.name + "" via "" + name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,124,"@Override public void write(JsonWriter out, Foo value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,125,"out.value(value.name + "" via "" + name);"

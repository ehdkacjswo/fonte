is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,39,mport java.util.List;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,43,mport java.util.Queue;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,109,"ap.register(Enum.class, ENUM_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,107,"map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,114,"ap.register(Collection.class, COLLECTION_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,115,"ap.register(Map.class, MAP_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,112,"map.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,113,"map.registerForTypeHierarchy(Set.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,114,"map.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,146,"ap.register(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,145,"map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,151,"ap.register(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,152,"ap.register(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,150,"map.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,151,"map.registerForTypeHierarchy(Set.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,152,"map.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,192,"ap.register(Collection.class, COLLECTION_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,193,"ap.register(List.class, COLLECTION_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,194,"ap.register(Queue.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,192,"map.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,421,* Configures Gson for custom serialization or deserialization for an inheritance type hierarchy.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,422,"* This method combines the registration of an {@link InstanceCreator}, {@link JsonSerializer},"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,423,* and a {@link JsonDeserializer}. It is best used when a single object {@code typeAdapter}
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,424,* implements all the required interfaces for custom serialization with Gson.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,425,"* If an instance creator, serializer or deserializer was previously registered for the specified"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,426,"* type hierarchy, it is overwritten. If an instance creator, serializer or deserializer is"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,427,"* registered for a specific type in the type hierarchy, it will be invoked instead of the one"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,428,* registered for the type hierarchy.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,430,* @param baseType the class definition for the type adapter being registered for the base class
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,431,*        or interface
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,432,"* @param typeAdapter This object must implement at least one of the {@link InstanceCreator},"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,433,"* {@link JsonSerializer}, and a {@link JsonDeserializer} interfaces."
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,434,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,435,* @since 1.5
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,437,"public GsonBuilder registerTypeHierarchyAdapter(Class<?> baseType, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,438,Preconditions.checkArgument(typeAdapter instanceof JsonSerializer<?>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,439,|| typeAdapter instanceof JsonDeserializer<?> || typeAdapter instanceof InstanceCreator<?>);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,440,if (typeAdapter instanceof InstanceCreator<?>) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,441,"registerInstanceCreatorForTypeHierarchy(baseType, (InstanceCreator<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,443,if (typeAdapter instanceof JsonSerializer<?>) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,444,"registerSerializerForTypeHierarchy(baseType, (JsonSerializer<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,446,if (typeAdapter instanceof JsonDeserializer<?>) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,447,"registerDeserializerForTypeHierarchy(baseType, (JsonDeserializer<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,449,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,452,"private <T> GsonBuilder registerInstanceCreatorForTypeHierarchy(Class<?> classOfT,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,453,InstanceCreator<? extends T> instanceCreator) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,454,"instanceCreators.registerForTypeHierarchy(classOfT, instanceCreator);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,455,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,458,"private <T> GsonBuilder registerSerializerForTypeHierarchy(Class<?> classOfT,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,459,final JsonSerializer<T> serializer) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,460,"serializers.registerForTypeHierarchy(classOfT, serializer);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,461,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,464,"private <T> GsonBuilder registerDeserializerForTypeHierarchy(Class<?> classOfT,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,465,JsonDeserializer<T> deserializer) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,466,"deserializers.registerForTypeHierarchy(classOfT,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,467,new JsonDeserializerExceptionWrapper<T>(deserializer));
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,468,return this;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,20,mport java.util.Collection;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,20,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,22,import java.util.List;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,23,mport java.util.Set;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,34, @param <T>
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,35,          The handler that will be looked up by type
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,34,* @param <T> The handler that will be looked up by type
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,40,"private final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,43,"public synchronized void registerForTypeHierarchy(Class<?> typeOfT, T value) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,44,"Pair<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,45,registerForTypeHierarchy(pair);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,48,"public synchronized void registerForTypeHierarchy(Pair<Class<?>, T> pair) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,49,if (!modifiable) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,50,"throw new IllegalStateException(""Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,52,int index = getIndexOfSpecificHandlerForTypeHierarchy(pair.first);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,53,if (index >= 0) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,54,"logger.log(Level.WARNING, ""Overriding the existing type handler for {0}"", pair.first);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,55,typeHierarchyList.remove(index);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,57,// We want stack behavior for adding to this list. A type adapter added subsequently should
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,58,// override a previously registered one.
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,59,"typeHierarchyList.add(0, pair);"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,45,hrow new IllegalStateException(
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,46,"Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,64,"throw new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,56,hrow new IllegalStateException(
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,57,"Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,74,"throw new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,59,"or (Map.Entry<Type, T> entry : other.entrySet()) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,76,"for (Map.Entry<Type, T> entry : other.map.entrySet()) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,81,"for (Pair<Class<?>, T> entry : other.typeHierarchyList) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,82,int index = getIndexOfSpecificHandlerForTypeHierarchy(entry.first);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,83,if (index < 0) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,84,registerForTypeHierarchy(entry);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,68,hrow new IllegalStateException(
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,69,"Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,91,"throw new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,88,/ Check for map or collection
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,90,f (Map.class.isAssignableFrom(rawClass)) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,91,andler = map.get(Map.class);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,92, else if (Collection.class.isAssignableFrom(rawClass)) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,93,andler = map.get(Collection.class);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,94, else if (Enum.class.isAssignableFrom(rawClass)) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,95,andler = map.get(Enum.class);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,110,// check if something registered for type hierarchy
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,111,handler = getHandlerForTypeHierarchy(rawClass);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,117,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,118,private T getHandlerForTypeHierarchy(Class<?> type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,119,"for (Pair<Class<?>, T> entry : typeHierarchyList) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,120,if (entry.first.isAssignableFrom(type)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,121,return entry.second;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,124,return null;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,131,private synchronized int getIndexOfSpecificHandlerForTypeHierarchy(Class<?> type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,132,for (int i = typeHierarchyList.size()-1; i >= 0; --i) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,133,if (type.equals(typeHierarchyList.get(i).first)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,134,return i;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,137,return -1;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,145,"for (Pair<Class<?>, T> entry : typeHierarchyList) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,146,copy.registerForTypeHierarchy(entry);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,114,"ublic synchronized Set<Map.Entry<Type, T>> entrySet() {"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,115,eturn map.entrySet();
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,120,"tringBuilder sb = new StringBuilder(""{"");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,153,"StringBuilder sb = new StringBuilder(""{mapForTypeHierarchy:{"");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,155,"for (Pair<Class<?>, T> entry : typeHierarchyList) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,156,if (first) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,157,first = false;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,158,} else {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,159,"sb.append(',');"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,161,sb.append(typeToString(entry.first)).append(':');
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,162,sb.append(entry.second);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,164,"sb.append(""},map:{"");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,165,first = true;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,175,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,19,import com.google.gson.common.TestTypes.Base;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,20,import com.google.gson.common.TestTypes.Sub;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,90,public void testTypeHierarchy() {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,91,"paramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,92,String handler = paramMap.getHandlerFor(Sub.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,93,"assertEquals(""baseHandler"", handler);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,96,public void testTypeHierarchyMultipleHandlers() {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,97,"paramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,98,"paramMap.registerForTypeHierarchy(Sub.class, ""subHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,99,String handler = paramMap.getHandlerFor(SubOfSub.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,100,"assertEquals(""subHandler"", handler);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,103,public void testTypeHierarchyRegisterIfAbsent() {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,104,"paramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,105,ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>();
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,106,"otherMap.registerForTypeHierarchy(Base.class, ""baseHandler2"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,107,paramMap.registerIfAbsent(otherMap);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,108,String handler = paramMap.getHandlerFor(Base.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,109,"assertEquals(""baseHandler"", handler);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,112,private static class SubOfSub extends Sub {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,186,public void testMapStandardSubclassDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,187,"String json = ""{a:'1',b:'2'}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,188,"Type type = new TypeToken<LinkedHashMap<String, String>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,189,"LinkedHashMap<String, Integer> map = gson.fromJson(json, type);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,190,"assertEquals(""1"", map.get(""a""));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,191,"assertEquals(""2"", map.get(""b""));"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,300,eturn ((ParameterizedType) collectionType).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,302,if (collectionType instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,303,collectionType = ((WildcardType)collectionType).getUpperBounds()[0];
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,305,if (collectionType instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,306,return ((ParameterizedType) collectionType).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,308,return Object.class;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,19,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,20,mport com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,21,mport com.google.gson.common.MoreAsserts;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,22,mport com.google.gson.common.TestTypes.BagOfPrimitives;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,23,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,25,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,27,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,31,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,33,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,34,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,35,import com.google.gson.common.MoreAsserts;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,36,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,37,import com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,213,ry {
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,214,"son.fromJson(json, Collection.class);"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,215,"ail(""Can not deserialize a non-genericized collection."");"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,216, catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,214,"Collection integers = gson.fromJson(json, Collection.class);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,215,// JsonReader converts numbers to double by default so we need a floating point comparison
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,216,"assertEquals(Arrays.asList(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0), integers);"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,219,ry {
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,220,"son.fromJson(json, Collection.class);"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,221,"ail(""Can not deserialize a non-genericized collection."");"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,222, catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,219,"Collection strings = gson.fromJson(json, Collection.class);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,220,"assertTrue(strings.contains(""Hello""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,221,"assertTrue(strings.contains(""World""));"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,227,ry {
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,228,"agOfPrimitives bag = new BagOfPrimitives(10, 20, false, ""stringValue"");"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,229,"tring json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,230,"ollection target = gson.fromJson(json, Collection.class);"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,231,"ssertEquals(2, target.size());"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,232,or (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) {
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,233,"ssertEquals(bag.getExpectedJson(), bag1.getExpectedJson());"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,235,"ail(""Raw collection of objects should not work"");"
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,236, catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,226,"BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, ""stringValue"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,227,"String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']';"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,228,"Collection target = gson.fromJson(json, Collection.class);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,229,"assertEquals(2, target.size());"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,230,for (Object bag1 : target) {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,231,// Gson 2.0 converts raw objects into maps
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,232,"Map<String, Object> values = (Map<String, Object>) bag1;"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,233,assertTrue(values.containsValue(10.0));
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,234,assertTrue(values.containsValue(20.0));
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,235,"assertTrue(values.containsValue(""stringValue""));"

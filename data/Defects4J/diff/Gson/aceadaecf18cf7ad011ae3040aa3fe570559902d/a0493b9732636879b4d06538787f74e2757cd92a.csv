is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,25,import java.util.Arrays;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,29,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,50,"ode<K, V> root;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,50,"Node<K, V>[] table;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,54,int threshold;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,78,this.table = new Node[16]; // TODO: sizing/resizing policies
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,79,this.threshold = (table.length / 2) + (table.length / 4); // 3/4 capacity
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,103,oot = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,106,"Arrays.fill(table, null);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,110,// Clear all links to help GC
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,111,"Node<K, V> header = this.header;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,112,"for (Node<K, V> e = header.next; e != header; ) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,113,"Node<K, V> next = e.next;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,114,e.next = e.prev = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,115,e = next;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,118,header.next = header.prev = header;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,120,f (root == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,133,int hash = secondaryHash(key.hashCode());
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,134,int index = hash & (table.length - 1);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,136,if (table[index] == null) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,125,"oot = new Node<K, V>(null, key, header, header);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,126,ize = 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,141,"Node<K, V> created = new Node<K, V>(null, key, hash, header, header.prev);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,142,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,143,table[index] = created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,128,eturn root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,145,if (size > threshold) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,146,doubleCapacity();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,148,return created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,134,"ode<K, V> nearest = root;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,154,"Node<K, V> nearest = table[index];"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,152,"ode<K, V> created = new Node<K, V>(nearest, key, header, header.prev);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,172,"Node<K, V> created = new Node<K, V>(nearest, key, hash, header, header.prev);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,181,if (size > threshold) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,182,doubleCapacity();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,216,"* Applies a supplemental hash function to a given hashCode, which defends"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,217,* against poor quality hash functions. This is critical because HashMap
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,218,"* uses power-of-two length hash tables, that otherwise encounter collisions"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,219,* for hashCodes that do not differ in lower or upper bits.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,221,private static int secondaryHash(int h) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,222,// Doug Lea's supplemental hash function
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,223,h ^= (h >>> 20) ^ (h >>> 12);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,224,return h ^ (h >>> 7) ^ (h >>> 4);
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,279,oot = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,314,int index = node.hash & (table.length - 1);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,315,table[index] = replacement;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,419,"tatic class Node<K, V> implements Map.Entry<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,455,"static class Node<K, V> implements Entry<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,462,final int hash;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,428,nt hash;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,469,hash = -1;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,437,"ode(Node<K, V> parent, K key, Node<K, V> next, Node<K, V> prev) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,474,"Node(Node<K, V> parent, K key, int hash, Node<K, V> next, Node<K, V> prev) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,477,this.hash = hash;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,462,f (o instanceof Map.Entry) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,463,ap.Entry other = (Map.Entry) o;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,500,if (o instanceof Entry) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,501,Entry other = (Entry) o;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,544,private void doubleCapacity() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,545,table = doubleCapacity(table);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,546,threshold = (table.length / 2) + (table.length / 4); // 3/4 capacity
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,729,"inkedTreeMap.this.removeInternal(lastReturned, true);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,772,"removeInternal(lastReturned, true);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,735,"lass EntrySet extends AbstractSet<Map.Entry<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,778,"class EntrySet extends AbstractSet<Entry<K, V>> {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,20,import com.google.gson.internal.LinkedTreeMap.AvlIterator;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,76,public void testClear() {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,77,"LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,78,"map.put(""a"", ""android"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,79,"map.put(""c"", ""cola"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,80,"map.put(""b"", ""bbq"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,81,map.clear();
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,82,assertIterationOrder(map.keySet());
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,83,"assertEquals(0, map.size());"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,89,"inkedTreeMap.AvlIterator<String, String> iterator = new LinkedTreeMap.AvlIterator<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,100,"AvlIterator<String, String> iterator = new AvlIterator<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,144,"ode<String, String> result = new Node<String, String>(null, value, head, head);"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,145,esult.hash = value.hashCode();
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,146,eturn result;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,155,"return new Node<String, String>(null, value, value.hashCode(), head, head);"

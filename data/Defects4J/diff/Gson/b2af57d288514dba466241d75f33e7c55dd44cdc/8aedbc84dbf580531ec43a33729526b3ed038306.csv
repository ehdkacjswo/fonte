is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,113,"ap.registerForTypeHierarchy(Set.class, COLLECTION_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,151,"ap.registerForTypeHierarchy(Set.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,189,"ap.register(Map.class, MAP_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,187,"map.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,194,"ap.register(Set.class, HASH_SET_CREATOR);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,195,"ap.register(SortedSet.class, TREE_SET_CREATOR);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,196,"ap.register(TreeSet.class, TREE_SET_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,192,"map.registerForTypeHierarchy(Set.class, HASH_SET_CREATOR);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,193,"map.registerForTypeHierarchy(SortedSet.class, TREE_SET_CREATOR);"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,58,@Override
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,59,public String toString() {
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,60,"return String.format(""{%s,%s}"", first, second);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,57,index = getIndexOfAnOverriddenHandler(pair.first);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,58,if (index >= 0) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,59,"throw new IllegalArgumentException(""The specified type handler for type "" + pair.first"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,60,"+ "" hides the previously registered type hierarchy handler for """
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,61,"+ typeHierarchyList.get(index).first + "". Gson does not allow this."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,68,private int getIndexOfAnOverriddenHandler(Class<?> type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,69,for (int i = typeHierarchyList.size()-1; i >= 0; --i) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,70,"Pair<Class<?>, T> entry = typeHierarchyList.get(i);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,71,if (type.isAssignableFrom(entry.first)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,72,return i;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,75,return -1;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,81,"or (Pair<Class<?>, T> entry : other.typeHierarchyList) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,97,// Quite important to traverse the typeHierarchyList from stack bottom first since
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,98,// we want to register the handlers in the same order to preserve priority order
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,99,for (int i = other.typeHierarchyList.size()-1; i >= 0; --i) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,100,"Pair<Class<?>, T> entry = other.typeHierarchyList.get(i);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,112,public void testReplaceExistingTypeHierarchyHandler() {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,113,"paramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,114,"paramMap.registerForTypeHierarchy(Base.class, ""base2Handler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,115,String handler = paramMap.getHandlerFor(Base.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,116,"assertEquals(""base2Handler"", handler);"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,119,public void testHidingExistingTypeHierarchyHandlerIsDisallowed() {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,120,"paramMap.registerForTypeHierarchy(Sub.class, ""subHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,121,try {
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,122,"paramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,123,"fail(""A handler that hides an existing type hierarchy handler is not allowed"");"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,124,} catch (IllegalArgumentException expected) {

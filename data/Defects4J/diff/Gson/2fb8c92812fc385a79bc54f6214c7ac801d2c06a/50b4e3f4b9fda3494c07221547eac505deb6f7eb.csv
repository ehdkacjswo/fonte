is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,20,import java.util.Map;
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,23,"* Captures all the common/shared logic between the old, ({@link MapTypeAdapter}, and"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,24,"* the new, {@link MapAsArrayTypeAdapter}, map type adapters."
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,26,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,28,abstract class BaseMapTypeAdapter
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,29,"implements JsonSerializer<Map<?, ?>>, JsonDeserializer<Map<?, ?>> {"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,31,"protected static final JsonElement serialize(JsonSerializationContext context,"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,32,"Object src, Type srcType) {"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,33,JsonSerializationContextDefault contextImpl = (JsonSerializationContextDefault) context;
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,34,"return contextImpl.serialize(src, srcType, false);"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,37,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,38,"protected static final Map<Object, Object> constructMapType("
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,39,"Type mapType, JsonDeserializationContext context) {"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,40,JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,41,ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,42,"return (Map<Object, Object>) objectConstructor.construct(mapType);"
False,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,49,"eturn serialize(src, src.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,49,"return serialize(src, src.getClass(), false);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,53,"return serialize(src, typeOfSrc, true);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,56,"JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {"
False,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,58,"bjectNavigator.accept(new ObjectTypePair(src, typeOfSrc, true), visitor);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,62,"objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,93,extends BaseMapTypeAdapter
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,125,"sonElement key = context.serialize(entry.getKey(), keyAndValueType[0]);"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,126,"JsonElement key = serialize(context, entry.getKey(), keyAndValueType[0]);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,128,"eysAndValues.add(context.serialize(entry.getValue(), keyAndValueType[1]));"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,129,"keysAndValues.add(serialize(context, entry.getValue(), keyAndValueType[1]));"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,150,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,151,"rivate Map<Object, Object> constructMapType(Type mapType, JsonDeserializationContext context) {"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,152,sonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,153,bjectConstructor objectConstructor = contextImpl.getObjectConstructor();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,154,"eturn (Map<Object, Object>) objectConstructor.construct(mapType);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,34,"inal class MapTypeAdapter implements JsonSerializer<Map<?, ?>>,"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,35,"sonDeserializer<Map<?, ?>> {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,34,final class MapTypeAdapter extends BaseMapTypeAdapter {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,53,"alueElement = context.serialize(value, childType);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,53,"valueElement = serialize(context, value, childType);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,74,"rivate Map constructMapType(Type mapType, JsonDeserializationContext context) {"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,75,sonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,76,bjectConstructor objectConstructor = contextImpl.getObjectConstructor();
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,77,eturn (Map) objectConstructor.construct(mapType);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,22,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,23,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,24,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,25,import com.google.gson.common.TestTypes;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,333,public final void testInterfaceTypeMap() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,334,MapClass element = new MapClass();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,335,TestTypes.Sub subType = new TestTypes.Sub();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,336,"element.addBase(""Test"", subType);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,337,"element.addSub(""Test"", subType);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,339,String subTypeJson = new Gson().toJson(subType);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,340,"String expected = ""{\""bases\"":{\""Test\"":"" + subTypeJson + ""},"""
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,341,"+ ""\""subs\"":{\""Test\"":"" + subTypeJson + ""}}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,343,Gson gsonWithComplexKeys = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,344,.enableComplexMapKeySerialization()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,345,.create();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,346,String json = gsonWithComplexKeys.toJson(element);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,347,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,349,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,350,json = gson.toJson(element);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,351,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,354,public final void testInterfaceTypeMapWithSerializer() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,355,MapClass element = new MapClass();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,356,TestTypes.Sub subType = new TestTypes.Sub();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,357,"element.addBase(""Test"", subType);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,358,"element.addSub(""Test"", subType);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,360,Gson tempGson = new Gson();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,361,String subTypeJson = tempGson.toJson(subType);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,362,"final JsonElement baseTypeJson = tempGson.toJsonTree(subType, TestTypes.Base.class);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,363,"String expected = ""{\""bases\"":{\""Test\"":"" + baseTypeJson.toString() + ""},"""
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,364,"+ ""\""subs\"":{\""Test\"":"" + subTypeJson + ""}}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,366,JsonSerializer<TestTypes.Base> baseTypeAdapter = new JsonSerializer<TestTypes.Base>() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,367,"public JsonElement serialize(TestTypes.Base src, Type typeOfSrc,"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,368,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,369,return baseTypeJson;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,373,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,374,.enableComplexMapKeySerialization()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,375,".registerTypeAdapter(TestTypes.Base.class, baseTypeAdapter)"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,376,.create();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,377,String json = gson.toJson(element);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,378,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,380,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,381,".registerTypeAdapter(TestTypes.Base.class, baseTypeAdapter)"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,382,.create();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,383,json = gson.toJson(element);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,384,"assertEquals(expected, json);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,387,static final class MapClass {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,388,"private final Map<String, TestTypes.Base> bases = new HashMap<String, TestTypes.Base>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,389,"private final Map<String, TestTypes.Sub> subs = new HashMap<String, TestTypes.Sub>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,391,"public final void addBase(final String name, final TestTypes.Base value) {"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,392,"bases.put(name, value);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,395,"public final void addSub(final String name, final TestTypes.Sub value) {"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,396,"subs.put(name, value);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,29,import java.io.Serializable;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,349,public void testMoreSpecificSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,350,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,351,"String expected = ""This is a string"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,352,String expectedJson = gson.toJson(expected);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,354,Serializable serializableString = expected;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,355,"String actualJson = gson.toJson(serializableString, Serializable.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,356,assertFalse(expectedJson.equals(actualJson));

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,30,import java.util.Random;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,76,ublic void testContainsNullKeyFails() {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,78,public void testContainsNullKeyIsAlwaysFalse() {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,84,public void testPutOverrides() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,85,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,86,"assertNull(map.put(""d"", ""donut""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,87,"assertNull(map.put(""e"", ""eclair""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,88,"assertNull(map.put(""f"", ""froyo""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,89,"assertEquals(3, map.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,91,"assertEquals(""donut"", map.get(""d""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,92,"assertEquals(""donut"", map.put(""d"", ""done""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,93,"assertEquals(3, map.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,96,public void testEmptyStringValues() {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,97,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,98,"map.put(""a"", """");"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,99,"assertTrue(map.containsKey(""a""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,100,"assertEquals("""", map.get(""a""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,103,"// NOTE that this does not happen every time, but given the below predictable random,"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,104,// this test will consistently fail (assuming the initial size is 16 and rehashing
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,105,// size remains at 3/4)
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,106,public void testForceDoublingAndRehash() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,107,Random random = new Random(1367593214724L);
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,108,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,109,String[] keys = new String[1000];
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,110,for (int i = 0; i < keys.length; i++) {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,111,"keys[i] = Integer.toString(Math.abs(random.nextInt()), 36) + ""-"" + i;"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,112,"map.put(keys[i], """" + i);"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,115,for (int i = 0; i < keys.length; i++) {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,116,String key = keys[i];
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,117,assertTrue(map.containsKey(key));
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,118,"assertEquals("""" + i, map.get(key));"

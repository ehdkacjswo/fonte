is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,23,import java.text.ParsePosition;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,29,import com.google.gson.internal.bind.util.ISO8601Utils;
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,41,rivate final DateFormat iso8601Format;
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,64,"his.iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);"
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,65,"his.iso8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,99,eturn localFormat.parse(json.getAsString());
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,100, catch (ParseException ignored) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,99,return localFormat.parse(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,100,} catch (ParseException ignored) {}
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,104, catch (ParseException ignored) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,103,} catch (ParseException ignored) {}
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,107,eturn iso8601Format.parse(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,105,"return ISO8601Utils.parse(json.getAsString(), new ParsePosition(0));"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,23,import com.google.gson.internal.bind.util.ISO8601Utils;
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,30,mport java.text.SimpleDateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,31,import java.text.ParsePosition;
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,33,mport java.util.TimeZone;
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,53,rivate final DateFormat iso8601Format = buildIso8601Format();
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,55,rivate static DateFormat buildIso8601Format() {
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,56,"ateFormat iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);"
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,57,"so8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,58,eturn iso8601Format;
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,79,eturn iso8601Format.parse(json);
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,72,"return ISO8601Utils.parse(json, new ParsePosition(0));"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,1,package com.google.gson.internal.bind.util;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,3,import java.text.ParseException;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,4,import java.text.ParsePosition;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,5,import java.util.*;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,8,* Utilities methods for manipulating dates in iso8601 format. This is much much faster and GC friendly than using SimpleDateFormat so
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,9,* highly suitable if you (un)serialize lots of date objects.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,11,* Supported parse format: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm]]
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,13,"* @see <a href=""http://www.w3.org/TR/NOTE-datetime"">this specification</a>"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,15,//Date parsing code from Jackson databind ISO8601Utils.java
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,16,// https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,17,public class ISO8601Utils
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,20,"* ID to represent the 'UTC' string, default timezone since Jackson 2.7"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,22,* @since 2.7
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,24,"private static final String UTC_ID = ""UTC"";"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,26,"* The UTC timezone, prefetched to avoid more lookups."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,28,* @since 2.7
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,30,private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,34,/* Formatting
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,39,"* Format a date into 'yyyy-MM-ddThh:mm:ssZ' (default timezone, no milliseconds precision)"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,41,* @param date the date to format
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,42,* @return the date formatted as 'yyyy-MM-ddThh:mm:ssZ'
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,44,public static String format(Date date) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,45,"return format(date, false, TIMEZONE_UTC);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,49,* Format a date into 'yyyy-MM-ddThh:mm:ss[.sss]Z' (GMT timezone)
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,51,* @param date the date to format
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,52,* @param millis true to include millis precision otherwise false
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,53,* @return the date formatted as 'yyyy-MM-ddThh:mm:ss[.sss]Z'
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,55,"public static String format(Date date, boolean millis) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,56,"return format(date, millis, TIMEZONE_UTC);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,60,* Format date into yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,62,* @param date the date to format
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,63,* @param millis true to include millis precision otherwise false
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,64,* @param tz timezone to use for the formatting (UTC will produce 'Z')
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,65,* @return the date formatted as yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,67,"public static String format(Date date, boolean millis, TimeZone tz) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,68,"Calendar calendar = new GregorianCalendar(tz, Locale.US);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,69,calendar.setTime(date);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,71,"// estimate capacity of buffer as close as we can (yeah, that's pedantic ;)"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,72,"int capacity = ""yyyy-MM-ddThh:mm:ss"".length();"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,73,"capacity += millis ? "".sss"".length() : 0;"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,74,"capacity += tz.getRawOffset() == 0 ? ""Z"".length() : ""+hh:mm"".length();"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,75,StringBuilder formatted = new StringBuilder(capacity);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,77,"padInt(formatted, calendar.get(Calendar.YEAR), ""yyyy"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,78,formatted.append('-');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,79,"padInt(formatted, calendar.get(Calendar.MONTH) + 1, ""MM"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,80,formatted.append('-');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,81,"padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), ""dd"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,82,formatted.append('T');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,83,"padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), ""hh"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,84,formatted.append(':');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,85,"padInt(formatted, calendar.get(Calendar.MINUTE), ""mm"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,86,formatted.append(':');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,87,"padInt(formatted, calendar.get(Calendar.SECOND), ""ss"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,88,if (millis) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,89,formatted.append('.');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,90,"padInt(formatted, calendar.get(Calendar.MILLISECOND), ""sss"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,93,int offset = tz.getOffset(calendar.getTimeInMillis());
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,94,if (offset != 0) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,95,int hours = Math.abs((offset / (60 * 1000)) / 60);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,96,int minutes = Math.abs((offset / (60 * 1000)) % 60);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,97,formatted.append(offset < 0 ? '-' : '+');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,98,"padInt(formatted, hours, ""hh"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,99,formatted.append(':');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,100,"padInt(formatted, minutes, ""mm"".length());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,101,} else {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,102,formatted.append('Z');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,105,return formatted.toString();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,110,/* Parsing
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,115,* Parse a date from ISO-8601 formatted string. It expects a format
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,116,* [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,118,* @param date ISO string to parse in the appropriate format.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,119,"* @param pos The position to start parsing from, updated to where parsing stopped."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,120,* @return the parsed date
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,121,* @throws ParseException if the date is not in the appropriate format
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,123,"public static Date parse(String date, ParsePosition pos) throws ParseException {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,124,Exception fail = null;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,125,try {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,126,int offset = pos.getIndex();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,128,// extract year
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,129,"int year = parseInt(date, offset, offset += 4);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,130,"if (checkOffset(date, offset, '-')) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,131,offset += 1;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,134,// extract month
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,135,"int month = parseInt(date, offset, offset += 2);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,136,"if (checkOffset(date, offset, '-')) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,137,offset += 1;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,140,// extract day
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,141,"int day = parseInt(date, offset, offset += 2);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,142,// default time value
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,143,int hour = 0;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,144,int minutes = 0;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,145,int seconds = 0;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,146,int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,148,"// if the value has no time component (and no time zone), we are done"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,149,"boolean hasT = checkOffset(date, offset, 'T');"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,151,if (!hasT && (date.length() <= offset)) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,152,"Calendar calendar = new GregorianCalendar(year, month - 1, day);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,154,pos.setIndex(offset);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,155,return calendar.getTime();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,158,if (hasT) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,160,"// extract hours, minutes, seconds and milliseconds"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,161,"hour = parseInt(date, offset += 1, offset += 2);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,162,"if (checkOffset(date, offset, ':')) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,163,offset += 1;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,166,"minutes = parseInt(date, offset, offset += 2);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,167,"if (checkOffset(date, offset, ':')) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,168,offset += 1;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,170,// second and milliseconds can be optional
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,171,if (date.length() > offset) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,172,char c = date.charAt(offset);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,173,if (c != 'Z' && c != '+' && c != '-') {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,174,"seconds = parseInt(date, offset, offset += 2);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,175,if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,176,// milliseconds can be optional in the format
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,177,"if (checkOffset(date, offset, '.')) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,178,offset += 1;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,179,"int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,180,"int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,181,"int fraction = parseInt(date, offset, parseEndOffset);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,182,"// compensate for ""missing"" digits"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,183,switch (parseEndOffset - offset) { // number of digits parsed
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,184,case 2:
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,185,milliseconds = fraction * 10;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,186,break;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,187,case 1:
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,188,milliseconds = fraction * 100;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,189,break;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,190,default:
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,191,milliseconds = fraction;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,193,offset = endOffset;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,199,// extract timezone
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,200,if (date.length() <= offset) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,201,"throw new IllegalArgumentException(""No time zone indicator"");"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,204,TimeZone timezone = null;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,205,char timezoneIndicator = date.charAt(offset);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,207,if (timezoneIndicator == 'Z') {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,208,timezone = TIMEZONE_UTC;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,209,offset += 1;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,210,} else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,211,String timezoneOffset = date.substring(offset);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,212,offset += timezoneOffset.length();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,213,"// 18-Jun-2015, tatu: Minor simplification, skip offset of ""+0000""/""+00:00"""
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,214,"if (""+0000"".equals(timezoneOffset) || ""+00:00"".equals(timezoneOffset)) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,215,timezone = TIMEZONE_UTC;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,216,} else {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,217,"// 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC..."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,218,"//    not sure why, but that's the way it looks. Further, Javadocs for"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,219,//    `java.util.TimeZone` specifically instruct use of GMT as base for
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,220,//    custom timezones... odd.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,221,"String timezoneId = ""GMT"" + timezoneOffset;"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,222,"//                    String timezoneId = ""UTC"" + timezoneOffset;"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,224,timezone = TimeZone.getTimeZone(timezoneId);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,226,String act = timezone.getID();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,227,if (!act.equals(timezoneId)) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,228,"/* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,229,"*    one without. If so, don't sweat."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,230,"*   Yes, very inefficient. Hopefully not hit often."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,231,"*   If it becomes a perf problem, add 'loose' comparison instead."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,233,"String cleaned = act.replace("":"", """");"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,234,if (!cleaned.equals(timezoneId)) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,235,"throw new IndexOutOfBoundsException(""Mismatching time zone indicator: ""+timezoneId+"" given, resolves to """
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,236,+timezone.getID());
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,240,} else {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,241,"throw new IndexOutOfBoundsException(""Invalid time zone indicator '"" + timezoneIndicator+""'"");"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,244,Calendar calendar = new GregorianCalendar(timezone);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,245,calendar.setLenient(false);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,246,"calendar.set(Calendar.YEAR, year);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,247,"calendar.set(Calendar.MONTH, month - 1);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,248,"calendar.set(Calendar.DAY_OF_MONTH, day);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,249,"calendar.set(Calendar.HOUR_OF_DAY, hour);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,250,"calendar.set(Calendar.MINUTE, minutes);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,251,"calendar.set(Calendar.SECOND, seconds);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,252,"calendar.set(Calendar.MILLISECOND, milliseconds);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,254,pos.setIndex(offset);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,255,return calendar.getTime();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,256,// If we get a ParseException it'll already have the right message/offset.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,257,// Other exception types can convert here.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,258,} catch (IndexOutOfBoundsException e) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,259,fail = e;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,260,} catch (NumberFormatException e) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,261,fail = e;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,262,} catch (IllegalArgumentException e) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,263,fail = e;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,265,"String input = (date == null) ? null : ('""' + date + ""'"");"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,266,String msg = fail.getMessage();
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,267,if (msg == null || msg.isEmpty()) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,268,"msg = ""(""+fail.getClass().getName()+"")"";"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,270,"ParseException ex = new ParseException(""Failed to parse date ["" + input + ""]: "" + msg, pos.getIndex());"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,271,ex.initCause(fail);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,272,throw ex;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,276,* Check if the expected character exist at the given offset in the value.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,278,* @param value the string to check at the specified offset
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,279,* @param offset the offset to look for the expected character
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,280,* @param expected the expected character
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,281,* @return true if the expected character exist at the given offset
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,283,"private static boolean checkOffset(String value, int offset, char expected) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,284,return (offset < value.length()) && (value.charAt(offset) == expected);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,288,* Parse an integer located between 2 given offsets in a string
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,290,* @param value the string to parse
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,291,* @param beginIndex the start index for the integer in the string
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,292,* @param endIndex the end index for the integer in the string
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,293,* @return the int
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,294,* @throws NumberFormatException if the value is not a number
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,296,"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,297,if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,298,throw new NumberFormatException(value);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,300,// use same logic as in Integer.parseInt() but less generic we're not supporting negative values
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,301,int i = beginIndex;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,302,int result = 0;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,303,int digit;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,304,if (i < endIndex) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,305,"digit = Character.digit(value.charAt(i++), 10);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,306,if (digit < 0) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,307,"throw new NumberFormatException(""Invalid number: "" + value.substring(beginIndex, endIndex));"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,309,result = -digit;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,311,while (i < endIndex) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,312,"digit = Character.digit(value.charAt(i++), 10);"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,313,if (digit < 0) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,314,"throw new NumberFormatException(""Invalid number: "" + value.substring(beginIndex, endIndex));"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,316,result *= 10;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,317,result -= digit;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,319,return -result;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,323,* Zero pad a number to a specified length
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,325,* @param buffer buffer to use for padding
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,326,* @param value the integer value to pad if necessary.
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,327,* @param length the length of the string we should zero pad
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,329,"private static void padInt(StringBuilder buffer, int value, int length) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,330,String strValue = Integer.toString(value);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,331,for (int i = length - strValue.length(); i > 0; i--) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,332,buffer.append('0');
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,334,buffer.append(strValue);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,338,"* Returns the index of the first character in the string that is not a digit, starting at offset."
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,340,"private static int indexOfNonDigit(String string, int offset) {"
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,341,for (int i = offset; i < string.length(); i++) {
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,342,char c = string.charAt(i);
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,343,if (c < '0' || c > '9') return i;
True,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java,345,return string.length();
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,127,public void testDateDeserializationISO8601() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,128,DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,129,"assertParsed(""1970-01-01T00:00:00.000Z"", adapter);"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,130,"assertParsed(""1970-01-01T00:00Z"", adapter);"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,131,"assertParsed(""1970-01-01T00:00:00+00:00"", adapter);"
True,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,132,"assertParsed(""1970-01-01T01:00:00+01:00"", adapter);"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,83,/ The class definition has the actual types used for the type variables.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,84,/ Find the matching actual type for the Type Variable used for the field.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,85,"/ For example, class Foo<A> { A a; }"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,86,/ new Foo<Integer>(); defines the actual type of A to be Integer.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,87,"/ So, to find the type of the field a, we will have to look at the class'"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,88,/ actual type arguments.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,89,ypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,90,ypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,91,arameterizedType objParameterizedType = (ParameterizedType) parentType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,92,"nt indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,93,ype[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,94,eturn actualTypeArguments[indexOfActualTypeArgument];
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,83,if (parentType instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,84,// The class definition has the actual types used for the type variables.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,85,// Find the matching actual type for the Type Variable used for the field.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,86,"// For example, class Foo<A> { A a; }"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,87,// new Foo<Integer>(); defines the actual type of A to be Integer.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,88,"// So, to find the type of the field a, we will have to look at the class'"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,89,// actual type arguments.
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,90,TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,91,TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,92,ParameterizedType objParameterizedType = (ParameterizedType) parentType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,93,"int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,94,Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,95,return actualTypeArguments[indexOfActualTypeArgument];
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,96,} else {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,97,"throw new UnsupportedOperationException(""Expecting parameterized type, got "" + parentType"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,98,"+ "".\n Are you missing the use of TypeToken idiom?\n See """
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,99,"+ ""http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"");"

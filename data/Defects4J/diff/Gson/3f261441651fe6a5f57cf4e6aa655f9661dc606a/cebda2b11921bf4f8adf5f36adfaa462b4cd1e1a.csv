is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,33,import com.google.gson.internal.bind.SqlDateTypeAdapter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,262,factory(TypeAdapters.SQL_DATE_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,factory(TypeAdapters.SQL_TIMESTAMP_FACTORY)
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,.factory(SqlDateTypeAdapter.FACTORY)
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,264,.factory(TypeAdapters.TIMESTAMP_FACTORY)
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,32," Adapter for Time. Although this class appears stateless, it is not."
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,32,"* Adapter for Date. Although this class appears stateless, it is not."
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,19,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,21,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,22,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,23,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,24,import java.text.DateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,25,import java.text.ParseException;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,26,import java.text.SimpleDateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,29,"* Adapter for java.sql.Date. Although this class appears stateless, it is not."
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,30,"* DateFormat captures its time zone and locale when it is created, which gives"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,31,"* this class state. DateFormat isn't thread safe either, so this class has"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,32,* to synchronize its read and write methods.
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,34,public final class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,35,public static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,36,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,37,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,38,return typeToken.getRawType() == java.sql.Date.class
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,39,? (TypeAdapter<T>) new SqlDateTypeAdapter() : null;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,43,"private final DateFormat format = new SimpleDateFormat(""MMM d, yyyy"");"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,45,@Override
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,46,public synchronized java.sql.Date read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,47,try {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,48,final long utilDate = format.parse(reader.nextString()).getTime();
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,49,return new java.sql.Date(utilDate);
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,50,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,51,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,55,@Override
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,56,"public synchronized void write(JsonWriter writer, java.sql.Date value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,57,writer.value(format.format(value));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,32,mport java.text.DateFormat;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,33,mport java.text.ParseException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,34,mport java.text.SimpleDateFormat;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,56,oolean set = false;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,53,boolean set;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,414,rivate static final class TimestampTypeAdapter extends TypeAdapter<Timestamp> {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,415,rivate final MiniGson context;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,416,ublic TimestampTypeAdapter(MiniGson context) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,417,his.context = context;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,419,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,420,ublic Timestamp read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,421,ypeAdapter<Date> dateTypeAdapter = context.getAdapter(Date.class);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,422,ate date = dateTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,423,eturn new java.sql.Timestamp(date.getTime());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,425,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,426,"ublic void write(JsonWriter writer, Timestamp value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,427,ypeAdapter<Date> dateTypeAdapter = context.getAdapter(Date.class);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,428,"ateTypeAdapter.write(writer, value);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,431,ublic static final TypeAdapter.Factory SQL_TIMESTAMP_FACTORY = new TypeAdapter.Factory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,432,"SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,411,public static final TypeAdapter.Factory TIMESTAMP_FACTORY = new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,412,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,434,eturn typeToken.getRawType() == Timestamp.class
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,435, (TypeAdapter<T>) new TimestampTypeAdapter(context) : null;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,414,if (typeToken.getRawType() != Timestamp.class) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,415,return null;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,439,ublic static final TypeAdapter<java.sql.Date> SQL_DATE = new TypeAdapter<java.sql.Date>() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,440,"rivate final DateFormat format = new SimpleDateFormat(""MMM d, yyyy"");"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,441,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,442,ublic java.sql.Date read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,443,ry {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,444,ynchronized (format) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,445,ate date = format.parse(reader.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,446,eturn new java.sql.Date(date.getTime());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,418,final TypeAdapter<Date> dateTypeAdapter = context.getAdapter(Date.class);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,419,return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,420,@Override public Timestamp read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,421,Date date = dateTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,422,return new Timestamp(date.getTime());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,448, catch (ParseException e) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,449,hrow new JsonSyntaxException(e);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,452,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,453,"ublic void write(JsonWriter writer, java.sql.Date value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,454,riter.value(format.format(value));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,425,"@Override public void write(JsonWriter writer, Timestamp value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,426,"dateTypeAdapter.write(writer, value);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,458,"ublic static final TypeAdapter.Factory SQL_DATE_FACTORY = newFactory(java.sql.Date.class, SQL_DATE);"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,23,mport com.google.gson.internal.TypeMap;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,100,"SuppressWarnings(""rawtypes"")"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,101,tatic final TypeMap EMPTY_MAP = new TypeMap().makeUnmodifiable();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,124,** Map containing Type or Class objects as keys */
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,125,rivate final TypeMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,127,** Map containing Type or Class objects as keys */
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,128,rivate final TypeMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,187,"MPTY_MAP, false, EMPTY_MAP, EMPTY_MAP, false, DEFAULT_JSON_NON_EXECUTABLE, true,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"alse, false, LongSerializationPolicy.DEFAULT,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,177,"Collections.<Type, InstanceCreator<?>>emptyMap(), false, false, DEFAULT_JSON_NON_EXECUTABLE,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,178,"true, false, false, LongSerializationPolicy.DEFAULT,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,193,"inal TypeMap<InstanceCreator<?>> instanceCreators, boolean serializeNulls,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,194,"inal TypeMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,195,"inal TypeMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,183,"final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,202,his.serializers = serializers;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,203,his.deserializers = deserializers;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,238,"actories.add(new TreeTypeAdapter.TypeHierarchyFactory(serializers, deserializers));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,855,"append("",serializers:"").append(serializers)"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,856,"append("",deserializers:"").append(deserializers)"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,840,".append(""factories:"").append(factories)"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,22,mport com.google.gson.internal.TypeMap;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,29,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,31,import java.util.Map;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,68,rivate LongSerializationPolicy longSerializationPolicy;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,69,rivate FieldNamingStrategy fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,70,rivate final TypeMap<InstanceCreator<?>> instanceCreators;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,71,rivate final TypeMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,72,rivate final TypeMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,73,rivate final List<TypeAdapter.Factory> typeAdapterFactories
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,68,private LongSerializationPolicy longSerializationPolicy = LongSerializationPolicy.DEFAULT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,69,private FieldNamingStrategy fieldNamingPolicy = FieldNamingPolicy.IDENTITY;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,70,"private final Map<Type, InstanceCreator<?>> instanceCreators"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,71,"= new HashMap<Type, InstanceCreator<?>>();"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,72,private final List<TypeAdapter.Factory> factories
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,73,= new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,74,/** tree-style hierarchy factories. These come after factories for backwards compatibility. */
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,75,private final List<TypeAdapter.Factory> hierarchyFactories
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,77,rivate int dateStyle;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,78,rivate int timeStyle;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,79,rivate boolean complexMapKeySerialization = false;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,79,private int dateStyle = DateFormat.DEFAULT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,80,private int timeStyle = DateFormat.DEFAULT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,81,private boolean complexMapKeySerialization;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,81,rivate boolean escapeHtmlChars;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,83,private boolean escapeHtmlChars = true;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,92,/ setup default values
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,93,rettyPrinting = false;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,94,scapeHtmlChars = true;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,95,ongSerializationPolicy = LongSerializationPolicy.DEFAULT;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,96,ieldNamingPolicy = FieldNamingPolicy.IDENTITY;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,97,nstanceCreators = new TypeMap<InstanceCreator<?>>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,98,erializers = new TypeMap<JsonSerializer<?>>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,99,eserializers = new TypeMap<JsonDeserializer<?>>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,100,erializeNulls = false;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,101,ateStyle = DateFormat.DEFAULT;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,102,imeStyle = DateFormat.DEFAULT;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,103,erializeSpecialFloatingPointValues = false;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,104,enerateNonExecutableJson = false;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,109,ypeAdapterFactories.add(factory);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,98,factories.add(factory);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,475,"ypeAdapterFactories.add(new TreeTypeAdapter.SingleTypeFactory(typeToken, typeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,464,"factories.add(TreeTypeAdapter.newFactory(typeToken, typeAdapter));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,485,"ypeAdapterFactories.add(TypeAdapters.newFactory(type, typeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,474,"factories.add(TypeAdapters.newFactory(type, typeAdapter));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,502,"nstanceCreators.register(typeOfT, instanceCreator);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,491,"instanceCreators.put(typeOfT, instanceCreator);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,526,| typeAdapter instanceof JsonDeserializer<?> || typeAdapter instanceof InstanceCreator<?>
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,515,|| typeAdapter instanceof JsonDeserializer<?>
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,528,f (typeAdapter instanceof InstanceCreator<?>) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,529,"egisterInstanceCreatorForTypeHierarchy(baseType, (InstanceCreator<?>) typeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,531,f (typeAdapter instanceof JsonSerializer<?>) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,532,"egisterSerializerForTypeHierarchy(baseType, (JsonSerializer<?>) typeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,534,f (typeAdapter instanceof JsonDeserializer<?>) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,535,"egisterDeserializerForTypeHierarchy(baseType, (JsonDeserializer<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,517,if (typeAdapter instanceof JsonDeserializer || typeAdapter instanceof JsonSerializer) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,518,"hierarchyFactories.add(0,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,519,"TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,545,"ypeAdapterFactories.add(TypeAdapters.newTypeHierarchyFactory(type, typeAdapter));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,546,eturn this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,549,"rivate <T> GsonBuilder registerInstanceCreatorForTypeHierarchy(Class<?> classOfT,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,550,nstanceCreator<? extends T> instanceCreator) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,551,"nstanceCreators.registerForTypeHierarchy(classOfT, instanceCreator);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,552,eturn this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,555,"rivate <T> GsonBuilder registerSerializerForTypeHierarchy(Class<?> classOfT,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,556,sonSerializer<T> serializer) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,557,"erializers.registerForTypeHierarchy(classOfT, serializer);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,558,eturn this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,561,"rivate <T> GsonBuilder registerDeserializerForTypeHierarchy(Class<?> classOfT,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,562,sonDeserializer<T> deserializer) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,563,"eserializers.registerForTypeHierarchy(classOfT,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,564,ew JsonDeserializerExceptionWrapper<T>(deserializer));
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,529,"factories.add(TypeAdapters.newTypeHierarchyFactory(type, typeAdapter));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,600,"ddTypeAdaptersForDate(datePattern, dateStyle, timeStyle, serializers, deserializers);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,565,List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,566,factories.addAll(this.factories);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,567,factories.addAll(this.hierarchyFactories);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,568,"addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, factories);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,602,"eturn new Gson(excluder, fieldNamingPolicy, instanceCreators.copyOf().makeUnmodifiable(),"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,603,"erializeNulls, serializers.copyOf().makeUnmodifiable(),"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,604,"eserializers.copyOf().makeUnmodifiable(), complexMapKeySerialization,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,570,"return new Gson(excluder, fieldNamingPolicy, instanceCreators,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,571,"serializeNulls, complexMapKeySerialization,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,606,"erializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,573,"serializeSpecialFloatingPointValues, longSerializationPolicy, factories);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,609,"rivate static void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,610,"ypeMap<JsonSerializer<?>> serializers, TypeMap<JsonDeserializer<?>> deserializers) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,611,efaultDateTypeAdapter dateTypeAdapter = null;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,576,"private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,577,List<TypeAdapter.Factory> factories) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,578,DefaultDateTypeAdapter dateTypeAdapter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,583,} else {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,584,return;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,618,f (dateTypeAdapter != null) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,619,"egisterIfAbsent(Date.class, serializers, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,620,"egisterIfAbsent(Date.class, deserializers, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,621,"egisterIfAbsent(Timestamp.class, serializers, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,622,"egisterIfAbsent(Timestamp.class, deserializers, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,623,"egisterIfAbsent(java.sql.Date.class, serializers, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,624,"egisterIfAbsent(java.sql.Date.class, deserializers, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,628,"rivate static <T> void registerIfAbsent(Class<?> type, TypeMap<T> adapters, T adapter) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,629,f (!adapters.hasSpecificHandlerFor(type)) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,630,"dapters.register(type, adapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,587,"factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Date.class), dateTypeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,588,"factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Timestamp.class), dateTypeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,589,"factories.add(TreeTypeAdapter.newFactory(TypeToken.get(java.sql.Date.class), dateTypeAdapter));"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,19,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,21,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,24, Decorators a {@code JsonDeserializer} instance with exception handling.  This wrapper class
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,25, ensures that a {@code JsonDeserializer} will not propagate any exception other than a
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,26, {@link JsonParseException}.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,28, @param <T> type of the deserializer being wrapped.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,30, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,31, @author Joel Leitch
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,33,inal class JsonDeserializerExceptionWrapper<T> implements JsonDeserializer<T> {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,34,rivate final JsonDeserializer<T> delegate;
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,37, Returns a wrapped {@link JsonDeserializer} object that has been decorated with
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,38, {@link JsonParseException} handling.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,40, @param delegate the {@code JsonDeserializer} instance to be wrapped.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,41, @throws IllegalArgumentException if {@code delegate} is {@code null}.
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,43,sonDeserializerExceptionWrapper(JsonDeserializer<T> delegate) {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,44,his.delegate = $Gson$Preconditions.checkNotNull(delegate);
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,47,"ublic T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,48,hrows JsonParseException {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,49,ry {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,50,"eturn delegate.deserialize(json, typeOfT, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,51, catch (JsonParseException e) {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,52,/ just rethrow the exception
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,53,hrow e;
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,54, catch (Exception e) {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,55,/ rethrow as a JsonParseException
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,56,tringBuilder errorMsg = new StringBuilder()
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,57,"append(""The JsonDeserializer "")"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,58,append(delegate)
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,59,"append("" failed to deserialize json object "")"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,60,append(json)
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,61,"append("" given the type "")"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,62,append(typeOfT);
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,63,"hrow new JsonParseException(errorMsg.toString(), e);"
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,67,Override
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,68,ublic String toString() {
False,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java,69,eturn delegate.toString();
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,21,mport com.google.gson.internal.TypeMap;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,26,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,83,ublic static class SingleTypeFactory implements TypeAdapter.Factory {
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,84,rivate final TypeToken<?> typeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,81,"public static Factory newFactory(TypeToken<?> exactType, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,82,"return new SingleTypeFactory(typeAdapter, exactType, null);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,85,"public static Factory newTypeHierarchyFactory(Class<?> hierarchyType, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,86,"return new SingleTypeFactory(typeAdapter, null, hierarchyType);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,89,private static class SingleTypeFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,90,private final TypeToken<?> exactType;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,91,private final Class<?> hierarchyType;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,88,"ublic SingleTypeFactory(TypeToken<?> typeToken, Object typeAdapter) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,89,his.typeToken = typeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,95,"private SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, Class<?> hierarchyType) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,103,this.exactType = exactType;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,104,this.hierarchyType = hierarchyType;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,101,eturn typeToken.equals(type)
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,109,boolean matches = exactType != null
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,110,? exactType.equals(type)
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,111,: hierarchyType.isAssignableFrom(type.getRawType());
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,112,return matches
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,108,ublic static class TypeHierarchyFactory implements TypeAdapter.Factory {
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,109,rivate final TypeMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,110,rivate final TypeMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,112,"ublic TypeHierarchyFactory(TypeMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,113,ypeMap<JsonDeserializer<?>> deserializers) {
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,114,his.serializers = serializers;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,115,his.deserializers = deserializers;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,118,"SuppressWarnings(""unchecked"") // guaranteed by serializers lookup matching type"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,119,"ublic <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,120,ype type = typeToken.getType();
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,121,sonSerializer<T> serializer = (JsonSerializer<T>) serializers.getHandlerFor(type);
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,122,sonDeserializer<T> deserializer = (JsonDeserializer<T>) deserializers.getHandlerFor(type);
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,123,eturn (serializer != null || deserializer != null)
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,124," new TreeTypeAdapter<T>(serializer, deserializer, context, typeToken, this)"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,125, null;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,26,import java.util.Collections;
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,39,rivate final TypeMap<InstanceCreator<?>> instanceCreators;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,40,"private final Map<Type, InstanceCreator<?>> instanceCreators;"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,41,ublic ConstructorConstructor(TypeMap<InstanceCreator<?>> instanceCreators) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,42,"public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,46,his(new TypeMap<InstanceCreator<?>>());
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,47,"this(Collections.<Type, InstanceCreator<?>>emptyMap());"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,56,inal InstanceCreator<T> creator
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,57, (InstanceCreator<T>) instanceCreators.getHandlerFor(type);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,57,final InstanceCreator<T> creator = (InstanceCreator<T>) instanceCreators.get(type);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,17,ackage com.google.gson.internal;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,20,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,21,mport java.util.HashMap;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,22,mport java.util.List;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,23,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,24,mport java.util.logging.Level;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,25,mport java.util.logging.Logger;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,28, A map that provides ability to associate handlers for a specific type or all
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,29, of its sub-types
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,31, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,32, @author Joel Leitch
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,34, @param <T> The handler that will be looked up by type
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,36,ublic final class TypeMap<T> {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,37,rivate static final Logger logger = Logger.getLogger(TypeMap.class.getName());
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,39,** Map that is meant for storing default type adapters */
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,40,"rivate final Map<Type, T> typeMap = new HashMap<Type, T>();"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,42,** List of default type hierarchy adapters */
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,43,"rivate final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,44,rivate boolean modifiable = true;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,46,"ublic synchronized void registerForTypeHierarchy(Class<?> typeOfT, T value) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,47,"air<Class<?>, T> pair = new Pair<Class<?>, T>(typeOfT, value);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,48,egisterForTypeHierarchy(pair);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,51,"ublic synchronized void registerForTypeHierarchy(Pair<Class<?>, T> pair) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,52,f (!modifiable) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,53,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,55,"nt index = getIndexOfSpecificHandlerForTypeHierarchy(pair.first, typeHierarchyList);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,56,f (index != -1) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,57,"ogger.log(Level.WARNING, ""Overriding the existing type handler for {0}"", pair.first);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,58,ypeHierarchyList.remove(index);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,60,"ndex = getIndexOfAnOverriddenHandler(pair.first, typeHierarchyList);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,61,f (index != -1) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,62,"hrow new IllegalArgumentException(""The specified type handler for type "" + pair.first"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,63," "" hides the previously registered type hierarchy handler for """
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,64," typeHierarchyList.get(index).first + "". Gson does not allow this."");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,66,/ We want stack behavior for adding to this list. A type adapter added subsequently should
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,67,/ override a previously registered one.
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,68,"ypeHierarchyList.add(0, pair);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,71,"rivate static <T> int getIndexOfAnOverriddenHandler(Class<?> type, List<Pair<Class<?>, T>> typeHierarchyList) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,72,or (int i = typeHierarchyList.size()-1; i >= 0; --i) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,73,"air<Class<?>, T> entry = typeHierarchyList.get(i);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,74,f (type.isAssignableFrom(entry.first)) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,75,eturn i;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,78,eturn -1;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,81,"ublic synchronized void register(Type typeOfT, T value) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,82,f (!modifiable) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,83,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,85,"ypeMap.put(typeOfT, value);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,88,ublic synchronized TypeMap<T> makeUnmodifiable() {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,89,odifiable = false;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,90,eturn this;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,93,ublic synchronized T getHandlerFor(Type type) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,94, handler = typeMap.get(type);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,95,f (handler != null) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,96,eturn handler;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,98,lass<?> rawClass = $Gson$Types.getRawType(type);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,99,f (rawClass != type) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,100,andler = getHandlerFor(rawClass);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,101,f (handler != null) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,102,eturn handler;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,105,/ check if something registered for type hierarchy
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,106,eturn getHandlerForTypeHierarchy(rawClass);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,109,rivate T getHandlerForTypeHierarchy(Class<?> type) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,110,"or (Pair<Class<?>, T> entry : typeHierarchyList) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,111,f (entry.first.isAssignableFrom(type)) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,112,eturn entry.second;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,115,eturn null;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,118,ublic synchronized boolean hasSpecificHandlerFor(Type type) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,119,eturn typeMap.containsKey(type);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,122,rivate static <T> int getIndexOfSpecificHandlerForTypeHierarchy(
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,123,"lass<?> type, List<Pair<Class<?>, T>> typeHierarchyList) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,124,or (int i = typeHierarchyList.size()-1; i >= 0; --i) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,125,f (type.equals(typeHierarchyList.get(i).first)) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,126,eturn i;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,129,eturn -1;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,132,ublic synchronized TypeMap<T> copyOf() {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,133,ypeMap<T> copy = new TypeMap<T>();
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,134,"/ Instead of individually registering entries in the map, make an efficient copy"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,135,/ of the list and map
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,136,opy.typeMap.putAll(typeMap);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,137,opy.typeHierarchyList.addAll(typeHierarchyList);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,138,eturn copy;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,141,Override
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,142,ublic String toString() {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,143,"tringBuilder sb = new StringBuilder(""{typeHierarchyList:{"");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,144,"ppendList(sb, typeHierarchyList);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,145,"b.append(""},typeMap:{"");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,146,"ppendMap(sb, typeMap);"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,147,"b.append(""}"");"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,148,eturn sb.toString();
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,151,"rivate void appendList(StringBuilder sb, List<Pair<Class<?>,T>> list) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,152,oolean first = true;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,153,"or (Pair<Class<?>, T> entry : list) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,154,f (first) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,155,irst = false;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,156, else {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,157,"b.append(',');"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,159,b.append(typeToString(entry.first)).append(':');
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,160,b.append(entry.second);
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,164,"rivate void appendMap(StringBuilder sb, Map<Type, T> map) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,165,oolean first = true;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,166,"or (Map.Entry<Type, T> entry : map.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,167,f (first) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,168,irst = false;
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,169, else {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,170,"b.append(',');"
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,172,b.append(typeToString(entry.getKey())).append(':');
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,173,b.append(entry.getValue());
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,177,rivate String typeToString(Type type) {
False,gson/src/main/java/com/google/gson/internal/TypeMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,178,eturn $Gson$Types.getRawType(type).getSimpleName();
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,19,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,21,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,22,mport java.text.DateFormat;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,23,mport java.util.Date;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,26, Simple unit tests for the {@link JsonDeserializerExceptionWrapper} class.
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,28, @author Inderjeet Singh
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,29, @author Joel Leitch
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,31,ublic class JsonDeserializerExceptionWrapperTest extends TestCase {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,33,rivate static final String DATE_STRING =
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,34,ateFormat.getDateInstance(DateFormat.LONG).format(new Date());
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,35,rivate static final JsonPrimitive PRIMITIVE_ELEMENT = new JsonPrimitive(DATE_STRING);
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,37,ublic void testRethrowJsonParseException() throws Exception {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,38,"tring errorMsg = ""please rethrow me"";"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,39,sonDeserializerExceptionWrapper<String> wrappedJsonSerializer =
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,40,ew JsonDeserializerExceptionWrapper<String>(
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,41,ew ExceptionJsonDeserializer(new JsonParseException(errorMsg)));
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,43,ry {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,44,"rappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null);"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,45,"ail(""JsonParseException should have been thrown"");"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,46, catch (JsonParseException expected) {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,47,ssertNull(expected.getCause());
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,48,"ssertEquals(errorMsg, expected.getMessage());"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,52,ublic void testWrappedExceptionPropagation() throws Exception {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,53,llegalArgumentException exceptionToThrow = new IllegalArgumentException();
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,54,sonDeserializerExceptionWrapper<String> wrappedJsonSerializer =
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,55,ew JsonDeserializerExceptionWrapper<String>(
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,56,ew ExceptionJsonDeserializer(exceptionToThrow));
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,58,ry {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,59,"rappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null);"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,60,"ail(""JsonParseException should have been thrown"");"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,61, catch (JsonParseException expected) {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,62,"ssertEquals(exceptionToThrow, expected.getCause());"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,66,ublic void testProperSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,67,efaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG);
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,68,sonDeserializerExceptionWrapper<Date> wrappedJsonSerializer =
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,69,ew JsonDeserializerExceptionWrapper<Date>(dateSerializer);
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,71,"ate expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null);"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,72,"ate actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null);"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,73,"ssertEquals(expected, actual);"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,76,rivate static class ExceptionJsonDeserializer implements JsonDeserializer<String> {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,77,rivate final RuntimeException exceptionToThrow;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,79,ublic ExceptionJsonDeserializer(RuntimeException exceptionToThrow) {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,80,his.exceptionToThrow = exceptionToThrow;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,83,"ublic String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,84,hrows JsonParseException {
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,85,hrow exceptionToThrow;
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,85,public void testNonstreamingHierarchicalFollowedByNonstreaming() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,86,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,87,".registerTypeHierarchyAdapter(Foo.class, newSerializer(""hierarchical""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,88,".registerTypeHierarchyAdapter(Foo.class, newDeserializer(""hierarchical""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,89,".registerTypeAdapter(Foo.class, newSerializer(""non hierarchical""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,90,".registerTypeAdapter(Foo.class, newDeserializer(""non hierarchical""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,91,.create();
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,92,"assertEquals(""\""foo via non hierarchical\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,93,"assertEquals(""foo via non hierarchical"", gson.fromJson(""foo"", Foo.class).name);"
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,134,ublic void testRegisterSubTypeFirstNotAllowed() {
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,135,ry {
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,136,ew GsonBuilder()
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,137,"registerTypeHierarchyAdapter(Manager.class, new ManagerAdapter())"
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,138,"registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())"
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,139,create();
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,140,ail();
False,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,141, catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,134,/** This behaviour changed in Gson 2.1; it used to throw. */
True,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,135,public void testRegisterSubTypeFirstAllowed() {
True,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,136,new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,137,".registerTypeHierarchyAdapter(Manager.class, new ManagerAdapter())"
True,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,138,".registerTypeHierarchyAdapter(Employee.class, new EmployeeAdapter())"
True,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java,139,.create();
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,17,ackage com.google.gson.internal;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,19,mport com.google.gson.common.TestTypes.Base;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,20,mport com.google.gson.common.TestTypes.Sub;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,21,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,22,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,23,mport java.util.List;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,24,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,27, Unit tests for the {@link TypeMap} class.
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,29, @author Joel Leitch
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,31,ublic class TypeMapTest extends TestCase {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,32,rivate TypeMap<String> paramMap;
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,34,Override
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,35,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,36,uper.setUp();
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,37,aramMap = new TypeMap<String>();
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,40,ublic void testNullMap() throws Exception {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,41,ssertFalse(paramMap.hasSpecificHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,42,ssertNull(paramMap.getHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,43,ssertNull(paramMap.getHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,46,ublic void testHasGenericButNotSpecific() throws Exception {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,47,ype specificType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,48,"tring handler = ""blah"";"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,49,"aramMap.register(List.class, handler);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,51,ssertFalse(paramMap.hasSpecificHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,52,ssertTrue(paramMap.hasSpecificHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,53,ssertNotNull(paramMap.getHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,54,ssertNotNull(paramMap.getHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,55,"ssertEquals(handler, paramMap.getHandlerFor(specificType));"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,58,ublic void testHasSpecificType() throws Exception {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,59,ype specificType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,60,"tring handler = ""blah"";"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,61,"aramMap.register(specificType, handler);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,63,ssertTrue(paramMap.hasSpecificHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,64,ssertFalse(paramMap.hasSpecificHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,65,ssertNotNull(paramMap.getHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,66,ssertNull(paramMap.getHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,67,"ssertEquals(handler, paramMap.getHandlerFor(specificType));"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,70,ublic void testTypeOverridding() throws Exception {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,71,"tring handler1 = ""blah1"";"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,72,"tring handler2 = ""blah2"";"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,73,"aramMap.register(String.class, handler1);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,74,"aramMap.register(String.class, handler2);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,76,ssertTrue(paramMap.hasSpecificHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,77,"ssertEquals(handler2, paramMap.getHandlerFor(String.class));"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,80,ublic void testMakeUnmodifiable() throws Exception {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,81,aramMap.makeUnmodifiable();
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,82,ry {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,83,"aramMap.register(String.class, ""blah"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,84,"ail(""Can not register handlers when map is unmodifiable"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,85, catch (IllegalStateException expected) { }
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,88,ublic void testTypeHierarchy() {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,89,"aramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,90,tring handler = paramMap.getHandlerFor(Sub.class);
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,91,"ssertEquals(""baseHandler"", handler);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,94,ublic void testTypeHierarchyMultipleHandlers() {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,95,"aramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,96,"aramMap.registerForTypeHierarchy(Sub.class, ""subHandler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,97,tring handler = paramMap.getHandlerFor(SubOfSub.class);
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,98,"ssertEquals(""subHandler"", handler);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,101,ublic void testReplaceExistingTypeHierarchyHandler() {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,102,"aramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,103,"aramMap.registerForTypeHierarchy(Base.class, ""base2Handler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,104,tring handler = paramMap.getHandlerFor(Base.class);
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,105,"ssertEquals(""base2Handler"", handler);"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,108,ublic void testHidingExistingTypeHierarchyHandlerIsDisallowed() {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,109,"aramMap.registerForTypeHierarchy(Sub.class, ""subHandler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,110,ry {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,111,"aramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,112,"ail(""A handler that hides an existing type hierarchy handler is not allowed"");"
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,113, catch (IllegalArgumentException expected) {
False,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,116,rivate static class SubOfSub extends Sub {

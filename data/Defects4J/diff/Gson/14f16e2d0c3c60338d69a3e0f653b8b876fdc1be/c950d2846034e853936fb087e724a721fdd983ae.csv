is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,19,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,20,mport com.google.gson.internal.StringMap;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,19,import com.google.gson.internal.LinkedTreeMap;
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,33,/ We are using a linked hash map because it is important to preserve
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,34,/ the order in which elements are inserted. This is needed to ensure
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,35,/ that the fields of an object are inserted in the order they were
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,36,/ defined in the class.
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,37,rivate final StringMap<JsonElement> members = new StringMap<JsonElement>();
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,40, Creates an empty JsonObject.
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,42,ublic JsonObject() {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,33,"private final LinkedTreeMap<String, JsonElement> members ="
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,34,"new LinkedTreeMap<String, JsonElement>();"
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,66,"embers.put($Gson$Preconditions.checkNotNull(property), value);"
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,57,"members.put(property, value);"
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,161,f (members.containsKey(memberName)) {
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,162,sonElement member = members.get(memberName);
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,163,eturn member == null ? JsonNull.INSTANCE : member;
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,165,eturn null;
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,152,return members.get(memberName);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,35,import java.util.SortedMap;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,37,import java.util.TreeMap;
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,147,f (type instanceof ParameterizedType
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,148,& ((ParameterizedType) type).getActualTypeArguments()[0] == String.class) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,150,if (SortedMap.class.isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,151,eturn (T) new StringMap<Object>();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,153,"return (T) new TreeMap<Object, Object>();"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,154, else {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,156,} else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,157,TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,163,} else {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,164,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,165,public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,166,"return (T) new LinkedTreeMap<String, Object>();"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,161,/ TODO: SortedMap ?
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,2,* Copyright (C) 2012 Google Inc.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,17,package com.google.gson.internal;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,19,import java.io.ObjectStreamException;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,20,import java.io.Serializable;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,21,import java.util.AbstractMap;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,22,import java.util.AbstractSet;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,23,import java.util.Iterator;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,24,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,25,import java.util.Map;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,26,import java.util.Set;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,29,* A map with a {@code Comparable} key that is implemented as a red-black tree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,31,"* <p>A red-black tree offers quicker insert operations than AVL trees; however, slower ""find"""
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,32,* operations.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,34,* <p>This implementation was derived from the JDK's TreeMap class.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,36,"public class LinkedTreeMap<K extends Comparable<K>, V>"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,37,"extends AbstractMap<K, V> implements Serializable {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,38,private static final boolean BLACK = false;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,39,private static final boolean RED = true;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,41,// Size stored as a field for optimization instead of recursing tree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,42,private int size = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,44,"private TreeNode<K, V> root;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,46,// Store the head and tail to preserve the ordering of nodes inserted into tree
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,47,"private TreeNode<K, V> head;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,48,"private TreeNode<K, V> tail;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,50,"public Set<Map.Entry<K, V>> entrySet() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,51,return new EntrySet();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,54,public boolean containsKey(K key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,55,return (find(key) != null);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,58,public V get(K key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,59,"TreeNode<K, V> entry = find(key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,60,return (entry == null) ? null : entry.getValue();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,63,"public V put(K key, V value) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,64,$Gson$Preconditions.checkNotNull(key);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,65,if (root == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,66,"root = new TreeNode<K, V>(null, null, key, value);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,67,head = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,68,tail = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,69,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,70,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,71,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,72,"return findAndUpdateOrCreateNode(key, value);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,76,"private V findAndUpdateOrCreateNode(K key, V value) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,77,"TreeNode<K, V> parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,78,int lastCompare;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,80,"TreeNode<K, V> entry = root;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,81,do {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,82,parent = entry;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,83,lastCompare = key.compareTo(entry.key);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,84,if (lastCompare < 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,85,entry = entry.left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,86,} else if (lastCompare > 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,87,entry = entry.right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,88,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,89,V rval = entry.getValue();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,90,entry.setValue(value);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,91,return rval;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,93,} while (entry != null);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,95,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,97,// Create a new node and set up the tree edges
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,98,"TreeNode<K, V> newEntry = new TreeNode<K, V>(parent, tail, key, value);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,99,if (lastCompare < 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,100,parent.left = newEntry;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,101,} else if (lastCompare > 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,102,parent.right = newEntry;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,105,tail.next = newEntry;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,106,tail = newEntry;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,107,rebalanceAfterInsert(newEntry);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,108,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,111,"private void rebalanceAfterInsert(TreeNode<K, V> x) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,112,x.color = RED;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,114,while (x != null && x != root && x.parent.color == RED) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,115,if (x.parent == leftOf(parentOf(parentOf(x)))) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,116,"TreeNode<K, V> y = rightOf(parentOf(parentOf(x)));"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,117,if (colorOf(y) == RED) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,118,"setColor(parentOf(x), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,119,"setColor(y, BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,120,"setColor(parentOf(parentOf(x)), RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,121,x = parentOf(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,122,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,123,if (x == rightOf(parentOf(x))) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,124,x= parentOf(x);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,125,rotateLeft(x);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,127,"setColor(parentOf(x), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,128,"setColor(parentOf(parentOf(x)), RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,129,rotateRight(parentOf(parentOf(x)));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,131,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,132,"TreeNode<K, V> y = leftOf(parentOf(parentOf(x)));"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,133,if (colorOf(y) == RED) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,134,"setColor(parentOf(x), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,135,"setColor(y, BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,136,"setColor(parentOf(parentOf(x)), RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,137,x = parentOf(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,138,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,139,if (x == leftOf(parentOf(x))) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,140,x = parentOf(x);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,141,rotateRight(x);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,143,"setColor(parentOf(x), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,144,"setColor(parentOf(parentOf(x)), RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,145,rotateLeft(parentOf(parentOf(x)));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,149,root.color = BLACK;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,152,"private static <K extends Comparable<K>, V> TreeNode<K, V> parentOf(TreeNode<K, V> e) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,153,return (e != null ? e.parent : null);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,156,"private static <K extends Comparable<K>, V> boolean colorOf(TreeNode<K, V> e) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,157,return (e != null ? e.color : BLACK);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,160,"private static <K extends Comparable<K>, V> TreeNode<K, V> leftOf(TreeNode<K, V> e) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,161,return (e != null ? e.left : null);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,164,"private static <K extends Comparable<K>, V> TreeNode<K, V> rightOf(TreeNode<K, V> e) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,165,return (e != null ? e.right : null);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,168,"private static <K extends Comparable<K>, V> void setColor(TreeNode<K, V> e, boolean c) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,169,if (e != null){
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,170,e.color = c;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,174,"private static <K extends Comparable<K>, V> TreeNode<K, V> successor(TreeNode<K, V> t) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,175,if (t == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,176,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,177,} else if (t.right != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,178,"TreeNode<K, V> p = t.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,179,while (p.left != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,180,p = p.left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,182,return p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,183,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,184,"TreeNode<K, V> p = t.parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,185,"TreeNode<K, V> ch = t;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,186,while (p != null && ch == p.right) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,187,ch = p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,188,p = p.parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,190,return p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,194,"private void rotateLeft(TreeNode<K, V> p) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,195,if (p != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,196,"TreeNode<K, V> r = p.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,197,p.right = r.left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,198,if (r.left != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,199,r.left.parent = p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,201,r.parent = p.parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,202,if (p.parent == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,203,root = r;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,204,} else if (p.parent.left == p) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,205,p.parent.left = r;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,206,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,207,p.parent.right = r;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,209,r.left = p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,210,p.parent = r;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,214,"private void rotateRight(TreeNode<K, V> p) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,215,if (p != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,216,"TreeNode<K, V> l = p.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,217,p.left = l.right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,218,if (l.right != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,219,l.right.parent = p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,221,l.parent = p.parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,222,if (p.parent == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,223,root = l;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,224,} else if (p.parent.right == p) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,225,p.parent.right = l;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,226,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,227,p.parent.left = l;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,229,l.right = p;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,230,p.parent = l;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,234,public V remove(K key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,235,"TreeNode<K, V> entry = find(key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,236,if (entry == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,237,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,238,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,239,size--;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,240,V rval = entry.getValue();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,241,preserveOrderForRemoval(entry);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,242,removeNode(entry);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,243,return rval;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,247,"private void removeNode(TreeNode<K, V> p) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,248,if (p.left != null && p.right != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,249,"TreeNode<K, V> s = successor(p);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,250,p.key = s.key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,251,p.value = s.value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,252,p = s;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,255,"TreeNode<K, V> replacement = (p.left != null ? p.left : p.right);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,256,if (replacement != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,257,// Link replacement to parent
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,258,replacement.parent = p.parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,259,if (p.parent == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,260,root = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,261,} else if (p == p.parent.left) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,262,p.parent.left  = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,263,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,264,p.parent.right = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,267,// Null out links so they are OK to use by fixAfterDeletion.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,268,p.left = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,269,p.right = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,270,p.parent = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,272,// Fix replacement
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,273,if (p.color == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,274,fixAfterDeletion(replacement);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,276,} else if (p.parent == null) { // return if we are the only node.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,277,root = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,278,} else { //  No children. Use self as phantom replacement and unlink.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,279,if (p.color == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,280,fixAfterDeletion(p);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,283,if (p.parent != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,284,if (p == p.parent.left) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,285,p.parent.left = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,286,} else if (p == p.parent.right) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,287,p.parent.right = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,289,p.parent = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,294,"private void preserveOrderForRemoval(TreeNode<K, V> p) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,295,// Preserve insertion order for entry set iteration
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,296,if (p == head) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,297,head = p.next;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,299,if (p == tail) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,300,tail = p.previous;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,303,"TreeNode<K, V> previousNode = p.previous;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,304,"TreeNode<K, V> nextNode = p.next;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,305,if (previousNode != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,306,previousNode.next = nextNode;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,308,if (nextNode != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,309,nextNode.previous = previousNode;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,313,"private void fixAfterDeletion(TreeNode<K, V> x) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,314,while (x != root && colorOf(x) == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,315,if (x == leftOf(parentOf(x))) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,316,"TreeNode<K, V> sib = rightOf(parentOf(x));"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,318,if (colorOf(sib) == RED) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,319,"setColor(sib, BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,320,"setColor(parentOf(x), RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,321,rotateLeft(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,322,sib = rightOf(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,325,if (colorOf(leftOf(sib))  == BLACK &&
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,326,colorOf(rightOf(sib)) == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,327,"setColor(sib, RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,328,x = parentOf(x);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,329,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,330,if (colorOf(rightOf(sib)) == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,331,"setColor(leftOf(sib), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,332,"setColor(sib, RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,333,rotateRight(sib);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,334,sib = rightOf(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,336,"setColor(sib, colorOf(parentOf(x)));"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,337,"setColor(parentOf(x), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,338,"setColor(rightOf(sib), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,339,rotateLeft(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,340,x = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,342,} else { // symmetric
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,343,"TreeNode<K, V> sib = leftOf(parentOf(x));"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,345,if (colorOf(sib) == RED) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,346,"setColor(sib, BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,347,"setColor(parentOf(x), RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,348,rotateRight(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,349,sib = leftOf(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,352,if (colorOf(rightOf(sib)) == BLACK &&
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,353,colorOf(leftOf(sib)) == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,354,"setColor(sib, RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,355,x = parentOf(x);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,356,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,357,if (colorOf(leftOf(sib)) == BLACK) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,358,"setColor(rightOf(sib), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,359,"setColor(sib, RED);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,360,rotateLeft(sib);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,361,sib = leftOf(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,363,"setColor(sib, colorOf(parentOf(x)));"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,364,"setColor(parentOf(x), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,365,"setColor(leftOf(sib), BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,366,rotateRight(parentOf(x));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,367,x = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,372,"setColor(x, BLACK);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,375,public int size() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,376,return size;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,380,"* If somebody is unlucky enough to have to serialize one of these, serialize"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,381,* it as a LinkedHashMap so that they won't need Gson on the other side to
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,382,"* deserialize it. Using serialization defeats our DoS defence, so most apps"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,383,* shouldn't use it.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,385,private Object writeReplace() throws ObjectStreamException {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,386,"return new LinkedHashMap<K, V>(this);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,389,"private TreeNode<K, V> find(K key) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,390,"for (TreeNode<K, V> entry = root; entry != null; ) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,391,int compareVal = key.compareTo(entry.key);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,392,if (compareVal < 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,393,entry = entry.left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,394,} else if (compareVal > 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,395,entry = entry.right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,396,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,397,return entry;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,400,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,403,"private static class TreeNode<K extends Comparable<K>, V> implements Map.Entry<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,404,private K key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,405,private V value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,406,"private TreeNode<K, V> parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,407,"private TreeNode<K, V> left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,408,"private TreeNode<K, V> right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,410,// Used for rebalance tree
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,411,private boolean color = BLACK;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,413,// This is used for preserving the insertion order
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,414,"private TreeNode<K, V> next;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,415,"private TreeNode<K, V> previous;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,417,"TreeNode(TreeNode<K, V> parent, TreeNode<K, V> previous, K key, V value) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,418,this.parent = parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,419,this.previous = previous;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,420,this.key = key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,421,this.value = value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,424,public K getKey() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,425,return key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,428,public V getValue() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,429,return value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,432,"// I'd like to make this throw an UnsupportedOperationException; however,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,433,public V setValue(V value) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,434,V rval = this.value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,435,this.value = value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,436,return rval;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,439,@Override
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,440,public final boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,441,if (!(o instanceof Entry)) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,442,return false;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,444,"Entry<?, ?> e = (Entry<?, ?>) o;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,445,Object eValue = e.getValue();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,446,return key.equals(e.getKey())
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,447,&& (value == null ? eValue == null : value.equals(eValue));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,450,@Override
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,451,public final int hashCode() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,452,return key.hashCode() ^ (value == null ? 0 : value.hashCode());
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,455,@Override
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,456,public final String toString() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,457,"return key + ""="" + value;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,461,"class EntrySet extends AbstractSet<Entry<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,462,@Override
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,463,"public Iterator<Map.Entry<K, V>> iterator() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,464,return new LinkedTreeIterator(head);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,467,@Override
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,468,public int size() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,469,return LinkedTreeMap.this.size();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,473,"private class LinkedTreeIterator implements Iterator<Map.Entry<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,474,"private TreeNode<K, V> current;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,476,"private LinkedTreeIterator(TreeNode<K, V> first) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,477,this.current = first;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,480,public boolean hasNext() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,481,return current != null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,484,"public Map.Entry<K, V> next() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,485,"TreeNode<K, V> rval = current;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,486,current = current.next;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,487,return rval;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,490,public final void remove() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,491,LinkedTreeMap.this.remove(current.getKey());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,2,  Licensed to the Apache Software Foundation (ASF) under one or more
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,3,  contributor license agreements. See the NOTICE file distributed with
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,4,  this work for additional information regarding copyright ownership.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,5,"  The ASF licenses this file to You under the Apache License, Version 2.0"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,6,"  (the ""License""); you may not use this file except in compliance with"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,7,  the License. You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,11,"  Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,12,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,13,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,14,  See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,15,  limitations under the License.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,18,ackage com.google.gson.internal;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,20,mport java.io.ObjectStreamException;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,21,mport java.io.Serializable;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,22,mport java.util.AbstractCollection;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,23,mport java.util.AbstractMap;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,24,mport java.util.AbstractSet;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,25,mport java.util.Arrays;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,26,mport java.util.Collection;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,27,mport java.util.Iterator;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,28,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,29,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,30,mport java.util.NoSuchElementException;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,31,mport java.util.Random;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,32,mport java.util.Set;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,35," A map of strings to values. Like LinkedHashMap, this map's iteration order is"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,36, well defined: it is the order that elements were inserted into the map. This
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,37, map does not support null keys.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,39, <p>This implementation was derived from Android 4.0's LinkedHashMap.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,41,"ublic final class StringMap<V> extends AbstractMap<String, V> implements Serializable {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,43, Min capacity (other than zero) for a HashMap. Must be a power of two
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,44, greater than 1 (and less than 1 << 30).
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,46,rivate static final int MINIMUM_CAPACITY = 4;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,49, Max capacity for a HashMap. Must be a power of two >= MINIMUM_CAPACITY.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,51,rivate static final int MAXIMUM_CAPACITY = 1 << 30;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,54, Max number of collisions in a single bucket before falling back to
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,55, an unpredictable hash code.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,57,rivate static final int MAX_COLLISIONS = 512;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,60, A dummy entry in the circular linked list of entries in the map.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,61," The first real entry is header.nxt, and the last is header.prv."
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,62," If the map is empty, header.nxt == header && header.prv == header."
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,64,rivate LinkedEntry<V> header;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,67, An empty table shared by all zero-capacity maps (typically from default
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,68," constructor). It is never written to, and replaced on first put. Its size"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,69," is set to half the minimum, so that the first resize will create a"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,70, minimum-sized table.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,72,"SuppressWarnings(""rawtypes"")"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,73,rivate static final Entry[] EMPTY_TABLE = new LinkedEntry[MINIMUM_CAPACITY >>> 1];
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,76," The hash table. If this hash map contains a mapping for null, it is"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,77, not represented this hash table.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,79,rivate LinkedEntry<V>[] table;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,82, The number of mappings in this hash map.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,84,rivate int size;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,87, The table is rehashed when its size exceeds this threshold.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,88," The value of this field is generally .75 * capacity, except when"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,89," the capacity is zero, as described in the EMPTY_TABLE declaration"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,90, above.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,92,rivate int threshold;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,95," True to use String.hashCode(), which is cached per-string. False to use"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,96, less predictable (but uncached) hash algorithm.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,98,rivate boolean useFastHash = true;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,100,/ Views - lazily initialized
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,101,rivate Set<String> keySet;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,102,"rivate Set<Entry<String, V>> entrySet;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,103,rivate Collection<V> values;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,105,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,106,ublic StringMap() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,107,able = (LinkedEntry<V>[]) EMPTY_TABLE;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,108,hreshold = -1; // Forces first put invocation to replace EMPTY_TABLE
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,109,eader = new LinkedEntry<V>();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,112,Override public int size() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,113,eturn size;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,116,Override public boolean containsKey(Object key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,117,eturn key instanceof String && getEntry((String) key) != null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,120,Override public V get(Object key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,121,f (key instanceof String) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,122,inkedEntry<V> entry = getEntry((String) key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,123,eturn entry != null ? entry.value : null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,124, else {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,125,eturn null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,129,rivate LinkedEntry<V> getEntry(String key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,130,f (key == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,131,eturn null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,134,nt hash = useFastHash ? fastHash(key) : unpredictableHash(key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,135,inkedEntry<V>[] tab = table;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,136,or (LinkedEntry<V> e = tab[hash & (tab.length - 1)]; e != null; e = e.next) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,137,tring eKey = e.key;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,138,f (eKey == key || (e.hash == hash && key.equals(eKey))) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,139,eturn e;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,142,eturn null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,145,"Override public V put(String key, V value) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,146,f (key == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,147,"hrow new NullPointerException(""key == null"");"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,150,nt collisionCount = 0;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,151,nt hash = useFastHash ? fastHash(key) : unpredictableHash(key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,152,inkedEntry<V>[] tab = table;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,153,nt index = hash & (tab.length - 1);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,154,or (LinkedEntry<V> e = tab[index]; e != null; e = e.next) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,155,ollisionCount++;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,156,f (e.hash == hash && key.equals(e.key)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,157, oldValue = e.value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,158,.value = value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,159,eturn oldValue;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,163,/ No entry for (non-null) key is present; create one
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,164,f (size++ > threshold) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,165,ab = doubleCapacity();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,166,ndex = hash & (tab.length - 1);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,168,"ddNewEntry(key, value, hash, index);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,171," If we suffer a very large number of collisions, fall back from the cached"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,172, String.hashCode() to an (uncached) hash code that isn't predictable.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,174,f (useFastHash && collisionCount >= MAX_COLLISIONS) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,175,inkedEntry<V> entry = header.nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,177,/ clear the table
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,178,"rrays.fill(table, null);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,179,ize = 0;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,180,eader.nxt = header.prv = header;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,181,seFastHash = false;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,183,/ fill it up in iteration order
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,184,or (; entry != header; entry = entry.nxt) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,185,"ut(entry.key, entry.value);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,189,eturn null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,192,"rivate void addNewEntry(String key, V value, int hash, int index) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,193,inkedEntry<V> header = this.header;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,195,"/ Create new entry, link it on to list, and put it into table"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,196,inkedEntry<V> oldTail = header.prv;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,197,inkedEntry<V> newTail = new LinkedEntry<V>(
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,198,"ey, value, hash, table[index], header, oldTail);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,199,able[index] = oldTail.nxt = header.prv = newTail;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,203, Allocate a table of the given capacity and set the threshold accordingly.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,204, @param newCapacity must be a power of two
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,206,rivate LinkedEntry<V>[] makeTable(int newCapacity) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,207,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,208,inkedEntry<V>[] newTable = (LinkedEntry<V>[]) new LinkedEntry[newCapacity];
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,209,able = newTable;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,210,hreshold = (newCapacity >> 1) + (newCapacity >> 2); // 3/4 capacity
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,211,eturn newTable;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,215, Doubles the capacity of the hash table. Existing entries are placed in
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,216," the correct bucket on the enlarged table. If the current capacity is,"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,217," MAXIMUM_CAPACITY, this method is a no-op. Returns the table, which"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,218, will be new unless we were already at MAXIMUM_CAPACITY.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,220,rivate LinkedEntry<V>[] doubleCapacity() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,221,inkedEntry<V>[] oldTable = table;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,222,nt oldCapacity = oldTable.length;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,223,f (oldCapacity == MAXIMUM_CAPACITY) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,224,eturn oldTable;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,226,nt newCapacity = oldCapacity * 2;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,227,inkedEntry<V>[] newTable = makeTable(newCapacity);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,228,f (size == 0) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,229,eturn newTable;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,232,or (int j = 0; j < oldCapacity; j++) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,234, Rehash the bucket using the minimum number of field writes.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,235, This is the most subtle and delicate code in the class.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,237,inkedEntry<V> e = oldTable[j];
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,238,f (e == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,239,ontinue;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,241,nt highBit = e.hash & oldCapacity;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,242,inkedEntry<V> broken = null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,243,ewTable[j | highBit] = e;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,244,"or (LinkedEntry<V> n = e.next; n != null; e = n, n = n.next) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,245,nt nextHighBit = n.hash & oldCapacity;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,246,f (nextHighBit != highBit) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,247,f (broken == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,248,ewTable[j | nextHighBit] = n;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,249, else {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,250,roken.next = n;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,252,roken = e;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,253,ighBit = nextHighBit;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,256,f (broken != null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,257,roken.next = null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,260,eturn newTable;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,263,Override public V remove(Object key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,264,f (key == null || !(key instanceof String)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,265,eturn null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,267,nt hash = useFastHash ? fastHash(key) : unpredictableHash((String) key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,268,inkedEntry<V>[] tab = table;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,269,nt index = hash & (tab.length - 1);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,270,"or (LinkedEntry<V> e = tab[index], prev = null;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,271," != null; prev = e, e = e.next) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,272,f (e.hash == hash && key.equals(e.key)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,273,f (prev == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,274,ab[index] = e.next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,275, else {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,276,rev.next = e.next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,278,ize--;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,279,nlink(e);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,280,eturn e.value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,283,eturn null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,286,rivate void unlink(LinkedEntry<V> e) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,287,.prv.nxt = e.nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,288,.nxt.prv = e.prv;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,289,.nxt = e.prv = null; // Help the GC (for performance)
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,292,Override public void clear() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,293,f (size != 0) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,294,"rrays.fill(table, null);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,295,ize = 0;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,298,/ Clear all links to help GC
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,299,inkedEntry<V> header = this.header;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,300,or (LinkedEntry<V> e = header.nxt; e != header; ) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,301,inkedEntry<V> nxt = e.nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,302,.nxt = e.prv = null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,303, = nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,306,eader.nxt = header.prv = header;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,309,Override public Set<String> keySet() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,310,et<String> ks = keySet;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,311,eturn (ks != null) ? ks : (keySet = new KeySet());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,314,Override public Collection<V> values() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,315,ollection<V> vs = values;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,316,eturn (vs != null) ? vs : (values = new Values());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,319,"ublic Set<Entry<String, V>> entrySet() {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,320,"et<Entry<String, V>> es = entrySet;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,321,eturn (es != null) ? es : (entrySet = new EntrySet());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,324,"tatic class LinkedEntry<V> implements Entry<String, V> {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,325,inal String key;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,326, value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,327,inal int hash;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,328,inkedEntry<V> next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,329,inkedEntry<V> nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,330,inkedEntry<V> prv;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,332,** Create the header entry */
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,333,inkedEntry() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,334,"his(null, null, 0, null, null, null);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,335,xt = prv = this;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,338,"inkedEntry(String key, V value, int hash, LinkedEntry<V> next,"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,339,"inkedEntry<V> nxt, LinkedEntry<V> prv) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,340,his.key = key;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,341,his.value = value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,342,his.hash = hash;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,343,his.next = next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,344,his.nxt = nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,345,his.prv = prv;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,348,ublic final String getKey() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,349,eturn key;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,352,ublic final V getValue() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,353,eturn value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,356,ublic final V setValue(V value) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,357, oldValue = this.value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,358,his.value = value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,359,eturn oldValue;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,362,Override public final boolean equals(Object o) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,363,f (!(o instanceof Entry)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,364,eturn false;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,366,"ntry<?, ?> e = (Entry<?, ?>) o;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,367,bject eValue = e.getValue();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,368,eturn key.equals(e.getKey())
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,369,& (value == null ? eValue == null : value.equals(eValue));
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,372,Override public final int hashCode() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,373,eturn (key == null ? 0 : key.hashCode()) ^ (value == null ? 0 : value.hashCode());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,376,Override public final String toString() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,377,"eturn key + ""="" + value;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,382, Removes the mapping from key to value and returns true if this mapping
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,383," exists; otherwise, returns does nothing and returns false."
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,385,"rivate boolean removeMapping(Object key, Object value) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,386,f (key == null || !(key instanceof String)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,387,eturn false;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,390,nt hash = useFastHash ? fastHash(key) : unpredictableHash((String) key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,391,inkedEntry<V>[] tab = table;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,392,nt index = hash & (tab.length - 1);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,393,"or (LinkedEntry<V> e = tab[index], prev = null; e != null; prev = e, e = e.next) {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,394,f (e.hash == hash && key.equals(e.key)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,395,f (value == null ? e.value != null : !value.equals(e.value)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,396,eturn false;  // Map has wrong value for key
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,398,f (prev == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,399,ab[index] = e.next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,400, else {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,401,rev.next = e.next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,403,ize--;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,404,nlink(e);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,405,eturn true;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,408,eturn false; // No entry for key
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,412," If somebody is unlucky enough to have to serialize one of these, serialize"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,413, it as a LinkedHashMap so that they won't need Gson on the other side to
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,414," deserialize it. Using serialization defeats our DoS defence, so most apps"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,415, shouldn't use it.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,417,rivate Object writeReplace() throws ObjectStreamException {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,418,"eturn new LinkedHashMap<String, V>(this);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,421,rivate abstract class LinkedHashIterator<T> implements Iterator<T> {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,422,inkedEntry<V> next = header.nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,423,inkedEntry<V> lastReturned = null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,425,ublic final boolean hasNext() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,426,eturn next != header;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,429,inal LinkedEntry<V> nextEntry() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,430,inkedEntry<V> e = next;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,431,f (e == header) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,432,hrow new NoSuchElementException();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,434,ext = e.nxt;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,435,eturn lastReturned = e;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,438,ublic final void remove() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,439,f (lastReturned == null) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,440,hrow new IllegalStateException();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,442,tringMap.this.remove(lastReturned.key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,443,astReturned = null;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,447,rivate final class KeySet extends AbstractSet<String> {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,448,ublic Iterator<String> iterator() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,449,eturn new LinkedHashIterator<String>() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,450,ublic final String next() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,451,eturn nextEntry().key;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,456,ublic int size() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,457,eturn size;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,460,ublic boolean contains(Object o) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,461,eturn containsKey(o);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,464,ublic boolean remove(Object o) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,465,nt oldSize = size;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,466,tringMap.this.remove(o);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,467,eturn size != oldSize;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,470,ublic void clear() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,471,tringMap.this.clear();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,475,rivate final class Values extends AbstractCollection<V> {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,476,ublic Iterator<V> iterator() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,477,eturn new LinkedHashIterator<V>() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,478,ublic final V next() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,479,eturn nextEntry().value;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,484,ublic int size() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,485,eturn size;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,488,ublic boolean contains(Object o) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,489,eturn containsValue(o);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,492,ublic void clear() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,493,tringMap.this.clear();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,497,"rivate final class EntrySet extends AbstractSet<Entry<String, V>> {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,498,"ublic Iterator<Entry<String, V>> iterator() {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,499,"eturn new LinkedHashIterator<Map.Entry<String, V>>() {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,500,"ublic final Map.Entry<String, V> next() {"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,501,eturn nextEntry();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,506,ublic boolean contains(Object o) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,507,f (!(o instanceof Entry)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,508,eturn false;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,510,"ntry<?, ?> e = (Entry<?, ?>) o;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,511, mappedValue = get(e.getKey());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,512,eturn mappedValue != null && mappedValue.equals(e.getValue());
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,515,ublic boolean remove(Object o) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,516,f (!(o instanceof Entry)) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,517,eturn false;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,519,"ntry<?, ?> e = (Entry<?, ?>) o;"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,520,"eturn removeMapping(e.getKey(), e.getValue());"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,523,ublic int size() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,524,eturn size;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,527,ublic void clear() {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,528,tringMap.this.clear();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,532,rivate static int fastHash(Object key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,533,nt h = key.hashCode();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,534,/ Apply Doug Lea's supplemental hash function to avoid collisions for
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,535,/ hashes that do not differ in lower or upper bits.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,536, ^= (h >>> 20) ^ (h >>> 12);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,537,eturn h ^ (h >>> 7) ^ (h >>> 4);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,540,rivate static final int seed = new Random().nextInt();
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,541,rivate static int unpredictableHash(String key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,542,/ Ensuring that the hash is unpredictable and well distributed.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,544,/ Finding unpredictable hash functions is a bit of a dark art as we need to balance
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,545,/ good unpredictability (to avoid DoS) and good distribution (for performance).
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,547,"/ We achieve this by using the same algorithm as the Perl version, but this implementation"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,548,/ is being written from scratch by inder who has never seen the
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,549,/ Perl version (for license compliance).
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,551,/ TODO: investigate http://code.google.com/p/cityhash/ and http://code.google.com/p/smhasher/
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,552,/ both of which may have better distribution and/or unpredictability.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,553,nt h = seed;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,554,or (int i = 0; i < key.length(); ++i) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,555,nt h2 = h + key.charAt(i);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,556,nt h3 = h2 + h2 << 10; // h2 * 1024
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,557, = h3 ^ (h3 >>> 6); // h3 / 64
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,560,/ Apply Doug Lea's supplemental hash function to avoid collisions for
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,561,/ hashes that do not differ in lower or upper bits.
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,562, ^= (h >>> 20) ^ (h >>> 12);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,563,eturn h ^ (h >>> 7) ^ (h >>> 4);
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,22,mport com.google.gson.internal.StringMap;
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,22,import com.google.gson.internal.LinkedTreeMap;
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,66,"ap<String, Object> map = new StringMap<Object>();"
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,67,"Map<String, Object> map = new LinkedTreeMap<String, Object>();"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,43,assertNull(jsonObj.get(propertyName));
False,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,110,harArrayWriter writer= new CharArrayWriter();
True,gson/src/test/java/com/google/gson/JsonParserTest.java,gson/src/test/java/com/google/gson/JsonParserTest.java,110,CharArrayWriter writer = new CharArrayWriter();
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,593,ublic void testJsonObjectDeerialization() {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,593,public void testJsonObjectDeserialization() {
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,597,"ssertEquals(object, gson.fromJson(""{\""foo\"":1,\""bar\"":2}"", JsonElement.class));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,598,"JsonElement actual = gson.fromJson(""{\""foo\"":1,\""bar\"":2}"", JsonElement.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,599,"assertEquals(object, actual);"
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,19,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,20,mport java.util.Collection;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,21,mport java.util.HashMap;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,22,mport java.util.LinkedHashMap;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,23,mport java.util.Map;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,24,mport java.util.TreeMap;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,26,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,34,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,36,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,37,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,38,import java.util.HashMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,39,import java.util.LinkedHashMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,40,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,41,import java.util.SortedMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,42,import java.util.TreeMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,160,public void testHashMapDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,161,"Type typeOfMap = new TypeToken<HashMap<Integer, String>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,162,"HashMap<Integer, String> map = gson.fromJson(""{\""123\"":\""456\""}"", typeOfMap);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,163,"assertEquals(1, map.size());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,164,assertTrue(map.containsKey(123));
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,165,"assertEquals(""456"", map.get(123));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,168,public void testSortedMap() throws Exception {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,169,"Type typeOfMap = new TypeToken<SortedMap<Integer, String>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,170,"SortedMap<Integer, String> map = gson.fromJson(""{\""123\"":\""456\""}"", typeOfMap);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,171,"assertEquals(1, map.size());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,172,assertTrue(map.containsKey(123));
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,173,"assertEquals(""456"", map.get(123));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,2,* Copyright (C) 2012 Google Inc.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,17,package com.google.gson.internal;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,19,import com.google.gson.common.MoreAsserts;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,23,import java.util.Iterator;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,24,import java.util.Map;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,25,import java.util.Set;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,28,* Unit tests for {@code LinkedTreeMap} class.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,30,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,32,public class LinkedTreeMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,34,public void testPutAndGet() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,35,"LinkedTreeMap<String, Integer> map = new LinkedTreeMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,36,"map.put(""B"", 2);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,37,"map.put(""A"", 1);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,38,"map.put(""C"", 3);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,40,"assertTrue(map.containsKey(""A""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,41,"assertTrue(map.containsKey(""B""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,42,"assertTrue(map.containsKey(""C""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,43,"assertFalse(map.containsKey(""D""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,45,"assertEquals(1, (int) map.get(""A""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,46,"assertEquals(2, (int) map.get(""B""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,47,"assertEquals(3, (int) map.get(""C""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,48,"assertEquals(3, map.entrySet().size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,50,"assertEquals(1, (int) map.put(""A"", 4));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,51,"assertTrue(map.containsKey(""A""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,52,"assertEquals(4, (int) map.get(""A""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,53,"assertEquals(3, map.entrySet().size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,55,// Ensure entry set size is same as map size
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,56,"assertEquals(map.size(), map.entrySet().size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,59,public void testSingleElement() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,60,"LinkedTreeMap<String, Integer> map = new LinkedTreeMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,61,"map.put(""A"", 1);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,62,"assertEquals(1, map.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,64,"assertEquals(1, (int) map.get(""A""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,65,"map.remove(""A"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,66,"assertEquals(0, map.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,68,// Ensure the map and entry set are empty
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,69,assertTrue(map.entrySet().isEmpty());
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,70,assertTrue(map.isEmpty());
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,73,public void testAddAndRemove() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,74,"LinkedTreeMap<String, Integer> map = new LinkedTreeMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,75,"map.put(""A"", 1);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,76,"map.put(""B"", 2);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,77,"map.put(""C"", 3);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,78,"map.put(""D"", 4);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,79,"map.put(""E"", 5);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,80,"map.put(""F"", 6);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,82,"assertEquals(3, (int) map.remove(""C""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,83,"assertEquals(5, map.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,84,"assertIterationOrder(map.entrySet(),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,85,"new String[] { ""A"", ""B"", ""D"", ""E"", ""F"" }, new int[] { 1, 2, 4, 5, 6 });"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,87,// Remove a non-existent key
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,88,"assertNull(map.remove(""G""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,89,"assertEquals(5, map.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,91,// Remove the first element
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,92,"assertEquals(1, (int) map.remove(""A""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,93,"assertIterationOrder(map.entrySet(),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,94,"new String[] { ""B"", ""D"", ""E"", ""F"" }, new int[] { 2, 4, 5, 6 });"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,96,// Remove the last element
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,97,"assertEquals(6, (int) map.remove(""F""));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,98,"assertIterationOrder(map.entrySet(),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,99,"new String[] { ""B"", ""D"", ""E"" }, new int[] { 2, 4, 5 });"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,102,public void testInsertionOrderPreserved() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,103,"LinkedTreeMap<String, Integer> map = new LinkedTreeMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,104,"String[] keys = { ""B"", ""A"", ""D"", ""C"", ""Z"", ""W"", ""E"", ""F"", ""T"" };"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,105,int[] values = new int[keys.length];
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,106,for (int i = 0; i < keys.length; ++i) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,107,values[i] = i;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,108,"map.put(keys[i], i);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,111,"Set<Map.Entry<String,Integer>> entries = map.entrySet();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,112,"assertEquals(keys.length, entries.size());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,113,"assertIterationOrder(entries, keys, values);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,116,public void testEqualsAndHashCode() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,117,"LinkedTreeMap<String, Integer> map1 = new LinkedTreeMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,118,"map1.put(""A"", 1);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,119,"map1.put(""B"", 2);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,120,"map1.put(""C"", 3);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,121,"map1.put(""D"", 4);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,123,"LinkedTreeMap<String, Integer> map2 = new LinkedTreeMap<String, Integer>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,124,"map2.put(""C"", 3);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,125,"map2.put(""B"", 2);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,126,"map2.put(""D"", 4);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,127,"map2.put(""A"", 1);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,129,"MoreAsserts.assertEqualsAndHashCode(map1, map2);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,132,"private void assertIterationOrder(Set<Map.Entry<String, Integer>> entries, String[] keys, int[] values) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,133,int i = 0;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,134,"for (Iterator<Map.Entry<String, Integer>> iterator = entries.iterator(); iterator.hasNext(); ++i) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,135,"Map.Entry<String, Integer> entry = iterator.next();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,136,"assertEquals(keys[i], entry.getKey());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,137,"assertEquals(values[i], (int) entry.getValue());"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,2, Copyright (C) 2010 Google Inc.
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,17,ackage com.google.gson.internal;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,19,mport java.util.ArrayList;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,20,mport java.util.Iterator;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,21,mport java.util.List;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,22,mport java.util.Map;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,23,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,25,ublic final class StringMapTest extends TestCase {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,26,ublic void testFallbackFromTooManyCollisions() {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,27,nt count = 10000;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,28,tringMap<Integer> map = new StringMap<Integer>();
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,29,nt index = 0;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,30,"ist<String> collidingStrings = collidingStrings(1 << 20, count);"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,31,or (String string : collidingStrings) {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,32,"ap.put(string, index++);"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,34,"ssertEquals(collidingStrings.size(), map.size());"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,35,"terator<Map.Entry<String, Integer>> iterator = map.entrySet().iterator();"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,36,or (int i = 0; i < count; i++) {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,37,"ap.Entry<String, Integer> entry = iterator.next();"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,38,"ssertEquals(collidingStrings.get(i), entry.getKey());"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,39,"ssertEquals(Integer.valueOf(i), entry.getValue());"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,44, @param h0 the hash code of the generated strings
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,46,"rivate List<String> collidingStrings(int h0, int count) {"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,47,ist<String> result = new ArrayList<String>(count);
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,48,nt p1 = 31;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,49,nt p0 = 31 * 31;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,50,nt maxChar = Character.MAX_VALUE;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,51,or (char c0 = 0; c0 <= maxChar && c0 <= h0 / p0; c0++) {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,52,nt h1 = h0 - c0 * p0;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,53,or (char c1 = 0; c1 <= maxChar && c1 <= h1 / p1; c1++) {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,54,nt h2 = h1 - c1 * p1;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,55,har c2 = (char) h2;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,56,f (h2 != c2) {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,57,ontinue;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,59,"esult.add(new String(new char[] { c0, c1, c2 } ));"
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,60,f (result.size() == count) {
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,61,eturn result;
False,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,65,"hrow new IllegalArgumentException(""Couldn't find "" + count + "" strings with hashCode "" + h0);"

is_addition,old_file_path,new_file_path,line_num,content
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,20,import com.google.gson.stream.JsonReader;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,21,import com.google.gson.stream.JsonWriter;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,22,import java.io.IOException;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,27,import java.util.HashMap;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,29,import java.util.Map;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,36,* This thread local guards against reentrant calls to getAdapter(). In
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,37,"* certain object graphs, creating an adapter for a type may recursively"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,38,"* require an adapter for the same type! Without intervention, the recursive"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,39,* lookup would stack overflow. We cheat by returning a proxy type adapter.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,40,* The proxy is wired up once the initial adapter has been created.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,42,"private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,43,"= new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>() {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,44,"@Override protected Map<TypeToken<?>, FutureTypeAdapter<?>> initialValue() {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,45,"return new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();"
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,70,/ TODO: create a cache here
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,71,or (TypeAdapter.Factory factory : factories) {
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,72,"ypeAdapter<T> candidate = factory.create(this, type);"
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,73,f (candidate != null) {
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,74,eturn candidate;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,89,// TODO: create a cache!
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,91,"Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,92,"@SuppressWarnings(""unchecked"") // the key and value type parameters always agree"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,93,FutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,94,if (ongoingCall != null) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,95,return ongoingCall;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,98,FutureTypeAdapter<T> call = new FutureTypeAdapter<T>();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,99,"threadCalls.put(type, call);"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,100,try {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,101,for (TypeAdapter.Factory factory : factories) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,102,"TypeAdapter<T> candidate = factory.create(this, type);"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,103,if (candidate != null) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,104,call.setDelegate(candidate);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,105,return candidate;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,108,"throw new IllegalArgumentException(""This MiniGSON cannot serialize "" + type);"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,109,} finally {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,110,threadCalls.remove(type);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,114,static class FutureTypeAdapter<T> extends TypeAdapter<T> {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,115,private TypeAdapter<T> delegate;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,117,public void setDelegate(TypeAdapter<T> typeAdapter) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,118,if (delegate != null) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,119,throw new AssertionError();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,121,delegate = typeAdapter;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,124,@Override public T read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,125,if (delegate == null) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,126,throw new IllegalStateException();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,128,return delegate.read(reader);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,131,"@Override public void write(JsonWriter writer, T value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,132,if (delegate == null) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,133,throw new IllegalStateException();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,135,"delegate.write(writer, value);"
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,77,"hrow new IllegalArgumentException(""This MiniGSON cannot serialize "" + type);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,145,public void testSerializeRecursive() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,146,TypeAdapter<Node> nodeAdapter = miniGson.getAdapter(Node.class);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,147,"Node root = new Node(""root"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,148,"root.left = new Node(""left"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,149,"root.right = new Node(""right"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,150,"assertEquals(""{'label':'root',"""
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,151,"+ ""'left':{'label':'left','left':null,'right':null},"""
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,152,"+ ""'right':{'label':'right','left':null,'right':null}}"","
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,153,"nodeAdapter.toJson(root).replace('""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,181,static class Node {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,182,String label;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,183,Node left;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,184,Node right;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,185,Node(String label) {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,186,this.label = label;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,188,public Node() {} // TODO: use Joel's constructor code so we don't need this

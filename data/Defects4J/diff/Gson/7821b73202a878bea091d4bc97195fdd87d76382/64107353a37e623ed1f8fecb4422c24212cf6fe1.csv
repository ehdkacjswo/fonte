is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,33,import java.util.concurrent.atomic.AtomicBoolean;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,34,import java.util.concurrent.atomic.AtomicInteger;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,35,import java.util.concurrent.atomic.AtomicIntegerArray;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,36,import java.util.concurrent.atomic.AtomicLong;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,"actories.add(TypeAdapters.newFactory(long.class, Long.class,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214,ongAdapter(longSerializationPolicy)));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,217,TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,"factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,224,"factories.add(TypeAdapters.newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,"factories.add(TypeAdapters.newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,226,"factories.add(TypeAdapters.newFactory(AtomicLong.class, atomicLongAdapter(longAdapter)));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,227,"factories.add(TypeAdapters.newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,336,private TypeAdapter<AtomicLong> atomicLongAdapter(final TypeAdapter<Number> longAdapter) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,337,return new TypeAdapter<AtomicLong>() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,338,"@Override public void write(JsonWriter out, AtomicLong value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,339,"longAdapter.write(out, value.get());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,341,@Override public AtomicLong read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,342,Number value = longAdapter.read(in);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,343,return new AtomicLong(value.longValue());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,345,}.nullSafe();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,19,mport com.google.gson.Gson;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,20,mport com.google.gson.JsonArray;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,21,mport com.google.gson.JsonElement;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,22,mport com.google.gson.JsonIOException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,23,mport com.google.gson.JsonNull;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,24,mport com.google.gson.JsonObject;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,25,mport com.google.gson.JsonPrimitive;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,26,mport com.google.gson.JsonSyntaxException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,27,mport com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,28,mport com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,29,mport com.google.gson.annotations.SerializedName;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,30,mport com.google.gson.internal.LazilyParsedNumber;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,31,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,32,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,33,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,34,mport com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,27,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,33,import java.util.List;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,38,import java.util.concurrent.atomic.AtomicBoolean;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,39,import java.util.concurrent.atomic.AtomicInteger;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,40,import java.util.concurrent.atomic.AtomicIntegerArray;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,42,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,43,import com.google.gson.JsonArray;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,44,import com.google.gson.JsonElement;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,45,import com.google.gson.JsonIOException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,46,import com.google.gson.JsonNull;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,47,import com.google.gson.JsonObject;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,48,import com.google.gson.JsonPrimitive;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,49,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,50,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,51,import com.google.gson.TypeAdapterFactory;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,52,import com.google.gson.annotations.SerializedName;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,53,import com.google.gson.internal.LazilyParsedNumber;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,54,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,55,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,56,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,57,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,259,public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,260,@Override public AtomicInteger read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,261,try {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,262,return new AtomicInteger(in.nextInt());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,263,} catch (NumberFormatException e) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,264,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,267,"@Override public void write(JsonWriter out, AtomicInteger value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,268,out.value(value.get());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,270,}.nullSafe();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,272,public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,273,@Override public AtomicBoolean read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,274,return new AtomicBoolean(in.nextBoolean());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,276,"@Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,277,out.value(value.get());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,279,}.nullSafe();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,281,public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,282,@Override public AtomicIntegerArray read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,283,List<Integer> list = new ArrayList<Integer>();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,284,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,285,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,286,try {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,287,int integer = in.nextInt();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,288,list.add(integer);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,289,} catch (NumberFormatException e) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,290,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,293,in.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,294,int length = list.size();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,295,AtomicIntegerArray array = new AtomicIntegerArray(length);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,296,for (int i = 0; i < length; ++i) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,297,"array.set(i, list.get(i));"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,299,return array;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,301,"@Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,302,out.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,303,"for (int i = 0, length = value.length(); i < length; i++) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,304,out.value(value.get(i));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,306,out.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,308,}.nullSafe();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,2,* Copyright (C) 2015 Google Inc.
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,19,import java.util.concurrent.atomic.AtomicBoolean;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,20,import java.util.concurrent.atomic.AtomicInteger;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,21,import java.util.concurrent.atomic.AtomicIntegerArray;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,22,import java.util.concurrent.atomic.AtomicLong;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,24,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,26,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,29,* Functional test for Json serialization and deserialization for java.util.concurrent.locks classes
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,31,public class JavaUtilConcurrentLocksTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,32,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,34,@Override
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,35,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,36,super.setUp();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,37,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,40,public void testAtomicBoolean() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,41,"AtomicBoolean target = gson.fromJson(""true"", AtomicBoolean.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,42,assertTrue(target.get());
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,43,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,44,"assertEquals(""true"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,47,public void testAtomicInteger() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,48,"AtomicInteger target = gson.fromJson(""10"", AtomicInteger.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,49,"assertEquals(10, target.get());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,50,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,51,"assertEquals(""10"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,54,public void testAtomicLong() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,55,"AtomicLong target = gson.fromJson(""10"", AtomicLong.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,56,"assertEquals(10, target.get());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,57,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,58,"assertEquals(""10"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,61,public void testAtomicIntegerArray() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,62,"AtomicIntegerArray target = gson.fromJson(""[10, 13, 14]"", AtomicIntegerArray.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,63,"assertEquals(3, target.length());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,64,"assertEquals(10, target.get(0));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,65,"assertEquals(13, target.get(1));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,66,"assertEquals(14, target.get(2));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,67,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,68,"assertEquals(""[10,13,14]"", json);"

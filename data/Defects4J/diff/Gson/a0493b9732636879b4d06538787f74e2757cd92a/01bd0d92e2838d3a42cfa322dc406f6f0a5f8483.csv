is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,24,import java.util.ArrayDeque;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,428,int hash;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,507,"* Returns a new array containing the same nodes as {@code oldTable}, but with"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,508,"* twice as many trees, each of (approximately) half the previous size."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,510,"static <K, V> Node<K, V>[] doubleCapacity(Node<K, V>[] oldTable) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,511,// TODO: don't do anything if we're already at MAX_CAPACITY
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,512,int oldCapacity = oldTable.length;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,513,"@SuppressWarnings(""unchecked"") // Arrays and generics don't get along."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,514,"Node<K, V>[] newTable = new Node[oldCapacity * 2];"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,515,"AvlIterator<K, V> iterator = new AvlIterator<K, V>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,516,"AvlBuilder<K, V> leftBuilder = new AvlBuilder<K, V>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,517,"AvlBuilder<K, V> rightBuilder = new AvlBuilder<K, V>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,519,// Split each tree into two trees.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,520,for (int i = 0; i < oldCapacity; i++) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,521,"Node<K, V> root = oldTable[i];"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,522,if (root == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,523,continue;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,526,// Compute the sizes of the left and right trees.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,527,iterator.reset(root);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,528,int leftSize = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,529,int rightSize = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,530,while (iterator.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,531,"Node<K, V> node = iterator.next();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,532,if ((node.hash & oldCapacity) == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,533,leftSize++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,534,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,535,rightSize++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,539,// Split the tree into two.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,540,"Node<K, V> leftRoot = null;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,541,"Node<K, V> rightRoot = null;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,542,if (leftSize > 0 && rightSize > 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,543,leftBuilder.reset(leftSize);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,544,rightBuilder.reset(rightSize);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,545,iterator.reset(root);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,546,while (iterator.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,547,"Node<K, V> node = iterator.next();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,548,if ((node.hash & oldCapacity) == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,549,leftBuilder.add(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,550,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,551,rightBuilder.add(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,554,leftRoot = leftBuilder.root();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,555,rightRoot = rightBuilder.root();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,556,} else if (leftSize > 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,557,leftRoot = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,558,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,559,rightRoot = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,562,// Populate the enlarged array with these new roots.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,563,newTable[i] = leftRoot;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,564,newTable[i + oldCapacity] = rightRoot;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,566,return newTable;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,570,"* Walks an AVL tree in iteration order. Once a node has been returned, its"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,571,"* left, right and parent links are <strong>no longer used</strong>. For this"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,572,* reason it is safe to transform these links as you walk a tree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,574,"static class AvlIterator<K, V> implements Iterator<Node<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,575,"private final ArrayDeque<Node<K, V>> stack = new ArrayDeque<Node<K, V>>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,577,"void reset(Node<K, V> root) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,578,stack.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,579,"for (Node<K, V> n = root; n != null; n = n.left) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,580,stack.add(n);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,584,public boolean hasNext() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,585,return !stack.isEmpty();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,588,"public Node<K, V> next() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,589,"Node<K, V> node = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,590,"for (Node<K, V> n = node.right; n != null; n = n.left) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,591,stack.add(n);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,593,return node;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,596,public void remove() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,597,throw new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,603,* Builds AVL trees of a predetermined size by accepting nodes of increasing
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,604,* value. To use:
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,605,* <ol>
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,606,*   <li>Call {@link #reset} to initialize the target size <i>size</i>.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,607,*   <li>Call {@link #add} <i>size</i> times with increasing values.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,608,*   <li>Call {@link #root} to get the root of the balanced tree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,609,* </ol>
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,611,* <p>The returned tree will satisfy the AVL constraint: for every node
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,612,"* <i>N</i>, the height of <i>N.left</i> and <i>N.right</i> is different by at"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,613,* most 1. It accomplishes this by omitting deepest-level leaf nodes when
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,614,* building trees whose size isn't a power of 2 minus 1.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,616,"* <p>Unlike rebuilding a tree from scratch, this approach requires no value"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,617,* comparisons. Using this class to create a tree of size <i>S</i> is
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,618,* {@code O(S)}.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,620,"static class AvlBuilder<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,621,"private final ArrayDeque<Node<K, V>> stack = new ArrayDeque<Node<K, V>>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,622,private int leavesToSkip;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,623,private int leavesSkipped;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,624,private int size;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,626,void reset(int targetSize) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,627,"// compute the target tree size. This is a power of 2 minus one, like 15 or 31."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,628,int treeCapacity = Integer.highestOneBit(targetSize) * 2 - 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,629,leavesToSkip = treeCapacity - targetSize;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,630,size = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,631,leavesSkipped = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,632,stack.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,635,"void add(Node<K, V> node) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,636,node.left = node.parent = node.right = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,637,node.height = 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,639,// Skip a leaf if necessary.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,640,if (leavesToSkip > 0 && (size & 1) == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,641,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,642,leavesToSkip--;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,643,leavesSkipped++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,646,stack.addLast(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,647,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,649,// Skip a leaf if necessary.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,650,if (leavesToSkip > 0 && (size & 1) == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,651,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,652,leavesToSkip--;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,653,leavesSkipped++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,657,* Combine 3 nodes into subtrees whenever the size is one less than a
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,658,"* multiple of 4. For example we combine the nodes A, B, C into a"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,659,* 3-element tree with B as the root.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,661,* Combine two subtrees and a spare single value whenever the size is one
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,662,* less than a multiple of 8. For example at 8 we may combine subtrees
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,663,* (A B C) and (E F G) with D as the root to form ((A B C) D (E F G)).
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,665,"* Just as we combine single nodes when size nears a multiple of 4, and"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,666,"* 3-element trees when size nears a multiple of 8, we combine subtrees of"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,667,* size (N-1) whenever the total size is 2N-1 whenever N is a power of 2.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,669,int centerHeight = 2;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,670,for (int scale = 4; (size & scale - 1) == scale - 1; scale *= 2) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,671,if (leavesSkipped == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,672,"Node<K, V> right = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,673,"Node<K, V> center = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,674,"Node<K, V> left = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,675,center.left = left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,676,left.parent = center;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,677,center.right = right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,678,right.parent = center;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,679,center.height = centerHeight;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,680,stack.addLast(center);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,681,} else if (leavesSkipped == 1) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,682,"Node<K, V> right = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,683,"Node<K, V> center = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,684,center.right = right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,685,center.height = centerHeight;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,686,center.height++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,687,stack.addLast(center);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,688,leavesSkipped = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,689,} else if (leavesSkipped == 2) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,690,leavesSkipped = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,692,centerHeight++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,696,"Node<K, V> root() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,697,if (stack.size() != 1) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,698,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,700,return stack.getLast();
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,19,import com.google.gson.internal.LinkedTreeMap.AvlBuilder;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,20,import com.google.gson.internal.LinkedTreeMap.Node;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,75,public void testAvlWalker() {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,76,"assertAvlWalker(node(node(""a""), ""b"", node(""c"")),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,77,"""a"", ""b"", ""c"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,78,"assertAvlWalker(node(node(node(""a""), ""b"", node(""c"")), ""d"", node(node(""e""), ""f"", node(""g""))),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,79,"""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,80,"assertAvlWalker(node(node(null, ""a"", node(""b"")), ""c"", node(node(""d""), ""e"", null)),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,81,"""a"", ""b"", ""c"", ""d"", ""e"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,82,"assertAvlWalker(node(null, ""a"", node(null, ""b"", node(null, ""c"", node(""d"")))),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,83,"""a"", ""b"", ""c"", ""d"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,84,"assertAvlWalker(node(node(node(node(""a""), ""b"", null), ""c"", null), ""d"", null),"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,85,"""a"", ""b"", ""c"", ""d"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,88,"private void assertAvlWalker(Node<String, String> root, String... values) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,89,"LinkedTreeMap.AvlIterator<String, String> iterator = new LinkedTreeMap.AvlIterator<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,90,iterator.reset(root);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,91,for (String value : values) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,92,assertTrue(iterator.hasNext());
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,93,"assertEquals(value, iterator.next().getKey());"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,95,assertFalse(iterator.hasNext());
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,98,public void testAvlBuilder() {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,99,"assertAvlBuilder(1, ""a"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,100,"assertAvlBuilder(2, ""(. a b)"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,101,"assertAvlBuilder(3, ""(a b c)"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,102,"assertAvlBuilder(4, ""(a b (. c d))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,103,"assertAvlBuilder(5, ""(a b (c d e))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,104,"assertAvlBuilder(6, ""((. a b) c (d e f))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,105,"assertAvlBuilder(7, ""((a b c) d (e f g))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,106,"assertAvlBuilder(8, ""((a b c) d (e f (. g h)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,107,"assertAvlBuilder(9, ""((a b c) d (e f (g h i)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,108,"assertAvlBuilder(10, ""((a b c) d ((. e f) g (h i j)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,109,"assertAvlBuilder(11, ""((a b c) d ((e f g) h (i j k)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,110,"assertAvlBuilder(12, ""((a b (. c d)) e ((f g h) i (j k l)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,111,"assertAvlBuilder(13, ""((a b (c d e)) f ((g h i) j (k l m)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,112,"assertAvlBuilder(14, ""(((. a b) c (d e f)) g ((h i j) k (l m n)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,113,"assertAvlBuilder(15, ""(((a b c) d (e f g)) h ((i j k) l (m n o)))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,114,"assertAvlBuilder(16, ""(((a b c) d (e f g)) h ((i j k) l (m n (. o p))))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,115,"assertAvlBuilder(30, ""((((. a b) c (d e f)) g ((h i j) k (l m n))) o """
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,116,"+ ""(((p q r) s (t u v)) w ((x y z) A (B C D))))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,117,"assertAvlBuilder(31, ""((((a b c) d (e f g)) h ((i j k) l (m n o))) p """
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,118,"+ ""(((q r s) t (u v w)) x ((y z A) B (C D E))))"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,121,"private void assertAvlBuilder(int size, String expected) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,122,"char[] values = ""abcdefghijklmnopqrstuvwxyzABCDE"".toCharArray();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,123,"AvlBuilder<String, String> avlBuilder = new AvlBuilder<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,124,avlBuilder.reset(size);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,125,for (int i = 0; i < size; i++) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,126,avlBuilder.add(node(Character.toString(values[i])));
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,128,"assertEquals(expected, toString(avlBuilder.root()));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,131,public void testDoubleCapacity() {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,132,"@SuppressWarnings(""unchecked"") // Arrays and generics don't get along."
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,133,"Node<String, String>[] oldTable = new Node[1];"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,134,"oldTable[0] = node(node(node(""a""), ""b"", node(""c"")), ""d"", node(node(""e""), ""f"", node(""g"")));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,136,"Node<String, String>[] newTable = LinkedTreeMap.doubleCapacity(oldTable);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,137,"assertEquals(""(b d f)"", toString(newTable[0])); // Even hash codes!"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,138,"assertEquals(""(a c (. e g))"", toString(newTable[1])); // Odd hash codes!"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,141,"private static final Node<String, String> head = new Node<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,143,"private Node<String, String> node(String value) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,144,"Node<String, String> result = new Node<String, String>(null, value, head, head);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,145,result.hash = value.hashCode();
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,146,return result;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,149,"private Node<String, String> node(Node<String, String> left, String value,"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,150,"Node<String, String> right) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,151,"Node<String, String> result = node(value);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,152,if (left != null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,153,result.left = left;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,154,left.parent = result;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,156,if (right != null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,157,result.right = right;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,158,right.parent = result;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,160,return result;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,163,"private String toString(Node<?, ?> root) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,164,if (root == null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,165,"return ""."";"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,166,} else if (root.left == null && root.right == null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,167,return String.valueOf(root.key);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,168,} else {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,169,"return String.format(""(%s %s %s)"", toString(root.left), root.key, toString(root.right));"

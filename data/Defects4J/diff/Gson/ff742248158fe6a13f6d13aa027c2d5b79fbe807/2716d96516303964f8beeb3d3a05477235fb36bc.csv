is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,67,* Using dashes in JavaScript is not recommended since dash is also used for a minus sign in
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,68,* expressions. This requires that a field named with dashes is always accessed as a quoted
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,69,* property like {@code myobject['my-field']}. Accessing it as an object field
True,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,gson/src/main/java/com/google/gson/FieldNamingPolicy.java,70,* {@code myobject.my-field} will result in an unintended javascript expression.
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190, {JsonElement}s. This method should be used when the specified object is not a generic type.
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,191," This method uses {@link Class#getClass()} to get the type for the specified object, but the"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,192, {@code getClass()} loses the generic type information because of the Type Erasure feature
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,* {@link JsonElement}s. This method should be used when the specified object is not a generic
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,191,"* type. This method uses {@link Class#getClass()} to get the type for the specified object, but"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,192,* the {@code getClass()} loses the generic type information because of the Type Erasure feature
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,195," {@link #toJson(Object, Type)} instead. If you want to write out the object to a"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,196," {@link Writer}, use {@link #toJson(Object, Appendable)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,195,"* {@link #toJsonTree(Object, Type)} instead."
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212," specified object is a generic type. For non-generic objects, use {@link #toJson(Object)}"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213," instead. If you want to write out the object to a {@link Appendable},"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214," use {@link #toJson(Object, Type, Appendable)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,211,"* specified object is a generic type. For non-generic objects, use {@link #toJsonTree(Object)}"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,* instead.
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,324, @param jsonElement root of the tree of {@link JsonElement}s
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,322,* @param jsonElement root of a tree of {@link JsonElement}s
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,335, Writes out the equivalent JSON for the tree of {@link JsonElement}s.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,333,* Writes out the equivalent JSON for a tree of {@link JsonElement}s.
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,337, @param jsonElement root of the tree of {@link JsonElement}s
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,335,* @param jsonElement root of a tree of {@link JsonElement}s
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,153,f (elementTypePair.getObj() == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,153,if (elementTypePair.getObject() == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,172,bject obj = objTypePair.getObj();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,172,Object obj = objTypePair.getObject();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,197,"eturn serializer.serialize(objTypePair.getObj(), objTypePair.getType(), context);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,197,"return serializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);"
False,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,28," <p>This class is thread-compatible. For some more literature on these definitions, refer to"
False,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,29, Effective Java.
False,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,31," <p>To properly use this class across multiple thread, you will need to add some external"
False,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,32, synchronization to your classes/thread to get this to work properly.  For example:
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,28,"* <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To"
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,29,"* properly use this class across multiple threads, you will need to add some external"
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,30,* synchronization.  For example:
False,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,35," JsonStreamParser parser = new JsonStreamParser(""blah blah blah"");"
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,33,"* JsonStreamParser parser = new JsonStreamParser(""['first'] {'second':10} 'third'"");"
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,106,* Returns true if a {@link JsonElement} is available on the input for consumption
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,107,"* @return true if a {@link JsonElement} is available on the input, false otherwise"
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,108,* @since 1.4
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,123,* This optional {@link Iterator} method is not relevant for stream parsing and hence is not
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,124,* implemented.
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,125,* @since 1.4
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,80,f (stackObject.getObj() == obj.getObj() && stackObject.getType().equals(obj.getType()) ) {
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,80,if (stackObject.getObject() == obj.getObject()
True,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,81,&& stackObject.getType().equals(obj.getType()) ) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,96,bject obj = objTypePair.getObj();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,96,Object obj = objTypePair.getObject();
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,2,* Copyright (C) 2009 Google Inc.
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,14,* limitations under the License.
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,5,inal class ObjectTypePair {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,21,* A holder class for an object and its type
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,23,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,25,final class ObjectTypePair {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,26,private static final int PRIME = 31;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,12,ublic Object getObj() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,36,public Object getObject() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,20,inal int prime = 31;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,21,nt result = 1;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,22,esult = prime * result + ((obj == null) ? 0 : obj.hashCode());
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,23,esult = prime * result + ((type == null) ? 0 : type.hashCode());
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,24,eturn result;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,46,// Not using type.hashCode() since I am not sure if the subclasses of type reimplement
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,47,// hashCode() to be equal for equal types
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,48,return ((obj == null) ? PRIME : obj.hashCode());
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,28,f (this == obj)
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,53,if (this == obj) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,30,f (obj == null)
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,56,if (obj == null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,32,f (getClass() != obj.getClass())
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,59,if (getClass() != obj.getClass()) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,36,f (other.obj != null)
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,64,if (other.obj != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,38, else if (!this.obj.equals(other.obj))
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,67,} else if (this.obj != other.obj) { // Checking for reference equality
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,41,f (other.type != null)
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,71,if (other.type != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,43, else if (!type.equals(other.type))
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,74,} else if (!type.equals(other.type)) {
False,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,65," If true, the field marked with this annotation is written out in the JSON while serializing."
False,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,66," If false, the field marked with this annotation is skipped from the serialized output."
False,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,67, Defaults to true.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,65,"* If {@code true}, the field marked with this annotation is written out in the JSON while"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,66,"* serializing. If {@code false}, the field marked with this annotation is skipped from the"
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,67,* serialized output. Defaults to {@code true}.
False,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,73," If true, the field marked with this annotation is deserialized from the JSON."
False,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,74," If false, the field marked with this annotation is skipped during deserialization."
False,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,75, Defaults to true.
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,73,"* If {@code true}, the field marked with this annotation is deserialized from the JSON."
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,74,"* If {@code false}, the field marked with this annotation is skipped during deserialization."
True,gson/src/main/java/com/google/gson/annotations/Expose.java,gson/src/main/java/com/google/gson/annotations/Expose.java,75,* Defaults to {@code true}.
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,64,"bjectTypePair objA = new ObjectTypePair(new MockObject(), MockObject.class);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,65,"bjectTypePair objB = new ObjectTypePair(new MockObject(), MockObject.class);"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,64,MockObject objA = new MockObject();
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,65,MockObject objB = new MockObject();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,tack.push(objA);
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,69,ssertFalse(stack.contains(objB));
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,70,ssertTrue(stack.contains(objA));
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,67,"stack.push(new ObjectTypePair(objA, MockObject.class));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,"assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class)));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,69,"assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class)));"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,640,/ TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,734,} catch (IllegalStateException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,735,throw new JsonSyntaxException(e);
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,21,import com.google.gson.JsonSyntaxException;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,24,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,25,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,120,public void testTypeMismatchThrowsJsonSyntaxExceptionForStrings() {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,121,try {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,122,"gson.fromJson(""true"", new TypeToken<Map<String, String>>() {}.getType());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,123,fail();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,124,} catch (JsonSyntaxException expected) {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,128,public void testTypeMismatchThrowsJsonSyntaxExceptionForReaders() {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,129,try {
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,130,"gson.fromJson(new StringReader(""true""), new TypeToken<Map<String, String>>() {}.getType());"
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,131,fail();
True,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java,132,} catch (JsonSyntaxException expected) {

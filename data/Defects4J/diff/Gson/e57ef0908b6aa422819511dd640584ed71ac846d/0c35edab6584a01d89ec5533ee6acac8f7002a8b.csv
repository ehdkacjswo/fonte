is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,39,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,68,"SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,67,"@SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,108,reateDefaultHierarchySerializers();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,107,createDefaultHierarchySerializers();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,112,reateDefaultHierarchyDeserializers();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,111,createDefaultHierarchyDeserializers();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,232,"SuppressWarnings({""unchecked"", ""rawtypes""})"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,231,"@SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,594,"SuppressWarnings({""unchecked"", ""rawtypes""})"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,593,"@SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,658,"SuppressWarnings({""unchecked"", ""rawtypes""})"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,659,"tatic final class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,660,nstanceCreator<Map> {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,662,"ublic JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,663,sonObject map = new JsonObject();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,664,ype childGenericType = null;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,665,f (typeOfSrc instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,666,lass<?> rawTypeOfSrc = Types.getRawType(typeOfSrc);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,667,"hildGenericType = Types.getMapKeyAndValueTypes(typeOfSrc, rawTypeOfSrc)[1];"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,670,or (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,671,bject value = entry.getValue();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,673,sonElement valueElement;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,674,f (value == null) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,675,alueElement = JsonNull.createJsonNull();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,676, else {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,677,ype childType = (childGenericType == null)
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,678, value.getClass() : childGenericType;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,679,"alueElement = context.serialize(value, childType);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,681,"ap.add(String.valueOf(entry.getKey()), valueElement);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,683,eturn map;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,686,"ublic Map deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,687,hrows JsonParseException {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,688,/ Use ObjectConstructor to create instance instead of hard-coding a specific type.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,689,/ This handles cases where users are using their own subclass of Map.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,690,"ap<Object, Object> map = constructMapType(typeOfT, context);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,691,"ype[] keyAndValueTypes = Types.getMapKeyAndValueTypes(typeOfT, Types.getRawType(typeOfT));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,692,"or (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,693,"bject key = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueTypes[0]);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,694,"bject value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,695,"ap.put(key, value);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,697,eturn map;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,700,"rivate Map constructMapType(Type mapType, JsonDeserializationContext context) {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,701,sonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,702,bjectConstructor objectConstructor = contextImpl.getObjectConstructor();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,703,eturn (Map) objectConstructor.construct(mapType);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,706,ublic Map createInstance(Type type) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,707,eturn new LinkedHashMap();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,710,Override
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,711,ublic String toString() {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,712,eturn MapTypeAdapter.class.getSimpleName();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,26,import java.util.Map;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,57,private static final MapAsArrayTypeAdapter COMPLEX_KEY_MAP_TYPE_ADAPTER =
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,58,new MapAsArrayTypeAdapter();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,188,public GsonBuilder enableComplexMapKeySerialization() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,189,"registerTypeHierarchyAdapter(Map.class, COMPLEX_KEY_MAP_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,190,return this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,554,efaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,562,DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,557,efaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,565,DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,22,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,93,ublic final class MapAsArrayTypeAdapter
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,92,final class MapAsArrayTypeAdapter
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,98,"ap<Object, Object> result = new LinkedHashMap<Object, Object>();"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,97,"Map<Object, Object> result = constructMapType(typeOfT, context);"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,150,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,151,"private Map<Object, Object> constructMapType(Type mapType, JsonDeserializationContext context) {"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,152,JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,153,ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,154,"return (Map<Object, Object>) objectConstructor.construct(mapType);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,19,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,21,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,22,import java.util.Map;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,23,import java.util.Set;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,26,* Default serialization and deserialization of a map type. This implementation really only works
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,27,* well with simple primitive types as the map key. If the key is not a simple primitive then the
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,28,* object is {@code toString}ed and that value is used as its key.
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,30,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,32,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,33,"final class MapTypeAdapter implements JsonSerializer<Map<?, ?>>,"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,34,"JsonDeserializer<Map<?, ?>>, InstanceCreator<Map<?, ?>> {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,36,"public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,37,JsonObject map = new JsonObject();
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,38,Type childGenericType = null;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,39,if (typeOfSrc instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,40,Class<?> rawTypeOfSrc = Types.getRawType(typeOfSrc);
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,41,"childGenericType = Types.getMapKeyAndValueTypes(typeOfSrc, rawTypeOfSrc)[1];"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,44,for (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,45,Object value = entry.getValue();
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,47,JsonElement valueElement;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,48,if (value == null) {
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,49,valueElement = JsonNull.createJsonNull();
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,50,} else {
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,51,Type childType = (childGenericType == null)
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,52,? value.getClass() : childGenericType;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,53,"valueElement = context.serialize(value, childType);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,55,"map.add(String.valueOf(entry.getKey()), valueElement);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,57,return map;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,60,"public Map deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,61,throws JsonParseException {
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,62,// Use ObjectConstructor to create instance instead of hard-coding a specific type.
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,63,// This handles cases where users are using their own subclass of Map.
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,64,"Map<Object, Object> map = constructMapType(typeOfT, context);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,65,"Type[] keyAndValueTypes = Types.getMapKeyAndValueTypes(typeOfT, Types.getRawType(typeOfT));"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,66,"for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,67,"Object key = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueTypes[0]);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,68,"Object value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,69,"map.put(key, value);"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,71,return map;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,74,"private Map constructMapType(Type mapType, JsonDeserializationContext context) {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,75,JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,76,ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,77,return (Map) objectConstructor.construct(mapType);
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,80,"public Map<Object, Object> createInstance(Type type) {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,81,return new LinkedHashMap();
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,84,@Override
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,85,public String toString() {
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,86,return MapTypeAdapter.class.getSimpleName();
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,35,"SuppressWarnings(""unchecked"")"
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,36,rivate JsonSerializer<Map> mapSerializer;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,34,"private JsonSerializer<Map<?, ?>> mapSerializer;"
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,41,apSerializer = new DefaultTypeAdapters.MapTypeAdapter();
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,39,mapSerializer = new MapTypeAdapter();
False,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,226,"SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,226,"@SuppressWarnings(""unchecked"")"
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,22,mport com.google.gson.MapAsArrayTypeAdapter;
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,34,"registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())"
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,33,.enableComplexMapKeySerialization()
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,58,"registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())"
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,57,.enableComplexMapKeySerialization()
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,73,"registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())"
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,72,.enableComplexMapKeySerialization()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,22,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,23,import com.google.gson.common.TestTypes.BagOfPrimitives;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,66,"SuppressWarnings({ ""unchecked"", ""rawtypes"" })"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,68,"@SuppressWarnings(""unchecked"")"

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,23,import java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,71,bjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(rawType);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,72,"ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,115,rivate <T> ObjectConstructor<T> newDefaultImplementationConstructor(Class<? super T> rawType) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,116,private <T> ObjectConstructor<T> newDefaultImplementationConstructor(
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,117,"Type type, Class<? super T> rawType) {"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,145,eturn new ObjectConstructor<T>() {
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,146,ublic T construct() {
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,147,"/ TODO: if the map's key type is a string, should this be StringMap?"
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,148,"eturn (T) new LinkedHashMap<Object, Object>();"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,147,if (type instanceof ParameterizedType
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,148,&& ((ParameterizedType) type).getActualTypeArguments()[0] == String.class) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,149,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,150,public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,151,return (T) new StringMap<Object>();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,154,} else {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,155,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,156,public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,157,"return (T) new LinkedHashMap<Object, Object>();"
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,18,import java.io.ObjectStreamException;
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,19,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,73,"* If somebody is unlucky enough to have to serialize one of these, serialize"
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,74,* it as a BigDecimal so that they won't need Gson on the other side to
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,75,* deserialize it.
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,77,private Object writeReplace() throws ObjectStreamException {
True,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java,78,return new BigDecimal(value);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,20,import java.io.ObjectStreamException;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,21,import java.io.Serializable;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,28,import java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,38,"ublic final class StringMap<V> extends AbstractMap<String, V> {"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,41,"public final class StringMap<V> extends AbstractMap<String, V> implements Serializable {"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,412,"* If somebody is unlucky enough to have to serialize one of these, serialize"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,413,* it as a LinkedHashMap so that they won't need Gson on the other side to
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,414,"* deserialize it. Using serialization defeats our DoS defence, so most apps"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,415,* shouldn't use it.
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,417,private Object writeReplace() throws ObjectStreamException {
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,418,"return new LinkedHashMap<String, V>(this);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,2,* Copyright (C) 2012 Google Inc.
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,20,import java.io.ByteArrayInputStream;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,21,import java.io.ByteArrayOutputStream;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,22,import java.io.IOException;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,23,import java.io.ObjectInputStream;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,24,import java.io.ObjectOutputStream;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,25,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,26,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,27,import java.util.Arrays;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,28,import java.util.List;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,29,import java.util.Map;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,30,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,33,* Check that Gson doesn't return non-serializable data types.
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,35,* @author Jesse Wilson
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,37,public final class JavaSerializationTest extends TestCase {
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,38,private final Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,40,public void testMapIsSerializable() throws Exception {
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,41,"Type type = new TypeToken<Map<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,42,"Map<String, Integer> map = gson.fromJson(""{\""b\"":1,\""c\"":2,\""a\"":3}"", type);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,43,"Map<String, Integer> serialized = serializedCopy(map);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,44,"assertEquals(map, serialized);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,45,// Also check that the iteration order is retained.
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,46,"assertEquals(Arrays.asList(""b"", ""c"", ""a""), new ArrayList<String>(serialized.keySet()));"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,49,public void testListIsSerializable() throws Exception {
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,50,Type type = new TypeToken<List<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,51,"List<String> list = gson.fromJson(""[\""a\"",\""b\"",\""c\""]"", type);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,52,List<String> serialized = serializedCopy(list);
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,53,"assertEquals(list, serialized);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,56,public void testNumberIsSerializable() throws Exception {
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,57,Type type = new TypeToken<List<Number>>() {}.getType();
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,58,"List<Number> list = gson.fromJson(""[1,3.14,6.673e-11]"", type);"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,59,List<Number> serialized = serializedCopy(list);
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,60,"assertEquals(1.0, serialized.get(0).doubleValue());"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,61,"assertEquals(3.14, serialized.get(1).doubleValue());"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,62,"assertEquals(6.673e-11, serialized.get(2).doubleValue());"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,65,"@SuppressWarnings(""unchecked"") // Serialization promises to return the same type."
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,66,"private <T> T serializedCopy(T object) throws IOException, ClassNotFoundException {"
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,67,ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,68,ObjectOutputStream out = new ObjectOutputStream(bytesOut);
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,69,out.writeObject(object);
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,70,out.close();
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,71,ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytesOut.toByteArray());
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,72,ObjectInputStream in = new ObjectInputStream(bytesIn);
True,gson/src/test/java/com/google/gson/JavaSerializationTest.java,gson/src/test/java/com/google/gson/JavaSerializationTest.java,73,return (T) in.readObject();

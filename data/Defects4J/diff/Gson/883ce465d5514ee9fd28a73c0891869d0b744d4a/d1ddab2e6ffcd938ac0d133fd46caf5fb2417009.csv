is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,521,hildGenericType = TypeToken.get(typeOfSrc).getCollectionElementType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,521,Class<?> rawTypeOfSrc = Types.getRawType(typeOfSrc);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,522,"childGenericType = Types.getCollectionElementType(typeOfSrc, rawTypeOfSrc);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,544,ype childType = TypeToken.get(typeOfT).getCollectionElementType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,545,"Type childType = Types.getCollectionElementType(typeOfT, Types.getRawType(typeOfT));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,582,hildGenericType = TypeToken.get(typeOfSrc).getMapKeyAndValueTypes()[1];
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,583,Class<?> rawTypeOfSrc = Types.getRawType(typeOfSrc);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,584,"childGenericType = Types.getMapKeyAndValueTypes(typeOfSrc, rawTypeOfSrc)[1];"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,606,ype[] keyAndValueTypes = TypeToken.get(typeOfT).getMapKeyAndValueTypes();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,608,"Type[] keyAndValueTypes = Types.getMapKeyAndValueTypes(typeOfT, Types.getRawType(typeOfT));"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,43,ypeToken typeToken = TypeToken.get(targetType);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,49,f (typeToken.isArray()) {
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,45,if (Types.isArray(targetType)) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,52,"eturn (T) objectConstructor.constructArray(typeToken.getArrayComponentType(),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,48,"return (T) objectConstructor.constructArray(Types.getArrayComponentType(targetType),"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,56,eturn (T) objectConstructor.construct(typeToken.getRawType());
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,52,return (T) objectConstructor.construct(Types.getRawType(targetType));
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,64,ypeToken typeToken = TypeToken.get(arrayType);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,72,"hild = visitChildAsObject(typeToken.getArrayComponentType(), jsonChild);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,67,"child = visitChildAsObject(Types.getArrayComponentType(arrayType), jsonChild);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,74,"hild = visitChildAsArray(typeToken.getArrayComponentType(), jsonChild.getAsJsonArray());"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,69,"child = visitChildAsArray(Types.getArrayComponentType(arrayType),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,70,jsonChild.getAsJsonArray());
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,76,"hild = visitChildAsObject(typeToken.getArrayComponentType(),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,72,"child = visitChildAsObject(Types.getArrayComponentType(arrayType),"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,103,oolean isPrimitive = TypeToken.get(declaredTypeOfField).isPrimitive();
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,102,boolean isPrimitive = Primitives.isPrimitive(declaredTypeOfField);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,75,ype componentType = TypeToken.get(arrayType).getArrayComponentType();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,75,Type componentType = Types.getArrayComponentType(arrayType);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,58,"eturn Array.newInstance(TypeToken.get(type).getRawType(), length);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,58,"return Array.newInstance(Types.getRawType(type), length);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,83,lass<?> clazz = TypeToken.get(typeOfT).getRawType();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,83,Class<?> clazz = Types.getRawType(typeOfT);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,22,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,24,import java.util.Collection;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,25,import java.util.Map;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,26,import java.util.Properties;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,ypeToken<?> objTypeInfo = TypeToken.get(objTypePair.type);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,104,f (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawType())) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,107,if (exclusionStrategy.shouldSkipClass(Types.getRawType(objTypePair.type))) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,117,f (objTypeInfo.isArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,120,if (Types.isArray(objTypePair.type)) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119, else if (objTypeInfo.getType() == Object.class
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,120,& isPrimitiveOrString(objectToVisit)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,122,} else if (objTypePair.type == Object.class && isPrimitiveOrString(objectToVisit)) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,124,bjectToVisit = visitor.getTarget();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,126,visitor.getTarget();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,128,lass<?> topLevelClass = TypeToken.get(currObjTypePair.type).getRawType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,130,Class<?> topLevelClass = Types.getRawType(currObjTypePair.type);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,157,"ypeToken<?> fieldTypeToken = getTypeInfoForField(f, objTypePair.type);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,158,ype declaredTypeOfField = fieldTypeToken.getType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,159,"Type declaredTypeOfField = getTypeInfoForField(f, objTypePair.type);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,160,"isitor.visitFieldUsingCustomHandler(fieldAttributes, declaredTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,161,"visitor.visitFieldUsingCustomHandler(fieldAttributes, declaredTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,162,f (fieldTypeToken.isArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,163,if (Types.isArray(declaredTypeOfField)) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,180,"ublic static TypeToken<?> getTypeInfoForField(Field f, Type typeDefiningF) {"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,181,ypeToken<?> typeToken = TypeToken.get(typeDefiningF);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,182,f (!f.getDeclaringClass().isAssignableFrom(typeToken.getRawType())) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,181,"public static Type getTypeInfoForField(Field f, Type typeDefiningF) {"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,182,Class<?> rawType = Types.getRawType(typeDefiningF);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,183,if (!f.getDeclaringClass().isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,184,eturn TypeToken.get(f.getGenericType());
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,185,return f.getGenericType();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,186,eturn typeToken.getFieldType(f);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,187,"return Types.resolve(typeDefiningF, rawType, f.getGenericType());"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,125,lass<?> rawClass = TypeToken.get(type).getRawType();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,125,Class<?> rawClass = Types.getRawType(type);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,199,eturn TypeToken.get(type).getRawType().getSimpleName();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,199,return Types.getRawType(type).getSimpleName();
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,66,* Returns true if this type is a primitive.
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,68,public static boolean isPrimitive(Type type) {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/Primitives.java,69,return PRIMITIVE_TO_WRAPPER_TYPE.containsKey(type);
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,17,ackage com.google.gson.reflect;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,17,package com.google.gson;
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,19,mport static com.google.gson.reflect.TypeToken.checkArgument;
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,20,mport static com.google.gson.reflect.TypeToken.checkNotNull;
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,30,mport java.util.List;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,28,import java.util.Collection;
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,33,mport java.util.Set;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,31,import java.util.Properties;
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,47," Returns a new parameterized type, applying {@code typeArguments} to"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,48, {@code rawType}. The returned type does not have an owner type.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,50, @return a {@link java.io.Serializable serializable} parameterized type.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,52,"ublic static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments) {"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,53,"eturn newParameterizedTypeWithOwner(null, rawType, typeArguments);"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,97, Returns a type modelling a {@link List} whose elements are of type
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,98, {@code elementType}.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,100, @return a {@link java.io.Serializable serializable} parameterized type.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,102,ublic static ParameterizedType listOf(Type elementType) {
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,103,"eturn newParameterizedType(List.class, elementType);"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,107, Returns a type modelling a {@link Set} whose elements are of type
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,108, {@code elementType}.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,110, @return a {@link java.io.Serializable serializable} parameterized type.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,112,ublic static ParameterizedType setOf(Type elementType) {
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,113,"eturn newParameterizedType(Set.class, elementType);"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,117, Returns a type modelling a {@link Map} whose keys are of type
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,118, {@code keyType} and whose values are of type {@code valueType}.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,120, @return a {@link java.io.Serializable serializable} parameterized type.
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,122,"ublic static ParameterizedType mapOf(Type keyType, Type valueType) {"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,123,"eturn newParameterizedType(Map.class, keyType, valueType);"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,131,tatic Type canonicalize(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,89,public static Type canonicalize(Type type) {
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,155,tatic Class<?> getRawType(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,113,public static Class<?> getRawType(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,141,"String className = type == null ? ""null"" : type.getClass().getName();"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,184," ""GenericArrayType, but <"" + type + ""> is of type "" + type.getClass().getName());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,143,"+ ""GenericArrayType, but <"" + type + ""> is of type "" + className);"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,195,"tatic boolean equals(Type a, Type b) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,154,"public static boolean equals(Type a, Type b) {"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,254,tatic String typeToString(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,213,public static String typeToString(Type type) {
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,263,"tatic Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,222,"static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,265,eturn type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,224,return context;
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,297,"tatic Type resolveTypeVariable(Type type, Class<?> rawType, TypeVariable unknown) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,257,"* Returns the generic form of {@code supertype}. For example, if this is {@code"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,258,"* ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,259,* Iterable.class}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,261,"* @param supertype a superclass of, or interface implemented by, this."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,263,"static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,264,checkArgument(supertype.isAssignableFrom(contextRawType));
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,265,"return resolve(context, contextRawType,"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,266,"Types.getGenericSupertype(context, contextRawType, supertype));"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,270,* Returns true if this type is an array.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,272,static boolean isArray(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,273,return type instanceof GenericArrayType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,274,|| (type instanceof Class && ((Class<?>) type).isArray());
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,278,* Returns the component type of this array type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,279,* @throws ClassCastException if this type is not an array.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,281,static Type getArrayComponentType(Type array) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,282,return array instanceof GenericArrayType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,283,? ((GenericArrayType) array).getGenericComponentType()
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,284,: ((Class<?>) array).getComponentType();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,288,* Returns the element type of this collection type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,289,* @throws IllegalArgumentException if this type is not a collection.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,291,"static Type getCollectionElementType(Type context, Class<?> contextRawType) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,292,"Type collectionType = getSupertype(context, contextRawType, Collection.class);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,293,return ((ParameterizedType) collectionType).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,297,* Returns a two element array containing this map's key and value types in
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,298,* positions 0 and 1 respectively.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,300,"static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,302,* Work around a problem with the declaration of java.util.Properties. That
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,303,"* class should extend Hashtable<String, String>, but it's declared to"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,304,"* extend Hashtable<Object, Object>."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,306,if (context == Properties.class) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,307,"return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,310,"Type mapType = getSupertype(context, contextRawType, Map.class);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,311,ParameterizedType mapParameterizedType = (ParameterizedType) mapType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,312,return mapParameterizedType.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,315,"static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,316,// this implementation is made a little more complicated in an attempt to avoid object-creation
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,317,while (true) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,318,if (toResolve instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,319,TypeVariable typeVariable = (TypeVariable) toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,320,"toResolve = resolveTypeVariable(context, contextRawType, typeVariable);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,321,if (toResolve == typeVariable) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,322,return toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,325,} else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,326,Class<?> original = (Class<?>) toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,327,Type componentType = original.getComponentType();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,328,"Type newComponentType = resolve(context, contextRawType, componentType);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,329,return componentType == newComponentType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,330,? original
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,331,: arrayOf(newComponentType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,333,} else if (toResolve instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,334,GenericArrayType original = (GenericArrayType) toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,335,Type componentType = original.getGenericComponentType();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,336,"Type newComponentType = resolve(context, contextRawType, componentType);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,337,return componentType == newComponentType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,338,? original
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,339,: arrayOf(newComponentType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,341,} else if (toResolve instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,342,ParameterizedType original = (ParameterizedType) toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,343,Type ownerType = original.getOwnerType();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,344,"Type newOwnerType = resolve(context, contextRawType, ownerType);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,345,boolean changed = newOwnerType != ownerType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,347,Type[] args = original.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,348,"for (int t = 0, length = args.length; t < length; t++) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,349,"Type resolvedTypeArgument = resolve(context, contextRawType, args[t]);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,350,if (resolvedTypeArgument != args[t]) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,351,if (!changed) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,352,args = args.clone();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,353,changed = true;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,355,args[t] = resolvedTypeArgument;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,359,return changed
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,360,"? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,361,: original;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,363,} else if (toResolve instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,364,WildcardType original = (WildcardType) toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,365,Type[] originalLowerBound = original.getLowerBounds();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,366,Type[] originalUpperBound = original.getUpperBounds();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,368,if (originalLowerBound.length == 1) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,369,"Type lowerBound = resolve(context, contextRawType, originalLowerBound[0]);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,370,if (lowerBound != originalLowerBound[0]) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,371,return supertypeOf(lowerBound);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,373,} else if (originalUpperBound.length == 1) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,374,"Type upperBound = resolve(context, contextRawType, originalUpperBound[0]);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,375,if (upperBound != originalUpperBound[0]) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,376,return subtypeOf(upperBound);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,379,return original;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,381,} else {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,382,return toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,387,"static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable unknown) {"
False,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,305,"ype declaredBy = getGenericSupertype(type, rawType, declaredByRaw);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,395,"Type declaredBy = getGenericSupertype(context, contextRawType, declaredByRaw);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,579,private static void checkNotNull(Object obj) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,580,checkArgument(obj != null);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,583,private static void checkArgument(boolean condition) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,584,if (!condition) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/Types.java,585,"throw new IllegalArgumentException(""condition failed: "" + condition);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,19,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,20,mport java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,19,import com.google.gson.Types;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,22,mport java.lang.reflect.Member;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,27,mport java.lang.reflect.WildcardType;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,28,mport java.util.Arrays;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,29,mport java.util.Collection;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,31,mport java.util.Hashtable;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,32,mport java.util.List;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,34,mport java.util.Properties;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,114, Gets type literal from super class's type parameter.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,116,tatic TypeToken<?> fromSuperclassTypeParameter(Class<?> subclass) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,117,eturn new TypeToken<Object>(getSuperclassTypeParameter(subclass));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,122,* @deprecated this implementation may be inconsistent with javac for types
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,123,*     with wildcards.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,125,@Deprecated
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,126,"@SuppressWarnings(""deprecation"")"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,134,* @deprecated this implementation may be inconsistent with javac for types
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,135,*     with wildcards.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,137,@Deprecated
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,145,"/ TODO: resolve from first, then do something lightweight?"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,164,* @deprecated this implementation may be inconsistent with javac for types
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,165,*     with wildcards.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,167,@Deprecated
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,168,"@SuppressWarnings(""deprecation"")"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,251,"f (isAssignableFrom(sType, to, new HashMap<String, Type>(typeVarMap))) {"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,252,eturn true;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,255,eturn false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,248,"return isAssignableFrom(sType, to, new HashMap<String, Type>(typeVarMap));"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,296,"rivate static boolean matches(Type from, Type to,"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,297,"ap<String, Type> typeMap) {"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,298,f (to.equals(from)) return true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,289,"private static boolean matches(Type from, Type to, Map<String, Type> typeMap) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,290,return to.equals(from)
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,291,|| (from instanceof TypeVariable
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,292,&& to.equals(typeMap.get(((TypeVariable<?>) from).getName())));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,300,f (from instanceof TypeVariable<?>) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,301,eturn to.equals(typeMap.get(((TypeVariable<?>)from).getName()));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,304,eturn false;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,335,** Returns an immutable list of the resolved types. */
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,336,rivate List<TypeToken<?>> resolveAll(Type[] types) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,337,ypeToken<?>[] result = new TypeToken<?>[types.length];
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,338,or (int t = 0; t < types.length; t++) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,339,esult[t] = resolve(types[t]);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,341,eturn Arrays.asList(result);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,345, Resolves known type parameters in {@code toResolve} and returns the result.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,347,ypeToken<?> resolve(Type toResolve) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,348,eturn TypeToken.get(resolveType(toResolve));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,351,ype resolveType(Type toResolve) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,352,/ this implementation is made a little more complicated in an attempt to avoid object-creation
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,353,hile (true) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,354,f (toResolve instanceof TypeVariable) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,355,ypeVariable original = (TypeVariable) toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,356,"oResolve = Types.resolveTypeVariable(type, rawType, original);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,357,f (toResolve == original) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,358,eturn toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,361, else if (toResolve instanceof GenericArrayType) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,362,enericArrayType original = (GenericArrayType) toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,363,ype componentType = original.getGenericComponentType();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,364,ype newComponentType = resolveType(componentType);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,365,eturn componentType == newComponentType
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,366, original
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,367, Types.arrayOf(newComponentType);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,369, else if (toResolve instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,370,arameterizedType original = (ParameterizedType) toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,371,ype ownerType = original.getOwnerType();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,372,ype newOwnerType = resolveType(ownerType);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,373,oolean changed = newOwnerType != ownerType;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,375,ype[] args = original.getActualTypeArguments();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,376,"or (int t = 0, length = args.length; t < length; t++) {"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,377,ype resolvedTypeArgument = resolveType(args[t]);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,378,f (resolvedTypeArgument != args[t]) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,379,f (!changed) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,380,rgs = args.clone();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,381,hanged = true;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,383,rgs[t] = resolvedTypeArgument;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,387,eturn changed
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,388," Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,389, original;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,391, else if (toResolve instanceof WildcardType) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,392,ildcardType original = (WildcardType) toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,393,ype[] originalLowerBound = original.getLowerBounds();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,394,ype[] originalUpperBound = original.getUpperBounds();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,396,f (originalLowerBound.length == 1) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,397,ype lowerBound = resolveType(originalLowerBound[0]);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,398,f (lowerBound != originalLowerBound[0]) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,399,eturn Types.supertypeOf(lowerBound);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,401, else if (originalUpperBound.length == 1) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,402,ype upperBound = resolveType(originalUpperBound[0]);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,403,f (upperBound != originalUpperBound[0]) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,404,eturn Types.subtypeOf(upperBound);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,407,eturn original;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,409, else {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,410,eturn toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,416," Returns the generic form of {@code supertype}. For example, if this is {@code"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,417," ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,418, Iterable.class}.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,420," @param supertype a superclass of, or interface implemented by, this."
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,422,ublic TypeToken<?> getSupertype(Class<?> supertype) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,423,heckArgument(supertype.isAssignableFrom(rawType));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,424,"eturn resolve(Types.getGenericSupertype(type, rawType, supertype));"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,428, Returns the resolved generic type of {@code field}.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,430, @param field a field defined by this or any superclass.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,432,ublic TypeToken<?> getFieldType(Field field) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,433,f (!field.getDeclaringClass().isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,434,"hrow new IllegalArgumentException(rawType.getName() + "" does not declare field "" + field);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,436,eturn resolve(field.getGenericType());
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,440, Returns the resolved generic parameter types of {@code methodOrConstructor}.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,442, @param methodOrConstructor a method or constructor defined by this or any supertype.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,444,ublic List<TypeToken<?>> getParameterTypes(Member methodOrConstructor) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,445,ype[] genericParameterTypes;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,447,f (methodOrConstructor instanceof Method) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,448,ethod method = (Method) methodOrConstructor;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,449,heckArgument(method.getDeclaringClass().isAssignableFrom(rawType));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,450,enericParameterTypes = method.getGenericParameterTypes();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,452, else if (methodOrConstructor instanceof Constructor) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,453,onstructor<?> constructor = (Constructor<?>) methodOrConstructor;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,454,heckArgument(constructor.getDeclaringClass().isAssignableFrom(rawType));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,455,enericParameterTypes = constructor.getGenericParameterTypes();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,457, else {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,458,"hrow new IllegalArgumentException(""Not a method or a constructor: "" + methodOrConstructor);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,461,eturn resolveAll(genericParameterTypes);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,465, Returns the resolved generic exception types thrown by {@code constructor}.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,467, @param methodOrConstructor a method or constructor defined by this or any supertype.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,469,ublic List<TypeToken<?>> getExceptionTypes(Member methodOrConstructor) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,470,ype[] genericExceptionTypes;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,472,f (methodOrConstructor instanceof Method) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,473,ethod method = (Method) methodOrConstructor;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,474,heckArgument(method.getDeclaringClass().isAssignableFrom(rawType));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,475,enericExceptionTypes = method.getGenericExceptionTypes();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,477, else if (methodOrConstructor instanceof Constructor) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,478,onstructor<?> constructor = (Constructor<?>) methodOrConstructor;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,479,heckArgument(constructor.getDeclaringClass().isAssignableFrom(rawType));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,480,enericExceptionTypes = constructor.getGenericExceptionTypes();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,482, else {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,483,"hrow new IllegalArgumentException(""Not a method or a constructor: "" + methodOrConstructor);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,486,eturn resolveAll(genericExceptionTypes);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,490, Returns the resolved generic return type of {@code method}.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,492, @param method a method defined by this or any supertype.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,494,ublic TypeToken<?> getReturnType(Method method) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,495,heckArgument(method.getDeclaringClass().isAssignableFrom(rawType));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,496,eturn resolve(method.getGenericReturnType());
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,509,/ TODO: these methods are required by GSON but don't need to be public. Remove?
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,512, Returns true if this type is an array.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,514,ublic boolean isArray() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,515,eturn type instanceof GenericArrayType;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,519, Returns true if this type is a primitive.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,521,ublic boolean isPrimitive() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,522,eturn type == boolean.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,523,| type == byte.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,524,| type == char.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,525,| type == double.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,526,| type == float.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,527,| type == int.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,528,| type == long.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,529,| type == short.class
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,530,| type == void.class;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,534, Returns the component type of this array type.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,535, @throws ClassCastException if this type is not an array.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,537,ublic Type getArrayComponentType() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,538,eturn ((GenericArrayType) type).getGenericComponentType();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,542, Returns the element type of this collection type.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,543, @throws IllegalArgumentException if this type is not a collection.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,545,ublic Type getCollectionElementType() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,546,ypeToken<?> collectionType = getSupertype(Collection.class);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,547,eturn ((ParameterizedType) collectionType.getType()).getActualTypeArguments()[0];
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,551, Returns a two element array containing this map's key and value types in
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,552, positions 0 and 1 respectively.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,554,ublic Type[] getMapKeyAndValueTypes() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,556, Work around a problem with the declaration of java.util.Properties. That
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,557," class should extend Hashtable<String, String>, but it's declared to"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,558," extend Hashtable<Object, Object>."
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,560,f (type == Properties.class) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,561,"eturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,564,ypeToken<?> mapTypeToken = TypeToken.get(type).getSupertype(Map.class);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,565,arameterizedType mapParameterizedType = (ParameterizedType) mapTypeToken.getType();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,566,eturn mapParameterizedType.getActualTypeArguments();
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,154,ypeToken<?> typeToken = TypeToken.get(genericClass);
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,155,tring className = typeToken.getRawType().getSimpleName();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,153,Class<?> rawType = Types.getRawType(genericClass);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,154,String className = rawType.getSimpleName();
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,157,f (typeToken.isPrimitive()) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,156,if (Primitives.isPrimitive(genericClass)) {
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,159,"alue = (T) typeAdapter.adaptType(value, typeToken.getRawType());"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,158,"value = (T) typeAdapter.adaptType(value, rawType);"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,17,package com.google.gson.reflect;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,20,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,21,import java.util.List;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,22,import java.util.RandomAccess;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,23,import java.util.Set;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,24,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,27,* @author Jesse Wilson
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,29,"@SuppressWarnings({""UnusedDeclaration"", ""deprecation""})"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,30,public final class TypeTokenTest extends TestCase {
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,32,List<Integer> listOfInteger = null;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,33,List<Number> listOfNumber = null;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,34,List<String> listOfString = null;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,35,List<?> listOfUnknown = null;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,36,List<Set<String>> listOfSetOfString = null;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,37,List<Set<?>> listOfSetOfUnknown = null;
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,39,public void testIsAssignableFromRawTypes() {
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,40,assertTrue(TypeToken.get(Object.class).isAssignableFrom(String.class));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,41,assertFalse(TypeToken.get(String.class).isAssignableFrom(Object.class));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,42,assertTrue(TypeToken.get(RandomAccess.class).isAssignableFrom(ArrayList.class));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,43,assertFalse(TypeToken.get(ArrayList.class).isAssignableFrom(RandomAccess.class));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,46,public void testIsAssignableFromWithTypeParameters() throws Exception {
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,47,"Type a = getClass().getDeclaredField(""listOfInteger"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,48,"Type b = getClass().getDeclaredField(""listOfNumber"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,49,assertTrue(TypeToken.get(a).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,50,assertTrue(TypeToken.get(b).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,52,// listOfInteger = listOfNumber; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,53,assertFalse(TypeToken.get(a).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,54,// listOfNumber = listOfInteger; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,55,assertFalse(TypeToken.get(b).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,58,public void testIsAssignableFromWithBasicWildcards() throws Exception {
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,59,"Type a = getClass().getDeclaredField(""listOfString"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,60,"Type b = getClass().getDeclaredField(""listOfUnknown"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,61,assertTrue(TypeToken.get(a).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,62,assertTrue(TypeToken.get(b).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,64,// listOfString = listOfUnknown  // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,65,assertFalse(TypeToken.get(a).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,66,listOfUnknown = listOfString; // compiles; must be true
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,67,assertTrue(TypeToken.get(b).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,70,public void testIsAssignableFromWithNestedWildcards() throws Exception {
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,71,"Type a = getClass().getDeclaredField(""listOfSetOfString"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,72,"Type b = getClass().getDeclaredField(""listOfSetOfUnknown"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,73,assertTrue(TypeToken.get(a).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,74,assertTrue(TypeToken.get(b).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,76,// listOfSetOfString = listOfSetOfUnknown; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,77,assertFalse(TypeToken.get(a).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,78,// listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,79,assertFalse(TypeToken.get(b).isAssignableFrom(a));

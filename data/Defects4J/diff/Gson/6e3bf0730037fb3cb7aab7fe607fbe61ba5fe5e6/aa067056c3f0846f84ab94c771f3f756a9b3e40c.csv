is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,47,"omponentTypeAdapter, $Gson$Types.getRawType(componentType));"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,47,"context, componentTypeAdapter, $Gson$Types.getRawType(componentType));"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,52,private final MiniGson context;
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,55,"ublic ArrayTypeAdapter(TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,56,"public ArrayTypeAdapter(MiniGson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,57,this.context = context;
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,89,"omponentTypeAdapter.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,91,"Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(componentType, array, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,92,TypeAdapter t = runtimeType != componentType ?
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,93,context.getAdapter(TypeToken.get(runtimeType)) : componentTypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,94,"t.write(writer, value);"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,92,ollection<E> collection = MiniGson.newInstance(constructor);
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,92,Collection<E> collection = Reflection.newInstance(constructor);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,20,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,21,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,23,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,24,mport java.lang.reflect.InvocationTargetException;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,26,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,27,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,28,import com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,70,/ TODO: this should use Joel's unsafe constructor stuff
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,71,tatic <T> T newInstance(Constructor<T> constructor) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,72,ry {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,73,bject[] args = null;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,74,eturn constructor.newInstance(args);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,75, catch (InstantiationException e) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,76,/ TODO: JsonParseException ?
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,77,hrow new RuntimeException(e);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,78, catch (InvocationTargetException e) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,79,/ TODO: don't wrap if cause is unchecked!
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,80,/ TODO: JsonParseException ?
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,81,hrow new RuntimeException(e.getTargetException());
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,82, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,83,hrow new AssertionError(e);
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,16,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,18,import java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,19,import java.lang.reflect.InvocationTargetException;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,21,import java.lang.reflect.TypeVariable;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,23,final class Reflection {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,25,* Finds a compatible runtime type if it is more specific
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,26,"* In case of a field of an object, parent is the object instance, and child is the field value."
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,27,"* In case of an Array, parent is the array instance, and the child is the array element."
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,29,"public static Type getRuntimeTypeIfMoreSpecific(Type type, Object parent, Object child) {"
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,30,if (parent == null || child == null) {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,31,return type;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,33,if (type == Object.class || type instanceof TypeVariable || type instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,34,type = (Class<?>) child.getClass();
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,36,return type;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,39,// TODO: this should use Joel's unsafe constructor stuff
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,40,public static <T> T newInstance(Constructor<T> constructor) {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,41,try {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,42,Object[] args = null;
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,43,return constructor.newInstance(args);
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,44,} catch (InstantiationException e) {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,45,// TODO: JsonParseException ?
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,46,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,47,} catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,48,// TODO: don't wrap if cause is unchecked!
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,49,// TODO: JsonParseException ?
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,50,throw new RuntimeException(e.getTargetException());
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,51,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,52,throw new AssertionError(e);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,63,nstance = (T) MiniGson.newInstance(constructor);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,63,instance = (T) Reflection.newInstance(constructor);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,125,"ype resolvedTypeOfField = getMoreSpecificType(declaredTypeOfField, value, fieldValue);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,125,"Type resolvedTypeOfField = Reflection.getRuntimeTypeIfMoreSpecific(declaredTypeOfField, value, fieldValue);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,138,"rivate static Type getMoreSpecificType(Type type, Object obj, Object fieldValue) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,139,f (obj == null || fieldValue == null) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,140,eturn type;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,142,f (type == Object.class || type instanceof TypeVariable || type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,143,ype = (Class<?>) fieldValue.getClass();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,145,eturn type;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,82,"ap<String, V> map = MiniGson.newInstance(constructor);"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,82,"Map<String, V> map = Reflection.newInstance(constructor);"

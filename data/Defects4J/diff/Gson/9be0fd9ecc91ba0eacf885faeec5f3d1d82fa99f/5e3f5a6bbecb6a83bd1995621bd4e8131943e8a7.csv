is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214,"actories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,215,"actories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,221,"factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,222,"factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,19,import java.lang.reflect.Constructor;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,271,public void testOverrideBigIntegerTypeAdapter() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,272,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,273,".registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class))"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,274,.create();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,275,"assertEquals(""\""123\"""", gson.toJson(new BigInteger(""123""), BigInteger.class));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,276,"assertEquals(new BigInteger(""123""), gson.fromJson(""\""123\"""", BigInteger.class));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,279,public void testOverrideBigDecimalTypeAdapter() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,280,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,281,".registerTypeAdapter(BigDecimal.class, new NumberAsStringAdapter(BigDecimal.class))"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,282,.create();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,283,"assertEquals(""\""1.1\"""", gson.toJson(new BigDecimal(""1.1""), BigDecimal.class));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,284,"assertEquals(new BigDecimal(""1.1""), gson.fromJson(""\""1.1\"""", BigDecimal.class));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,695,static class NumberAsStringAdapter extends TypeAdapter<Number> {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,696,private final Constructor<? extends Number> constructor;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,697,NumberAsStringAdapter(Class<? extends Number> type) throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,698,this.constructor = type.getConstructor(String.class);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,700,"@Override public void write(JsonWriter out, Number value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,701,out.value(value.toString());
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,703,@Override public Number read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,704,try {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,705,return constructor.newInstance(in.nextString());
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,706,} catch (Exception e) {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,707,throw new AssertionError(e);

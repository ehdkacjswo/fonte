is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,82,"bjectNavigator on = navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT, true));"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,82,ObjectNavigator on =
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,83,"navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT, true));"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,69,ype objType = objTypePair.getType();
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,70,sonDeserializer deserializer = deserializers.getHandlerFor(objType);
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,71,f (deserializer != null) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,72,f (!json.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,73,"arget = (T) deserializer.deserialize(json, objType, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,75,eturn true;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,69,"Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(deserializers);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,70,if (pair == null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,71,return false;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,73,if (!json.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,74,JsonDeserializer deserializer = pair.getFirst();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,75,Type objType = pair.getSecond().getType();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,76,"target = (T) deserializer.deserialize(json, objType, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,77,eturn false;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,78,return true;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,95,"bjectNavigator on = factory.create(new ObjectTypePair(null, type, true));"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,96,"ObjectNavigator on = factory.create(new ObjectTypePair(null, type, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,152,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,179,"air<JsonSerializer, ObjectTypePair> pair = objTypePair.getMatchingSerializer(serializers);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,178,"Pair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,195,"SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,105,objTypePair.setObject(objectToVisit);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,112,"/ TODO(Joel): this is only used for deserialization of ""primitves"""
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,112,"// TODO(Joel): this is only used for deserialization of ""primitives"""
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,26,rivate final Object obj;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,26,private Object obj;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,40,void setObject(Object obj) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,41,this.obj = obj;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,44,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,45,"air<JsonSerializer, ObjectTypePair> getMatchingSerializer("
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,46,arameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,47,reconditions.checkNotNull(obj);
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,48,sonSerializer serializer = null;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,49,f (!preserveType) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,50,/ First try looking up the serializer for the actual type
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,48,"<HANDLER> Pair<HANDLER, ObjectTypePair> getMatchingHandler("
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,49,ParameterizedTypeHandlerMap<HANDLER> handlers) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,50,HANDLER handler = null;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,51,if (!preserveType && obj != null) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,52,// First try looking up the handler for the actual type
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,52,erializer = serializers.getHandlerFor(moreSpecificType.type);
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,53,f (serializer != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,54,"eturn new Pair<JsonSerializer, ObjectTypePair>(serializer, moreSpecificType);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,54,handler = handlers.getHandlerFor(moreSpecificType.type);
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,55,if (handler != null) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,56,"return new Pair<HANDLER, ObjectTypePair>(handler, moreSpecificType);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,58,erializer = serializers.getHandlerFor(type);
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,59,"eturn serializer == null ? null : new Pair<JsonSerializer, ObjectTypePair>(serializer, this);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,60,handler = handlers.getHandlerFor(type);
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,61,"return handler == null ? null : new Pair<HANDLER, ObjectTypePair>(handler, this);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,128,public boolean isPreserveType() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,129,return preserveType;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,2,* Copyright (C) 2009 Google Inc.
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,23,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,24,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,25,import com.google.gson.InstanceCreator;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,26,import com.google.gson.common.TestTypes.Base;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,27,import com.google.gson.common.TestTypes.ClassWithBaseField;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,28,import com.google.gson.common.TestTypes.Sub;
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,31,* Functional Test exercising custom serialization only.  When test applies to both
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,32,* serialization and deserialization then add it to CustomTypeAdapterTest.
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,34,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,36,public class InstanceCreatorTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,38,public void testInstanceCreatorReturnsBaseType() {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,39,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,40,".registerTypeAdapter(Base.class, new InstanceCreator<Base>() {"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,41,public Base createInstance(Type type) {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,42,return new Base();
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,45,.create();
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,46,"String json = ""{baseName:'BaseRevised',subName:'Sub'}"";"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,47,"Base base = gson.fromJson(json, Base.class);"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,48,"assertEquals(""BaseRevised"", base.baseName);"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,51,public void testInstanceCreatorReturnsSubTypeForTopLevelObject() {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,52,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,53,".registerTypeAdapter(Base.class, new InstanceCreator<Base>() {"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,54,public Base createInstance(Type type) {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,55,return new Sub();
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,58,.create();
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,59,"String json = ""{baseName:'Base',subName:'SubRevised'}"";"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,60,"Base base = gson.fromJson(json, Base.class);"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,61,"assertFalse(""SubRevised"".equals(((Sub)base).subName));"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,64,public void testInstanceCreatorReturnsSubTypeForField() {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,65,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,66,".registerTypeAdapter(Base.class, new InstanceCreator<Base>() {"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,67,public Base createInstance(Type type) {
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,68,return new Sub();
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,71,.create();
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,72,"String json = ""{base:{baseName:'Base',subName:'SubRevised'}}"";"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,73,"ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);"
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,74,assertTrue(target.base instanceof Sub);
True,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java,75,"assertEquals(""SubRevised"", ((Sub)target.base).subName);"

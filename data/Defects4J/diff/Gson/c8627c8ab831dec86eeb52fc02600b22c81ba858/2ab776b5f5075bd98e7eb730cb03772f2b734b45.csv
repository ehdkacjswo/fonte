is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,27," Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,27,"* Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc7159.txt"">RFC 7159</a>)"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,574,f (stackSize == 1) {
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,575,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,586,f (stackSize == 1) {
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,587,heckLenient(); // Top-level value isn't an array or an object.
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,33," Writes a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,33,"* Writes a JSON (<a href=""http://www.ietf.org/rfc/rfc7159.txt"">RFC 7159</a>)"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,133," From RFC 4627, ""All Unicode characters may be placed within the"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,133,"* From RFC 7159, ""All Unicode characters may be placed within the"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,225," href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. Setting the writer"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,225,"* href=""http://www.ietf.org/rfc/rfc7159.txt"">RFC 7159</a>. Setting the writer"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,325,eforeValue(true);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,325,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,418,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,418,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,435,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,435,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,454,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,454,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,466,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,466,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,483,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,483,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,495,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,495,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,518,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,518,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,612," @param root true if the value is a new array or object, the two values"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,613,     permitted as top-level elements.
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,616,rivate void beforeValue(boolean root) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,613,private void beforeValue() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,625,f (!lenient && !root) {
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,626,hrow new IllegalStateException(
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,627,"JSON must start with an array or an object."");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,198,ublic void testNoTopLevelObject() {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,199,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,200,"ew JsonReader(reader(""true"")).nextBoolean();"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,201,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,202, catch (IOException expected) {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1230,ublic void testStrictTopLevelString() {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1231,"sonReader reader = new JsonReader(reader(""\""a\""""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1232,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1233,eader.nextString();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1234,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1235, catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1222,public void testTopLevelValueTypes() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1223,"JsonReader reader1 = new JsonReader(reader(""true""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1224,assertTrue(reader1.nextBoolean());
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1225,"assertEquals(JsonToken.END_DOCUMENT, reader1.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1239,ublic void testLenientTopLevelString() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1240,"sonReader reader = new JsonReader(reader(""\""a\""""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1241,eader.setLenient(true);
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1242,"ssertEquals(""a"", reader.nextString());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1243,"ssertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1227,"JsonReader reader2 = new JsonReader(reader(""false""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1228,assertFalse(reader2.nextBoolean());
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1229,"assertEquals(JsonToken.END_DOCUMENT, reader2.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1246,ublic void testStrictTopLevelValueType() {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1247,"sonReader reader = new JsonReader(reader(""true""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1248,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1249,eader.nextBoolean();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1250,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1251, catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1231,"JsonReader reader3 = new JsonReader(reader(""null""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1232,"assertEquals(JsonToken.NULL, reader3.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1233,reader3.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1234,"assertEquals(JsonToken.END_DOCUMENT, reader3.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1255,ublic void testLenientTopLevelValueType() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1256,"sonReader reader = new JsonReader(reader(""true""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1257,eader.setLenient(true);
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1258,"ssertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1236,"JsonReader reader4 = new JsonReader(reader(""123""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1237,"assertEquals(123, reader4.nextInt());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1238,"assertEquals(JsonToken.END_DOCUMENT, reader4.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1240,"JsonReader reader5 = new JsonReader(reader(""123.4""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1241,"assertEquals(123.4, reader5.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1242,"assertEquals(JsonToken.END_DOCUMENT, reader5.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1244,"JsonReader reader6 = new JsonReader(reader(""\""a\""""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1245,"assertEquals(""a"", reader6.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1246,"assertEquals(JsonToken.END_DOCUMENT, reader6.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1261,ublic void testStrictTopLevelValueTypeWithSkipValue() {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1249,public void testTopLevelValueTypeWithSkipValue() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1263,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1264,eader.skipValue();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1265,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1266, catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1251,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1252,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,28,ublic void testWrongTopLevelType() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,28,public void testTopLevelValueTypes() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,29,StringWriter string1 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,30,JsonWriter writer1 = new JsonWriter(string1);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,31,writer1.value(true);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,32,writer1.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,33,"assertEquals(""true"", string1.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,35,StringWriter string2 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,36,JsonWriter writer2 = new JsonWriter(string2);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,37,writer2.nullValue();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,38,writer2.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,39,"assertEquals(""null"", string2.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,41,StringWriter string3 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,42,JsonWriter writer3 = new JsonWriter(string3);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,43,writer3.value(123);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,44,writer3.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,45,"assertEquals(""123"", string3.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,47,StringWriter string4 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,48,JsonWriter writer4 = new JsonWriter(string4);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,49,writer4.value(123.4);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,50,writer4.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,51,"assertEquals(""123.4"", string4.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,53,StringWriter string5 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,54,JsonWriter writert = new JsonWriter(string5);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,55,"writert.value(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,56,writert.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,57,"assertEquals(""\""a\"""", string5.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,60,public void testInvalidTopLevelTypes() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,63,"jsonWriter.name(""hello"");"
False,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,32,"sonWriter.value(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,65,"jsonWriter.value(""world"");"

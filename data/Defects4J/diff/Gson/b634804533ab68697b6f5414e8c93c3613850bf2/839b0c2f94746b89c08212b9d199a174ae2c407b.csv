is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,205,"eturn toJsonTree(src, src.getClass());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,205,"return toJsonTree(src, src.getClass(), false);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,"return toJsonTree(src, typeOfSrc, true);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,228,"private JsonElement toJsonTree(Object src, Type typeOfSrc, boolean preserveType) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,228,sonSerializationContext context = new JsonSerializationContextDefault(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,232,JsonSerializationContextDefault context = new JsonSerializationContextDefault(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,230,"eturn context.serialize(src, typeOfSrc);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,234,"return context.serialize(src, typeOfSrc, preserveType);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,250,"eturn toJson(src, src.getClass());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,"return toJson(src, src.getClass(), false);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,273,"return toJson(src, typeOfSrc, true);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,276,"private String toJson(Object src, Type typeOfSrc, boolean preserveType) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,270,"oJson(src, typeOfSrc, writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,278,"toJson(src, typeOfSrc, writer, preserveType);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,290,"oJson(src, src.getClass(), writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,298,"toJson(src, src.getClass(), writer, false);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,315,"sonElement jsonElement = toJsonTree(src, typeOfSrc);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,323,"toJson(src, typeOfSrc, writer, true);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,326,"private void toJson(Object src, Type typeOfSrc, Appendable writer, boolean preserveType) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,327,"JsonElement jsonElement = toJsonTree(src, typeOfSrc, preserveType);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,63,"bjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, arrayType));"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,63,"ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, arrayType, true));"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,72,"bjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, typeOfT));"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,72,"ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, typeOfT, true));"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,82,"bjectNavigator on = navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT));"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,82,"ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT, true));"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,95,"bjectNavigator on = factory.create(new ObjectTypePair(null, type));"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,95,"ObjectNavigator on = factory.create(new ObjectTypePair(null, type, true));"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,102,public ObjectTypePair getActualTypeIfMoreSpecific(ObjectTypePair objTypePair) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,103,return objTypePair;
False,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,45,"eturn serialize(src, src.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,45,"return serialize(src, src.getClass(), false);"
False,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,49,"bjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc));"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,49,"return serialize(src, typeOfSrc, true);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,52,"public JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,53,"ObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc, preserveType));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,39,"arameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,40,"sonSerializationContext context, MemoryRefStack ancestors) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,39,"ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers, JsonSerializationContext context,"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,40,MemoryRefStack ancestors) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,80,f (child != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,81,"hildType = getActualTypeIfMoreSpecific(childType, child.getClass());"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,83,"ddAsArrayElement(new ObjectTypePair(child, childType));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,80,// we should not get more specific component type yet since it is possible
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,81,// that a custom
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,82,// serializer is registered for the componentType
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,83,"addAsArrayElement(new ObjectTypePair(child, childType, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,95,"ddAsChildOfObject(f, new ObjectTypePair(array, typeOfF));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,95,"addAsChildOfObject(f, new ObjectTypePair(array, typeOfF, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,110,f (fieldValue != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,111,"ypeOfF = getActualTypeIfMoreSpecific(typeOfF, fieldValue.getClass());"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,"ddAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,110,// we should not get more specific component type yet since it is
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,111,// possible that a custom
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,112,// serializer is registered for the componentType
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,"addAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,120,"/ This takes care of situations where the field was declared as an Object, but the"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,121,/ actual value contains something more specific. See Issue 54.
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,122,"/ TODO (inder): This solution will not work if the field is of a generic type, but"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,123,/ the actual object is of a raw type (which is a sub-class of the generic type).
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,124,"rivate Type getActualTypeIfMoreSpecific(Type type, Class<?> actualClass) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,125,f (type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,126,lass<?> typeAsClass = (Class<?>) type;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,127,f (typeAsClass.isAssignableFrom(actualClass)) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,128,ype = actualClass;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,130,f (type == Object.class) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,131,ype = actualClass;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,134,eturn type;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,173,ype objType = objTypePair.getType();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,174,sonSerializer serializer = serializers.getHandlerFor(objType);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,175,f (serializer == null && obj != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,176,erializer = serializers.getHandlerFor(obj.getClass());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,179,f (serializer != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,180,f (obj == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,156,if (obj == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,157,if (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,182, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,183,"ssignToRoot(invokeCustomHandler(objTypePair, serializer));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,187,eturn false;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,162,JsonElement element = findAndInvokeCustomSerializer(objTypePair);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,163,if (element != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,164,assignToRoot(element);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,165,return true;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,166,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,167,return false;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,175,* objTypePair.getObject() must not be null
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,"rivate JsonElement invokeCustomHandler(ObjectTypePair objTypePair, JsonSerializer serializer) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,178,private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,179,"Pair<JsonSerializer, ObjectTypePair> pair = objTypePair.getMatchingSerializer(serializers);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,180,if (pair == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,181,return null;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,183,JsonSerializer serializer = pair.getFirst();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,184,objTypePair = pair.getSecond();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,204,"ublic boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,"public boolean visitFieldUsingCustomHandler(Field f, Type declaredTypeOfField, Object parent) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,214,sonSerializer serializer = serializers.getHandlerFor(actualTypeOfField);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,215,f (serializer != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,216,"bjectTypePair objTypePair = new ObjectTypePair(obj, actualTypeOfField);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,217,"sonElement child = invokeCustomHandler(objTypePair, serializer);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,204,"ObjectTypePair objTypePair = new ObjectTypePair(obj, declaredTypeOfField, false);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,205,JsonElement child = findAndInvokeCustomSerializer(objTypePair);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,206,if (child != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,209,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,210,return false;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,221,eturn false;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,240,public ObjectTypePair getActualTypeIfMoreSpecific(ObjectTypePair objTypePair) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,241,return objTypePair.toMoreSpecificType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,66,public ObjectTypePair getActualTypeIfMoreSpecific(ObjectTypePair objTypePair);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,117,"/ For all classes in the inheritance hierarchy (including the current class),"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,118,/ visit all fields
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119,lass<?> topLevelClass = (objTypeInfo.getRawClass() == Object.class)
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,120, objectToVisit.getClass() : objTypeInfo.getRawClass();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119,ObjectTypePair currObjTypePair = visitor.getActualTypeIfMoreSpecific(objTypePair);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,120,Class<?> topLevelClass = new TypeInfo(currObjTypePair.getType()).getRawClass();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,148,ype actualTypeOfField = fieldTypeInfo.getActualType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,148,Type declaredTypeOfField = fieldTypeInfo.getActualType();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,150,"isitor.visitFieldUsingCustomHandler(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,150,"visitor.visitFieldUsingCustomHandler(f, declaredTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,153,"isitor.visitArrayField(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,153,"visitor.visitArrayField(f, declaredTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,155,"isitor.visitObjectField(f, actualTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,155,"visitor.visitObjectField(f, declaredTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,30,private final boolean preserveType;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,31,"ublic ObjectTypePair(Object obj, Type type) {"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,32,"ObjectTypePair(Object obj, Type type, boolean preserveType) {"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,35,this.preserveType = preserveType;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,36,ublic Object getObject() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,38,Object getObject() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,40,ublic Type getType() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,42,Type getType() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,43,return type;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,46,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,47,"Pair<JsonSerializer, ObjectTypePair> getMatchingSerializer("
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,48,ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,49,if (obj == null) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,50,return null;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,52,JsonSerializer serializer = null;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,53,if (!preserveType) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,54,// First try looking up the serializer for the actual type
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,55,ObjectTypePair moreSpecificType = toMoreSpecificType();
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,56,serializer = serializers.getHandlerFor(moreSpecificType.type);
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,57,if (serializer != null) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,58,"return new Pair<JsonSerializer, ObjectTypePair>(serializer, moreSpecificType);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,61,// Try the specified type
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,62,serializer = serializers.getHandlerFor(type);
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,63,"return serializer == null ? null : new Pair<JsonSerializer, ObjectTypePair>(serializer, this);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,66,ObjectTypePair toMoreSpecificType() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,67,if (preserveType || obj == null) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,68,return this;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,70,"Type actualType = getActualTypeIfMoreSpecific(type, obj.getClass());"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,71,if (actualType == type) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,72,return this;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,74,"return new ObjectTypePair(obj, actualType, preserveType);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,77,"// This takes care of situations where the field was declared as an Object, but the"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,78,// actual value contains something more specific. See Issue 54.
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,79,"// TODO (inder): This solution will not work if the field is of a generic type, but"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,80,// the actual object is of a raw type (which is a sub-class of the generic type).
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,81,"static Type getActualTypeIfMoreSpecific(Type type, Class<?> actualClass) {"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,82,if (type instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,83,Class<?> typeAsClass = (Class<?>) type;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,84,if (typeAsClass.isAssignableFrom(actualClass)) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,85,type = actualClass;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,87,if (type == Object.class) {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,88,type = actualClass;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,77,eturn true;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,127,return preserveType == other.preserveType;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,2,* Copyright (C) 2009 Google Inc.
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,16,package com.google.gson;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,18,"final class Pair<FIRST, SECOND> {"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,20,private final FIRST first;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,21,private final SECOND second;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,23,"Pair(FIRST first, SECOND second) {"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,24,this.first = first;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,25,this.second = second;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,28,public FIRST getFirst() {
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,29,return first;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,32,public SECOND getSecond() {
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/Pair.java,33,return second;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,46,"bjectTypePair obj = new ObjectTypePair(this, getClass());"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,46,"ObjectTypePair obj = new ObjectTypePair(this, getClass(), true);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,54,"bjectTypePair obj = new ObjectTypePair(this, getClass());"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,54,"ObjectTypePair obj = new ObjectTypePair(this, getClass(), true);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,67,"tack.push(new ObjectTypePair(objA, MockObject.class));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,"ssertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class)));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,69,"ssertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class)));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,67,"stack.push(new ObjectTypePair(objA, MockObject.class, true));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,"assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true)));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,69,"assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true)));"
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,19,mport java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,22,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,29,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,39,public static class Base {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,40,public static final String BASE_NAME = Base.class.getSimpleName();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,41,"public static final String BASE_FIELD_KEY = ""baseName"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,42,"public static final String SERIALIZER_KEY = ""serializerName"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,43,public String baseName = BASE_NAME;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,44,public String serializerName;
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,38,ublic static class BaseClass {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,39,inal String baseField;
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,40,ublic BaseClass() {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,41,"his(""baseFieldValue"");"
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,43,ublic BaseClass(String value) {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,44,his.baseField = value;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,47,public static class Sub extends Base {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,48,public static final String SUB_NAME = Sub.class.getSimpleName();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,49,"public static final String SUB_FIELD_KEY = ""subName"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,50,public final String subName = SUB_NAME;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,53,public static class ClassWithBaseField {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,54,"public static final String FIELD_KEY = ""base"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,55,public final Base base;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,56,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,57,private ClassWithBaseField() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,58,this(null);
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,46,ublic String getExpectedJson() {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,47,"eturn String.format(""{\""baseField\"":\""%s\""}"", baseField);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,60,public ClassWithBaseField(Base base) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,61,this.base = base;
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,51,ublic static class SubClass extends BaseClass {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,52,inal String subField;
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,53,ublic SubClass() {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,54,"his(""subFieldValue"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,65,public static class ClassWithBaseArrayField {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,66,"public static final String FIELD_KEY = ""base"";"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,67,public final Base[] base;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,68,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,69,private ClassWithBaseArrayField() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,70,this(null);
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,56,ublic SubClass(String subFieldValue) {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,57,his.subField = subFieldValue;
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,59,Override
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,60,ublic String getExpectedJson() {
False,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,61,"eturn String.format(""{\""subField\"":\""%s\"",\""baseField\"":\""%s\""}"", subField, baseField);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,72,public ClassWithBaseArrayField(Base[] base) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,73,this.base = base;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,77,public static class BaseSerializer implements JsonSerializer<Base> {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,78,public static final String NAME = BaseSerializer.class.getSimpleName();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,79,"public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,80,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,81,"obj.addProperty(Base.SERIALIZER_KEY, NAME);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,82,return obj;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,85,public static class SubSerializer implements JsonSerializer<Sub> {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,86,public static final String NAME = SubSerializer.class.getSimpleName();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,87,"public JsonElement serialize(Sub src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,88,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,89,"obj.addProperty(Base.SERIALIZER_KEY, NAME);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,90,return obj;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,2,* Copyright (C) 2009 Google Inc.
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,21,import com.google.gson.JsonArray;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,22,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,23,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,24,import com.google.gson.common.TestTypes.Base;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,25,import com.google.gson.common.TestTypes.BaseSerializer;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,26,import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,27,import com.google.gson.common.TestTypes.ClassWithBaseField;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,28,import com.google.gson.common.TestTypes.Sub;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,29,import com.google.gson.common.TestTypes.SubSerializer;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,31,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,34,* Functional Test exercising custom serialization only.  When test applies to both
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,35,* serialization and deserialization then add it to CustomTypeAdapterTest.
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,37,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,39,public class CustomSerializerTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,41,public void testBaseClassSerializerInvokedForBaseClassFields() {
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,42,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,43,".registerTypeAdapter(Base.class, new BaseSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,44,".registerTypeAdapter(Sub.class, new SubSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,45,.create();
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,46,ClassWithBaseField target = new ClassWithBaseField(new Base());
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,47,JsonObject json = (JsonObject) gson.toJsonTree(target);
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,48,"JsonObject base = json.get(""base"").getAsJsonObject();"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,49,"assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,52,public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,53,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,54,".registerTypeAdapter(Base.class, new BaseSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,55,".registerTypeAdapter(Sub.class, new SubSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,56,.create();
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,57,ClassWithBaseField target = new ClassWithBaseField(new Sub());
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,58,JsonObject json = (JsonObject) gson.toJsonTree(target);
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,59,"JsonObject base = json.get(""base"").getAsJsonObject();"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,60,"assertEquals(SubSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,63,public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances() {
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,64,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,65,".registerTypeAdapter(Base.class, new BaseSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,66,".registerTypeAdapter(Sub.class, new SubSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,67,.create();
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,68,"ClassWithBaseArrayField target = new ClassWithBaseArrayField(new Base[] {new Sub(), new Sub()});"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,69,JsonObject json = (JsonObject) gson.toJsonTree(target);
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,70,"JsonArray array = json.get(""base"").getAsJsonArray();"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,71,for (JsonElement element : array) {
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,72,JsonElement serializerKey = element.getAsJsonObject().get(Base.SERIALIZER_KEY);
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,73,"assertEquals(SubSerializer.NAME, serializerKey.getAsString());"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,77,public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances() {
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,78,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,79,".registerTypeAdapter(Base.class, new BaseSerializer())"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,80,.create();
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,81,ClassWithBaseField target = new ClassWithBaseField(new Sub());
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,82,JsonObject json = (JsonObject) gson.toJsonTree(target);
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,83,"JsonObject base = json.get(""base"").getAsJsonObject();"
True,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java,84,"assertEquals(BaseSerializer.NAME, base.get(Base.SERIALIZER_KEY).getAsString());"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,19,import com.google.gson.JsonArray;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,20,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,21,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,22,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,23,import com.google.gson.common.TestTypes.Base;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,24,import com.google.gson.common.TestTypes.ClassWithBaseArrayField;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,25,import com.google.gson.common.TestTypes.ClassWithBaseField;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,26,import com.google.gson.common.TestTypes.Nested;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,27,import com.google.gson.common.TestTypes.Sub;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,29,import junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,26,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,28,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,29,mport com.google.gson.common.TestTypes.BagOfPrimitives;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,30,mport com.google.gson.common.TestTypes.BaseClass;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,31,mport com.google.gson.common.TestTypes.Nested;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,32,mport com.google.gson.common.TestTypes.SubClass;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,65,ublic void testClassWithBaseFieldSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,66,lassWithBaseFields sub = new ClassWithBaseFields();
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,67,ub.field = new SubClass();
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,68,tring json = gson.toJson(sub);
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,69,tring expectedJson = sub.field.getExpectedJson();
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,70,ssertTrue(json.contains(expectedJson));
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,70,public void testClassWithBaseFieldSerialization() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,71,ClassWithBaseField sub = new ClassWithBaseField(new Sub());
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,72,JsonObject json = (JsonObject) gson.toJsonTree(sub);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,73,JsonElement base = json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,74,"assertEquals(Sub.SUB_NAME, base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());"
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,73,ublic void testClassWithBaseArrayFieldSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,74,lassWithBaseFields sub = new ClassWithBaseFields();
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,75,"ub.array = new BaseClass[]{ new SubClass(""sub1""), new SubClass(""sub2"")};"
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,76,tring json = gson.toJson(sub);
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,77,"ssertTrue(json.contains(""sub1""));"
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,78,"ssertTrue(json.contains(""sub2""));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,77,public void testClassWithBaseArrayFieldSerialization() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,78,"Base[] baseClasses = new Base[]{ new Sub(), new Sub()};"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,79,ClassWithBaseArrayField sub = new ClassWithBaseArrayField(baseClasses);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,80,JsonObject json = gson.toJsonTree(sub).getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,81,JsonArray bases = json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,82,for (JsonElement element : bases) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,83,"assertEquals(Sub.SUB_NAME, element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());"
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,81,rivate static class ClassWithBaseFields {
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,82,aseClass field;
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,83,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,84,aseClass[] array;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,87,public void testBaseSerializedAsSub() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,88,Base base = new Sub();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,89,JsonObject json = gson.toJsonTree(base).getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,90,"assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,93,public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,94,Base base = new Sub();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,95,"JsonObject json = gson.toJsonTree(base, Base.class).getAsJsonObject();"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,96,"assertEquals(Base.BASE_NAME, json.get(Base.BASE_FIELD_KEY).getAsString());"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,97,assertNull(json.get(Sub.SUB_FIELD_KEY));
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,100,public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,101,Base base = new Sub();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,102,"JsonObject json = gson.toJsonTree(base, Sub.class).getAsJsonObject();"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,103,"assertEquals(Sub.SUB_NAME, json.get(Sub.SUB_FIELD_KEY).getAsString());"

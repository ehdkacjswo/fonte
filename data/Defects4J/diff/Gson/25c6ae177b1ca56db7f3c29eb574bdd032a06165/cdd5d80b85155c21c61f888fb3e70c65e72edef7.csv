is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,20,mport java.util.Map;
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,23," Captures all the common/shared logic between the old, ({@link MapTypeAdapter}, and"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,24," the new, {@link MapAsArrayTypeAdapter}, map type adapters."
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,26, @author Joel Leitch
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,28,bstract class BaseMapTypeAdapter
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,29,"mplements JsonSerializer<Map<?, ?>>, JsonDeserializer<Map<?, ?>> {"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,31,"rotected static JsonElement serialize(JsonSerializationContext context,"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,32,"bject src, Type srcType) {"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,33,"eturn context.serialize(src, srcType, false, false);"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,36,"rotected static Map<Object, Object> constructMapType("
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,37,"ype mapType, JsonDeserializationContext context) {"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,38,eturn context.construct(mapType);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,19,mport com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,19,import com.google.gson.internal.ParameterizedTypeHandlerMap;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,26,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,29,mport java.util.Collection;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,32,mport java.util.HashSet;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,33,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,34,mport java.util.LinkedList;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,35,mport java.util.List;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,37,mport java.util.Map;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,38,mport java.util.Queue;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,39,mport java.util.Set;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,40,mport java.util.SortedSet;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,42,mport java.util.TreeSet;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,64,rivate static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,110,"ap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER, true);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,138,"ap.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER), true);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,145,arameterizedTypeHandlerMap<InstanceCreator<?>> map =
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,146,ew ParameterizedTypeHandlerMap<InstanceCreator<?>>();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,147,efaultConstructorAllocator allocator = new DefaultConstructorAllocator(50);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,149,/ Map Instance Creators
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,150,"ap.registerForTypeHierarchy(Map.class,"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,151,"ew DefaultConstructorCreator<Map>(LinkedHashMap.class, allocator), true);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,153,/ Add Collection type instance creators
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,154,efaultConstructorCreator<List> listCreator =
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,155,"ew DefaultConstructorCreator<List>(ArrayList.class, allocator);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,156,efaultConstructorCreator<Queue> queueCreator =
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,157,"ew DefaultConstructorCreator<Queue>(LinkedList.class, allocator);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,158,efaultConstructorCreator<Set> setCreator =
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,159,"ew DefaultConstructorCreator<Set>(HashSet.class, allocator);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,160,efaultConstructorCreator<SortedSet> sortedSetCreator =
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,161,"ew DefaultConstructorCreator<SortedSet>(TreeSet.class, allocator);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,162,"ap.registerForTypeHierarchy(Collection.class, listCreator, true);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,163,"ap.registerForTypeHierarchy(Queue.class, queueCreator, true);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,164,"ap.registerForTypeHierarchy(Set.class, setCreator, true);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,165,"ap.registerForTypeHierarchy(SortedSet.class, sortedSetCreator, true);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,131,ParameterizedTypeHandlerMap<InstanceCreator<?>> map
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,132,= new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,570,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,571,rivate static final class DefaultConstructorCreator<T> implements InstanceCreator<T> {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,572,rivate final Class<? extends T> defaultInstance;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,573,rivate final DefaultConstructorAllocator allocator;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,575,"ublic DefaultConstructorCreator(Class<? extends T> defaultInstance,"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,576,efaultConstructorAllocator allocator) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,577,his.defaultInstance = defaultInstance;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,578,his.allocator = allocator;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,581,ublic T createInstance(Type type) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,582,lass<?> rawType = $Gson$Types.getRawType(type);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,583,ry {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,584, specificInstance = (T) allocator.newInstance(rawType);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,585,eturn (specificInstance == null)
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,586, allocator.newInstance(defaultInstance)
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,587, specificInstance;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,588, catch (Exception e) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,589,hrow new JsonIOException(e);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,593,Override
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,594,ublic String toString() {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,595,eturn DefaultConstructorCreator.class.getSimpleName();
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,19,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,21,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,24, A simple implementation of the {@link JsonElementVisitor} that simply delegates the method
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,25, invocation onto a {@code delegate} instance of the {@link JsonElementVisitor}.  This object
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,26, can be used to build a chain of visitors such that each Visitor instance can perform some
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,27, operation on the {@link JsonElement} and then pass on the input to the delegate.  This kind
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,28," of pattern is sometimes referred as a ""Chain of Responsibility""."
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,30, <p>The following is an example use case:
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,32, <pre>
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,33, class JsonEscapingVisitor extends DelegatingJsonElementVisitor {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,34,   public JsonEscapingVisitor(JsonElementVisitor) {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,35,     super(visitor);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,38,   public void visitPrimitive(JsonPrimitive primitive) {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,39,     JsonPrimitive escapedPrimitive = escapePrimitiveObject(primitive);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,40,     super.visitPrimitive(escapedPrimitive);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,44, JsonElementVisitor visitor = new JsonEscapingVisitor(new FormattingVisitor());
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,45, </pre></p>
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,47, @author Joel Leitch
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,49,inal class DelegatingJsonElementVisitor implements JsonElementVisitor {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,50,rivate final JsonElementVisitor delegate;
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,52,rotected DelegatingJsonElementVisitor(JsonElementVisitor delegate) {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,53,his.delegate = $Gson$Preconditions.checkNotNull(delegate);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,56,ublic void endArray(JsonArray array) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,57,elegate.endArray(array);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,60,ublic void endObject(JsonObject object) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,61,elegate.endObject(object);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,64,ublic void startArray(JsonArray array) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,65,elegate.startArray(array);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,68,ublic void startObject(JsonObject object) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,69,elegate.startObject(object);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,72,"ublic void visitArrayMember(JsonArray parent, JsonPrimitive member,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,73,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,74,"elegate.visitArrayMember(parent, member, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,77,"ublic void visitArrayMember(JsonArray parent, JsonArray member,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,78,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,79,"elegate.visitArrayMember(parent, member, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,82,"ublic void visitArrayMember(JsonArray parent, JsonObject member,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,83,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,84,"elegate.visitArrayMember(parent, member, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,87,"ublic void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,88,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,89,"elegate.visitObjectMember(parent, memberName, member, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,92,"ublic void visitObjectMember(JsonObject parent, String memberName, JsonArray member,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,93,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,94,"elegate.visitObjectMember(parent, memberName, member, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,97,"ublic void visitObjectMember(JsonObject parent, String memberName, JsonObject member,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,98,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,99,"elegate.visitObjectMember(parent, memberName, member, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,102,"ublic void visitNullObjectMember(JsonObject parent, String memberName,"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,103,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,104,"elegate.visitNullObjectMember(parent, memberName, isFirst);"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,107,ublic void visitPrimitive(JsonPrimitive primitive) throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,108,elegate.visitPrimitive(primitive);
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,111,ublic void visitNull() throws IOException {
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,112,elegate.visitNull();
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,115,"ublic void visitNullArrayMember(JsonArray parent, boolean isFirst) throws IOException {"
False,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java,116,"elegate.visitNullArrayMember(parent, isFirst);"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,22,import com.google.gson.internal.Pair;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,19,import com.google.gson.internal.ConstructorConstructor;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,import com.google.gson.internal.ParameterizedTypeHandlerMap;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,21,import com.google.gson.internal.Primitives;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,23,mport com.google.gson.internal.bind.CollectionTypeAdapter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,24,mport com.google.gson.internal.bind.GsonCompatibleMapTypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,26,import com.google.gson.internal.bind.CollectionTypeAdapterFactory;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,27,import com.google.gson.internal.bind.ExcludedTypeAdapterFactory;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,28,import com.google.gson.internal.bind.MapTypeAdapterFactory;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,27,mport com.google.gson.internal.bind.ReflectiveTypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,31,import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,39,import java.io.EOFException;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,116,rivate final MappedObjectConstructor objectConstructor;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,120,private final ConstructorConstructor constructorConstructor;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,167,"ew MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,171,"DefaultTypeAdapters.getDefaultInstanceCreators(),"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,176,"inal MappedObjectConstructor objectConstructor, boolean serializeNulls,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,180,"final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators, boolean serializeNulls,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,184,his.objectConstructor = objectConstructor;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,this.constructorConstructor = new ConstructorConstructor(instanceCreators);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,199,ypeAdapter.Factory reflectiveTypeAdapterFactory =
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,200,ew ReflectiveTypeAdapter.FactoryImpl() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,203,TypeAdapter.Factory reflectiveTypeAdapterFactory
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,204,= new ReflectiveTypeAdapterFactory(constructorConstructor) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,207,eturn !Gson.this.serializationExclusionStrategy.shouldSkipField(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,208,"ew FieldAttributes(declaringClazz, f, declaredType));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,211,ExclusionStrategy strategy = Gson.this.serializationExclusionStrategy;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,return !strategy.shouldSkipClass(f.getType())
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,"&& !strategy.shouldSkipField(new FieldAttributes(declaringClazz, f, declaredType));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,eturn !Gson.this.deserializationExclusionStrategy.shouldSkipField(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,"ew FieldAttributes(declaringClazz, f, declaredType));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,217,ypeAdapter.Factory excludedTypeFactory = new TypeAdapter.Factory() {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,219,lass<?> rawType = type.getRawType();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,220,f (serializationExclusionStrategy.shouldSkipClass(rawType)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,221,| deserializationExclusionStrategy.shouldSkipClass(rawType)) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,222,eturn TypeAdapters.EXCLUDED_TYPE_ADAPTER;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,223, else {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,224,eturn null;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,ExclusionStrategy strategy = Gson.this.deserializationExclusionStrategy;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,219,return !strategy.shouldSkipClass(f.getType())
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,220,"&& !strategy.shouldSkipField(new FieldAttributes(declaringClazz, f, declaredType));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,236,.factory(new ExcludedTypeAdapterFactory(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,237,"serializationExclusionStrategy, deserializationExclusionStrategy))"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,251,factory(excludedTypeFactory)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,252,factory(GsonCompatibleMapTypeAdapter.FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,253,factory(CollectionTypeAdapter.FACTORY)
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,248,.factory(new MapTypeAdapterFactory(constructorConstructor))
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,249,.factory(new CollectionTypeAdapterFactory(constructorConstructor))
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,"factory(new GsonToMiniGsonTypeAdapter(serializers, deserializers, serializeNulls))"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,251,".factory(new GsonToMiniGsonTypeAdapterFactory(serializers, deserializers,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,252,"new JsonDeserializationContext(this), new JsonSerializationContext(this), serializeNulls"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,266,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,267,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,return null;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,273,if (value == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,274,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,275,return;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,290,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,291,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,292,return null;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,297,if (value == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,298,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,299,return;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,322,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,323,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,324,return null;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,329,if (value == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,330,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,331,return;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,665,boolean isEmpty = true;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,669,reader.peek();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,670,isEmpty = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,673,} catch (EOFException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,675,"* For compatibility with JSON 1.5 and earlier, we return null for empty"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,676,* documents instead of throwing.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,678,if (isEmpty) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,679,return null;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,681,throw new JsonSyntaxException(e);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,713,"append("",instanceCreators:"").append(objectConstructor)"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,747,".append("",instanceCreators:"").append(constructorConstructor)"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,21,import com.google.gson.internal.ParameterizedTypeHandlerMap;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,22,import com.google.gson.internal.Primitives;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,683,customSerializers.registerIfAbsent(DefaultTypeAdapters.getDefaultSerializers());
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,691,appedObjectConstructor objConstructor = new MappedObjectConstructor(customInstanceCreators);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,695,"ieldNamingPolicy, objConstructor, serializeNulls,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,696,"fieldNamingPolicy, instanceCreators, serializeNulls,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,16,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,18,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,21,mport com.google.gson.internal.Streams;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,22,mport com.google.gson.internal.bind.MiniGson;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,23,mport com.google.gson.internal.bind.TypeAdapter;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,24,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,25,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,26,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,28,inal class GsonToMiniGsonTypeAdapter implements TypeAdapter.Factory {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,29,rivate final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,30,rivate final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,31,rivate final boolean serializeNulls;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,33,"sonToMiniGsonTypeAdapter(ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,34,"arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers, boolean serializeNulls) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,35,his.serializers = serializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,36,his.deserializers = deserializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,37,his.serializeNulls = serializeNulls;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,40,"ublic <T> TypeAdapter<T> create(final MiniGson miniGson, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,41,inal Type typeOfT = type.getType();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,42,"inal JsonSerializer serializer = serializers.getHandlerFor(typeOfT, false);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,43,"inal JsonDeserializer deserializer = deserializers.getHandlerFor(typeOfT, false);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,44,f (serializer == null && deserializer == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,45,eturn null;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,47,eturn new TypeAdapter() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,48,Override
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,49,ublic Object read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,50,f (deserializer == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,51,/ TODO: handle if deserializer is null
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,52,hrow new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,54,sonElement value = Streams.parse(reader);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,55,f (value.isJsonNull()) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,56,eturn null;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,58,"eturn deserializer.deserialize(value, typeOfT, createDeserializationContext(miniGson));"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,60,Override
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,61,"ublic void write(JsonWriter writer, Object value) throws IOException {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,62,f (serializer == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,63,/ TODO: handle if serializer is null
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,64,hrow new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,66,f (value == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,67,riter.nullValue();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,68,eturn;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,70,"sonElement element = serializer.serialize(value, typeOfT, createSerializationContext(miniGson));"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,71,"treams.write(element, serializeNulls, writer);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,76,ublic JsonSerializationContext createSerializationContext(final MiniGson miniGson) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,77,eturn new JsonSerializationContext() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,78,Override
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,79,"sonElement serialize(Object src, Type typeOfSrc, boolean preserveType, boolean defaultOnly) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,80,ypeToken typeToken = TypeToken.get(typeOfSrc);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,81,eturn miniGson.getAdapter(typeToken).toJsonElement(src);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,85,ublic JsonDeserializationContext createDeserializationContext(final MiniGson miniGson) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,86,eturn new JsonDeserializationContext() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,87,Override
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,88,"ublic <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,89,ypeToken typeToken = TypeToken.get(typeOfT);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,90,eturn (T) miniGson.getAdapter(typeToken).fromJsonElement(json);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,93,Override public <T> T construct(Type type) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,94,hrow new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,97,"Override public Object constructArray(Type type, int length) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,98,hrow new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,101,"Override public <T> T deserializeDefault(JsonElement json, Type typeOfT) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapter.java,102,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,16,package com.google.gson;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,18,import com.google.gson.internal.ParameterizedTypeHandlerMap;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,19,import com.google.gson.internal.Streams;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,20,import com.google.gson.internal.bind.MiniGson;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,21,import com.google.gson.internal.bind.TypeAdapter;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,23,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,24,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,25,import java.io.IOException;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,26,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,28,final class GsonToMiniGsonTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,29,private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,30,private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,31,private final JsonDeserializationContext deserializationContext;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,32,private final JsonSerializationContext serializationContext;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,33,private final boolean serializeNulls;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,35,"GsonToMiniGsonTypeAdapterFactory(ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,36,"ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,37,"JsonDeserializationContext deserializationContext,"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,38,"JsonSerializationContext serializationContext, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,39,this.serializers = serializers;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,40,this.deserializers = deserializers;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,41,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,42,this.deserializationContext = deserializationContext;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,43,this.serializationContext = serializationContext;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,46,"public <T> TypeAdapter<T> create(final MiniGson context, final TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,47,final Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,49,"@SuppressWarnings(""unchecked"") // guaranteed to match typeOfT"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,50,final JsonSerializer<T> serializer
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,51,"= (JsonSerializer<T>) serializers.getHandlerFor(type, false);"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,52,"@SuppressWarnings(""unchecked"") // guaranteed to match typeOfT"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,53,final JsonDeserializer<T> deserializer
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,54,"= (JsonDeserializer<T>) deserializers.getHandlerFor(type, false);"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,56,if (serializer == null && deserializer == null) {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,57,return null;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,60,return new TypeAdapter<T>() {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,62,"* The delegate is lazily created because it may not be needed, and"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,63,* creating it may fail.
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,65,private TypeAdapter<T> delegate;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,67,@Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,68,if (deserializer == null) {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,69,return delegate().read(reader);
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,71,JsonElement value = Streams.parse(reader);
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,72,if (value.isJsonNull()) {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,73,return null;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,75,"return deserializer.deserialize(value, type, deserializationContext);"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,78,"@Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,79,if (serializer == null) {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,80,"delegate().write(writer, value);"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,81,return;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,83,if (value == null) {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,84,writer.nullValue();
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,85,return;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,87,"JsonElement element = serializer.serialize(value, type, serializationContext);"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,88,"Streams.write(element, serializeNulls, writer);"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,91,private TypeAdapter<T> delegate() {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,92,TypeAdapter<T> d = delegate;
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,93,return d != null
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,94,? d
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,95,": (delegate = context.getNextAdapter(GsonToMiniGsonTypeAdapterFactory.this, typeToken));"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,21,mport java.lang.reflect.Array;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,22,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,25, A visitor that populates fields of an object with data from its equivalent
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,26, JSON representation
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,28, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,29, @author Joel Leitch
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,31,inal class JsonArrayDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,33,"sonArrayDeserializationVisitor(JsonArray jsonArray, Type arrayType,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,34,"bjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,35,"bjectConstructor objectConstructor,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,36,"arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,37,sonDeserializationContext context) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,38,"uper(jsonArray, arrayType, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,41,Override
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,42,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,43,rotected T constructTarget() {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,44,f (!json.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,45,"hrow new JsonParseException(""Expecting array found: "" + json);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,47,sonArray jsonArray = json.getAsJsonArray();
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,48,f ($Gson$Types.isArray(targetType)) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,49,"/ We know that we are getting back an array of the required type, so"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,50,/ this typecasting is safe.
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,51,"eturn (T) objectConstructor.constructArray($Gson$Types.getArrayComponentType(targetType),"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,52,sonArray.size());
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,54,/ is a collection
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,55,eturn (T) objectConstructor.construct($Gson$Types.getRawType(targetType));
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,58,"ublic void visitArray(Object array, Type arrayType) {"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,59,f (!json.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,60,"hrow new JsonParseException(""Expecting array found: "" + json);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,62,sonArray jsonArray = json.getAsJsonArray();
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,63,or (int i = 0; i < jsonArray.size(); i++) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,64,sonElement jsonChild = jsonArray.get(i);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,65,bject child;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,67,f (jsonChild == null || jsonChild.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,68,hild = null;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,69, else if (jsonChild instanceof JsonObject) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,70,"hild = visitChildAsObject($Gson$Types.getArrayComponentType(arrayType), jsonChild);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,71, else if (jsonChild instanceof JsonArray) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,72,"hild = visitChildAsArray($Gson$Types.getArrayComponentType(arrayType),"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,73,sonChild.getAsJsonArray());
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,74, else if (jsonChild instanceof JsonPrimitive) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,75,"hild = visitChildAsObject($Gson$Types.getArrayComponentType(arrayType),"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,76,sonChild.getAsJsonPrimitive());
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,77, else {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,78,hrow new IllegalStateException();
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,80,"rray.set(array, i, child);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,84,/ We should not implement any other method from Visitor interface since
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,85,/ all other methods should be invoked on JsonObjectDeserializationVisitor
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,86,/ instead.
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,88,ublic void startVisitingObject(Object node) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,89,"hrow new JsonParseException(""Expecting array but found object: "" + node);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,92,"ublic void visitArrayField(FieldAttributes f, Type typeOfF, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,93,"hrow new JsonParseException(""Expecting array but found array field "" + f.getName() + "": """
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,94, obj);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,97,"ublic void visitObjectField(FieldAttributes f, Type typeOfF, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,98,"hrow new JsonParseException(""Expecting array but found object field "" + f.getName() + "": """
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,99, obj);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,102,"ublic boolean visitFieldUsingCustomHandler(FieldAttributes f, Type actualTypeOfField, Object parent) {"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,103,"hrow new JsonParseException(""Expecting array but found field "" + f.getName() + "": """
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,104, parent);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,107,ublic void visitPrimitive(Object primitive) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,108,hrow new JsonParseException(
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,109,"Type information is unavailable, and the target is not a primitive: "" + json);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,30,rivate final ObjectNavigator objectNavigator;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,31,rivate final FieldNamingStrategy2 fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,32,rivate final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,33,rivate final MappedObjectConstructor objectConstructor;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,30,private final Gson gson;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,35,"sonDeserializationContext(ObjectNavigator objectNavigator,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,36,"ieldNamingStrategy2 fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,37,"arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,38,appedObjectConstructor objectConstructor) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,39,his.objectNavigator = objectNavigator;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,40,his.fieldNamingPolicy = fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,41,his.deserializers = deserializers;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,42,his.objectConstructor = objectConstructor;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,45,sonDeserializationContext() {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,46,"his(null, null, null, null);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,32,JsonDeserializationContext(Gson gson) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,33,this.gson = gson;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,54,bject instance = objectConstructor.construct(type);
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,55,eturn (T) instance;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,41,throw new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,59,"eturn objectConstructor.constructArray(type, length);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,63,"rivate <T> T fromJsonArray(Type arrayType, JsonArray jsonArray,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,64,"sonDeserializationContext context, boolean systemOnly) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,65,sonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,66,"sonArray, arrayType, objectNavigator, fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,67,"bjectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,68,"bjectNavigator.accept(new ObjectTypePair(null, arrayType, true, systemOnly), visitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,69,eturn visitor.getTarget();
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,72,"rivate <T> T fromJsonObject(Type typeOfT, JsonObject jsonObject,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,73,"sonDeserializationContext context, boolean systemOnly) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,74,sonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,75,"sonObject, typeOfT, objectNavigator, fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,76,"bjectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,77,"bjectNavigator.accept(new ObjectTypePair(null, typeOfT, true, systemOnly), visitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,78,eturn visitor.getTarget();
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,81,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,82,"rivate <T> T fromJsonPrimitive(Type typeOfT, JsonPrimitive json,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,83,"sonDeserializationContext context, boolean systemOnly) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,84,sonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,85,"son, typeOfT, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,86,"bjectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true, systemOnly), visitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,87,bject target = visitor.getTarget();
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,88,eturn (T) target;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,45,throw new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,105,f (json == null || json.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,106,eturn null;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,107, else if (json.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,108,"bject array = fromJsonArray(typeOfT, json.getAsJsonArray(), this, false);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,109,eturn (T) array;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,110, else if (json.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,111,"bject object = fromJsonObject(typeOfT, json.getAsJsonObject(), this, false);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,112,eturn (T) object;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,113, else if (json.isJsonPrimitive()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,114,"bject primitive = fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this, false);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,115,eturn (T) primitive;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,116, else {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,117,"hrow new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,62,"return gson.fromJson(json, typeOfT);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,123,f (json == null || json.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,124,eturn null;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,125, else if (json.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,126,"bject array = fromJsonArray(typeOfT, json.getAsJsonArray(), this, true);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,127,eturn (T) array;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,128, else if (json.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,129,"bject object = fromJsonObject(typeOfT, json.getAsJsonObject(), this, true);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,130,eturn (T) object;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,131, else if (json.isJsonPrimitive()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,132,"bject primitive = fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this, true);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,133,eturn (T) primitive;
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,134, else {
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,135,"hrow new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,67,throw new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,19,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,21,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,24, Abstract data value container for the {@link ObjectNavigator.Visitor}
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,25, implementations.  This class exposes the {@link #getTarget()} method
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,26, which returns the class that was visited by this object.
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,28, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,29, @author Joel Leitch
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,31,bstract class JsonDeserializationVisitor<T> implements ObjectNavigator.Visitor {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,33,rotected final ObjectNavigator objectNavigator;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,34,rotected final FieldNamingStrategy2 fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,35,rotected final ObjectConstructor objectConstructor;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,36,rotected final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,37,rotected T target;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,38,rotected final JsonElement json;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,39,rotected final Type targetType;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,40,rotected final JsonDeserializationContext context;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,41,rotected boolean constructed;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,43,"sonDeserializationVisitor(JsonElement json, Type targetType,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,44,"bjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,45,"bjectConstructor objectConstructor,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,46,"arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,47,sonDeserializationContext context) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,48,his.targetType = targetType;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,49,his.objectNavigator = objectNavigator;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,50,his.fieldNamingPolicy = fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,51,his.objectConstructor = objectConstructor;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,52,his.deserializers = deserializers;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,53,his.json = $Gson$Preconditions.checkNotNull(json);
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,54,his.context = context;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,55,his.constructed = false;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,58,ublic T getTarget() {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,59,f (!constructed) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,60,arget = constructTarget();
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,61,onstructed = true;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,63,eturn target;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,66,rotected abstract T constructTarget();
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,68,ublic void start(ObjectTypePair node) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,71,ublic void end(ObjectTypePair node) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,74,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,75,ublic final boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,76,"air<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(deserializers);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,77,f (pair == null) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,78,eturn false;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,80,"bject value = invokeCustomDeserializer(json, pair);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,81,arget = (T) value;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,82,onstructed = true;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,83,eturn true;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,86,"rotected Object invokeCustomDeserializer(JsonElement element,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,87,"air<JsonDeserializer<?>, ObjectTypePair> pair) {"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,88,f (element == null || element.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,89,eturn null;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,91,ype objType = pair.second.type;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,92,"eturn (pair.first).deserialize(element, objType, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,95,"inal Object visitChildAsObject(Type childType, JsonElement jsonChild) {"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,96,sonDeserializationVisitor<?> childVisitor =
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,97,"ew JsonObjectDeserializationVisitor<Object>(jsonChild, childType,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,98,"bjectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,99,"eturn visitChild(childType, childVisitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,102,"inal Object visitChildAsArray(Type childType, JsonArray jsonChild) {"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,103,sonDeserializationVisitor<?> childVisitor =
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,104,"ew JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(), childType,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,105,"bjectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,106,"eturn visitChild(childType, childVisitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,109,"rivate Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,110,"bjectNavigator.accept(new ObjectTypePair(null, type, false, false), childVisitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,111,/ the underlying object may have changed during the construction phase
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,112,/ This happens primarily because of custom deserializers
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,113,eturn childVisitor.getTarget();
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,146,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,146,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,159,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,159,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,172,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,172,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,185,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,185,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,198,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,198,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,211,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,211,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,224,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,224,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,237,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,237,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,251,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,251,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,265,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,265,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,279,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,279,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,293,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,293,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,306,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,306,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,319,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,319,throw new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,20,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,23, A visitor that populates fields of an object with data from its equivalent
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,24, JSON representation
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,26, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,27, @author Joel Leitch
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,29,inal class JsonObjectDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,31,"sonObjectDeserializationVisitor(JsonElement json, Type type,"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,32,"bjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,33,"bjectConstructor objectConstructor,"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,34,"arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,35,sonDeserializationContext context) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,36,"uper(json, type, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,39,Override
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,40,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,41,rotected T constructTarget() {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,42,eturn (T) objectConstructor.construct(targetType);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,45,ublic void startVisitingObject(Object node) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,46,/ do nothing
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,49,"ublic void visitArray(Object array, Type componentType) {"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,50,/ should not be called since this case should invoke JsonArrayDeserializationVisitor
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,51,"hrow new JsonParseException(""Expecting object but found array: "" + array);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,54,"ublic void visitObjectField(FieldAttributes f, Type typeOfF, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,55,ry {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,56,f (!json.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,57,"hrow new JsonParseException(""Expecting object found: "" + json);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,59,sonObject jsonObject = json.getAsJsonObject();
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,60,tring fName = getFieldName(f);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,61,sonElement jsonChild = jsonObject.get(fName);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,62,f (jsonChild != null) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,63,"bject child = visitChildAsObject(typeOfF, jsonChild);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,64,".set(obj, child);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,65, else {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,66,".set(obj, null);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,68, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,69,hrow new RuntimeException(e);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,73,"ublic void visitArrayField(FieldAttributes f, Type typeOfF, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,74,ry {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,75,f (!json.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,76,"hrow new JsonParseException(""Expecting object found: "" + json);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,78,sonObject jsonObject = json.getAsJsonObject();
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,79,tring fName = getFieldName(f);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,80,sonArray jsonChild = (JsonArray) jsonObject.get(fName);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,81,f (jsonChild != null) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,82,"bject array = visitChildAsArray(typeOfF, jsonChild);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,83,".set(obj, array);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,84, else {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,85,".set(obj, null);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,87, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,88,hrow new RuntimeException(e);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,92,rivate String getFieldName(FieldAttributes f) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,93,eturn fieldNamingPolicy.translateName(f);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,96,"ublic boolean visitFieldUsingCustomHandler(FieldAttributes f, Type declaredTypeOfField, Object parent) {"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,97,ry {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,98,tring fName = getFieldName(f);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,99,f (!json.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,100,"hrow new JsonParseException(""Expecting object found: "" + json);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,102,sonElement child = json.getAsJsonObject().get(fName);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,103,oolean isPrimitive = Primitives.isPrimitive(declaredTypeOfField);
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,104,f (child == null) { // Child will be null if the field wasn't present in Json
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,105,eturn true;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,106, else if (child.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,107,f (!isPrimitive) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,108,".set(parent, null);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,110,eturn true;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,112,"bjectTypePair objTypePair = new ObjectTypePair(null, declaredTypeOfField, false, false);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,113,"air<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler(deserializers);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,114,f (pair == null) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,115,eturn false;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,117,"bject value = invokeCustomDeserializer(child, pair);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,118,f (value != null || !isPrimitive) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,119,".set(parent, value);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,121,eturn true;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,122, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,123,hrow new RuntimeException();
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,127,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,128,ublic void visitPrimitive(Object primitive) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,129,f (!json.isJsonPrimitive()) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,130,hrow new JsonParseException(
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,131,"Type information is unavailable, and the target object is not a primitive: "" + json);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,133,sonPrimitive prim = json.getAsJsonPrimitive();
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,134,arget = (T) prim.getAsObject();
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,30,rivate final ObjectNavigator objectNavigator;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,31,rivate final FieldNamingStrategy2 fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,32,rivate final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,33,rivate final boolean serializeNulls;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,34,rivate final MemoryRefStack ancestors;
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,30,private final Gson gson;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,36,"sonSerializationContext(ObjectNavigator objectNavigator,"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,37,"ieldNamingStrategy2 fieldNamingPolicy, boolean serializeNulls,"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,38,arameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,39,his.objectNavigator = objectNavigator;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,40,his.fieldNamingPolicy = fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,41,his.serializeNulls = serializeNulls;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,42,his.serializers = serializers;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,43,his.ancestors = new MemoryRefStack();
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,46,sonSerializationContext() {
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,47,"his(null, null, false, null);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,32,JsonSerializationContext(Gson gson) {
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,33,this.gson = gson;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,57,f (src == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,58,eturn JsonNull.INSTANCE;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,60,"eturn serialize(src, src.getClass(), false, false);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,43,return gson.toJsonTree(src);
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,74,"eturn serialize(src, typeOfSrc, true, false);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,57,"return gson.toJsonTree(src, typeOfSrc);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,78,"eturn serialize(src, typeOfSrc, true, true);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,81,"sonElement serialize(Object src, Type typeOfSrc, boolean preserveType, boolean defaultOnly) {"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,82,f (src == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,83,eturn JsonNull.INSTANCE;
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,85,sonSerializationVisitor visitor = new JsonSerializationVisitor(
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,86,"bjectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,87,"bjectTypePair objTypePair = new ObjectTypePair(src, typeOfSrc, preserveType, defaultOnly);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,88,"bjectNavigator.accept(objTypePair, visitor);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,89,eturn visitor.getJsonElement();
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,61,throw new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,20,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,22,mport java.lang.reflect.Array;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,23,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,26, A visitor that adds JSON elements corresponding to each field of an object
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,28, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,29, @author Joel Leitch
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,31,inal class JsonSerializationVisitor implements ObjectNavigator.Visitor {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,33,rivate final ObjectNavigator objectNavigator;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,34,rivate final FieldNamingStrategy2 fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,35,rivate final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,36,rivate final boolean serializeNulls;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,37,rivate final JsonSerializationContext context;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,38,rivate final MemoryRefStack ancestors;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,39,rivate JsonElement root;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,41,"sonSerializationVisitor(ObjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,42,"oolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,43,"sonSerializationContext context, MemoryRefStack ancestors) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,44,his.objectNavigator = objectNavigator;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,45,his.fieldNamingPolicy = fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,46,his.serializeNulls = serializeNulls;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,47,his.serializers = serializers;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,48,his.context = context;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,49,his.ancestors = ancestors;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,52,ublic Object getTarget() {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,53,eturn null;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,56,ublic void start(ObjectTypePair node) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,57,f (node == null || node.isSystemOnly()) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,58,eturn;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,60,f (ancestors.contains(node)) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,61,hrow new CircularReferenceException(node);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,63,ncestors.push(node);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,66,ublic void end(ObjectTypePair node) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,67,f (node != null && !node.isSystemOnly()) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,68,ncestors.pop();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,72,ublic void startVisitingObject(Object node) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,73,ssignToRoot(new JsonObject());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,76,"ublic void visitArray(Object array, Type arrayType) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,77,ssignToRoot(new JsonArray());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,78,nt length = Array.getLength(array);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,79,ype componentType = $Gson$Types.getArrayComponentType(arrayType);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,80,or (int i = 0; i < length; ++i) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,81,"bject child = Array.get(array, i);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,82,/ we should not get more specific component type yet since it is possible
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,83,/ that a custom serializer is registered for the componentType
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,84,"ddAsArrayElement(new ObjectTypePair(child, componentType, false, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,88,"ublic void visitArrayField(FieldAttributes f, Type typeOfF, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,89,ry {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,90,"f (isFieldNull(f, obj)) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,91,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,92,"ddChildAsElement(f, JsonNull.INSTANCE);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,94, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,95,"bject array = getFieldValue(f, obj);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,96,"ddAsChildOfObject(f, new ObjectTypePair(array, typeOfF, false, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,98, catch (CircularReferenceException e) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,99,hrow e.createDetailedException(f);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,103,"ublic void visitObjectField(FieldAttributes f, Type typeOfF, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,104,ry {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,105,"f (isFieldNull(f, obj)) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,107,"ddChildAsElement(f, JsonNull.INSTANCE);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,109, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,110,"bject fieldValue = getFieldValue(f, obj);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,111,/ we should not get more specific component type yet since it is
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,112,/ possible that a custom
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,/ serializer is registered for the componentType
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,114,"ddAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF, false, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,116, catch (CircularReferenceException e) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,117,hrow e.createDetailedException(f);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,121,ublic void visitPrimitive(Object obj) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,122,sonElement json = obj == null ? JsonNull.INSTANCE : new JsonPrimitive(obj);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,123,ssignToRoot(json);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,126,"rivate void addAsChildOfObject(FieldAttributes f, ObjectTypePair fieldValuePair) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,127,sonElement childElement = getJsonElementForChild(fieldValuePair);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,128,"ddChildAsElement(f, childElement);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,131,"rivate void addChildAsElement(FieldAttributes f, JsonElement childElement) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,132,"oot.getAsJsonObject().add(fieldNamingPolicy.translateName(f), childElement);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,135,rivate void addAsArrayElement(ObjectTypePair elementTypePair) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,136,f (elementTypePair.getObject() == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,137,oot.getAsJsonArray().add(JsonNull.INSTANCE);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,138, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,139,sonElement childElement = getJsonElementForChild(elementTypePair);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,140,oot.getAsJsonArray().add(childElement);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,144,rivate JsonElement getJsonElementForChild(ObjectTypePair fieldValueTypePair) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,145,sonSerializationVisitor childVisitor = new JsonSerializationVisitor(
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,146,"bjectNavigator, fieldNamingPolicy, serializeNulls, serializers, context, ancestors);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,147,"bjectNavigator.accept(fieldValueTypePair, childVisitor);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,148,eturn childVisitor.getJsonElement();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,151,ublic boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,152,ry {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,153,bject obj = objTypePair.getObject();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,154,f (obj == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,155,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,156,ssignToRoot(JsonNull.INSTANCE);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,158,eturn true;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,160,sonElement element = findAndInvokeCustomSerializer(objTypePair);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,161,f (element != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,162,ssignToRoot(element);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,163,eturn true;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,165,eturn false;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,166, catch (CircularReferenceException e) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,167,hrow e.createDetailedException(null);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,172, objTypePair.getObject() must not be null
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,174,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,175,rivate JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,176,"air<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,177,f (pair == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,178,eturn null;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,180,sonSerializer serializer = pair.first;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,181,bjTypePair = pair.second;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,182,tart(objTypePair);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,183,ry {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,184,sonElement element =
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,185,"erializer.serialize(objTypePair.getObject(), objTypePair.getType(), context);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,186,eturn element == null ? JsonNull.INSTANCE : element;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,187, finally {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,188,nd(objTypePair);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,ublic boolean visitFieldUsingCustomHandler(
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,193,"ieldAttributes f, Type declaredTypeOfField, Object parent) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,ry {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,195,Gson$Preconditions.checkState(root.isJsonObject());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,196,bject obj = f.get(parent);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,197,f (obj == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,198,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,199,"ddChildAsElement(f, JsonNull.INSTANCE);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,201,eturn true;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,203,"bjectTypePair objTypePair = new ObjectTypePair(obj, declaredTypeOfField, false, false);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,204,sonElement child = findAndInvokeCustomSerializer(objTypePair);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,205,f (child != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,206,"ddChildAsElement(f, child);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,207,eturn true;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,209,eturn false;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,210, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,211,hrow new RuntimeException();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,212, catch (CircularReferenceException e) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,213,hrow e.createDetailedException(f);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,217,rivate void assignToRoot(JsonElement newRoot) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,218,oot = $Gson$Preconditions.checkNotNull(newRoot);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,221,"rivate boolean isFieldNull(FieldAttributes f, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,222,"eturn getFieldValue(f, obj) == null;"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,225,"rivate Object getFieldValue(FieldAttributes f, Object obj) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,226,ry {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,227,eturn f.get(obj);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,228, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,229,hrow new RuntimeException(e);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,233,ublic JsonElement getJsonElement() {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,234,eturn root;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,19,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,20,mport java.util.Map;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,23, A navigator to navigate a tree of JsonElement nodes in Depth-first order
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,25, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,27,inal class JsonTreeNavigator {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,28,rivate final JsonElementVisitor visitor;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,29,rivate final boolean visitNulls;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,31,"sonTreeNavigator(JsonElementVisitor visitor, boolean visitNulls) {"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,32,his.visitor = visitor;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,33,his.visitNulls = visitNulls;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,36,ublic void navigate(JsonElement element) throws IOException {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,37,f (element.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,38,isitor.visitNull();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,39, else if (element.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,40,sonArray array = element.getAsJsonArray();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,41,isitor.startArray(array);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,42,oolean isFirst = true;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,43,or (JsonElement child : array) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,44,"isitChild(array, child, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,45,f (isFirst) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,46,sFirst = false;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,49,isitor.endArray(array);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,50, else if (element.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,51,sonObject object = element.getAsJsonObject();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,52,isitor.startObject(object);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,53,oolean isFirst = true;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,54,"or (Map.Entry<String, JsonElement> member : object.entrySet()) {"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,55,"oolean visited = visitChild(object, member.getKey(), member.getValue(), isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,56,f (visited && isFirst) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,57,sFirst = false;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,60,isitor.endObject(object);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,61, else { // must be JsonPrimitive
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,62,isitor.visitPrimitive(element.getAsJsonPrimitive());
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,67," Returns true if the child was visited, false if it was skipped."
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,69,"rivate boolean visitChild(JsonObject parent, String childName, JsonElement child,"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,70,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,71,f (child.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,72,f (visitNulls) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,73,"isitor.visitNullObjectMember(parent, childName, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,74,avigate(child.getAsJsonNull());
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,75, else { // Null value is being skipped.
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,76,eturn false;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,78, else if (child.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,79,sonArray childAsArray = child.getAsJsonArray();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,80,"isitor.visitObjectMember(parent, childName, childAsArray, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,81,avigate(childAsArray);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,82, else if (child.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,83,sonObject childAsObject = child.getAsJsonObject();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,84,"isitor.visitObjectMember(parent, childName, childAsObject, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,85,avigate(childAsObject);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,86, else { // is a JsonPrimitive
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,87,"isitor.visitObjectMember(parent, childName, child.getAsJsonPrimitive(), isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,89,eturn true;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,93," Returns true if the child was visited, false if it was skipped."
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,95,"rivate void visitChild(JsonArray parent, JsonElement child, boolean isFirst) throws IOException {"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,96,f (child.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,97,"isitor.visitNullArrayMember(parent, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,98,avigate(child);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,99, else if (child.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,100,sonArray childAsArray = child.getAsJsonArray();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,101,"isitor.visitArrayMember(parent, childAsArray, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,102,avigate(childAsArray);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,103, else if (child.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,104,sonObject childAsObject = child.getAsJsonObject();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,105,"isitor.visitArrayMember(parent, childAsObject, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,106,avigate(childAsObject);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,107, else { // is a JsonPrimitive
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,108,"isitor.visitArrayMember(parent, child.getAsJsonPrimitive(), isFirst);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,19,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,21,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,22,mport java.util.List;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,93,xtends BaseMapTypeAdapter
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,98,"ap<Object, Object> result = constructMapType(typeOfT, context);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,99,ype[] keyAndValueType = typeToTypeArguments(typeOfT);
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,100,f (json.isJsonArray()) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,101,sonArray array = json.getAsJsonArray();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,102,or (int i = 0; i < array.size(); i++) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,103,sonArray entryArray = array.get(i).getAsJsonArray();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,104,"bject k = context.deserialize(entryArray.get(0), keyAndValueType[0]);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,105,"bject v = context.deserialize(entryArray.get(1), keyAndValueType[1]);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,106,"esult.put(k, v);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,108,"heckSize(array, array.size(), result, result.size());"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,109, else {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,110,sonObject object = json.getAsJsonObject();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,111,"or (Map.Entry<String, JsonElement> entry : object.entrySet()) {"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,112,"bject k = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueType[0]);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,113,"bject v = context.deserialize(entry.getValue(), keyAndValueType[1]);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,114,"esult.put(k, v);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,116,"heckSize(object, object.entrySet().size(), result, result.size());"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,118,eturn result;
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,94,// TODO
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,95,throw new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,122,ype[] keyAndValueType = typeToTypeArguments(typeOfSrc);
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,123,oolean serializeAsArray = false;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,124,ist<JsonElement> keysAndValues = new ArrayList<JsonElement>();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,125,"or (Map.Entry<?, ?> entry : src.entrySet()) {"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,126,"sonElement key = serialize(context, entry.getKey(), keyAndValueType[0]);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,127,erializeAsArray |= key.isJsonObject() || key.isJsonArray();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,128,eysAndValues.add(key);
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,129,"eysAndValues.add(serialize(context, entry.getValue(), keyAndValueType[1]));"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,132,f (serializeAsArray) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,133,sonArray result = new JsonArray();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,134,or (int i = 0; i < keysAndValues.size(); i+=2) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,135,sonArray entryArray = new JsonArray();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,136,ntryArray.add(keysAndValues.get(i));
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,137,ntryArray.add(keysAndValues.get(i + 1));
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,138,esult.add(entryArray);
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,140,eturn result;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,141, else {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,142,sonObject result = new JsonObject();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,143,or (int i = 0; i < keysAndValues.size(); i+=2) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,144,"esult.add(keysAndValues.get(i).getAsString(), keysAndValues.get(i + 1));"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,146,"heckSize(src, src.size(), result, result.entrySet().size());"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,147,eturn result;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,151,rivate Type[] typeToTypeArguments(Type typeOfT) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,152,f (typeOfT instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,153,ype[] typeArguments = ((ParameterizedType) typeOfT).getActualTypeArguments();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,154,f (typeArguments.length != 2) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,155,"hrow new IllegalArgumentException(""MapAsArrayTypeAdapter cannot handle "" + typeOfT);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,157,eturn typeArguments;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,159,"eturn new Type[] { Object.class, Object.class };"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,162,"rivate void checkSize(Object input, int inputSize, Object output, int outputSize) {"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,163,f (inputSize != outputSize) {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,164,"hrow new JsonSyntaxException(""Input size "" + inputSize + "" != output size "" + outputSize"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,165," "" for input "" + input + "" and output "" + output);"
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,99,// TODO
True,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,100,throw new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,21,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,22,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,23,mport java.util.Map;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,24,mport java.util.Set;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,27, Default serialization and deserialization of a map type. This implementation really only works
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,28, well with simple primitive types as the map key. If the key is not a simple primitive then the
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,29, object is {@code toString}ed and that value is used as its key.
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,31, @author Joel Leitch
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,33,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,34,inal class MapTypeAdapter extends BaseMapTypeAdapter {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,36,"ublic JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,37,sonObject map = new JsonObject();
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,38,ype childGenericType = null;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,39,f (typeOfSrc instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,40,lass<?> rawTypeOfSrc = $Gson$Types.getRawType(typeOfSrc);
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,41,"hildGenericType = $Gson$Types.getMapKeyAndValueTypes(typeOfSrc, rawTypeOfSrc)[1];"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,44,or (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,45,bject value = entry.getValue();
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,47,sonElement valueElement;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,48,f (value == null) {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,49,alueElement = JsonNull.INSTANCE;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,50, else {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,51,ype childType = (childGenericType == null)
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,52, value.getClass() : childGenericType;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,53,"alueElement = serialize(context, value, childType);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,55,"ap.add(String.valueOf(entry.getKey()), valueElement);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,57,eturn map;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,60,"ublic Map deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,61,hrows JsonParseException {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,62,/ Use ObjectConstructor to create instance instead of hard-coding a specific type.
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,63,/ This handles cases where users are using their own subclass of Map.
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,64,"ap<Object, Object> map = constructMapType(typeOfT, context);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,65,"ype[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(typeOfT, $Gson$Types.getRawType(typeOfT));"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,66,"or (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,67,"bject key = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueTypes[0]);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,68,"bject value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,69,"ap.put(key, value);"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,71,eturn map;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,74,Override
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,75,ublic String toString() {
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,76,eturn MapTypeAdapter.class.getSimpleName();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,21,mport com.google.gson.internal.UnsafeAllocator;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,22,mport java.lang.reflect.Array;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,23,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,26, This class contains a mapping of all the application specific
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,27, {@link InstanceCreator} instances.  Registering an {@link InstanceCreator}
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,28, with this class will override the default object creation that is defined
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,29, by the ObjectConstructor that this class is wrapping.  Using this class
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,30," with the JSON framework provides the application with ""pluggable"" modules"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,31, to customize framework to suit the application's needs.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,33, @author Joel Leitch
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,35,inal class MappedObjectConstructor implements ObjectConstructor {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,36,rivate static final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,37,rivate static final DefaultConstructorAllocator defaultConstructorAllocator =
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,38,ew DefaultConstructorAllocator(500);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,40,rivate final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreatorMap;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,42,ublic MappedObjectConstructor(
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,43,arameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,44,nstanceCreatorMap = instanceCreators;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,47,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,48,ublic <T> T construct(Type typeOfT) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,49,"nstanceCreator<T> creator = (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(typeOfT, false);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,50,f (creator != null) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,51,eturn creator.createInstance(typeOfT);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,53,eturn (T) constructWithAllocators(typeOfT);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,56,"ublic Object constructArray(Type type, int length) {"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,57,"eturn Array.newInstance($Gson$Types.getRawType(type), length);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,60,"SuppressWarnings({""unchecked"", ""cast""})"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,61,rivate <T> T constructWithAllocators(Type typeOfT) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,62,ry {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,63,lass<T> clazz = (Class<T>) $Gson$Types.getRawType(typeOfT);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,64, obj = defaultConstructorAllocator.newInstance(clazz);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,65,eturn (obj == null)
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,66, unsafeAllocator.newInstance(clazz)
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,67, obj;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,68, catch (Exception e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,69,"hrow new RuntimeException((""Unable to invoke no-args constructor for "" + typeOfT + "". """
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,70," ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,74,Override
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,75,ublic String toString() {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,76,eturn instanceCreatorMap.toString();
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,19,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,21,mport java.util.Stack;
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,24, A stack data structure that only does a memory reference comparison
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,25, when looking for a particular item in the stack.  This stack does
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,26, not allow {@code null} values to be added.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,28, @author Joel Leitch
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,30,inal class MemoryRefStack {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,31,rivate final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair>();
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,34, Adds a new element to the top of the stack.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,36, @param obj the object to add to the stack
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,37, @return the object that was added
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,39,ublic ObjectTypePair push(ObjectTypePair obj) {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,40,Gson$Preconditions.checkNotNull(obj);
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,41,eturn stack.push(obj);
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,45, Removes the top element from the stack.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,47, @return the element being removed from the stack
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,48, @throws java.util.EmptyStackException thrown if the stack is empty
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,50,ublic ObjectTypePair pop() {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,51,eturn stack.pop();
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,54,ublic boolean isEmpty() {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,55,eturn stack.isEmpty();
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,59," Retrieves the item from the top of the stack, but does not remove it."
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,61, @return the item from the top of the stack
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,62, @throws java.util.EmptyStackException thrown if the stack is empty
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,64,ublic ObjectTypePair peek() {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,65,eturn stack.peek();
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,69, Performs a memory reference check to see it the {@code obj} exists in
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,70, the stack.
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,72, @param obj the object to search for in the stack
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,73, @return true if this object is already in the stack otherwise false
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,75,ublic boolean contains(ObjectTypePair obj) {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,76,f (obj == null) {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,77,eturn false;
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,80,or (ObjectTypePair stackObject : stack) {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,81,f (stackObject.getObject() == obj.getObject()
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,82,& stackObject.type.equals(obj.type) ) {
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,83,eturn true;
False,gson/src/main/java/com/google/gson/MemoryRefStack.java,gson/src/main/java/com/google/gson/MemoryRefStack.java,86,eturn false;
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,20," This acts as a ""Null Object"" pattern for the {@link ExclusionStrategy}."
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,21, Passing an instance of this class into the {@link ObjectNavigator} will
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,22, make the {@link ObjectNavigator} parse/visit every field of the object
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,23, being navigated.
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,25, @author Joel Leitch
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,27,inal class NullExclusionStrategy implements ExclusionStrategy {
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,29,ublic boolean shouldSkipField(FieldAttributes f) {
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,30,eturn false;
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,33,ublic boolean shouldSkipClass(Class<?> clazz) {
False,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,gson/src/main/java/com/google/gson/NullExclusionStrategy.java,34,eturn false;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,21,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,24, Provides ability to apply a visitor to an object and all of its fields
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,25, recursively.
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,27, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,28, @author Joel Leitch
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,30,inal class ObjectNavigator {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,32,ublic interface Visitor {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,33,ublic void start(ObjectTypePair node);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,35,ublic void end(ObjectTypePair node);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,38, This is called before the object navigator starts visiting the current
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,39, object
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,41,oid startVisitingObject(Object node);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,44, This is called to visit the current object if it is an array
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,46,"oid visitArray(Object array, Type componentType);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,49, This is called to visit an object field of the current object
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,51,"oid visitObjectField(FieldAttributes f, Type typeOfF, Object obj);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,54, This is called to visit an array field of the current object
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,56,"oid visitArrayField(FieldAttributes f, Type typeOfF, Object obj);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,59, This is called to visit an object using a custom handler
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,61," @return true if a custom handler exists, false otherwise"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,63,ublic boolean visitUsingCustomHandler(ObjectTypePair objTypePair);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,66, This is called to visit a field of the current object using a custom
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,67, handler
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,69,"ublic boolean visitFieldUsingCustomHandler(FieldAttributes f, Type actualTypeOfField,"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,70,bject parent);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,72,oid visitPrimitive(Object primitive);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,75, Retrieve the current target
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,77,bject getTarget();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,80,rivate final ExclusionStrategy exclusionStrategy;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,81,rivate final ReflectingFieldNavigator reflectingFieldNavigator;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,84, @param strategy the concrete exclusion strategy object to be used to filter out fields of an
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,85,          object.
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,87,bjectNavigator(ExclusionStrategy strategy) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,88,his.exclusionStrategy = strategy == null ? new NullExclusionStrategy() : strategy;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,89,his.reflectingFieldNavigator = new ReflectingFieldNavigator(exclusionStrategy);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,93," Navigate all the fields of the specified object. If a field is null, it"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,94, does not get visited.
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,95," @param objTypePair The object,type (fully genericized) being navigated"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,97,"ublic void accept(ObjectTypePair objTypePair, Visitor visitor) {"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,98,f (exclusionStrategy.shouldSkipClass($Gson$Types.getRawType(objTypePair.type))) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,99,eturn;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,101,oolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,102,f (!visitedWithCustomHandler) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,bjTypePair = objTypePair.toMoreSpecificType();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,104,bject obj = objTypePair.getObject();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,105,bject objectToVisit = (obj == null) ? visitor.getTarget() : obj;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,106,f (objectToVisit == null) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,107,eturn;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,109,bjTypePair.setObject(objectToVisit);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,110,isitor.start(objTypePair);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,111,ry {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,112,f ($Gson$Types.isArray(objTypePair.getMoreSpecificType())) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,113,"isitor.visitArray(objectToVisit, objTypePair.type);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,114, else if (objTypePair.type == Object.class && isPrimitiveOrString(objectToVisit)) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,115,"/ TODO(Joel): this is only used for deserialization of ""primitives"""
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,116,/ we should rethink this!!!
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,117,isitor.visitPrimitive(objectToVisit);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,118,isitor.getTarget();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119, else {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,120,isitor.startVisitingObject(objectToVisit);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,121,"eflectingFieldNavigator.visitFieldsReflectively(objTypePair, visitor);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,123, finally {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,124,isitor.end(objTypePair);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,129,rivate static boolean isPrimitiveOrString(Object objectToVisit) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,130,lass<?> realClazz = objectToVisit.getClass();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,131,eturn realClazz == Object.class || realClazz == String.class
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,132,| Primitives.unwrap(realClazz).isPrimitive();
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,2, Copyright (C) 2009 Google Inc.
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,16,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,22, A holder class for an object and its type
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,24, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,26,inal class ObjectTypePair {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,27,rivate Object obj;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,28,inal Type type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,29,rivate final boolean preserveType;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,30,rivate final boolean systemOnly;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,32,"bjectTypePair(Object obj, Type type, boolean preserveType, boolean systemOnly) {"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,33,his.obj = obj;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,34,his.type = type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,35,his.preserveType = preserveType;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,36,his.systemOnly = systemOnly;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,39,bject getObject() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,40,eturn obj;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,43,oid setObject(Object obj) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,44,his.obj = obj;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,47,ype getType() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,48,eturn type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,51,Override
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,52,ublic String toString() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,53,"eturn String.format(""preserveType: %b, type: %s, obj: %s"", preserveType, type, obj);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,56,"HANDLER> Pair<HANDLER, ObjectTypePair> getMatchingHandler("
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,57,arameterizedTypeHandlerMap<HANDLER> handlers) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,58,ANDLER handler = null;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,59,f (!preserveType && obj != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,60,/ First try looking up the handler for the actual type
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,61,bjectTypePair moreSpecificType = toMoreSpecificType();
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,62,"andler = handlers.getHandlerFor(moreSpecificType.type, systemOnly);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,63,f (handler != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,64,"eturn new Pair<HANDLER, ObjectTypePair>(handler, moreSpecificType);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,67,/ Try the specified type
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,68,"andler = handlers.getHandlerFor(type, systemOnly);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,69,"eturn handler == null ? null : new Pair<HANDLER, ObjectTypePair>(handler, this);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,72,bjectTypePair toMoreSpecificType() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,73,f (preserveType || obj == null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,74,eturn this;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,76,"ype actualType = getActualTypeIfMoreSpecific(type, obj.getClass());"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,77,f (actualType == type) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,78,eturn this;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,80,"eturn new ObjectTypePair(obj, actualType, true, systemOnly);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,83,ype getMoreSpecificType() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,84,f (preserveType || obj == null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,85,eturn type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,87,"eturn getActualTypeIfMoreSpecific(type, obj.getClass());"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,90,"/ This takes care of situations where the field was declared as an Object, but the"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,91,/ actual value contains something more specific. See Issue 54.
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,92,"/ TODO (inder): This solution will not work if the field is of a generic type, but"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,93,/ the actual object is of a raw type (which is a sub-class of the generic type).
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,94,"tatic Type getActualTypeIfMoreSpecific(Type type, Class<?> actualClass) {"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,95,f (type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,96,lass<?> typeAsClass = (Class<?>) type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,97,f (typeAsClass.isAssignableFrom(actualClass)) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,98,ype = actualClass;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,100,f (type == Object.class) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,101,ype = actualClass;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,104,eturn type;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,107,Override
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,108,ublic int hashCode() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,109,/ Not using type.hashCode() since I am not sure if the subclasses of type reimplement
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,110,/ hashCode() to be equal for equal types
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,111,eturn ((obj == null) ? 31 : obj.hashCode());
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,114,Override
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,115,ublic boolean equals(Object obj) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,116,f (this == obj) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,117,eturn true;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,119,f (obj == null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,120,eturn false;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,122,f (getClass() != obj.getClass()) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,123,eturn false;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,125,bjectTypePair other = (ObjectTypePair) obj;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,126,f (this.obj == null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,127,f (other.obj != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,128,eturn false;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,130, else if (this.obj != other.obj) { // Checking for reference equality
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,131,eturn false;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,133,f (type == null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,134,f (other.type != null) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,135,eturn false;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,137, else if (!type.equals(other.type)) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,138,eturn false;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,140,eturn preserveType == other.preserveType && systemOnly == other.systemOnly;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,143,ublic boolean isPreserveType() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,144,eturn preserveType;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,147,ublic boolean isSystemOnly() {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,148,eturn systemOnly;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,16,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,18,mport java.lang.reflect.AccessibleObject;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,19,mport java.lang.reflect.Field;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,20,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,21,mport java.lang.reflect.TypeVariable;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,22,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,23,mport java.util.List;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,25,mport com.google.gson.ObjectNavigator.Visitor;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,26,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,27,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,30, Visits each of the fields of the specified class using reflection
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,32, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,33, @author Joel Leitch
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,34, @author Jesse Wilson
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,36,inal class ReflectingFieldNavigator {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,38,"rivate static final Cache<Type, List<FieldAttributes>> fieldsCache ="
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,39,"ew LruCache<Type, List<FieldAttributes>>(500);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,41,rivate final ExclusionStrategy exclusionStrategy;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,44, @param exclusionStrategy the concrete strategy object to be used to filter out fields of an
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,45,   object.
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,47,eflectingFieldNavigator(ExclusionStrategy exclusionStrategy) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,48,his.exclusionStrategy = $Gson$Preconditions.checkNotNull(exclusionStrategy);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,52," @param objTypePair The object,type (fully genericized) being navigated"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,53, @param visitor the visitor to visit each field with
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,55,"oid visitFieldsReflectively(ObjectTypePair objTypePair, Visitor visitor) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,56,ype moreSpecificType = objTypePair.getMoreSpecificType();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,57,bject obj = objTypePair.getObject();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,58,"or (FieldAttributes fieldAttributes : getAllFields(moreSpecificType, objTypePair.getType())) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,59,f (exclusionStrategy.shouldSkipField(fieldAttributes)
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,60,| exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,61,ontinue; // skip
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,63,"ype resolvedTypeOfField = getMoreSpecificType(fieldAttributes.getResolvedType(), obj, fieldAttributes);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,64,oolean visitedWithCustomHandler =
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,65,"isitor.visitFieldUsingCustomHandler(fieldAttributes, resolvedTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,66,f (!visitedWithCustomHandler) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,67,f ($Gson$Types.isArray(resolvedTypeOfField)) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,68,"isitor.visitArrayField(fieldAttributes, resolvedTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,69, else {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,70,"isitor.visitObjectField(fieldAttributes, resolvedTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,76,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,77,"rivate static Type getMoreSpecificType(Type type, Object obj, FieldAttributes fieldAttributes) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,78,ry {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,79,f (obj != null && (Object.class == type || type instanceof TypeVariable)) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,80,bject fieldValue = fieldAttributes.get(obj);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,81,f (fieldValue != null) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,82,ype = fieldValue.getClass();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,85, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,87,eturn type;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,90,"rivate List<FieldAttributes> getAllFields(Type type, Type declaredType) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,91,ist<FieldAttributes> fields = fieldsCache.getElement(type);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,92,f (fields == null) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,93,ields = new ArrayList<FieldAttributes>();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,94,or (Class<?> curr : getInheritanceHierarchy(type)) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,95,ield[] currentClazzFields = curr.getDeclaredFields();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,96,"ccessibleObject.setAccessible(currentClazzFields, true);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,97,ield[] classFields = currentClazzFields;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,98,or (Field f : classFields) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,99,"ields.add(new FieldAttributes(curr, f, declaredType));"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,102,"ieldsCache.addElement(type, fields);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,104,eturn fields;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,108, Returns a list of classes corresponding to the inheritance of specified type
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,110,rivate List<Class<?>> getInheritanceHierarchy(Type type) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,111,ist<Class<?>> classes = new ArrayList<Class<?>>();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,112,lass<?> topLevelClass = $Gson$Types.getRawType(type);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,113,or (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr =
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,114,urr.getSuperclass()) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,115,f (!curr.isSynthetic()) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,116,lasses.add(curr);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,119,eturn classes;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,17,package com.google.gson.internal;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,19,import com.google.gson.InstanceCreator;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,21,import java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,22,import java.lang.reflect.InvocationTargetException;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,23,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,24,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,25,import java.util.Collection;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,26,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,27,import java.util.LinkedHashSet;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,28,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,29,import java.util.Map;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,30,import java.util.Queue;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,31,import java.util.Set;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,32,import java.util.SortedSet;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,33,import java.util.TreeSet;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,36,* Returns a function that can construct an instance of a requested type.
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,38,public final class ConstructorConstructor {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,39,private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,41,public ConstructorConstructor(ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,42,this.instanceCreators = instanceCreators;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,45,public ConstructorConstructor() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,46,this(new ParameterizedTypeHandlerMap<InstanceCreator<?>>());
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,49,public <T> ObjectConstructor<T> getConstructor(TypeToken<T> typeToken) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,50,final Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,51,final Class<? super T> rawType = typeToken.getRawType();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,53,// first try an instance creator
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,55,"@SuppressWarnings(""unchecked"") // types must agree"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,56,final InstanceCreator<T> creator
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,57,"= (InstanceCreator<T>) instanceCreators.getHandlerFor(type, false);"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,58,if (creator != null) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,59,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,60,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,61,return creator.createInstance(type);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,66,ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,67,if (defaultConstructor != null) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,68,return defaultConstructor;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,71,ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(rawType);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,72,if (defaultImplementation != null) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,73,return defaultImplementation;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,76,// finally try unsafe
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,77,"return newUnsafeAllocator(type, rawType);"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,80,private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,81,try {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,82,final Constructor<? super T> constructor = rawType.getDeclaredConstructor();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,83,if (!constructor.isAccessible()) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,84,constructor.setAccessible(true);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,86,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,87,"@SuppressWarnings(""unchecked"") // T is the same raw type as is requested"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,88,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,89,try {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,90,Object[] args = null;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,91,return (T) constructor.newInstance(args);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,92,} catch (InstantiationException e) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,93,// TODO: JsonParseException ?
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,94,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,95,} catch (InvocationTargetException e) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,96,// TODO: don't wrap if cause is unchecked!
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,97,// TODO: JsonParseException ?
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,98,throw new RuntimeException(e.getTargetException());
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,99,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,100,throw new AssertionError(e);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,104,} catch (NoSuchMethodException e) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,105,return null;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,110,* Constructors for common interface types like Map and List and their
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,111,* subytpes.
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,113,"@SuppressWarnings(""unchecked"") // use runtime checks to guarantee that 'T' is what it is"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,114,private <T> ObjectConstructor<T> newDefaultImplementationConstructor(Class<? super T> rawType) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,115,if (Collection.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,116,if (SortedSet.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,117,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,118,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,119,return (T) new TreeSet<Object>();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,122,} else if (Set.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,123,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,124,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,125,return (T) new LinkedHashSet<Object>();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,128,} else if (Queue.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,129,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,130,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,131,return (T) new LinkedList<Object>();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,134,} else {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,135,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,136,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,137,return (T) new ArrayList<Object>();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,143,if (Map.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,144,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,145,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,146,"return (T) new LinkedHashMap<Object, Object>();"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,149,// TODO: SortedMap ?
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,152,return null;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,155,private <T> ObjectConstructor<T> newUnsafeAllocator(
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,156,"final Type type, final Class<? super T> rawType) {"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,157,return new ObjectConstructor<T>() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,158,private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,159,@Override public T construct() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,160,try {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,161,return (T) unsafeAllocator.newInstance(rawType);
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,162,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,163,"throw new RuntimeException((""Unable to invoke no-args constructor for "" + type + "". """
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,164,"+ ""Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,170,@Override public String toString() {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,171,return instanceCreators.toString();
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,19,mport java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,17,package com.google.gson.internal;
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,29,nterface ObjectConstructor {
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,32, Creates a new instance of the given type.
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,34, @param typeOfT the class type that should be instantiated
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,35, @return a default instance of the provided class.
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,37,ublic <T> T construct(Type typeOfT);
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,27,public interface ObjectConstructor<T> {
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,40, Constructs an array type of the provided length.
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,42, @param typeOfArrayElements type of objects in the array
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,43, @param length size of the array
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,44, @return new array of size length
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,30,* Returns a new instance.
False,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,46,"ublic Object constructArray(Type typeOfArrayElements, int length);"
True,gson/src/main/java/com/google/gson/ObjectConstructor.java,gson/src/main/java/com/google/gson/internal/ObjectConstructor.java,32,public T construct();
False,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/internal/Pair.java,17,ackage com.google.gson;
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/internal/Pair.java,17,package com.google.gson.internal;
False,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/internal/Pair.java,28,"inal class Pair<FIRST, SECOND> {"
True,gson/src/main/java/com/google/gson/Pair.java,gson/src/main/java/com/google/gson/internal/Pair.java,28,"public final class Pair<FIRST, SECOND> {"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,19,mport com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,17,package com.google.gson.internal;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,38,inal class ParameterizedTypeHandlerMap<T> {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,36,public final class ParameterizedTypeHandlerMap<T> {
False,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/internal/Primitives.java,17,ackage com.google.gson;
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/internal/Primitives.java,17,package com.google.gson.internal;
False,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/internal/Primitives.java,32,inal class Primitives {
True,gson/src/main/java/com/google/gson/Primitives.java,gson/src/main/java/com/google/gson/internal/Primitives.java,32,public final class Primitives {
False,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,31,ublic class BigDecimalTypeAdapter extends TypeAdapter<BigDecimal> {
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,31,public final class BigDecimalTypeAdapter extends TypeAdapter<BigDecimal> {
False,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,31,ublic class BigIntegerTypeAdapter extends TypeAdapter<BigInteger> {
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,31,public final class BigIntegerTypeAdapter extends TypeAdapter<BigInteger> {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,17,ackage com.google.gson.internal.bind;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,19,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,20,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,21,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,22,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,23,mport java.util.Collection;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,24,mport java.util.LinkedHashSet;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,25,mport java.util.LinkedList;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,26,mport java.util.List;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,27,mport java.util.Queue;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,28,mport java.util.Set;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,29,mport java.util.SortedSet;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,30,mport java.util.TreeSet;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,32,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,33,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,34,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,35,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,36,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,39, Adapt a homogeneous collection of objects.
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,41,ublic final class CollectionTypeAdapter<E> extends TypeAdapter<Collection<E>> {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,42,ublic static final Factory FACTORY = new Factory() {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,43,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,44,ype type = typeToken.getType();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,46,lass<? super T> rawType = typeToken.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,47,f (!Collection.class.isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,48,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,51,"ype elementType = $Gson$Types.getCollectionElementType(type, rawType);"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,52,ypeAdapter<?> elementTypeAdapter = context.getAdapter(TypeToken.get(elementType));
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,54,lass<?> constructorType;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,56,f (rawType == List.class || rawType == Collection.class) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,57,onstructorType = ArrayList.class;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,58, else if (rawType == Set.class) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,59,onstructorType = LinkedHashSet.class;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,60, else if (rawType == Queue.class) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,61,onstructorType = LinkedList.class;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,62, else if (rawType == SortedSet.class) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,63,onstructorType = TreeSet.class;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,64, else {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,65,onstructorType = rawType;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,68,onstructor<?> constructor = null;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,69,ry {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,70,onstructor = constructorType.getConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,71, catch (NoSuchMethodException ignored) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,74,"SuppressWarnings(""unchecked"") // create() doesn't define a type parameter"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,75,"ypeAdapter<T> result = new CollectionTypeAdapter(context, elementType, elementTypeAdapter, constructor);"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,76,eturn result;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,80,rivate final TypeAdapter<E> elementTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,81,rivate final Constructor<? extends Collection<E>> constructor;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,83,"ublic CollectionTypeAdapter(MiniGson context, Type elementType, TypeAdapter<E> elementTypeAdapter,"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,84,onstructor<? extends Collection<E>> constructor) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,85,his.elementTypeAdapter =
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,86,"ew TypeAdapterRuntimeTypeWrapper<E>(context, elementTypeAdapter, elementType);"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,87,his.constructor = constructor;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,90,ublic Collection<E> read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,91,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,92,eader.nextNull(); // TODO: does this belong here?
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,93,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,96,f (constructor == null) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,97,"hrow new UnsupportedOperationException(""TODO: use unsafeAllocator.newInstance"");"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,99,ollection<E> collection = Reflection.newInstance(constructor);
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,100,eader.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,101,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,102, instance = elementTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,103,ollection.add(instance);
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,105,eader.endArray();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,106,eturn collection;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,109,"ublic void write(JsonWriter writer, Collection<E> collection) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,110,f (collection == null) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,111,riter.nullValue(); // TODO: better policy here?
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,112,eturn;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,115,riter.beginArray();
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,116,or (E element : collection) {
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,117,"lementTypeAdapter.write(writer, element);"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapter.java,119,riter.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,19,import com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,20,import com.google.gson.internal.ConstructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,21,import com.google.gson.internal.ObjectConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,23,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,24,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,25,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,26,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,27,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,28,import java.util.Collection;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,31,* Adapt a homogeneous collection of objects.
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,33,public final class CollectionTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,34,private final ConstructorConstructor constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,36,public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,37,this.constructorConstructor = constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,40,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,41,Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,43,Class<? super T> rawType = typeToken.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,44,if (!Collection.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,45,return null;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,48,"Type elementType = $Gson$Types.getCollectionElementType(type, rawType);"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,49,TypeAdapter<?> elementTypeAdapter = context.getAdapter(TypeToken.get(elementType));
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,50,ObjectConstructor<T> constructor = constructorConstructor.getConstructor(typeToken);
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,52,"@SuppressWarnings(""unchecked"") // create() doesn't define a type parameter"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,53,"TypeAdapter<T> result = new Adapter(context, elementType, elementTypeAdapter, constructor);"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,54,return result;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,57,private final class Adapter<E> extends TypeAdapter<Collection<E>> {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,58,private final TypeAdapter<E> elementTypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,59,private final ObjectConstructor<? extends Collection<E>> constructor;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,61,"public Adapter(MiniGson context, Type elementType,"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,62,"TypeAdapter<E> elementTypeAdapter,"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,63,ObjectConstructor<? extends Collection<E>> constructor) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,64,this.elementTypeAdapter =
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,65,"new TypeAdapterRuntimeTypeWrapper<E>(context, elementTypeAdapter, elementType);"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,66,this.constructor = constructor;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,69,public Collection<E> read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,70,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,71,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,72,return null;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,75,Collection<E> collection = constructor.construct();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,76,reader.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,77,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,78,E instance = elementTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,79,collection.add(instance);
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,81,reader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,82,return collection;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,85,"public void write(JsonWriter writer, Collection<E> collection) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,86,if (collection == null) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,87,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,88,return;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,91,writer.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,92,for (E element : collection) {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,93,"elementTypeAdapter.write(writer, element);"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,95,writer.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,19,import com.google.gson.ExclusionStrategy;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,21,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,22,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,23,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,26,* This type adapter skips values using an exclusion strategy. It may delegate
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,27,* to another type adapter if only one direction is excluded.
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,29,public final class ExcludedTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,30,private final ExclusionStrategy serializationExclusionStrategy;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,31,private final ExclusionStrategy deserializationExclusionStrategy;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,33,"public ExcludedTypeAdapterFactory(ExclusionStrategy serializationExclusionStrategy,"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,34,ExclusionStrategy deserializationExclusionStrategy) {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,35,this.serializationExclusionStrategy = serializationExclusionStrategy;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,36,this.deserializationExclusionStrategy = deserializationExclusionStrategy;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,39,"public <T> TypeAdapter<T> create(final MiniGson context, final TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,40,Class<?> rawType = type.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,41,final boolean skipSerialize = serializationExclusionStrategy.shouldSkipClass(rawType);
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,42,final boolean skipDeserialize = deserializationExclusionStrategy.shouldSkipClass(rawType);
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,44,if (!skipSerialize && !skipDeserialize) {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,45,return null;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,48,return new TypeAdapter<T>() {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,50,"* The delegate is lazily created because it may not be needed, and"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,51,* creating it may fail.
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,53,private TypeAdapter<T> delegate;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,55,@Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,56,if (skipDeserialize) {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,57,reader.skipValue();
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,58,return null;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,60,return delegate().read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,63,"@Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,64,if (skipSerialize) {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,65,writer.nullValue();
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,66,return;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,68,"delegate().write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,71,private TypeAdapter<T> delegate() {
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,72,TypeAdapter<T> d = delegate;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,73,return d != null
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,74,? d
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,75,": (delegate = context.getNextAdapter(ExcludedTypeAdapterFactory.this, type));"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,17,ackage com.google.gson.internal.bind;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,20,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,21,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,22,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,23,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,24,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,25,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,26,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,27,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,28,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,29,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,32, Adapt a map whose keys are any type.
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,34,"ublic final class GsonCompatibleMapTypeAdapter<V> extends TypeAdapter<Map<?, V>> {"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,35,ublic static final Factory FACTORY = new Factory() {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,36,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,37,ype type = typeToken.getType();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,39,lass<? super T> rawType = typeToken.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,40,f (!Map.class.isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,41,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,44,ype childGenericType = Object.class;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,45,f (type instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,46,lass<?> rawTypeOfSrc = $Gson$Types.getRawType(type);
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,47,"hildGenericType = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc)[1];"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,49,ypeAdapter valueAdapter = context.getAdapter(TypeToken.get(childGenericType));
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,51,onstructor<?> constructor;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,52,ry {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,53,lass<?> constructorType = (rawType == Map.class) ? LinkedHashMap.class : rawType;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,54,onstructor = constructorType.getConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,55, catch (NoSuchMethodException e) {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,56,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,59,"SuppressWarnings(""unchecked"") // we don't define a type parameter for the key or value types"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,60,"ypeAdapter<T> result = new GsonCompatibleMapTypeAdapter(valueAdapter, constructor);"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,61,eturn result;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,65,rivate final TypeAdapter<V> valueTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,66,"rivate final Constructor<? extends Map<String, V>> constructor;"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,68,"ublic GsonCompatibleMapTypeAdapter(TypeAdapter<V> valueTypeAdapter,"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,69,"onstructor<? extends Map<String, V>> constructor) {"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,70,his.valueTypeAdapter = valueTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,71,his.constructor = constructor;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,74,"ublic Map<?, V> read(JsonReader reader) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,75,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,76,eader.nextNull(); // TODO: does this belong here?
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,77,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,80,"ap<String, V> map = Reflection.newInstance(constructor);"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,81,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,82,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,83,tring key = reader.nextName();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,84, value = valueTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,85,"ap.put(key, value); // TODO: convert to the map's key type?"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,87,eader.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,88,eturn map;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,91,"ublic void write(JsonWriter writer, Map<?, V> map) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,92,f (map == null) {
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,93,riter.nullValue(); // TODO: better policy here?
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,94,eturn;
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,97,riter.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,98,"or (Map.Entry<?, V> entry : map.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,99,tring key = String.valueOf(entry.getKey());
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,100,riter.name(key);
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,101,"alueTypeAdapter.write(writer, entry.getValue());"
False,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/GsonCompatibleMapTypeAdapter.java,103,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,19,import com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,20,import com.google.gson.internal.ConstructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,21,import com.google.gson.internal.ObjectConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,23,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,24,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,25,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,26,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,27,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,28,import java.util.Map;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,31,* Adapt a map whose keys are any type.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,33,public final class MapTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,34,private final ConstructorConstructor constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,36,public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,37,this.constructorConstructor = constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,40,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,41,Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,43,Class<? super T> rawType = typeToken.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,44,if (!Map.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,45,return null;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,48,Class<?> rawTypeOfSrc = $Gson$Types.getRawType(type);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,49,"Type childGenericType = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc)[1];"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,50,TypeAdapter valueAdapter = context.getAdapter(TypeToken.get(childGenericType));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,51,ObjectConstructor<T> constructor = constructorConstructor.getConstructor(typeToken);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,53,"@SuppressWarnings(""unchecked"") // we don't define a type parameter for the key or value types"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,54,"TypeAdapter<T> result = new Adapter(valueAdapter, constructor);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,55,return result;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,58,"private final class Adapter<V> extends TypeAdapter<Map<?, V>> {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,59,private final TypeAdapter<V> valueTypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,60,"private final ObjectConstructor<? extends Map<String, V>> constructor;"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,62,"public Adapter(TypeAdapter<V> valueTypeAdapter,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,63,"ObjectConstructor<? extends Map<String, V>> constructor) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,64,this.valueTypeAdapter = valueTypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,65,this.constructor = constructor;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,68,"public Map<?, V> read(JsonReader reader) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,69,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,70,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,71,return null;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,74,"Map<String, V> map = constructor.construct();"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,76,reader.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,77,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,78,String key = reader.nextName();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,79,V value = valueTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,80,"map.put(key, value); // TODO: convert to the map's key type?"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,82,reader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,83,return map;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,86,"public void write(JsonWriter writer, Map<?, V> map) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,87,if (map == null) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,88,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,89,return;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,92,writer.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,93,"for (Map.Entry<?, V> entry : map.entrySet()) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,94,String key = String.valueOf(entry.getKey());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,95,writer.name(key);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,96,"valueTypeAdapter.write(writer, entry.getValue());"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,98,writer.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,19,import com.google.gson.internal.ConstructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,21,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,22,import com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,26,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,27,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,28,mport com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,51,ConstructorConstructor constructorConstructor = new ConstructorConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,62,actories.add(CollectionTypeAdapter.FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,63,actories.add(StringToValueMapTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,63,factories.add(new CollectionTypeAdapterFactory(constructorConstructor));
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,64,factories.add(new StringToValueMapTypeAdapterFactory(constructorConstructor));
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,66,actories.add(ReflectiveTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,67,factories.add(new ReflectiveTypeAdapterFactory(constructorConstructor));
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,105,* Returns a type adapter for {@code} type that isn't {@code skipPast}. This
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,106,"* can be used for type adapters to compose other, simpler type adapters."
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,108,* @throws IllegalArgumentException if this GSON cannot serialize and
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,109,*     deserialize {@code type}.
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,111,"public <T> TypeAdapter<T> getNextAdapter(TypeAdapter.Factory skipPast, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,112,boolean skipPastFound = false;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,114,for (TypeAdapter.Factory factory : factories) {
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,115,if (!skipPastFound) {
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,116,if (factory == skipPast) {
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,117,skipPastFound = true;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,119,continue;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,122,"TypeAdapter<T> candidate = factory.create(this, type);"
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,123,if (candidate != null) {
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,124,return candidate;
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,128,"throw new IllegalArgumentException(""This MiniGSON cannot serialize "" + type);"
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,18,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,19,mport java.lang.reflect.InvocationTargetException;
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,30,ype = (Class<?>) value.getClass();
True,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,28,type = value.getClass();
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,35,/ TODO: this should use Joel's unsafe constructor stuff
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,36,ublic static <T> T newInstance(Constructor<T> constructor) {
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,37,f (!constructor.isAccessible()) {
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,38,onstructor.setAccessible(true);
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,40,ry {
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,41,bject[] args = null;
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,42,eturn constructor.newInstance(args);
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,43, catch (InstantiationException e) {
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,44,/ TODO: JsonParseException ?
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,45,hrow new RuntimeException(e);
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,46, catch (InvocationTargetException e) {
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,47,/ TODO: don't wrap if cause is unchecked!
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,48,/ TODO: JsonParseException ?
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,49,hrow new RuntimeException(e.getTargetException());
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,50, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,gson/src/main/java/com/google/gson/internal/bind/Reflection.java,51,hrow new AssertionError(e);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,17,ackage com.google.gson.internal.bind;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,19,mport com.google.gson.JsonSyntaxException;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,20,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,21,mport java.lang.reflect.AccessibleObject;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,22,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,23,mport java.lang.reflect.Field;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,24,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,25,mport java.lang.reflect.TypeVariable;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,26,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,27,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,29,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,30,mport com.google.gson.internal.UnsafeAllocator;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,31,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,32,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,33,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,34,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,37, Adapts the fields of an object to the properties of a JSON object.
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,39,ublic final class ReflectiveTypeAdapter<T> extends TypeAdapter<T>  {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,40,ublic static final Factory FACTORY = new FactoryImpl();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,42,rivate static final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,43,rivate final Class<? super T> rawType;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,44,rivate final Constructor<? super T> constructor;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,45,"rivate final Map<String, BoundField> map;"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,46,rivate final BoundField[] boundFields;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,48,"eflectiveTypeAdapter(Class<? super T> rawType, Constructor<? super T> constructor, Map<String, BoundField> map) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,49,his.rawType = rawType;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,50,his.constructor = constructor;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,51,his.map = map;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,52,his.boundFields = map.values().toArray(new BoundField[map.size()]);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,55,"SuppressWarnings(""unchecked"") // the '? super T' is a raw T (the only kind we can construct)"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,56,ublic T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,57,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,58,eader.nextNull(); // TODO: does this belong here?
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,59,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,62, instance;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,63,f (constructor != null) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,64,nstance = (T) Reflection.newInstance(constructor);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,65, else {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,66,ry {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,67,nstance = (T) unsafeAllocator.newInstance(rawType);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,68, catch (Exception e) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,69,"hrow new RuntimeException((""Unable to invoke no-args constructor for "" + rawType.getName()"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,70," "". Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,74,/ TODO: null out the other fields?
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,76,ry {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,77,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,78,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,79,tring name = reader.nextName();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,80,oundField field = map.get(name);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,81,f (field == null || !field.deserialized) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,82,/ TODO: define a better policy
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,83,eader.skipValue();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,84, else {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,85,"ield.read(reader, instance);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,88, catch (IllegalStateException e) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,89,hrow new JsonSyntaxException(e);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,90, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,91,hrow new AssertionError();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,93,eader.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,94,eturn instance;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,97,"ublic void write(JsonWriter writer, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,98,f (value == null) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,99,riter.nullValue(); // TODO: better policy here?
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,100,eturn;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,103,riter.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,104,ry {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,105,or (BoundField boundField : boundFields) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,106,f (boundField.serialized) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,107,riter.name(boundField.name);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,108,"oundField.write(writer, value);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,111, catch (IllegalAccessException e) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,112,hrow new AssertionError();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,114,riter.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,117,tatic BoundField createBoundField(
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,118,"inal MiniGson context, final Field field, final String name,"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,119,"inal TypeToken<?> fieldType, boolean serialize, boolean deserialize) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,120,/ special casing primitives here saves ~5% on Android...
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,121,"eturn new BoundField(name, serialize, deserialize) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,122,inal TypeAdapter<?> typeAdapter = context.getAdapter(fieldType);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,123,"SuppressWarnings(""unchecked"") // the type adapter and field type always agree"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,124,"Override void write(JsonWriter writer, Object value)"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,125,"hrows IOException, IllegalAccessException {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,126,bject fieldValue = field.get(value);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,127,ypeAdapter t =
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,128,"ew TypeAdapterRuntimeTypeWrapper(context, this.typeAdapter, fieldType.getType());"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,129,".write(writer, fieldValue);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,131,"Override void read(JsonReader reader, Object value)"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,132,"hrows IOException, IllegalAccessException {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,133,bject fieldValue = typeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,134,"ield.set(value, fieldValue);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,139,ublic static class FactoryImpl implements Factory {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,140,"ublic boolean serializeField(Class<?> declaringClazz, Field f, Type declaredType) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,141,eturn !f.isSynthetic();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,143,"ublic boolean deserializeField(Class<?> declaringClazz, Field f, Type declaredType) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,144,eturn !f.isSynthetic();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,147,"ublic String getFieldName(Class<?> declaringClazz, Field f, Type declaredType) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,148,eturn f.getName();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,151,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,152,lass<? super T> raw = type.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,154,f (!Object.class.isAssignableFrom(raw)) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,155,eturn null; // it's a primitive!
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,158,onstructor<? super T> constructor = null;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,159,ry {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,160,onstructor = raw.getDeclaredConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,161, catch (NoSuchMethodException ignored) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,164,"eturn new ReflectiveTypeAdapter<T>(raw, constructor, getBoundFields(context, type, raw));"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,167,"rivate Map<String, BoundField> getBoundFields("
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,168,"iniGson context, TypeToken<?> type, Class<?> raw) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,169,"ap<String, BoundField> result = new LinkedHashMap<String, BoundField>();"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,170,f (raw.isInterface()) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,171,eturn result;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,174,ype declaredType = type.getType();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,175,hile (raw != Object.class) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,176,ield[] fields = raw.getDeclaredFields();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,177,"ccessibleObject.setAccessible(fields, true);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,178,or (Field field : fields) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,179,"oolean serialize = serializeField(raw, field, declaredType);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,180,"oolean deserialize = deserializeField(raw, field, declaredType);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,181,f (serialize || deserialize) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,182,"ype fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,183,"oundField boundField = createBoundField(context, field, getFieldName(raw, field, declaredType),"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,184,"ypeToken.get(fieldType), serialize, deserialize);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,185,"oundField previous = result.put(boundField.name, boundField);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,186,f (previous != null) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,187,hrow new IllegalArgumentException(declaredType
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,188," "" declares multiple JSON fields named "" + previous.name);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,192,"ype = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,193,aw = type.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,195,eturn result;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,199,tatic abstract class BoundField {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,200,inal String name;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,201,inal boolean serialized;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,202,inal boolean deserialized;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,204,"rotected BoundField(String name, boolean serialized, boolean deserialized) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,205,his.name = name;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,206,his.serialized = serialized;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,207,his.deserialized = deserialized;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,210,"bstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,211,"bstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,19,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,20,import com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,21,import com.google.gson.internal.ObjectConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,22,import com.google.gson.internal.Primitives;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,23,import com.google.gson.internal.ConstructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,24,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,25,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,26,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,27,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,28,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,29,import java.lang.reflect.AccessibleObject;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,30,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,31,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,32,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,33,import java.util.Map;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,36,* Type adapter that reflects over the fields and methods of a class.
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,38,public class ReflectiveTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,39,private final ConstructorConstructor constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,41,public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,42,this.constructorConstructor = constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,45,"protected boolean serializeField(Class<?> declaringClazz, Field f, Type declaredType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,46,return !f.isSynthetic();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,49,"protected boolean deserializeField(Class<?> declaringClazz, Field f, Type declaredType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,50,return !f.isSynthetic();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,53,"protected String getFieldName(Class<?> declaringClazz, Field f, Type declaredType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,54,return f.getName();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,57,"public <T> TypeAdapter<T> create(MiniGson context, final TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,58,Class<? super T> raw = type.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,60,if (!Object.class.isAssignableFrom(raw)) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,61,return null; // it's a primitive!
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,64,ObjectConstructor<T> constructor = constructorConstructor.getConstructor(type);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,66,"return new Adapter<T>(context, constructor, type,"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,67,"getBoundFields(context, type, raw));"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,70,private ReflectiveTypeAdapterFactory.BoundField createBoundField(
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,71,"final MiniGson context, final Field field, final String name,"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,72,"final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,73,final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,75,// special casing primitives here saves ~5% on Android...
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,76,"return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,77,final TypeAdapter<?> typeAdapter = context.getAdapter(fieldType);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,78,"@SuppressWarnings(""unchecked"") // the type adapter and field type always agree"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,79,"@Override void write(JsonWriter writer, Object value)"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,80,"throws IOException, IllegalAccessException {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,81,Object fieldValue = field.get(value);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,82,TypeAdapter t =
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,83,"new TypeAdapterRuntimeTypeWrapper(context, this.typeAdapter, fieldType.getType());"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,84,"t.write(writer, fieldValue);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,86,"@Override void read(JsonReader reader, Object value)"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,87,"throws IOException, IllegalAccessException {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,88,Object fieldValue = typeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,89,if (fieldValue != null || !isPrimitive) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,90,"field.set(value, fieldValue);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,96,"private Map<String, BoundField> getBoundFields("
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,97,"MiniGson context, TypeToken<?> type, Class<?> raw) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,98,"Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,99,if (raw.isInterface()) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,100,return result;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,103,Type declaredType = type.getType();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,104,while (raw != Object.class) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,105,Field[] fields = raw.getDeclaredFields();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,106,"AccessibleObject.setAccessible(fields, true);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,107,for (Field field : fields) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,108,"boolean serialize = serializeField(raw, field, declaredType);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,109,"boolean deserialize = deserializeField(raw, field, declaredType);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,110,if (!serialize && !deserialize) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,111,continue;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,113,"Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,114,"BoundField boundField = createBoundField(context, field, getFieldName(raw, field, declaredType),"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,115,"TypeToken.get(fieldType), serialize, deserialize);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,116,"BoundField previous = result.put(boundField.name, boundField);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,117,if (previous != null) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,118,throw new IllegalArgumentException(declaredType
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,119,"+ "" declares multiple JSON fields named "" + previous.name);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,122,"type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,123,raw = type.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,125,return result;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,128,static abstract class BoundField {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,129,final String name;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,130,final boolean serialized;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,131,final boolean deserialized;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,133,"protected BoundField(String name, boolean serialized, boolean deserialized) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,134,this.name = name;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,135,this.serialized = serialized;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,136,this.deserialized = deserialized;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,139,"abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,140,"abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,143,public final class Adapter<T> extends TypeAdapter<T> {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,144,private final MiniGson context;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,145,private final ObjectConstructor<T> constructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,146,private final TypeToken<T> type;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,147,"private final Map<String, BoundField> boundFields;"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,149,"private Adapter(MiniGson context, ObjectConstructor<T> constructor,"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,150,"TypeToken<T> type, Map<String, BoundField> boundFields) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,151,this.context = context;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,152,this.constructor = constructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,153,this.type = type;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,154,this.boundFields = boundFields;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,157,"@SuppressWarnings(""unchecked"") // the '? super T' is a raw T (the only kind we can construct)"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,158,public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,159,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,160,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,161,return null;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,164,T instance = constructor.construct();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,166,// TODO: null out the other fields?
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,168,try {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,169,reader.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,170,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,171,String name = reader.nextName();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,172,BoundField field = boundFields.get(name);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,173,if (field == null || !field.deserialized) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,174,// TODO: define a better policy
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,175,reader.skipValue();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,176,} else {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,177,"field.read(reader, instance);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,180,} catch (IllegalStateException e) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,181,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,182,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,183,throw new AssertionError();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,185,reader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,186,return instance;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,189,"public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,190,if (value == null) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,191,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,192,return;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,195,// TODO: GSON includes subclass fields during serialization
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,196,if (false) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,197,Class<?> runtimeType = value.getClass();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,198,if (runtimeType != type.getRawType()) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,199,TypeAdapter<?> adapter = context.getAdapter(runtimeType);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,200,"((TypeAdapter) adapter).write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,201,return;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,205,writer.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,206,try {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,207,for (BoundField boundField : boundFields.values()) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,208,if (boundField.serialized) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,209,writer.name(boundField.name);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,210,"boundField.write(writer, value);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,213,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,214,throw new AssertionError();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,216,writer.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,17,ackage com.google.gson.internal.bind;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,19,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,20,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,21,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,22,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,23,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,24,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,25,mport java.lang.reflect.Constructor;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,26,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,27,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,28,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,29,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,32, Adapt a map whose keys are strings.
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,34,"ublic final class StringToValueMapTypeAdapter<V> extends TypeAdapter<Map<String, V>> {"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,35,ublic static final Factory FACTORY = new Factory() {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,36,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,37,ype type = typeToken.getType();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,38,f (!(type instanceof ParameterizedType)) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,39,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,42,lass<? super T> rawType = typeToken.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,43,f (!Map.class.isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,44,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,47,"ype[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawType);"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,48,f (keyAndValueTypes[0] != String.class) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,49,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,51,ypeAdapter<?> valueAdapter = context.getAdapter(TypeToken.get(keyAndValueTypes[1]));
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,53,onstructor<?> constructor;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,54,ry {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,55,lass<?> constructorType = (rawType == Map.class) ? LinkedHashMap.class : rawType;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,56,onstructor = constructorType.getConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,57, catch (NoSuchMethodException e) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,58,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,61,"SuppressWarnings(""unchecked"") // we don't define a type parameter for the key or value types"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,62,"ypeAdapter<T> result = new StringToValueMapTypeAdapter(valueAdapter, constructor);"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,63,eturn result;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,67,rivate final TypeAdapter<V> valueTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,68,"rivate final Constructor<? extends Map<String, V>> constructor;"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,70,"ublic StringToValueMapTypeAdapter(TypeAdapter<V> valueTypeAdapter,"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,71,"onstructor<? extends Map<String, V>> constructor) {"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,72,his.valueTypeAdapter = valueTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,73,his.constructor = constructor;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,76,"ublic Map<String, V> read(JsonReader reader) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,77,f (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,78,eader.nextNull(); // TODO: does this belong here?
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,79,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,82,"ap<String, V> map = Reflection.newInstance(constructor);"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,83,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,84,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,85,tring key = reader.nextName();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,86, value = valueTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,87,"ap.put(key, value);"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,89,eader.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,90,eturn map;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,93,"ublic void write(JsonWriter writer, Map<String, V> map) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,94,f (map == null) {
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,95,riter.nullValue(); // TODO: better policy here?
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,96,eturn;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,99,riter.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,100,"or (Map.Entry<String, V> entry : map.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,101,riter.name(entry.getKey());
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,102,"alueTypeAdapter.write(writer, entry.getValue());"
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapter.java,104,riter.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,19,import com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,20,import com.google.gson.internal.ConstructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,21,import com.google.gson.internal.ObjectConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,23,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,24,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,25,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,26,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,27,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,28,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,29,import java.util.Map;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,32,* Adapt a map whose keys are strings.
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,34,public final class StringToValueMapTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,35,private final ConstructorConstructor constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,37,public StringToValueMapTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,38,this.constructorConstructor = constructorConstructor;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,41,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,42,Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,43,if (!(type instanceof ParameterizedType)) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,44,return null;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,47,Class<? super T> rawType = typeToken.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,48,if (!Map.class.isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,49,return null;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,52,"Type[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawType);"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,53,if (keyAndValueTypes[0] != String.class) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,54,return null;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,56,TypeAdapter<?> valueAdapter = context.getAdapter(TypeToken.get(keyAndValueTypes[1]));
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,58,ObjectConstructor<?> constructor = constructorConstructor.getConstructor(typeToken);
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,60,"@SuppressWarnings(""unchecked"") // we don't define a type parameter for the key or value types"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,61,"TypeAdapter<T> result = new Adapter(valueAdapter, constructor);"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,62,return result;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,65,"private final class Adapter<V> extends TypeAdapter<Map<String, V>> {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,66,private final TypeAdapter<V> valueTypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,67,"private final ObjectConstructor<? extends Map<String, V>> constructor;"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,69,"public Adapter(TypeAdapter<V> valueTypeAdapter,"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,70,"ObjectConstructor<? extends Map<String, V>> constructor) {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,71,this.valueTypeAdapter = valueTypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,72,this.constructor = constructor;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,75,"public Map<String, V> read(JsonReader reader) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,76,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,77,reader.nextNull(); // TODO: does this belong here?
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,78,return null;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,81,"Map<String, V> map = constructor.construct();"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,82,reader.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,83,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,84,String key = reader.nextName();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,85,V value = valueTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,86,"map.put(key, value);"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,88,reader.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,89,return map;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,92,"public void write(JsonWriter writer, Map<String, V> map) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,93,if (map == null) {
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,94,writer.nullValue(); // TODO: better policy here?
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,95,return;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,98,writer.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,99,"for (Map.Entry<String, V> entry : map.entrySet()) {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,100,writer.name(entry.getKey());
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,101,"valueTypeAdapter.write(writer, entry.getValue());"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,103,writer.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,18,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,19,mport java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,21,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,22,import java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,55,f (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapter)) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,54,if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,58, else if (!(delegate instanceof ReflectiveTypeAdapter)) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,57,} else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,170,f (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,170,JsonToken peek = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,171,if (peek == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,175,/* coerce booleans to strings for backwards compatibility */
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,176,if (peek == JsonToken.BOOLEAN) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,177,return Boolean.toString(reader.nextBoolean());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,317,ublic static final TypeAdapter EXCLUDED_TYPE_ADAPTER = new TypeAdapter<Object>() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,318,Override public Object read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,319,eader.skipValue();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,320,eturn null;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,322,"Override public void write(JsonWriter writer, Object value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,323,riter.nullValue();
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,19,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,21,mport java.util.ArrayList;
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,22,mport java.util.LinkedList;
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,25, Unit tests for the default constructor allocator class.
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,27, @author Joel Leitch
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,29,ublic class DefaultConstructorAllocatorTest extends TestCase {
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,30,rivate DefaultConstructorAllocator allocator;
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,32,Override
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,33,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,34,uper.setUp();
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,35,llocator = new DefaultConstructorAllocator();
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,38,"SuppressWarnings(""unchecked"")"
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,39,ublic void testObjectConstructor() throws Exception {
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,40,rrayList<Object> arrayList = allocator.newInstance(ArrayList.class);
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,41,ssertTrue(arrayList.isEmpty());
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,42,ssertTrue(allocator.isInCache(ArrayList.class));
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,44,inkedList<Object> linkedList = allocator.newInstance(LinkedList.class);
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,45,ssertTrue(linkedList.isEmpty());
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,46,ssertTrue(allocator.isInCache(LinkedList.class));
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,49,ublic void testMissingDefaultConstructor() throws Exception {
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,50,ssertNull(allocator.newInstance(NoDefaultConstructor.class));
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,51,ssertTrue(allocator.isInCache(NoDefaultConstructor.class));
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,54,rivate static class NoDefaultConstructor {
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,55,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,56,ublic NoDefaultConstructor(int i) {
False,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,57,/ do nothing
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,21,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,23,import junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,34,"rivate JsonSerializer<Map<?, ?>> mapSerializer;"
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,36,Override
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,37,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,38,uper.setUp();
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,39,apSerializer = new MapTypeAdapter();
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,32,private Gson gson = new Gson();
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,44,"sonElement element = mapSerializer.serialize(emptyMap, emptyMap.getClass(), null);"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,36,"JsonElement element = gson.toJsonTree(emptyMap, emptyMap.getClass());"
False,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,53,"sonElement element = mapSerializer.serialize(emptyMap, mapType, null);"
True,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java,45,"JsonElement element = gson.toJsonTree(emptyMap, mapType);"
True,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,19,import com.google.gson.common.TestTypes.ClassWithNoFields;
False,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,24,mport com.google.gson.common.TestTypes.ClassWithNoFields;
False,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,42,"ew MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),"
True,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,40,"DefaultTypeAdapters.getDefaultInstanceCreators(),"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,19,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,21,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,24, Unit tests for the {@link MappedObjectConstructor} class.
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,26, @author Joel Leitch
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,28,ublic class MappedObjectConstructorTest extends TestCase {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,29,rivate ParameterizedTypeHandlerMap<InstanceCreator<?>> creatorMap;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,30,rivate MappedObjectConstructor constructor;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,32,Override
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,33,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,34,uper.setUp();
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,35,reatorMap = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,36,onstructor = new MappedObjectConstructor(creatorMap);
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,39,ublic void testInstanceCreatorTakesTopPrecedence() throws Exception {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,40,"reatorMap.register(ObjectWithDefaultConstructor.class, new MyInstanceCreator(), false);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,41,bjectWithDefaultConstructor obj =
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,42,onstructor.construct(ObjectWithDefaultConstructor.class);
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,43,"ssertEquals(""instanceCreator"", obj.stringValue);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,44,"ssertEquals(10, obj.intValue);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,47,ublic void testNoInstanceCreatorInvokesDefaultConstructor() throws Exception {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,48,bjectWithDefaultConstructor expected = new ObjectWithDefaultConstructor();
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,49,bjectWithDefaultConstructor obj =
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,50,onstructor.construct(ObjectWithDefaultConstructor.class);
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,51,"ssertEquals(expected.stringValue, obj.stringValue);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,52,"ssertEquals(expected.intValue, obj.intValue);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,55,ublic void testNoDefaultConstructor() throws Exception {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,56,bjectNoDefaultConstructor obj = constructor.construct(ObjectNoDefaultConstructor.class);
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,57,ssertNull(obj.stringValue);
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,58,"ssertEquals(0, obj.intValue);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,61,rivate static class MyInstanceCreator
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,62,mplements InstanceCreator<ObjectWithDefaultConstructor> {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,63,ublic ObjectWithDefaultConstructor createInstance(Type type) {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,64,"eturn new ObjectWithDefaultConstructor(""instanceCreator"", 10);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,68,rivate static class ObjectWithDefaultConstructor {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,69,ublic final String stringValue;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,70,ublic final int intValue;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,72,rivate ObjectWithDefaultConstructor() {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,73,"his(""default"", 5);"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,76,"ublic ObjectWithDefaultConstructor(String stringValue, int intValue) {"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,77,his.stringValue = stringValue;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,78,his.intValue = intValue;
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,82,rivate static class ObjectNoDefaultConstructor extends ObjectWithDefaultConstructor {
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,83,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,84,"ublic ObjectNoDefaultConstructor(String stringValue, int intValue) {"
False,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java,85,"uper(stringValue, intValue);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,20,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,22,mport java.util.EmptyStackException;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,25, Unit tests for the {@link MemoryRefStack} class.
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,27, @author Joel Leitch
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,29,ublic class MemoryRefStackTest extends TestCase {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,30,rivate MemoryRefStack stack;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,32,Override
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,33,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,34,uper.setUp();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,35,tack = new MemoryRefStack();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,38,ublic void testPeekEmptyStack() throws Exception {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,39,ry {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,40,tack.peek();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,41, catch (EmptyStackException expected) { }
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,44,ublic void testPushPeekAndPop() throws Exception {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,45,"bjectTypePair obj = new ObjectTypePair(this, getClass(), true, false);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,47,"ssertEquals(obj, stack.push(obj));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,48,"ssertEquals(obj, stack.peek());"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,49,"ssertEquals(obj, stack.pop());"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,52,ublic void testPopTooMany() throws Exception {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,53,"bjectTypePair obj = new ObjectTypePair(this, getClass(), true, false);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,54,tack.push(obj);
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,55,"ssertEquals(obj, stack.pop());"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,57,ry {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,58,tack.pop();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,59, catch (EmptyStackException expected) { }
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,62,ublic void testContains() throws Exception {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,63,ockObject objA = new MockObject();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,64,ockObject objB = new MockObject();
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,65,"ssertEquals(objA, objB);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,66,"tack.push(new ObjectTypePair(objA, MockObject.class, true, false));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,67,"ssertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true, false)));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,"ssertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true, false)));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,71,rivate static class MockObject {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,72,rivate final int value = 1;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,74,Override
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,75,ublic boolean equals(Object obj) {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,76,eturn obj instanceof MockObject && value == ((MockObject) obj).value;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,79,Override
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,80,ublic int hashCode() {
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,81,eturn value;
False,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,117, catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,117,} catch (IllegalStateException expected) {
False,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,179, catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,179,} catch (NullPointerException expected) {
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,19,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,22, Unit test for the {@link NullExclusionStrategy} class.
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,24, @author Joel Leitch
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,26,ublic class NullExclusionStrategyTest extends TestCase {
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,27,rivate NullExclusionStrategy strategy;
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,29,Override
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,30,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,31,uper.setUp();
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,32,trategy = new NullExclusionStrategy();
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,35,ublic void testNeverSkipsClass() throws Exception {
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,36,ssertFalse(strategy.shouldSkipClass(String.class));
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,39,ublic void testNeverSkipsField() throws Exception {
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,40,ssertFalse(strategy.shouldSkipField(
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,41,"ew FieldAttributes(String.class, String.class.getFields()[0], String.class)));"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,21,import com.google.gson.internal.Primitives;
True,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,19,import com.google.gson.internal.Primitives;
False,gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java,gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java,77,"son gson = createGson(new MyExclusionStrategy(String.class), false);"
True,gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java,gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java,77,"Gson gson = createGson(new MyExclusionStrategy(String.class), false);"
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,21,import com.google.gson.JsonSyntaxException;
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,22,import com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,26,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,27,mport com.google.gson.GsonBuilder;
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,28,mport com.google.gson.JsonSyntaxException;
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,29,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,17,ackage com.google.gson;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,17,package com.google.gson.internal;
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,21,import com.google.gson.internal.ParameterizedTypeHandlerMap;
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,29, Unit tests for the {@link ParameterizedTypeHandlerMap} class.
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,30,* Unit tests for the {@link com.google.gson.internal.ParameterizedTypeHandlerMap} class.

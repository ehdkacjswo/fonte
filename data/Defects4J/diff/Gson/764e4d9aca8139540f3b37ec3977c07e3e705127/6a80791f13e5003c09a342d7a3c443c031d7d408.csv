is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,21,mport java.util.LinkedList;
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,32,ublic DisjunctionExclusionStrategy(ExclusionStrategy... strategies) {
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,33,reconditions.checkNotNull(strategies);
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,34,reconditions.checkArgument(strategies.length > 0);
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,36,his.strategies = new LinkedList<ExclusionStrategy>();
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,37,or (ExclusionStrategy strategy : strategies) {
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,38,his.strategies.add(strategy);
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,44,reconditions.checkArgument(!strategies.isEmpty());
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,46,his.strategies = new LinkedList<ExclusionStrategy>();
False,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,47,his.strategies.addAll(strategies);
True,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java,33,this.strategies = strategies;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,143,"reateObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,143,"new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,161,tatic MappedObjectConstructor createObjectConstructor(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,162,arameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,163,appedObjectConstructor objectConstructor = new MappedObjectConstructor();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,164,"or (Map.Entry<Type, InstanceCreator<?>> entry : instanceCreators.entrySet()) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,165,"bjectConstructor.register(entry.getKey(), entry.getValue());"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,167,eturn objectConstructor;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,53,private static final AnonymousAndLocalClassExclusionStrategy anonAndLocalClassExclusionStrategy =
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,54,new AnonymousAndLocalClassExclusionStrategy();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,55,private static final InnerClassExclusionStrategy innerClassExclusionStrategy =
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,56,new InnerClassExclusionStrategy();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,57,private static final ExposeAnnotationBasedExclusionStrategy exposeAnnotationExclusionStrategy =
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,58,new ExposeAnnotationBasedExclusionStrategy();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,57,rivate final AnonymousAndLocalClassExclusionStrategy anonAndLocalClassExclusionStrategy;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,58,rivate final InnerClassExclusionStrategy innerClassExclusionStrategy;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,85,nonAndLocalClassExclusionStrategy = new AnonymousAndLocalClassExclusionStrategy();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,86,nnerClassExclusionStrategy = new InnerClassExclusionStrategy();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,402,trategies.add(new ExposeAnnotationBasedExclusionStrategy());
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,404,strategies.add(exposeAnnotationExclusionStrategy);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,417,nstanceCreators.copyOf();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,419,instanceCreators.copyOf();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,419,appedObjectConstructor objConstructor = Gson.createObjectConstructor(customInstanceCreators);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,422,customSerializers.makeUnmodifiable();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,423,customDeserializers.makeUnmodifiable();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,424,instanceCreators.makeUnmodifiable();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,426,MappedObjectConstructor objConstructor = new MappedObjectConstructor(customInstanceCreators);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,431,"/ NOTE: if a date pattern exists, then that style takes priority"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,432,efaultDateTypeAdapter dateTypeAdapter = null;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,433,"f (datePattern != null && !"""".equals(datePattern.trim())) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,434,ateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,435, else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,436,"ateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,438,f (dateTypeAdapter != null
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,439,& !serializers.hasSpecificHandlerFor(Date.class)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,438,if (!serializers.hasSpecificHandlerFor(Date.class)
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,441,"erializers.register(Date.class, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,442,"eserializers.register(Date.class, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,440,"// NOTE: if a date pattern exists, then that style takes priority"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,441,DefaultDateTypeAdapter dateTypeAdapter = null;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,442,"if (datePattern != null && !"""".equals(datePattern.trim())) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,443,dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,444,} else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,445,"dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,448,if (dateTypeAdapter != null) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,449,"serializers.register(Date.class, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,450,"deserializers.register(Date.class, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,99, else if (child.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,99,} else if (child.isJsonArray()) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,40,rivate final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreatorMap =
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,41,ew ParameterizedTypeHandlerMap<InstanceCreator<?>>();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,40,private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreatorMap;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,42,public MappedObjectConstructor(
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,43,ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,44,instanceCreatorMap = instanceCreators;
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,50, Creates a new {@link ObjectNavigator} for this {@code srcObject}.
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,52," @see #create(Object, Type)"
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,53, @param srcObject object to navigate
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,54, @return a new instance of a {@link ObjectNavigator} ready to navigate the
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,55,         {@code srcObject}.
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,57,ublic ObjectNavigator create(Object srcObject) {
False,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java,58,"eturn create(srcObject, srcObject.getClass());"
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,41,ry {
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,42,ew DisjunctionExclusionStrategy();
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,43, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,45,ry {
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,46,xclusionStrategy[] constructorParam = null;
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,47,ew DisjunctionExclusionStrategy(constructorParam);
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,48, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,50,ry {
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,51,xclusionStrategy[] constructorParam = new ExclusionStrategy[0];
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,52,ew DisjunctionExclusionStrategy(constructorParam);
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,53, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,60,ry {
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,61,ist<ExclusionStrategy> constructorParam = new LinkedList<ExclusionStrategy>();
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,62,ew DisjunctionExclusionStrategy(constructorParam);
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,63, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,67,isjunctionExclusionStrategy strategy =
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,68,"ew DisjunctionExclusionStrategy(FALSE_STRATEGY, TRUE_STRATEGY);"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,48,List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,49,strategies.add(FALSE_STRATEGY);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,50,strategies.add(TRUE_STRATEGY);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,51,DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies);
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,75,isjunctionExclusionStrategy strategy =  new DisjunctionExclusionStrategy(FALSE_STRATEGY);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,58,List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,59,strategies.add(FALSE_STRATEGY);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,60,DisjunctionExclusionStrategy strategy =  new DisjunctionExclusionStrategy(strategies);

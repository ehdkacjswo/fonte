is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,32,mport com.google.gson.internal.bind.MiniGson;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,37,mport com.google.gson.internal.bind.TypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,53,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,55,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,124,* This thread local guards against reentrant calls to getAdapter(). In
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,125,"* certain object graphs, creating an adapter for a type may recursively"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,126,"* require an adapter for the same type! Without intervention, the recursive"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,127,* lookup would stack overflow. We cheat by returning a proxy type adapter.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,128,* The proxy is wired up once the initial adapter has been created.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,130,"private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,131,"= new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>() {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,132,"@Override protected Map<TypeToken<?>, FutureTypeAdapter<?>> initialValue() {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,133,"return new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,137,private final List<TypeAdapter.Factory> factories;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,138,rivate final MiniGson miniGson;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,230,iniGson.Builder builder = new MiniGson.Builder()
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,231,withoutDefaultFactories()
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,232,factory(TypeAdapters.STRING_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,233,factory(TypeAdapters.INTEGER_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,234,factory(TypeAdapters.BOOLEAN_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,235,factory(TypeAdapters.BYTE_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,236,factory(TypeAdapters.SHORT_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,237,"factory(TypeAdapters.newFactory(long.class, Long.class,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,238,ongAdapter(longSerializationPolicy)))
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,239,"factory(TypeAdapters.newFactory(double.class, Double.class,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,240,oubleAdapter(serializeSpecialFloatingPointValues)))
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,241,"factory(TypeAdapters.newFactory(float.class, Float.class,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,242,loatAdapter(serializeSpecialFloatingPointValues)))
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,243,factory(new ExcludedTypeAdapterFactory(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,244,"erializationExclusionStrategy, deserializationExclusionStrategy))"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,245,factory(TypeAdapters.NUMBER_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,246,factory(TypeAdapters.CHARACTER_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,247,factory(TypeAdapters.STRING_BUILDER_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,248,factory(TypeAdapters.STRING_BUFFER_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,249,"typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,250,"typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,251,factory(TypeAdapters.JSON_ELEMENT_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,252,factory(ObjectTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,243,ConstructorConstructor constructorConstructor = new ConstructorConstructor();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,244,List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,245,factories.add(TypeAdapters.STRING_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,246,factories.add(TypeAdapters.INTEGER_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,247,factories.add(TypeAdapters.BOOLEAN_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,248,factories.add(TypeAdapters.BYTE_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,249,factories.add(TypeAdapters.SHORT_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,250,"factories.add(TypeAdapters.newFactory(long.class, Long.class,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,251,longAdapter(longSerializationPolicy)));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,252,"factories.add(TypeAdapters.newFactory(double.class, Double.class,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,253,doubleAdapter(serializeSpecialFloatingPointValues)));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,"factories.add(TypeAdapters.newFactory(float.class, Float.class,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,floatAdapter(serializeSpecialFloatingPointValues)));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,256,factories.add(new ExcludedTypeAdapterFactory(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,257,"serializationExclusionStrategy, deserializationExclusionStrategy));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,258,factories.add(TypeAdapters.NUMBER_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,259,factories.add(TypeAdapters.CHARACTER_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,260,factories.add(TypeAdapters.STRING_BUILDER_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,factories.add(TypeAdapters.STRING_BUFFER_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,262,"factories.add(TypeAdapters.newFactory(BigDecimal.class, new BigDecimalTypeAdapter()));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,"factories.add(TypeAdapters.newFactory(BigInteger.class, new BigIntegerTypeAdapter()));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,264,factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,265,factories.add(ObjectTypeAdapter.FACTORY);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,uilder.factory(factory);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,factories.add(factory);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,258,uilder
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,259,"factory(new GsonToMiniGsonTypeAdapterFactory(this, serializers, deserializers))"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,260,factory(new CollectionTypeAdapterFactory(constructorConstructor))
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,factory(TypeAdapters.URL_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,262,factory(TypeAdapters.URI_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,factory(TypeAdapters.UUID_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,264,factory(TypeAdapters.LOCALE_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,265,factory(TypeAdapters.INET_ADDRESS_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,266,factory(TypeAdapters.BIT_SET_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,267,factory(DateTypeAdapter.FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,factory(TypeAdapters.CALENDAR_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,269,factory(TimeTypeAdapter.FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,270,factory(SqlDateTypeAdapter.FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,271,factory(TypeAdapters.TIMESTAMP_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,272,"factory(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization))"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,273,factory(ArrayTypeAdapter.FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,274,factory(TypeAdapters.ENUM_FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,275,factory(reflectiveTypeAdapterFactory);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,277,his.miniGson = builder.build();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,271,"factories.add(new GsonToMiniGsonTypeAdapterFactory(this, serializers, deserializers));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,272,factories.add(new CollectionTypeAdapterFactory(constructorConstructor));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,273,factories.add(TypeAdapters.URL_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,274,factories.add(TypeAdapters.URI_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,275,factories.add(TypeAdapters.UUID_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,276,factories.add(TypeAdapters.LOCALE_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,277,factories.add(TypeAdapters.INET_ADDRESS_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,278,factories.add(TypeAdapters.BIT_SET_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,279,factories.add(DateTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,280,factories.add(TypeAdapters.CALENDAR_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,281,factories.add(TimeTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,282,factories.add(SqlDateTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,283,factories.add(TypeAdapters.TIMESTAMP_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,284,"factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,285,factories.add(ArrayTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,286,factories.add(TypeAdapters.ENUM_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,287,factories.add(reflectiveTypeAdapterFactory);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,289,this.factories = Collections.unmodifiableList(factories);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,379,* Returns the type adapter for {@code} type.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,381,* @throws IllegalArgumentException if this GSON cannot serialize and
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,382,*     deserialize {@code type}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,384,public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,385,// TODO: cache?
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,387,"Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,388,"@SuppressWarnings(""unchecked"") // the key and value type parameters always agree"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,389,FutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,390,if (ongoingCall != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,391,return ongoingCall;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,394,FutureTypeAdapter<T> call = new FutureTypeAdapter<T>();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,395,"threadCalls.put(type, call);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,396,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,397,for (TypeAdapter.Factory factory : factories) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,398,"TypeAdapter<T> candidate = factory.create(this, type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,399,if (candidate != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,400,call.setDelegate(candidate);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,401,return candidate;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,404,"throw new IllegalArgumentException(""GSON cannot handle "" + type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,405,} finally {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,406,threadCalls.remove(type);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,411,* Returns a type adapter for {@code} type that isn't {@code skipPast}. This
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,412,"* can be used for type adapters to compose other, simpler type adapters."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,414,* @throws IllegalArgumentException if this GSON cannot serialize and
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,415,*     deserialize {@code type}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,417,"public <T> TypeAdapter<T> getNextAdapter(TypeAdapter.Factory skipPast, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,418,boolean skipPastFound = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,420,for (TypeAdapter.Factory factory : factories) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,421,if (!skipPastFound) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,422,if (factory == skipPast) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,423,skipPastFound = true;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,425,continue;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,428,"TypeAdapter<T> candidate = factory.create(this, type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,429,if (candidate != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,430,return candidate;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,434,"throw new IllegalArgumentException(""GSON cannot serialize "" + type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,438,* Returns the type adapter for {@code} type.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,440,* @throws IllegalArgumentException if this GSON cannot serialize and
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,441,*     deserialize {@code type}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,443,public <T> TypeAdapter<T> getAdapter(Class<T> type) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,444,return getAdapter(TypeToken.get(type));
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,504,ypeAdapter<?> adapter = miniGson.getAdapter(TypeToken.get(typeOfSrc));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,585,TypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,719,ypeAdapter<T> typeAdapter = (TypeAdapter<T>) miniGson.getAdapter(TypeToken.get(typeOfT));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,800,TypeAdapter<T> typeAdapter = (TypeAdapter<T>) getAdapter(TypeToken.get(typeOfT));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,867,static class FutureTypeAdapter<T> extends TypeAdapter<T> {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,868,private TypeAdapter<T> delegate;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,870,public void setDelegate(TypeAdapter<T> typeAdapter) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,871,if (delegate != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,872,throw new AssertionError();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,874,delegate = typeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,877,@Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,878,if (delegate == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,879,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,881,return delegate.read(reader);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,884,"@Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,885,if (delegate == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,886,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,888,"delegate.write(writer, value);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,23,mport com.google.gson.internal.bind.TypeAdapter;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,23,import com.google.gson.internal.bind.TypeAdapters;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,24,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,137,// TODO: nice documentation
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,138,public GsonBuilder factory(TypeAdapter.Factory factory) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,139,typeAdapterFactories.add(factory);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,140,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,143,// TODO: nice documentation
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,144,"public <T> GsonBuilder typeAdapter(final Class<T> type, final TypeAdapter<T> typeAdapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,145,"typeAdapterFactories.add(TypeAdapters.newFactory(type, typeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,146,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,149,// TODO: nice documentation
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,150,// TODO: accept a Type instead of a TypeToken? It's less typesafe but more Gson-like
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,151,"public <T> GsonBuilder typeAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,152,"typeAdapterFactories.add(TypeAdapters.newFactory(type, typeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,153,return this;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,156,// TODO: nice documentation
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,157,"public <T> GsonBuilder typeHierarchyAdapter(Class<T> type, TypeAdapter<T> typeAdapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,158,"typeAdapterFactories.add(TypeAdapters.newTypeHierarchyFactory(type, typeAdapter));"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,159,return this;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,20,mport com.google.gson.internal.bind.MiniGson;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,21,mport com.google.gson.internal.bind.TypeAdapter;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,56,"ublic <T> TypeAdapter<T> create(final MiniGson context, final TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,54,"public <T> TypeAdapter<T> create(final Gson context, final TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,17,ackage com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,17,package com.google.gson;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,19,mport com.google.gson.JsonElement;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,20,mport com.google.gson.JsonIOException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,19,import com.google.gson.internal.bind.JsonElementReader;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,20,import com.google.gson.internal.bind.JsonElementWriter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,30,// TODO: nice documentation
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,77,"T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,79,"<T> TypeAdapter<T> create(Gson context, TypeToken<T> type);"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,20,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,38,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,40,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,56,"ublic ArrayTypeAdapter(MiniGson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,58,"public ArrayTypeAdapter(Gson context, TypeAdapter<E> componentTypeAdapter, Class<E> componentType) {"
True,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigDecimalTypeAdapter.java,20,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/BigIntegerTypeAdapter.java,20,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,20,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,40,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,42,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,61,"ublic Adapter(MiniGson context, Type elementType,"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,63,"public Adapter(Gson context, Type elementType,"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,21,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,41,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,43,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,20,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,21,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,39,"ublic <T> TypeAdapter<T> create(final MiniGson context, final TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ExcludedTypeAdapterFactory.java,41,"public <T> TypeAdapter<T> create(final Gson context, final TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,23,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,111,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,113,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,135,"rivate TypeAdapter<?> getKeyAdapter(MiniGson context, Type keyType) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,137,"private TypeAdapter<?> getKeyAdapter(Gson context, Type keyType) {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,146,"ublic Adapter(MiniGson context, Type keyType, TypeAdapter<K> keyTypeAdapter,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,148,"public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,17,ackage com.google.gson.internal.bind;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,19,mport com.google.gson.internal.ConstructorConstructor;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,20,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,21,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,22,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,23,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,24,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,25,mport java.util.Collections;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,26,mport java.util.HashMap;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,27,mport java.util.List;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,28,mport java.util.Map;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,31, A basic binding between JSON and Java objects.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,33,ublic final class MiniGson {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,35, This thread local guards against reentrant calls to getAdapter(). In
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,36," certain object graphs, creating an adapter for a type may recursively"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,37," require an adapter for the same type! Without intervention, the recursive"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,38, lookup would stack overflow. We cheat by returning a proxy type adapter.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,39, The proxy is wired up once the initial adapter has been created.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,41,"rivate final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,42," new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>() {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,43,"Override protected Map<TypeToken<?>, FutureTypeAdapter<?>> initialValue() {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,44,"eturn new HashMap<TypeToken<?>, FutureTypeAdapter<?>>();"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,48,rivate final List<TypeAdapter.Factory> factories;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,50,rivate MiniGson(Builder builder) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,51,onstructorConstructor constructorConstructor = new ConstructorConstructor();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,52,ist<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,53,f (builder.addDefaultFactories) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,54,actories.add(TypeAdapters.BOOLEAN_FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,55,actories.add(TypeAdapters.INTEGER_FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,56,actories.add(TypeAdapters.DOUBLE_FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,57,actories.add(TypeAdapters.FLOAT_FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,58,actories.add(TypeAdapters.LONG_FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,59,actories.add(TypeAdapters.STRING_FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,61,actories.addAll(builder.factories);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,62,f (builder.addDefaultFactories) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,63,actories.add(new CollectionTypeAdapterFactory(constructorConstructor));
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,64,actories.add(new StringToValueMapTypeAdapterFactory(constructorConstructor));
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,65,actories.add(ArrayTypeAdapter.FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,66,actories.add(ObjectTypeAdapter.FACTORY);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,67,actories.add(new ReflectiveTypeAdapterFactory(constructorConstructor));
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,69,his.factories = Collections.unmodifiableList(factories);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,73, Returns the type adapter for {@code} type.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,75, @throws IllegalArgumentException if this GSON cannot serialize and
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,76,     deserialize {@code type}.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,78,ublic <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,79,/ TODO: create a cache!
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,81,"ap<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,82,"SuppressWarnings(""unchecked"") // the key and value type parameters always agree"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,83,utureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,84,f (ongoingCall != null) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,85,eturn ongoingCall;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,88,utureTypeAdapter<T> call = new FutureTypeAdapter<T>();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,89,"hreadCalls.put(type, call);"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,90,ry {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,91,or (TypeAdapter.Factory factory : factories) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,92,"ypeAdapter<T> candidate = factory.create(this, type);"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,93,f (candidate != null) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,94,all.setDelegate(candidate);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,95,eturn candidate;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,98,"hrow new IllegalArgumentException(""This MiniGSON cannot handle "" + type);"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,99, finally {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,100,hreadCalls.remove(type);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,105, Returns a type adapter for {@code} type that isn't {@code skipPast}. This
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,106," can be used for type adapters to compose other, simpler type adapters."
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,108, @throws IllegalArgumentException if this GSON cannot serialize and
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,109,     deserialize {@code type}.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,111,"ublic <T> TypeAdapter<T> getNextAdapter(TypeAdapter.Factory skipPast, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,112,oolean skipPastFound = false;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,114,or (TypeAdapter.Factory factory : factories) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,115,f (!skipPastFound) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,116,f (factory == skipPast) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,117,kipPastFound = true;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,119,ontinue;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,122,"ypeAdapter<T> candidate = factory.create(this, type);"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,123,f (candidate != null) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,124,eturn candidate;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,128,"hrow new IllegalArgumentException(""This MiniGSON cannot serialize "" + type);"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,131,tatic class FutureTypeAdapter<T> extends TypeAdapter<T> {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,132,rivate TypeAdapter<T> delegate;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,134,ublic void setDelegate(TypeAdapter<T> typeAdapter) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,135,f (delegate != null) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,136,hrow new AssertionError();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,138,elegate = typeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,141,Override public T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,142,f (delegate == null) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,143,hrow new IllegalStateException();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,145,eturn delegate.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,148,"Override public void write(JsonWriter writer, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,149,f (delegate == null) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,150,hrow new IllegalStateException();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,152,"elegate.write(writer, value);"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,157, Returns the type adapter for {@code} type.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,159, @throws IllegalArgumentException if this GSON cannot serialize and
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,160,     deserialize {@code type}.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,162,ublic <T> TypeAdapter<T> getAdapter(Class<T> type) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,163,eturn getAdapter(TypeToken.get(type));
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,167, Returns the type adapters of this context in order of precedence.
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,169,ublic List<TypeAdapter.Factory> getFactories() {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,170,eturn factories;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,173,ublic static final class Builder {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,174,rivate final List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,175,oolean addDefaultFactories = true;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,177,ublic Builder factory(TypeAdapter.Factory factory) {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,178,actories.add(factory);
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,179,eturn this;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,182,ublic Builder withoutDefaultFactories() {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,183,his.addDefaultFactories = false;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,184,eturn this;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,187,"ublic <T> Builder typeAdapter(final Class<T> type, final TypeAdapter<T> typeAdapter) {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,188,"actories.add(TypeAdapters.newFactory(type, typeAdapter));"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,189,eturn this;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,192,"ublic <T> Builder typeAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,193,"actories.add(TypeAdapters.newFactory(type, typeAdapter));"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,194,eturn this;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,197,"ublic <T> Builder typeHierarchyAdapter(Class<T> type, TypeAdapter<T> typeAdapter) {"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,198,"actories.add(TypeAdapters.newTypeHierarchyFactory(type, typeAdapter));"
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,199,eturn this;
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,202,ublic MiniGson build() {
False,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,203,eturn new MiniGson(this);
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,20,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,36,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,38,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,44,rivate final MiniGson miniGson;
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,46,private final Gson gson;
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,46,rivate ObjectTypeAdapter(MiniGson miniGson) {
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,47,his.miniGson = miniGson;
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,48,private ObjectTypeAdapter(Gson gson) {
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,49,this.gson = gson;
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,95,ypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) miniGson.getAdapter(value.getClass());
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,97,TypeAdapter<Object> typeAdapter = (TypeAdapter<Object>) gson.getAdapter(value.getClass());
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,21,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,57,"ublic <T> TypeAdapter<T> create(MiniGson context, final TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,59,"public <T> TypeAdapter<T> create(Gson context, final TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,69,"inal MiniGson context, final Field field, final String name,"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,71,"final Gson context, final Field field, final String name,"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,95,"iniGson context, TypeToken<?> type, Class<?> raw) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,97,"Gson context, TypeToken<?> type, Class<?> raw) {"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,21,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,38,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,40,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,20,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,41,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/StringToValueMapTypeAdapterFactory.java,43,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,21,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,40,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,42,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,18,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,19,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,26,rivate final MiniGson context;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,28,private final Gson context;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,30,"ypeAdapterRuntimeTypeWrapper(MiniGson context, TypeAdapter<T> delegate, Type type) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,32,"TypeAdapterRuntimeTypeWrapper(Gson context, TypeAdapter<T> delegate, Type type) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,27,import com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,454,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,456,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,677,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,679,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,689,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,691,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,699,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,701,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,712,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,714,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,727,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,729,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,742,"ublic <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,744,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
False,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,20,mport com.google.gson.internal.bind.TypeAdapter;
False,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,19,mport com.google.gson.internal.bind.MiniGson;
False,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,20,mport com.google.gson.internal.bind.TypeAdapter;
False,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,27,rivate final MiniGson gson = new MiniGson.Builder().build();
True,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,25,private final Gson gson = new GsonBuilder().create();
False,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,40,bject object = new Object() {
False,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,41,bject a = 5;
False,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,42,"bject b = Arrays.asList(1, 2, null);"
True,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,38,Object object = new RuntimeType();
True,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,46,private class RuntimeType {
True,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,47,Object a = 5;
True,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java,48,"Object b = Arrays.asList(1, 2, null);"
False,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,17,ackage com.google.gson.internal.bind;
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,17,package com.google.gson.functional;
False,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,19,mport com.google.gson.internal.bind.MiniGson;
False,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,20,mport com.google.gson.internal.bind.TypeAdapter;
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,21,import com.google.gson.TypeAdapter;
False,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,32,ublic final class MiniGsonTest extends TestCase {
False,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,33,rivate MiniGson miniGson = new MiniGson.Builder().build();
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,33,public final class StreamingTypeAdaptersTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,34,private Gson miniGson = new GsonBuilder().create();
False,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,104,"iniGson = new MiniGson.Builder().typeAdapter(Person.class, personNameAdapter).build();"
True,gson/src/test/java/com/google/gson/internal/bind/MiniGsonTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,105,"miniGson = new GsonBuilder().typeAdapter(Person.class, personNameAdapter).create();"

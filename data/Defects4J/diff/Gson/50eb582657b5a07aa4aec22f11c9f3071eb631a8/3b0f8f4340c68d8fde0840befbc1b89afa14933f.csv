is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,296,rotected void toString(Appendable sb) throws IOException {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,296,"protected void toString(Appendable sb, Escaper escaper) throws IOException {"
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,305,lement.toString(sb);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,305,"element.toString(sb, escaper);"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,30,private final Escaper escaper;
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,32,"ormattingVisitor(Appendable writer, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,33,"FormattingVisitor(Appendable writer, Escaper escaper, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,35,this.escaper = escaper;
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,38,rimitive.toString(writer);
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,40,"primitive.toString(writer, escaper);"
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,54,ember.toString(writer);
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,56,"member.toString(writer, escaper);"
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,93,ember.toString(writer);
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,95,"member.toString(writer, escaper);"
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,143,sonElementVisitor visitor = new JsonEscapingVisitor(
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,144,"ew FormattingVisitor(writer, serializeNulls), escapeHtmlChars);"
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,145,JsonElementVisitor visitor = new FormattingVisitor(
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,146,"writer, new Escaper(escapeHtmlChars), serializeNulls);"
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,31,private static final Escaper BASIC_ESCAPER = new Escaper(false);
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,333,oString(sb);
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,334,"toString(sb, BASIC_ESCAPER);"
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,340,rotected abstract void toString(Appendable sb) throws IOException;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,341,"protected abstract void toString(Appendable sb, Escaper escaper) throws IOException;"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,19,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,22, Performs JSON escaping and passes on the new escaped value to the delegate
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,23, {@link JsonElementVisitor}.
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,25, @author Joel Leitch
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,27,lass JsonEscapingVisitor extends DelegatingJsonElementVisitor {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,28,rivate final Escaper escaper;
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,31, Constructs a Visitor that will properly escape any JSON primitive values.
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,33, @param delegate the JsonElementVisitor that this instance will use for delegation
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,35,"rotected JsonEscapingVisitor(JsonElementVisitor delegate, boolean escapeHtmlChars) {"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,36,"his(delegate, new Escaper(escapeHtmlChars));"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,39,"rotected JsonEscapingVisitor(JsonElementVisitor delegate, Escaper escaper) {"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,40,uper(delegate);
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,41,his.escaper = escaper;
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,44,Override
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,45,"ublic void visitArrayMember(JsonArray parent, JsonPrimitive member,"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,46,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,47,"uper.visitArrayMember(parent, escapeJsonPrimitive(member), isFirst);"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,50,Override
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,51,"ublic void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member,"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,52,oolean isFirst) throws IOException {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,53,"uper.visitObjectMember(parent, memberName, escapeJsonPrimitive(member), isFirst);"
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,56,Override
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,57,ublic void visitPrimitive(JsonPrimitive primitive) throws IOException {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,58,uper.visitPrimitive(escapeJsonPrimitive(primitive));
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,61,rivate JsonPrimitive escapeJsonPrimitive(JsonPrimitive member) {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,62,f (member.isString()) {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,63,tring memberValue = member.getAsString();
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,64,ember.setValue(escaper.escapeJsonString(memberValue));
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,66,eturn member;
False,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,39,rotected void toString(Appendable sb) throws IOException {
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,39,"protected void toString(Appendable sb, Escaper escaper) throws IOException {"
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,194,rotected void toString(Appendable sb) throws IOException {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,194,"protected void toString(Appendable sb, Escaper escaper) throws IOException {"
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,206,ntry.getValue().toString(sb);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,206,"entry.getValue().toString(sb, escaper);"
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,323,rotected void toString(Appendable sb) throws IOException {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,324,f (value instanceof String) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,321,"protected void toString(Appendable sb, Escaper escaper) throws IOException {"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,322,if (isString()) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,326,b.append((String) value);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,324,sb.append(escaper.escapeJsonString(value.toString()));
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,149,private final Escaper escaper;
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,152,"rintFormattingVisitor(JsonWriter writer, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,153,"PrintFormattingVisitor(JsonWriter writer, Escaper escaper, boolean serializeNulls) {"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,155,this.escaper = escaper;
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,175,riter.value(member.toString());
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,177,writer.value(escapeJsonPrimitive(member));
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,207,riter.value(member.toString());
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,209,writer.value(escapeJsonPrimitive(member));
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,236,riter.value(primitive.toString());
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,238,writer.value(escapeJsonPrimitive(primitive));
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,245,private String escapeJsonPrimitive(JsonPrimitive member) throws IOException {
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,246,StringBuilder builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,247,"member.toString(builder, escaper);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,248,return builder.toString();
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,250,sonElementVisitor visitor = new JsonEscapingVisitor(
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,251,"ew PrintFormattingVisitor(jsonWriter, serializeNulls), escapeHtmlChars);"
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,258,JsonElementVisitor visitor = new PrintFormattingVisitor(
True,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,259,"jsonWriter, new Escaper(escapeHtmlChars), serializeNulls);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,19,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,22, Performs some unit testing for the {@link JsonEscapingVisitor} class.
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,24, @author Joel Leitch
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,26,ublic class JsonEscapingVisitorTest extends TestCase {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,27,rivate StubbedJsonElementVisitor stubVisitor;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,28,rivate JsonEscapingVisitor escapingVisitor;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,29,rivate Escaper escaper;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,31,Override
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,32,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,33,uper.setUp();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,34,tubVisitor = new StubbedJsonElementVisitor();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,35,scaper = new Escaper(true);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,36,"scapingVisitor = new JsonEscapingVisitor(stubVisitor, escaper);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,39,ublic void testNonStringPrimitiveVisitation() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,40,oolean value = true;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,41,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,42,scapingVisitor.visitPrimitive(primitive);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,43,"ssertEquals(value, stubVisitor.primitiveReceived.getAsBoolean());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,46,ublic void testStringPrimitiveVisitationNoEscapingRequired() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,47,"tring value = ""Testing123"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,48,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,49,scapingVisitor.visitPrimitive(primitive);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,50,"ssertEquals(value, stubVisitor.primitiveReceived.getAsObject());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,53,ublic void testStringPrimitiveVisitationEscapingRequired() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,54,"tring value = ""Testing\""123"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,55,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,56,scapingVisitor.visitPrimitive(primitive);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,57,"ssertEquals(escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,60,ublic void testNonStringArrayVisitation() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,61,nt value = 123;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,62,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,63,sonArray array = new JsonArray();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,64,rray.add(primitive);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,65,"scapingVisitor.visitArrayMember(array, primitive, true);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,66,"ssertEquals(value, stubVisitor.primitiveReceived.getAsInt());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,69,ublic void testStringArrayVisitationNoEscaping() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,70,"tring value = ""Testing123"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,71,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,72,sonArray array = new JsonArray();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,73,rray.add(primitive);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,74,"scapingVisitor.visitArrayMember(array, primitive, true);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,75,"ssertEquals(value, stubVisitor.primitiveReceived.getAsString());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,78,ublic void testStringArrayVisitationEscapingRequired() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,79,"tring value = ""Testing\""123"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,80,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,81,sonArray array = new JsonArray();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,82,rray.add(primitive);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,83,"scapingVisitor.visitArrayMember(array, primitive, true);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,84,"ssertEquals(escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,87,ublic void testNonStringFieldVisitation() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,88,"tring fieldName = ""fieldName"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,89,nt value = 123;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,90,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,91,sonObject object = new JsonObject();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,92,"bject.addProperty(fieldName, value);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,94,"scapingVisitor.visitObjectMember(object, fieldName, primitive, true);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,95,"ssertEquals(value, stubVisitor.primitiveReceived.getAsInt());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,98,ublic void testStringFieldVisitationNoEscaping() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,99,"tring fieldName = ""fieldName"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,100,"tring value = ""Testing123"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,101,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,102,sonObject object = new JsonObject();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,103,"bject.addProperty(fieldName, value);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,105,"scapingVisitor.visitObjectMember(object, fieldName, primitive, true);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,106,"ssertEquals(value, stubVisitor.primitiveReceived.getAsString());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,109,ublic void testStringFieldVisitationEscapingRequired() throws Exception {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,110,"tring fieldName = ""fieldName"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,111,"tring value = ""Testing\""123"";"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,112,sonPrimitive primitive = new JsonPrimitive(value);
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,113,sonObject object = new JsonObject();
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,114,"bject.addProperty(fieldName, value);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,116,"scapingVisitor.visitObjectMember(object, fieldName, primitive, true);"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,117,"ssertEquals(escaper.escapeJsonString(value), stubVisitor.primitiveReceived.getAsString());"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,120,rivate static class StubbedJsonElementVisitor implements JsonElementVisitor {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,121,ublic JsonPrimitive primitiveReceived;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,123,ublic void endArray(JsonArray array) {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,124,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,127,ublic void endObject(JsonObject object) {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,128,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,131,ublic void startArray(JsonArray array) {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,132,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,135,ublic void startObject(JsonObject object) {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,136,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,139,"ublic void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,140,rimitiveReceived = member;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,143,"ublic void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,144,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,147,"ublic void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,148,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,151,ublic void visitObjectMember(
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,152,"sonObject parent, String memberName, JsonPrimitive member, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,153,rimitiveReceived = member;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,156,ublic void visitObjectMember(
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,157,"sonObject parent, String memberName, JsonArray member, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,158,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,161,ublic void visitObjectMember(
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,162,"sonObject parent, String memberName, JsonObject member, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,163,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,166,ublic void visitPrimitive(JsonPrimitive primitive) {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,167,rimitiveReceived = primitive;
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,170,"ublic void visitNullArrayMember(JsonArray parent, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,171,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,174,ublic void visitNull() {
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,175,/ Do nothing
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,178,"ublic void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {"
False,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,gson/src/test/java/com/google/gson/JsonEscapingVisitorTest.java,179,/ Do nothing
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,84,public void testValidJsonOnToString() throws Exception {
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,85,"JsonPrimitive json = new JsonPrimitive(""Some\nEscaped\nValue"");"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,86,"assertEquals(""\""Some\\nEscaped\\nValue\"""", json.toString());"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,88,"json = new JsonPrimitive(new BigDecimal(""1.333""));"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,89,"assertEquals(""1.333"", json.toString());"

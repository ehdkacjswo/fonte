is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,184,* This method serializes the specified object into its equivalent representation as a tree of
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,185,* {JsonElement}s. This method should be used when the specified object is not a generic type.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,186,"* This method uses {@link Class#getClass()} to get the type for the specified object, but the"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,187,* {@code getClass()} loses the generic type information because of the Type Erasure feature
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"* of Java. Note that this method works fine if the any of the object fields are of generic type,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,189,"* just the object itself should not be of a generic type. If the object is of generic type, use"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,"* {@link #toJson(Object, Type)} instead. If you want to write out the object to a"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,191,"* {@link Writer}, use {@link #toJson(Object, Appendable)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,193,* @param src the object for which Json representation is to be created setting for Gson
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,194,* @return Json representation of {@code src}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,195,* @since 1.4
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,197,public JsonElement toJsonTree(Object src) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,198,if (src == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,199,return JsonNull.createJsonNull();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,201,"return toJsonTree(src, src.getClass());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,205,"* This method serializes the specified object, including those of generic types, into its"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,206,* equivalent representation as a tree of {@link JsonElement}s. This method must be used if the
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,207,"* specified object is a generic type. For non-generic objects, use {@link #toJson(Object)}"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,208,"* instead. If you want to write out the object to a {@link Appendable},"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,209,"* use {@link #toJson(Object, Type, Appendable)} instead."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,211,* @param src the object for which JSON representation is to be created
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,* @param typeOfSrc The specific genericized type of src. You can obtain
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,"* this type by using the {@link com.google.gson.reflect.TypeToken} class. For example,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214,"* to get the type for {@code Collection<Foo>}, you should use:"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,215,* <pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,216,* Type typeOfSrc = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,217,* </pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,* @return Json representation of {@code src}
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,219,* @since 1.4
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,221,"public JsonElement toJsonTree(Object src, Type typeOfSrc) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,222,if (src == null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,223,return JsonNull.createJsonNull();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,JsonSerializationContext context = new JsonSerializationContextDefault(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,226,"createDefaultObjectNavigatorFactory(), serializeNulls, serializers);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,227,"return context.serialize(src, typeOfSrc);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,266,f (src != null) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,267,sonSerializationContext context = new JsonSerializationContextDefault(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,268,"reateDefaultObjectNavigatorFactory(), serializeNulls, serializers);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,269,"sonElement jsonElement = context.serialize(src, typeOfSrc);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,271,f (generateNonExecutableJson) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,272,riter.append(JSON_NON_EXECUTABLE_PREFIX);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,274,"/TODO(Joel): instead of navigating the ""JsonElement"" inside the formatter, do it here."
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,275,"ormatter.format(jsonElement, writer, serializeNulls);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,276, else {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,277,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,278,riteOutNullString(writer);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,313,if (generateNonExecutableJson) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,314,writer.append(JSON_NON_EXECUTABLE_PREFIX);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,316,"JsonElement jsonElement = toJsonTree(src, typeOfSrc);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,317,"formatter.format(jsonElement, writer, serializeNulls);"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,1,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,3,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,4,import java.util.Set;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,5,import java.util.Map.Entry;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,7,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,9,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,10,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,11,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,12,import com.google.gson.JsonPrimitive;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,13,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,16,* Functional tests for {@link Gson#toJsonTree(Object) and
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,17,"* {@link Gson#toJsonTree(Object, java.lang.reflect.Type)"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,19,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,20,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,22,public class JsonTreeTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,23,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,25,@Override
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,26,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,27,super.setUp();
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,28,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,31,public void testToJsonTree() {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,32,"BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, ""foo"");"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,33,JsonElement json = gson.toJsonTree(bag);
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,34,assertTrue(json.isJsonObject());
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,35,JsonObject obj = json.getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,36,"Set<Entry<String, JsonElement>> children = obj.entrySet();"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,37,"assertEquals(4, children.size());"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,38,"assertContains(obj, new JsonPrimitive(10L));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,39,"assertContains(obj, new JsonPrimitive(5));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,40,"assertContains(obj, new JsonPrimitive(false));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,41,"assertContains(obj, new JsonPrimitive(""foo""));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,44,public void testToJsonTreeObjectType() {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,45,"SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, ""foo"", 1.4F);"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,46,"JsonElement json = gson.toJsonTree(bag, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,47,assertTrue(json.isJsonObject());
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,48,JsonObject obj = json.getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,49,"Set<Entry<String, JsonElement>> children = obj.entrySet();"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,50,"assertEquals(4, children.size());"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,51,"assertContains(obj, new JsonPrimitive(10L));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,52,"assertContains(obj, new JsonPrimitive(5));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,53,"assertContains(obj, new JsonPrimitive(false));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,54,"assertContains(obj, new JsonPrimitive(""foo""));"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,57,"private void assertContains(JsonObject json, JsonPrimitive child) {"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,58,"for (Map.Entry<String, JsonElement> entry : json.entrySet()) {"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,59,JsonElement node = entry.getValue();
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,60,if (node.isJsonPrimitive()) {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,61,if (node.getAsJsonPrimitive().equals(child)) {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,62,return;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,66,fail();
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,69,private static class SubTypeOfBagOfPrimitives extends BagOfPrimitives {
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,70,float f = 1.2F;
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,71,"public SubTypeOfBagOfPrimitives(long l, int i, boolean b, String string, float f) {"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,72,"super(l, i, b, string);"
True,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,gson/src/test/java/com/google/gson/functional/JsonTreeTest.java,73,this.f = f;

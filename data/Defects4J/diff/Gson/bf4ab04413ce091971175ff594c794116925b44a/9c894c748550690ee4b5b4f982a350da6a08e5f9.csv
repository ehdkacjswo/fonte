is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,20,import com.google.gson.internal.$Types;
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,52,private final Type resolvedType;
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,58,"FieldAttributes(Class<?> declaringClazz, Field f) {"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,59,"this(declaringClazz, f, declaringClazz);"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,66,* @param declaringType The type in which the field is declared
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,61,"ieldAttributes(final Class<?> declaringClazz, final Field f) {"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,68,"FieldAttributes(Class<?> declaringClazz, Field f, Type declaringType) {"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,75,"this.resolvedType = getTypeInfoForField(f, declaringType);"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,228,Type getResolvedType() {
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,229,return resolvedType;
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,244,"* Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,245,"* ""TypeVariable"" in a parameterized type then it evaluates the real type."
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,247,* @param f the actual field object to retrieve the type from
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,248,* @param typeDefiningF the type that contains the field {@code f}
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,249,* @return the type information for the field
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,251,"public static Type getTypeInfoForField(Field f, Type typeDefiningF) {"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,252,Class<?> rawType = $Types.getRawType(typeDefiningF);
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,253,if (!f.getDeclaringClass().isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,254,// this field is unrelated to the type; the user probably omitted type information
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,255,return f.getGenericType();
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,257,"return $Types.resolve(typeDefiningF, rawType, f.getGenericType());"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,36,"rivate static final LruCache<Type, List<Class<?>>> classCache ="
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,37,"ew LruCache<Type, List<Class<?>>>(500);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,38,"rivate static final LruCache<Class<?>, Field[]> fieldsCache ="
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,39,"ew LruCache<Class<?>, Field[]>(500);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,37,"private static final LruCache<Type, List<FieldAttributes>> fieldsCache ="
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,38,"new LruCache<Type, List<FieldAttributes>>(500);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,56,or (Class<?> curr : getInheritanceHierarchy(objTypePair.getMoreSpecificType())) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,57,"avigateClassFields(objTypePair.getObject(), objTypePair.type, curr, visitor);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,62, Returns a list of classes corresponding to the inheritance of specified type
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,64,rivate List<Class<?>> getInheritanceHierarchy(Type type) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,65,ist<Class<?>> classes = classCache.get(type);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,66,f (classes == null) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,67,lasses = new ArrayList<Class<?>>();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,68,lass<?> topLevelClass = $Types.getRawType(type);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,69,or (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr =
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,70,urr.getSuperclass()) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,71,f (!curr.isSynthetic()) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,72,lasses.add(curr);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,75,"lassCache.put(type, classes);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,77,eturn classes;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,80,"rivate void navigateClassFields(Object obj, Type objType,"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,81,"lass<?> classInInheritanceHierarchyForObj, Visitor visitor) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,82,ield[] fields = getFields(classInInheritanceHierarchyForObj);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,83,or (Field f : fields) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,84,"ieldAttributes fieldAttributes = new FieldAttributes(classInInheritanceHierarchyForObj, f);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,55,Type moreSpecificType = objTypePair.getMoreSpecificType();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,56,Object obj = objTypePair.getObject();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,57,"for (FieldAttributes fieldAttributes : getAllFields(moreSpecificType, objTypePair.getType())) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,89,"ype declaredTypeOfField = getTypeInfoForField(f, objType);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,62,Type resolvedTypeOfField = fieldAttributes.getResolvedType();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,91,"isitor.visitFieldUsingCustomHandler(fieldAttributes, declaredTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,64,"visitor.visitFieldUsingCustomHandler(fieldAttributes, resolvedTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,93,f ($Types.isArray(declaredTypeOfField)) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,94,"isitor.visitArrayField(fieldAttributes, declaredTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,66,if ($Types.isArray(resolvedTypeOfField)) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,67,"visitor.visitArrayField(fieldAttributes, resolvedTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,96,"isitor.visitObjectField(fieldAttributes, declaredTypeOfField, obj);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,69,"visitor.visitObjectField(fieldAttributes, resolvedTypeOfField, obj);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,102,rivate Field[] getFields(Class<?> clazz) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,103,ield[] fields = fieldsCache.get(clazz);
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,75,"private List<FieldAttributes> getAllFields(Type type, Type declaredType) {"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,76,List<FieldAttributes> fields = fieldsCache.get(type);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,105,ields = clazz.getDeclaredFields();
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,106,"ccessibleObject.setAccessible(fields, true);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,107,"ieldsCache.put(clazz, fields);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,78,fields = new ArrayList<FieldAttributes>();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,79,for (Class<?> curr : getInheritanceHierarchy(type)) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,80,Field[] fields1 = curr.getDeclaredFields();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,81,"AccessibleObject.setAccessible(fields1, true);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,82,Field[] classFields = fields1;
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,83,for (Field f : classFields) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,84,"fields.add(new FieldAttributes(curr, f, declaredType));"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,87,"fieldsCache.addElement(type, fields);"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,114," Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,115," ""TypeVariable"" in a parameterized type then it evaluates the real type."
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,117, @param f the actual field object to retrieve the type from
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,118, @param typeDefiningF the type that contains the field {@code f}
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,119, @return the type information for the field
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,93,* Returns a list of classes corresponding to the inheritance of specified type
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,121,"ublic static Type getTypeInfoForField(Field f, Type typeDefiningF) {"
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,122,lass<?> rawType = $Types.getRawType(typeDefiningF);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,123,f (!f.getDeclaringClass().isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,124,/ this field is unrelated to the type; the user probably omitted type information
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,125,eturn f.getGenericType();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,95,private List<Class<?>> getInheritanceHierarchy(Type type) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,96,List<Class<?>> classes = new ArrayList<Class<?>>();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,97,Class<?> topLevelClass = $Types.getRawType(type);
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,98,for (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class); curr =
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,99,curr.getSuperclass()) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,100,if (!curr.isSynthetic()) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,101,classes.add(curr);
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,127,"eturn $Types.resolve(typeDefiningF, rawType, f.getGenericType());"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,104,return classes;

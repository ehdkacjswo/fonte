is_addition,old_file_path,new_file_path,line_num,content
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,6,* You may obtain a copy of the License at
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,14,* limitations under the License.
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,17,package com.google.gson.mini;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,19,import com.google.gson.internal.$Gson$Types;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,20,import com.google.gson.reflect.TypeToken;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,21,import com.google.gson.stream.JsonReader;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,22,import com.google.gson.stream.JsonWriter;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,23,import java.io.IOException;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,24,import java.lang.reflect.Constructor;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,25,import java.lang.reflect.ParameterizedType;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,26,import java.lang.reflect.Type;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,27,import java.util.ArrayList;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,28,import java.util.Collection;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,29,import java.util.LinkedHashSet;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,30,import java.util.List;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,31,import java.util.Set;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,34,* Adapt a homogeneous collection of objects.
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,36,final class CollectionTypeAdapter<E> extends TypeAdapter<Collection<E>> {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,37,public static final Factory FACTORY = new Factory() {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,38,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,39,Type type = typeToken.getType();
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,40,if (!(type instanceof ParameterizedType)) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,41,return null;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,44,Class<? super T> rawType = typeToken.getRawType();
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,45,if (!Collection.class.isAssignableFrom(rawType)) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,46,return null;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,49,"Type elementType = $Gson$Types.getCollectionElementType(type, rawType);"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,50,TypeAdapter<?> elementTypeAdapter = context.getAdapter(TypeToken.get(elementType));
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,52,Class<?> constructorType;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,54,if (rawType == List.class || rawType == Collection.class) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,55,constructorType = ArrayList.class;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,56,} else if (rawType == Set.class) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,57,constructorType = LinkedHashSet.class;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,58,} else {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,59,constructorType = rawType;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,62,Constructor<?> constructor;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,63,try {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,64,constructor = constructorType.getConstructor();
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,65,} catch (NoSuchMethodException e) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,66,return null;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,69,"@SuppressWarnings(""unchecked"") // we don't define a type parameter for the element type"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,70,"TypeAdapter<T> result = new CollectionTypeAdapter(elementTypeAdapter, constructor);"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,71,return result;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,75,private final TypeAdapter<E> elementTypeAdapter;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,76,private final Constructor<? extends Collection<E>> constructor;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,78,"public CollectionTypeAdapter(TypeAdapter<E> elementTypeAdapter,"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,79,Constructor<? extends Collection<E>> constructor) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,80,this.elementTypeAdapter = elementTypeAdapter;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,81,this.constructor = constructor;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,84,public Collection<E> read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,85,Collection<E> collection = MiniGson.newInstance(constructor);
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,86,reader.beginArray();
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,87,while (reader.hasNext()) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,88,E instance = elementTypeAdapter.read(reader);
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,89,collection.add(instance);
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,91,reader.endArray();
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,92,return collection;
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,95,"public void write(JsonWriter writer, Collection<E> collection) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,96,writer.beginArray();
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,97,for (E element : collection) {
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,98,"elementTypeAdapter.write(writer, element);"
True,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,extras/src/main/java/com/google/gson/mini/CollectionTypeAdapter.java,100,writer.endArray();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,5,* you may not use this file except in compliance with the License.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,6,* You may obtain a copy of the License at
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,13,* See the License for the specific language governing permissions and
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,14,* limitations under the License.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,17,package com.google.gson.mini;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,19,import com.google.gson.reflect.TypeToken;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,20,import java.lang.reflect.Constructor;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,21,import java.lang.reflect.InvocationTargetException;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,22,import java.util.ArrayList;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,23,import java.util.Collections;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,24,import java.util.List;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,27,* A basic binding between JSON and Java objects.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,29,public final class MiniGson {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,30,private final List<TypeAdapter.Factory> factories;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,32,private MiniGson(Builder builder) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,33,List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,34,factories.addAll(builder.factories);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,35,factories.add(TypeAdapters.BOOLEAN_FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,36,factories.add(TypeAdapters.INTEGER_FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,37,factories.add(TypeAdapters.DOUBLE_FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,38,factories.add(TypeAdapters.LONG_FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,39,factories.add(TypeAdapters.STRING_FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,40,factories.add(ReflectiveTypeAdapter.FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,41,factories.add(CollectionTypeAdapter.FACTORY);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,42,this.factories = Collections.unmodifiableList(factories);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,45,// TODO: this should use Joel's unsafe constructor stuff
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,46,static <T> T newInstance(Constructor<T> constructor) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,47,try {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,48,return constructor.newInstance();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,49,} catch (InstantiationException e) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,50,// TODO: JsonParseException ?
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,51,throw new RuntimeException(e);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,52,} catch (InvocationTargetException e) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,53,// TODO: don't wrap if cause is unchecked!
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,54,// TODO: JsonParseException ?
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,55,throw new RuntimeException(e.getTargetException());
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,56,} catch (IllegalAccessException e) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,57,throw new AssertionError(e);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,62,* Returns the type adapter for {@code} type.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,64,* @throws IllegalArgumentException if this GSON cannot serialize and
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,65,*     deserialize {@code type}.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,67,public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,68,for (TypeAdapter.Factory factory : factories) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,69,"TypeAdapter<T> candidate = factory.create(this, type);"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,70,if (candidate != null) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,71,return candidate;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,74,"throw new IllegalArgumentException(""This MiniGSON cannot serialize "" + type);"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,78,* Returns the type adapter for {@code} type.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,80,* @throws IllegalArgumentException if this GSON cannot serialize and
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,81,*     deserialize {@code type}.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,83,public <T> TypeAdapter<T> getAdapter(Class<T> type) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,84,return getAdapter(TypeToken.get(type));
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,88,* Returns the type adapters of this context in order of precedence.
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,90,public List<TypeAdapter.Factory> getFactories() {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,91,return factories;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,94,public static final class Builder {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,95,private final List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,97,public void factory(TypeAdapter.Factory factory) {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,98,factories.add(factory);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,101,"public <T> void typeAdapter(final Class<T> type, final TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,102,"factories.add(TypeAdapters.newFactory(type, typeAdapter));"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,105,"public <T> void typeAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,106,"factories.add(TypeAdapters.newFactory(type, typeAdapter));"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,109,"public <T> void typeHierarchyAdapter(TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,110,"factories.add(TypeAdapters.newTypeHierarchyFactory(type, typeAdapter));"
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,113,public MiniGson build() {
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,114,return new MiniGson(this);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,6,* You may obtain a copy of the License at
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,14,* limitations under the License.
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,17,package com.google.gson.mini;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,19,import com.google.gson.internal.$Gson$Types;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,20,import com.google.gson.reflect.TypeToken;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,21,import com.google.gson.stream.JsonReader;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,22,import com.google.gson.stream.JsonWriter;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,23,import java.io.IOException;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,24,import java.lang.reflect.Constructor;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,25,import java.lang.reflect.Field;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,26,import java.lang.reflect.Type;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,27,import java.util.LinkedHashMap;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,28,import java.util.Map;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,31,* Adapts the fields of an object to the properties of a JSON object.
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,33,final class ReflectiveTypeAdapter<T> extends TypeAdapter<T>  {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,34,public static final Factory FACTORY = new Factory() {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,35,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,36,Class<? super T> raw = type.getRawType();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,38,if (!Object.class.isAssignableFrom(raw)) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,39,// TODO: does this catch primitives?
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,40,return null;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,43,// TODO: use Joel's constructor calling code (with setAccessible)
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,44,Constructor<T> constructor;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,45,try {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,46,constructor = (Constructor<T>) raw.getDeclaredConstructor();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,47,} catch (NoSuchMethodException e) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,48,return null;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,51,"return new ReflectiveTypeAdapter<T>(constructor, getBoundFields(context, type, raw));"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,54,"private Map<String, BoundField<?>> getBoundFields("
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,55,"MiniGson context, TypeToken<?> type, Class<?> raw) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,56,"Map<String, BoundField<?>> result = new LinkedHashMap<String, BoundField<?>>();"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,57,while (raw != Object.class) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,58,for (Field field : raw.getDeclaredFields()) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,59,"Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,60,"BoundField<?> boundField = BoundField.create(context, field, TypeToken.get(fieldType));"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,61,"result.put(boundField.name, boundField);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,63,"type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,64,raw = type.getRawType();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,66,return result;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,70,private final Constructor<T> constructor;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,71,"private final Map<String, BoundField<?>> map;"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,72,private final BoundField<?>[] boundFields;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,74,"ReflectiveTypeAdapter(Constructor<T> constructor, Map<String, BoundField<?>> map) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,75,this.constructor = constructor;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,76,this.map = map;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,77,this.boundFields = map.values().toArray(new BoundField<?>[map.size()]);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,80,public T read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,81,T instance = MiniGson.newInstance(constructor);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,83,// TODO: null out the other fields?
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,85,reader.beginObject();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,86,while (reader.hasNext()) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,87,String name = reader.nextName();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,88,BoundField<?> field = map.get(name);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,89,if (field == null) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,90,// TODO: define a better policy
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,91,reader.skipValue();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,92,} else {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,93,"field.read(reader, instance);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,96,reader.endObject();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,97,return instance;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,100,"public void write(JsonWriter writer, T value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,101,writer.beginObject();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,102,for (BoundField<?> boundField : boundFields) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,103,writer.name(boundField.name);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,104,"boundField.write(writer, value);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,106,writer.endObject();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,109,static class BoundField<T> {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,110,final String name;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,111,final Field field;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,112,final TypeAdapter<T> typeAdapter;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,114,"BoundField(String name, Field field, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,115,this.name = name;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,116,this.field = field;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,117,this.typeAdapter = typeAdapter;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,120,"static <T> BoundField<T> create(MiniGson context, Field field, TypeToken<T> fieldType) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,121,"return new BoundField<T>(field.getName(), field, context.getAdapter(fieldType));"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,124,"void write(JsonWriter writer, Object value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,125,try {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,126,"@SuppressWarnings(""unchecked"") // we previously verified that field is of type T"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,127,T fieldValue = (T) field.get(value);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,128,"typeAdapter.write(writer, fieldValue);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,129,} catch (IllegalAccessException e) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,130,throw new AssertionError();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,134,"void read(JsonReader reader, Object value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,135,T fieldValue = typeAdapter.read(reader);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,136,try {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,137,"field.set(value, fieldValue);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,138,} catch (IllegalAccessException e) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,139,throw new AssertionError();
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,6,* You may obtain a copy of the License at
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,13,* See the License for the specific language governing permissions and
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,14,* limitations under the License.
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,17,package com.google.gson.mini;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,19,import com.google.gson.reflect.TypeToken;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,20,import com.google.gson.stream.JsonReader;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,21,import com.google.gson.stream.JsonWriter;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,22,import java.io.IOException;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,23,import java.io.Reader;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,24,import java.io.StringReader;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,25,import java.io.StringWriter;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,26,import java.io.Writer;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,28,public abstract class TypeAdapter<T> {
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,29,public abstract T read(JsonReader reader) throws IOException;
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,30,"public abstract void write(JsonWriter writer, T value) throws IOException;"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,32,public final String toJson(T value) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,33,StringWriter stringWriter = new StringWriter();
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,34,"write(stringWriter, value);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,35,return stringWriter.toString();
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,38,"public final void write(Writer out, T value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,39,JsonWriter writer = new JsonWriter(out);
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,40,"write(writer, value);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,43,public final T fromJson(String json) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,44,return read(new StringReader(json));
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,47,public final T read(Reader in) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,48,JsonReader reader = new JsonReader(in);
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,49,reader.setLenient(true); // TODO: why?
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,50,return read(reader);
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,53,interface Factory {
True,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,extras/src/main/java/com/google/gson/mini/TypeAdapter.java,54,"<T> TypeAdapter<T> create(MiniGson context, TypeToken<T> type);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,5,* you may not use this file except in compliance with the License.
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,6,* You may obtain a copy of the License at
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,13,* See the License for the specific language governing permissions and
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,14,* limitations under the License.
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,17,package com.google.gson.mini;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,19,import com.google.gson.reflect.TypeToken;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,20,import com.google.gson.stream.JsonReader;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,21,import com.google.gson.stream.JsonWriter;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,22,import java.io.IOException;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,25,* Type adapters for basic types.
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,27,final class TypeAdapters {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,28,private TypeAdapters() {}
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,30,public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,31,public Boolean read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,32,return reader.nextBoolean();
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,34,"public void write(JsonWriter writer, Boolean value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,35,writer.value(value);
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,39,public static final TypeAdapter.Factory BOOLEAN_FACTORY
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,40,"= newFactory(boolean.class, Boolean.class, BOOLEAN);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,42,public static final TypeAdapter<Integer> INTEGER = new TypeAdapter<Integer>() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,43,public Integer read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,44,return reader.nextInt();
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,46,"public void write(JsonWriter writer, Integer value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,47,writer.value(value);
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,51,public static final TypeAdapter.Factory INTEGER_FACTORY
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,52,"= newFactory(int.class, Integer.class, INTEGER);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,54,public static final TypeAdapter<Long> LONG = new TypeAdapter<Long>() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,55,public Long read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,56,return reader.nextLong();
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,58,"public void write(JsonWriter writer, Long value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,59,writer.value(value);
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,63,public static final TypeAdapter.Factory LONG_FACTORY
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,64,"= newFactory(long.class, Long.class, LONG);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,66,public static final TypeAdapter<Double> DOUBLE = new TypeAdapter<Double>() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,67,public Double read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,68,return reader.nextDouble();
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,70,"public void write(JsonWriter writer, Double value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,71,writer.value(value);
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,75,public static final TypeAdapter.Factory DOUBLE_FACTORY
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,76,"= newFactory(double.class, Double.class, DOUBLE);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,78,public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,79,public String read(JsonReader reader) throws IOException {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,80,return reader.nextString();
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,82,"public void write(JsonWriter writer, String value) throws IOException {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,83,writer.value(value);
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,87,"public static final TypeAdapter.Factory STRING_FACTORY = newFactory(String.class, STRING);"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,89,public static <T> TypeAdapter.Factory newFactory(
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,90,"final TypeToken<T> type, final TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,91,return new TypeAdapter.Factory() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,92,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,93,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,94,return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,99,public static <T> TypeAdapter.Factory newFactory(
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,100,"final Class<T> type, final TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,101,return new TypeAdapter.Factory() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,102,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,103,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,104,return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,109,private static <T> TypeAdapter.Factory newFactory(
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,110,"final Class<T> unboxed, final Class<T> boxed, final TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,111,return new TypeAdapter.Factory() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,112,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,113,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,114,Class<? super T> rawType = typeToken.getRawType();
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,115,return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,120,public static <T> TypeAdapter.Factory newTypeHierarchyFactory(
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,121,"TypeToken<T> type, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,122,return new TypeAdapter.Factory() {
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,123,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,124,// TODO: use Inder's TypeHierarchyAdapter here
True,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,extras/src/main/java/com/google/gson/mini/TypeAdapters.java,125,throw new UnsupportedOperationException();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,2,* Copyright (C) 2011 Google Inc.
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,5,* you may not use this file except in compliance with the License.
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,6,* You may obtain a copy of the License at
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,13,* See the License for the specific language governing permissions and
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,14,* limitations under the License.
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,17,package com.google.gson.mini;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,19,import java.io.IOException;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,20,import java.util.Arrays;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,21,import java.util.List;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,22,import junit.framework.TestCase;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,24,public final class MiniGsonTest extends TestCase {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,26,public void testSerialize() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,27,"Person jesse = new Person(""Jesse"", 29);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,28,"Person jodie = new Person(""Jodie"", 29);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,29,Truck truck = new Truck();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,30,"truck.passengers = Arrays.asList(jesse, jodie);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,31,truck.horsePower = 300;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,33,MiniGson miniGson = new MiniGson.Builder().build();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,34,TypeAdapter<Truck> truckAdapter = miniGson.getAdapter(Truck.class);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,36,String json = truckAdapter.toJson(truck);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,37,"assertEquals(""{'horsePower':300.0,"""
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,38,"+ ""'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}"","
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,39,"json.replace('\""', '\''));"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,42,public void testDeserialize() throws IOException {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,43,"String json = ""{'horsePower':300.0,"""
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,44,"+ ""'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}"";"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,46,MiniGson miniGson = new MiniGson.Builder().build();
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,47,TypeAdapter<Truck> truckAdapter = miniGson.getAdapter(Truck.class);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,48,Truck truck = truckAdapter.fromJson(json);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,50,"assertEquals(300.0, truck.horsePower);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,51,Person jesse = truck.passengers.get(0);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,52,"assertEquals(""Jesse"", jesse.name);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,53,"assertEquals(29, jesse.age);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,54,Person jodie = truck.passengers.get(1);
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,55,"assertEquals(""Jodie"", jodie.name);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,56,"assertEquals(29, jodie.age);"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,59,static class Truck {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,60,double horsePower;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,61,List<Person> passengers;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,64,static class Person {
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,65,int age;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,66,String name;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,68,"Person(String name, int age) {"
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,69,this.name = name;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,70,this.age = age;
True,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,extras/src/test/java/com/google/gson/mini/MiniGsonTest.java,73,public Person() {} // TODO: use Joel's constructor code so we don't need this

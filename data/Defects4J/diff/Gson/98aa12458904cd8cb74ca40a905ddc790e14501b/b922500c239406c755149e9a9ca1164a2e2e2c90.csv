is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,21,import com.google.gson.internal.UnsafeAllocator;
False,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java,17,ackage com.google.gson;
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java,17,package com.google.gson.internal;
False,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java,30,bstract class UnsafeAllocator {
True,gson/src/main/java/com/google/gson/UnsafeAllocator.java,gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java,30,public abstract class UnsafeAllocator {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,20,import com.google.gson.internal.UnsafeAllocator;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,39,private static final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,40,private final Class<? super T> rawType;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,42,"eflectiveTypeAdapter(Constructor<? super T> constructor, Map<String, BoundField> map) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,45,"ReflectiveTypeAdapter(Class<? super T> rawType, Constructor<? super T> constructor, Map<String, BoundField> map) {"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,46,this.rawType = rawType;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,52,"@SuppressWarnings(""unchecked"") // the '? super T' is a raw T (the only kind we can construct)"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,54,"SuppressWarnings(""unchecked"") // the '? super T' is a raw T (the only kind we can construct)"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,55, instance = (T) MiniGson.newInstance(constructor);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,59,T instance;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,60,if (constructor != null) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,61,instance = (T) MiniGson.newInstance(constructor);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,62,} else {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,63,try {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,64,instance = (T) unsafeAllocator.newInstance(rawType);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,65,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,66,"throw new RuntimeException((""Unable to invoke no-args constructor for "" + rawType.getName()"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,67,"+ "". Register an InstanceCreator with Gson for this type may fix this problem.""), e);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,131,/ TODO: use Joel's constructor calling code (with setAccessible)
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,132,onstructor<? super T> constructor;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,145,Constructor<? super T> constructor = null;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,135, catch (NoSuchMethodException e) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,136,eturn null;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,148,} catch (NoSuchMethodException ignored) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,139,"eturn new ReflectiveTypeAdapter<T>(constructor, getBoundFields(context, type, raw));"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapter.java,151,"return new ReflectiveTypeAdapter<T>(raw, constructor, getBoundFields(context, type, raw));"

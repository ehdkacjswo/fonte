is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,457,ype childType = (childGenericType == null) ?
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,458,hildType = value.getClass() : childGenericType;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,457,Type childType = (childGenericType == null)
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,458,? value.getClass() : childGenericType;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,29,mport java.util.logging.Logger;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,86,tatic final Logger logger = Logger.getLogger(Gson.class.getName());
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,405,"tringBuilder sb = new StringBuilder(""{"");"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,406,"b.append(""serializeNulls:"").append(serializeNulls);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,407,"b.append("",serializers:"").append(serializers);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,408,"b.append("",deserializers:"").append(deserializers);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,409,/ using the name instanceCreator instead of ObjectConstructor since the users of Gson are
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,410,"/ more familiar with the concept of Instance Creators. Moreover, the objectConstructor is"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,411,"/ just a utility class around instance creators, and its toString() only displays them."
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,412,"b.append("",instanceCreators:"").append(objectConstructor);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,413,"b.append(""}"");"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,414,eturn sb.toString();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,403,"StringBuilder sb = new StringBuilder(""{"")"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,404,".append(""serializeNulls:"").append(serializeNulls)"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,405,".append("",serializers:"").append(serializers)"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,406,".append("",deserializers:"").append(deserializers)"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,408,// using the name instanceCreator instead of ObjectConstructor since the users of Gson are
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,409,"// more familiar with the concept of Instance Creators. Moreover, the objectConstructor is"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,410,"// just a utility class around instance creators, and its toString() only displays them."
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,411,".append("",instanceCreators:"").append(objectConstructor)"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,412,".append(""}"");"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,413,return sb.toString();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,439,& !serializers.hasAnyHandlerFor(Date.class)
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,440,& !deserializers.hasAnyHandlerFor(Date.class)) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,439,&& !serializers.hasSpecificHandlerFor(Date.class)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,440,&& !deserializers.hasSpecificHandlerFor(Date.class)) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,19,import java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,294,rotected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,295,protected void toString(Appendable sb) throws IOException {
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,38,riter.append(primitive.toString());
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,38,primitive.toString(writer);
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,54,riter.append(member.toString());
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,54,member.toString(writer);
False,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,93,riter.append(member.toString());
True,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,gson/src/main/java/com/google/gson/JsonCompactFormatter.java,93,member.toString(writer);
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,20,mport java.util.logging.Logger;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,32,rotected static Logger logger = Logger.getLogger(JsonDeserializationVisitor.class.getName());
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,19,import java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,314,tringBuilder sb = new StringBuilder();
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,315,oString(sb);
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,316,eturn sb.toString();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,315,try {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,316,StringBuilder sb = new StringBuilder();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,317,toString(sb);
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,318,return sb.toString();
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,319,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,320,throw new RuntimeException(e);
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,319,rotected abstract void toString(StringBuilder sb);
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,324,protected abstract void toString(Appendable sb) throws IOException;
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,64,tring escapedValue = escaper.escapeJsonString(memberValue);
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,65,f (!escapedValue.equals(memberValue)) {
False,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,66,ember.setValue(escapedValue);
True,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,gson/src/main/java/com/google/gson/JsonEscapingVisitor.java,64,member.setValue(escaper.escapeJsonString(memberValue));
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,19,import java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,37,rotected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,39,protected void toString(Appendable sb) throws IOException {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,19,import java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,192,rotected void toString(StringBuilder sb) {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,193,protected void toString(Appendable sb) throws IOException {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,19,import java.io.IOException;
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,308,rotected void toString(StringBuilder sb) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,309,f (value != null) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,310,f (value instanceof String) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,311,"b.append('""');"
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,312,b.append(value);
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,313,"b.append('""');"
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,315, else {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,316,b.append(value);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,309,protected void toString(Appendable sb) throws IOException {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,310,if (value instanceof String) {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,311,"sb.append('""');"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,312,sb.append((String) value);
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,313,"sb.append('""');"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,314,} else {
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,315,sb.append(value.toString());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,ddNullAsArrayElement();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,root.getAsJsonArray().add(JsonNull.createJsonNull());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,rivate void addNullAsArrayElement() {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,114,oot.getAsJsonArray().add(null);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,163,reconditions.checkArgument(root == null);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,159,Preconditions.checkNotNull(newRoot);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,37,f (element == null || element.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,37,if (element.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,71,f (child != null) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,72,f (child.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,73,f (visitNulls) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,74,"isitor.visitNullObjectMember(parent, childName, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,75,avigate(child.getAsJsonNull());
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,76, else { // Null value is being skipped.
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,77,eturn false;
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,79, else if (child.isJsonArray()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,80,sonArray childAsArray = child.getAsJsonArray();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,81,"isitor.visitObjectMember(parent, childName, childAsArray, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,82,avigate(childAsArray);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,83, else if (child.isJsonObject()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,84,sonObject childAsObject = child.getAsJsonObject();
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,85,"isitor.visitObjectMember(parent, childName, childAsObject, isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,86,avigate(childAsObject);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,87, else { // is a JsonPrimitive
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,88,"isitor.visitObjectMember(parent, childName, child.getAsJsonPrimitive(), isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,71,if (child.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,72,if (visitNulls) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,73,"visitor.visitNullObjectMember(parent, childName, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,74,navigate(child.getAsJsonNull());
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,75,} else { // Null value is being skipped.
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,76,return false;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,78,} else if (child.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,79,JsonArray childAsArray = child.getAsJsonArray();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,80,"visitor.visitObjectMember(parent, childName, childAsArray, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,81,navigate(childAsArray);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,82,} else if (child.isJsonObject()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,83,JsonObject childAsObject = child.getAsJsonObject();
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,84,"visitor.visitObjectMember(parent, childName, childAsObject, isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,85,navigate(childAsObject);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,86,} else { // is a JsonPrimitive
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,87,"visitor.visitObjectMember(parent, childName, child.getAsJsonPrimitive(), isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,98,f (child == null || child.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,96,if (child.isJsonNull()) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,100,avigate(null);
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,98,navigate(child);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,38,rivate final Logger log = Logger.getLogger(getClass().getName());
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,38,private static final Logger log = Logger.getLogger(MappedObjectConstructor.class.getName());
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,41,ew ParameterizedTypeHandlerMap<InstanceCreator<?>>();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,41,new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,45,f (instanceCreatorMap.hasAnyHandlerFor(typeOfT)) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,46,nstanceCreator<T> creator = (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,45,InstanceCreator<T> creator = (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,46,if (creator != null) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,19,mport java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,25,import java.util.logging.Logger;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,28, A map that provides ability to associate handlers for a specific type or all of its sub-types
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,28,* A map that provides ability to associate handlers for a specific type or all
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,29,* of its sub-types
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,33, @param <T> The handler that will be looked up by type
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,34,* @param <T>
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,35,*          The handler that will be looked up by type
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,38,private static final Logger logger =
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,39,Logger.getLogger(ParameterizedTypeHandlerMap.class.getName());
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,42,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,45,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,46,"""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,45,"son.logger.log(Level.WARNING, ""Overriding the existing type handler for "" + typeOfT);"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,49,"logger.log(Level.WARNING,"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,50,"""Overriding the existing type handler for "" + typeOfT);"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,52,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,57,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,58,"""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,63,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,69,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,70,"""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,75, handler = getRawHandlerFor(type);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,76,ype rawType = type;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,77,f (handler == null && type instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,78,"/ a handler for a non-generic version may be registered, so use that"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,79,awType = ((ParameterizedType)type).getRawType();
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,80,andler = map.get(rawType);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,83,/ Check for map or collection
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,82,T handler = map.get(type);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,85,f (rawType instanceof Class) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,86,lass<?> rawClass = (Class<?>) rawType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,84,Class<?> rawClass = TypeUtils.toRawClass(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,85,if (rawClass != type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,86,handler = getHandlerFor(rawClass);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,89,// Check for map or collection
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,90,if (handler == null) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,99,rivate synchronized T getRawHandlerFor(Type type) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,100,f (type instanceof Map) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,101,eturn map.get(Map.class);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,102, else if (type instanceof Collection) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,103,eturn map.get(Collection.class);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,104, else {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,105, handler = map.get(type);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,106,f (handler == null) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,107,lass<?> rawClass = TypeUtils.toRawClass(type);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,108,f (rawClass != type) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,109,andler = getHandlerFor(rawClass);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,112,eturn handler;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,116,ublic synchronized boolean hasAnyHandlerFor(Type type) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,117,eturn getHandlerFor(type) != null;
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,42,ssertFalse(paramMap.hasAnyHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,42,assertNull(paramMap.getHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,53,ssertTrue(paramMap.hasAnyHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,54,ssertTrue(paramMap.hasAnyHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,53,assertNotNull(paramMap.getHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,54,assertNotNull(paramMap.getHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,65,ssertTrue(paramMap.hasAnyHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,66,ssertFalse(paramMap.hasAnyHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,65,assertNotNull(paramMap.getHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,66,assertNull(paramMap.getHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,87,public void testNullsInArrayWithSerializeNullPropertySetSerialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,88,gson = new GsonBuilder().serializeNulls().create();
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,89,"String[] array = {""foo"", null, ""bar""};"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,90,"String expected = ""[\""foo\"",null,\""bar\""]"";"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,91,String json = gson.toJson(array);
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,92,"assertEquals(expected, json);"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,162,/ Ensure that gson.getDelegateAdapter continues to work for type adapter factories
False,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,163,/ registered through JsonAdapter annotation. Query for a random type adapter.
False,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,164,"son.getDelegateAdapter(this, TypeToken.get(JsonAdapterAnnotationOnFieldsTest.class));"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,18,import java.io.IOException;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,19,import java.util.LinkedHashMap;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,20,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,24,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,25,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,26,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,27,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,28,import com.google.gson.JsonPrimitive;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,29,import com.google.gson.TypeAdapter;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,30,import com.google.gson.TypeAdapterFactory;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,31,import com.google.gson.annotations.JsonAdapter;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,32,import com.google.gson.internal.Streams;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,33,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,34,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,35,import com.google.gson.stream.JsonWriter;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,38,* Functional tests for the RuntimeTypeAdapterFactory feature in extras.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,40,public final class RuntimeTypeAdapterFactoryFunctionalTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,42,private final Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,45,* This test also ensures that {@link TypeAdapterFactory} registered through {@link JsonAdapter}
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,46,"* work correctly for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)}."
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,48,public void testSubclassesAutomaticallySerialzed() throws Exception {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,49,Shape shape = new Circle(25);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,50,String json = gson.toJson(shape);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,51,"shape = gson.fromJson(json, Shape.class);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,52,"assertEquals(25, ((Circle)shape).radius);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,54,shape = new Square(15);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,55,json = gson.toJson(shape);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,56,"shape = gson.fromJson(json, Shape.class);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,57,"assertEquals(15, ((Square)shape).side);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,60,@JsonAdapter(Shape.JsonAdapterFactory.class)
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,61,static class Shape {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,62,final ShapeType type;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,63,Shape(ShapeType type) { this.type = type; }
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,64,private static final class JsonAdapterFactory extends RuntimeTypeAdapterFactory<Shape> {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,65,public JsonAdapterFactory() {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,66,"super(Shape.class, ""type"");"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,67,"registerSubtype(Circle.class, ShapeType.CIRCLE.toString());"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,68,"registerSubtype(Square.class, ShapeType.SQUARE.toString());"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,73,public enum ShapeType {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,74,"SQUARE, CIRCLE"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,77,private static final class Circle extends Shape {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,78,final int radius;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,79,Circle(int radius) { super(ShapeType.CIRCLE); this.radius = radius; }
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,82,private static final class Square extends Shape {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,83,final int side;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,84,Square(int side) { super(ShapeType.SQUARE); this.side = side; }
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,87,// Copied from the extras package
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,88,static class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,89,private final Class<?> baseType;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,90,private final String typeFieldName;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,91,"private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,92,"private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,94,"protected RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,95,if (typeFieldName == null || baseType == null) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,96,throw new NullPointerException();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,98,this.baseType = baseType;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,99,this.typeFieldName = typeFieldName;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,103,* Creates a new runtime type adapter using for {@code baseType} using {@code
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,104,* typeFieldName} as the type field name. Type field names are case sensitive.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,106,"public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,107,"return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,111,"* Creates a new runtime type adapter for {@code baseType} using {@code ""type""} as"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,112,* the type field name.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,114,public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,115,"return new RuntimeTypeAdapterFactory<T>(baseType, ""type"");"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,119,* Registers {@code type} identified by {@code label}. Labels are case
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,120,* sensitive.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,122,* @throws IllegalArgumentException if either {@code type} or {@code label}
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,123,*     have already been registered on this type adapter.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,125,"public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type, String label) {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,126,if (type == null || label == null) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,127,throw new NullPointerException();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,129,if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,130,"throw new IllegalArgumentException(""types and labels must be unique"");"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,132,"labelToSubtype.put(label, type);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,133,"subtypeToLabel.put(type, label);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,134,return this;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,138,* Registers {@code type} identified by its {@link Class#getSimpleName simple
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,139,* name}. Labels are case sensitive.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,141,* @throws IllegalArgumentException if either {@code type} or its simple name
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,142,*     have already been registered on this type adapter.
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,144,public RuntimeTypeAdapterFactory<T> registerSubtype(Class<? extends T> type) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,145,"return registerSubtype(type, type.getSimpleName());"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,148,"public <R> TypeAdapter<R> create(Gson gson, TypeToken<R> type) {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,149,if (type.getRawType() != baseType) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,150,return null;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,153,"final Map<String, TypeAdapter<?>> labelToDelegate"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,154,"= new LinkedHashMap<String, TypeAdapter<?>>();"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,155,"final Map<Class<?>, TypeAdapter<?>> subtypeToDelegate"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,156,"= new LinkedHashMap<Class<?>, TypeAdapter<?>>();"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,157,"for (Map.Entry<String, Class<?>> entry : labelToSubtype.entrySet()) {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,158,"TypeAdapter<?> delegate = gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,159,"labelToDelegate.put(entry.getKey(), delegate);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,160,"subtypeToDelegate.put(entry.getValue(), delegate);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,163,return new TypeAdapter<R>() {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,164,@Override public R read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,165,JsonElement jsonElement = Streams.parse(in);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,166,JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,167,if (labelJsonElement == null) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,168,"throw new JsonParseException(""cannot deserialize "" + baseType"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,169,"+ "" because it does not define a field named "" + typeFieldName);"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,171,String label = labelJsonElement.getAsString();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,172,"@SuppressWarnings(""unchecked"") // registration requires that subtype extends T"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,173,TypeAdapter<R> delegate = (TypeAdapter<R>) labelToDelegate.get(label);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,174,if (delegate == null) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,175,"throw new JsonParseException(""cannot deserialize "" + baseType + "" subtype named """
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,176,"+ label + ""; did you forget to register a subtype?"");"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,178,return delegate.fromJsonTree(jsonElement);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,181,"@Override public void write(JsonWriter out, R value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,182,Class<?> srcType = value.getClass();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,183,String label = subtypeToLabel.get(srcType);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,184,"@SuppressWarnings(""unchecked"") // registration requires that subtype extends T"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,185,TypeAdapter<R> delegate = (TypeAdapter<R>) subtypeToDelegate.get(srcType);
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,186,if (delegate == null) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,187,"throw new JsonParseException(""cannot serialize "" + srcType.getName()"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,188,"+ ""; did you forget to register a subtype?"");"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,190,JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,191,if (!jsonObject.has(typeFieldName)) {
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,192,JsonObject clone = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,193,"clone.add(typeFieldName, new JsonPrimitive(label));"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,194,"for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,195,"clone.add(e.getKey(), e.getValue());"
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,197,jsonObject = clone;
True,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java,199,"Streams.write(jsonObject, out);"

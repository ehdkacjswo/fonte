is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,28,import com.google.gson.annotations.SerializedName;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,44,import java.util.HashMap;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,647,rivate final Class<T> classOfT;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,649,"private final Map<String, T> nameToConstant = new HashMap<String, T>();"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,650,"private final Map<T, String> constantToName = new HashMap<T, String>();"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,650,his.classOfT = classOfT;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,653,try {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,654,for (T constant : classOfT.getEnumConstants()) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,655,String name = constant.name();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,656,SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,657,if (annotation != null) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,658,name = annotation.value();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,660,"nameToConstant.put(name, constant);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,661,"constantToName.put(constant, name);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,663,} catch (NoSuchFieldException e) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,664,throw new AssertionError();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,657,"eturn Enum.valueOf(classOfT, in.nextString());"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,672,return nameToConstant.get(in.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,661,ut.value(value == null ? null : value.name());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,676,out.value(value == null ? null : constantToName.get(value));
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,28,import com.google.gson.annotations.SerializedName;
False,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,31,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,36,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,146,public void testEnumCaseMapping() {
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,147,"assertEquals(Gender.MALE, gson.fromJson(""\""boy\"""", Gender.class));"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,148,"assertEquals(""\""boy\"""", gson.toJson(Gender.MALE, Gender.class));"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,183,public enum Gender {
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,184,"@SerializedName(""boy"")"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,185,"MALE,"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,187,"@SerializedName(""girl"")"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,188,FEMALE

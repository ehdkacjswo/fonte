is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,235,actories.add(TypeAdapters.ENUM_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,241,factories.add(TypeAdapters.ENUM_FACTORY);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,413,  read or written.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,413,*  read or written.
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,36,import java.util.Locale;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,56,json = gson.toJson(Foo.BAR);
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,57,"assertEquals(""\""bar\"""", json);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,58,"Foo baz = gson.fromJson(""\""baz\"""", Foo.class);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,59,"assertEquals(Foo.BAZ, baz);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,217,@JsonAdapter(FooJsonAdapter.class)
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,218,"private static enum Foo { BAR, BAZ }"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,219,private static class FooJsonAdapter extends TypeAdapter<Foo> {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,220,"@Override public void write(JsonWriter out, Foo value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,221,out.value(value.name().toLowerCase(Locale.US));
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,224,@Override public Foo read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,225,return Foo.valueOf(in.nextString().toUpperCase(Locale.US));

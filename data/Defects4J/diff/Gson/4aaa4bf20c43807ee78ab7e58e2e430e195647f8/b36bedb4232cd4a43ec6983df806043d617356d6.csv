is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,51,* Max number of collisions in a single bucket before falling back to
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,52,* an unpredictable hash code.
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,54,private static final int MAX_COLLISIONS = 512;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,92,"* True to use String.hashCode(), which is cached per-string. False to use"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,93,* less predictable (but uncached) hash algorithm.
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,95,private boolean useFastHash = true;
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,119,nt hash = hash(key);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,131,int hash = useFastHash ? fastHash(key) : unpredictableHash(key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,135,nt hash = hash(key);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,147,int collisionCount = 0;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,148,int hash = useFastHash ? fastHash(key) : unpredictableHash(key);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,152,collisionCount++;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,168,"* If we suffer a very large number of collisions, fall back from the cached"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,169,* String.hashCode() to an (uncached) hash code that isn't predictable.
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,171,if (collisionCount >= MAX_COLLISIONS) {
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,172,LinkedEntry<V> entry = header.nxt;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,174,// clear the table
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,175,"Arrays.fill(table, null);"
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,176,size = 0;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,177,header.nxt = header.prv = header;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,178,useFastHash = false;
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,180,// fill it up in iteration order
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,181,for (; entry != header; entry = entry.nxt) {
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,182,"put(entry.key, entry.value);"
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,230,nt hash = hash((String) key);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,264,int hash = useFastHash ? fastHash(key) : unpredictableHash((String) key);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,353,nt hash = hash((String) key);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,387,int hash = useFastHash ? fastHash(key) : unpredictableHash((String) key);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,519,private static int fastHash(Object key) {
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,520,int h = key.hashCode();
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,521,// Apply Doug Lea's supplemental hash function to avoid collisions for
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,522,// hashes that do not differ in lower or upper bits.
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,523,h ^= (h >>> 20) ^ (h >>> 12);
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,524,return h ^ (h >>> 7) ^ (h >>> 4);
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,486,rivate static int hash(String key) {
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,528,private static int unpredictableHash(String key) {
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,506, Apply Doug Lea's supplemental hash function to avoid collisions for
False,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,507, hashes that do not differ in lower or upper bits.
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,547,// Apply Doug Lea's supplemental hash function to avoid collisions for
True,gson/src/main/java/com/google/gson/internal/StringMap.java,gson/src/main/java/com/google/gson/internal/StringMap.java,548,// hashes that do not differ in lower or upper bits.
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,17,package com.google.gson.internal;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,19,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,20,import java.util.Iterator;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,21,import java.util.List;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,22,import java.util.Map;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,25,public final class StringMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,26,public void testFallbackFromTooManyCollisions() {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,27,int count = 10000;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,28,StringMap<Integer> map = new StringMap<Integer>();
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,29,int index = 0;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,30,"List<String> collidingStrings = collidingStrings(1 << 20, count);"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,31,for (String string : collidingStrings) {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,32,"map.put(string, index++);"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,34,"assertEquals(collidingStrings.size(), map.size());"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,35,"Iterator<Map.Entry<String, Integer>> iterator = map.entrySet().iterator();"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,36,for (int i = 0; i < count; i++) {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,37,"Map.Entry<String, Integer> entry = iterator.next();"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,38,"assertEquals(collidingStrings.get(i), entry.getKey());"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,39,"assertEquals(Integer.valueOf(i), entry.getValue());"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,44,* @param h0 the hash code of the generated strings
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,46,"private List<String> collidingStrings(int h0, int count) {"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,47,List<String> result = new ArrayList<String>(count);
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,48,int p1 = 31;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,49,int p0 = 31 * 31;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,50,int maxChar = Character.MAX_VALUE;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,51,for (char c0 = 0; c0 <= maxChar && c0 <= h0 / p0; c0++) {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,52,int h1 = h0 - c0 * p0;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,53,for (char c1 = 0; c1 <= maxChar && c1 <= h1 / p1; c1++) {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,54,int h2 = h1 - c1 * p1;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,55,char c2 = (char) h2;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,56,if (h2 != c2) {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,57,continue;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,59,"result.add(new String(new char[] { c0, c1, c2 } ));"
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,60,if (result.size() == count) {
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,61,return result;
True,gson/src/test/java/com/google/gson/internal/StringMapTest.java,gson/src/test/java/com/google/gson/internal/StringMapTest.java,65,"throw new IllegalArgumentException(""Couldn't find "" + count + "" strings with hashCode "" + h0);"

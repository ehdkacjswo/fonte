is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,114,private final boolean htmlSafe;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,154,"efaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,156,"DefaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,162,oolean generateNonExecutableGson) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,164,"boolean generateNonExecutableGson, boolean htmlSafe) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,174,this.htmlSafe = htmlSafe;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,271,"oJson(src, typeOfSrc, writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,274,"toJson(toJsonTree(src, typeOfSrc), writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,324,* Writes the JSON representation of {@code src} of type {@code typeOfSrc} to
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,325,* {@code writer}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,327,"public void toJson(Object src, Type typeOfSrc, JsonWriter writer) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,328,"toJson(toJsonTree(src, typeOfSrc), writer);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,345,f (jsonElement == null && serializeNulls) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,346,riteOutNullString(writer);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,348,"ormatter.format(jsonElement, writer, serializeNulls);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,356,"toJson(jsonElement, new JsonWriter(Streams.writerForAppendable(writer)));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,357,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,358,throw new RuntimeException(e);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,363,* Writes the JSON for {@code jsonElement} to {@code writer}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,365,"public void toJson(JsonElement jsonElement, JsonWriter writer) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,366,boolean oldLenient = writer.isLenient();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,367,writer.setLenient(true);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,368,boolean oldHtmlSafe = writer.isHtmlSafe();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,369,writer.setHtmlSafe(htmlSafe);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,370,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,371,"Streams.write(jsonElement, serializeNulls, writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,374,} finally {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,375,writer.setLenient(oldLenient);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,376,writer.setHtmlSafe(oldHtmlSafe);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,420," target = classOfT.cast(fromJson(json, (Type) classOfT));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,446,"T target = classOfT.cast(fromJson(new JsonReader(json), classOfT));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,442,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,444,sonReader jsonReader = new JsonReader(json);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,445,sonReader.setLenient(true);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,446,sonElement root = Streams.parse(jsonReader);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,447,"eturn (T) fromJson(root, typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,469,"return this.<T>fromJson(new JsonReader(json), typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,473,* Reads the next JSON value from {@code reader} and convert it to an object
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,474,* of type {@code typeOfT}.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,476,"@SuppressWarnings(""unchecked"") // this method is unsafe and should be used very carefully"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,477,"public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,478,boolean oldLenient = reader.isLenient();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,479,reader.setLenient(true);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,480,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,481,JsonElement root = Streams.parse(reader);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,482,"return (T) fromJson(root, typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,483,} finally {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,484,reader.setLenient(oldLenient);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,549,"ustomDeserializers, generateNonExecutableJson);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,549,"customDeserializers, generateNonExecutableJson, escapeHtmlChars);"
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,53,return parse(new JsonReader(json));
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,57,* Returns the next value from the JSON stream as a parse tree.
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,59,* @throws JsonParseException if there is an IOException or if the specified
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,60,*     text is not valid JSON
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,62,public JsonElement parse(JsonReader json) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,63,boolean lenient = json.isLenient();
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,64,json.setLenient(true);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,54,sonReader jsonReader = new JsonReader(json);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,55,sonReader.setLenient(true);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,56,eturn Streams.parse(jsonReader);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,66,return Streams.parse(json);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,77,} finally {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,78,json.setLenient(lenient);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,145,private boolean htmlSafe;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,194,* Returns true if this writer has relaxed syntax rules.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,196,public boolean isLenient() {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,197,return lenient;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,201,* Configure this writer to emit JSON that's safe for direct inclusion in HTML
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,202,"* and XML documents. This escapes the HTML characters {@code <}, {@code >},"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,203,* {@code &} and {@code =} before writing them to the stream. Without this
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,204,"* setting, your XML/HTML encoder should replace these characters with the"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,205,* corresponding escape sequences.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,207,public void setHtmlSafe(boolean htmlSafe) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,208,this.htmlSafe = htmlSafe;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,212,* Returns true if this writer writes JSON that's safe for inclusion in HTML
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,213,* and XML documents.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,215,public boolean isHtmlSafe() {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,216,return htmlSafe;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,461,case '<':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,462,case '>':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,463,case '&':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,464,case '=':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,465,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,466,if (htmlSafe) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,467,"out.write(String.format(""\\u%04x"", (int) c));"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,468,} else {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,469,out.write(c);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,471,break;
False,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,45,"efaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE);"
True,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,45,"DefaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,19,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,20,import com.google.gson.stream.JsonWriter;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,21,import java.io.IOException;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,22,import java.io.StringReader;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,23,import java.io.StringWriter;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,24,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,26,public final class MixedStreamTest extends TestCase {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,28,"private static final Car BLUE_MUSTANG = new Car(""mustang"", 0x0000FF);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,29,"private static final Car BLACK_BMW = new Car(""bmw"", 0x000000);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,30,"private static final Car RED_MIATA = new Car(""miata"", 0xFF0000);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,31,"private static final String CARS_JSON = ""[\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,32,"+ ""  {\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,33,"+ ""    \""name\"": \""mustang\"",\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,34,"+ ""    \""color\"": 255\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,35,"+ ""  },\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,36,"+ ""  {\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,37,"+ ""    \""name\"": \""bmw\"",\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,38,"+ ""    \""color\"": 0\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,39,"+ ""  },\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,40,"+ ""  {\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,41,"+ ""    \""name\"": \""miata\"",\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,42,"+ ""    \""color\"": 16711680\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,43,"+ ""  }\n"""
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,46,public void testWriteMixedStreamed() throws IOException {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,47,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,48,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,49,JsonWriter jsonWriter = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,51,jsonWriter.beginArray();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,52,"jsonWriter.setIndent(""  "");"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,53,"gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,54,"gson.toJson(BLACK_BMW, Car.class, jsonWriter);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,55,"gson.toJson(RED_MIATA, Car.class, jsonWriter);"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,56,jsonWriter.endArray();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,58,"assertEquals(CARS_JSON, stringWriter.toString());"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,61,public void testReadMixedStreamed() throws IOException {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,62,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,63,StringReader stringReader = new StringReader(CARS_JSON);
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,64,JsonReader jsonReader = new JsonReader(stringReader);
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,66,jsonReader.beginArray();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,67,"assertEquals(BLUE_MUSTANG, gson.fromJson(jsonReader, Car.class));"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,68,"assertEquals(BLACK_BMW, gson.fromJson(jsonReader, Car.class));"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,69,"assertEquals(RED_MIATA, gson.fromJson(jsonReader, Car.class));"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,70,jsonReader.endArray();
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,73,static final class Car {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,74,String name;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,75,int color;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,77,"Car(String name, int color) {"
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,78,this.name = name;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,79,this.color = color;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,82,Car() {} // for Gson
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,84,@Override public int hashCode() {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,85,return name.hashCode() ^ color;
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,88,@Override public boolean equals(Object o) {
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,89,return o instanceof Car
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,90,&& ((Car) o).name.equals(name)
True,gson/src/test/java/com/google/gson/MixedStreamTest.java,gson/src/test/java/com/google/gson/MixedStreamTest.java,91,&& ((Car) o).color == color;
False,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,57,"ssertEquals(""[\""\\u003c\"",\""\\u003e\"",\""\\u003d\"",\""\\u0026\"",\""'\"",\""\\\""\""]"","
True,gson/src/test/java/com/google/gson/functional/EscapingTest.java,gson/src/test/java/com/google/gson/functional/EscapingTest.java,57,"assertEquals(""[\""\\u003c\"",\""\\u003e\"",\""\\u003d\"",\""\\u0026\"",\""\\u0027\"",\""\\\""\""]"","
False,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,134,"ssertEquals(""{}\n"", result);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,134,"assertEquals(""{}"", result);"
False,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,145,"ssertEquals(""[\""1\"",null,\""3\""]\n"", result);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,145,"assertEquals(""[\""1\"",null,\""3\""]"", result);"
False,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,149,"ssertEquals(""[\""1\"",null,\""3\""]\n"", result);"
True,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java,149,"assertEquals(""[\""1\"",null,\""3\""]"", result);"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,62,ssertPrintMargin(json);
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,69,ssertPrintMargin(json);
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,75,"ssertEquals(""[1,2,3,4,5]\n"", json);"
True,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,73,"assertEquals(""[1,2,3,4,5]"", json);"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,82,"ssertEquals(""[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\n"", json);"
True,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,80,"assertEquals(""[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]"", json);"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,89,"ssertEquals(""[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]\n"", json);"
True,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,87,"assertEquals(""[[1,2],[3,4],[5,6],[7,8],[9,0],[10]]"", json);"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,97,"ssertEquals(""{\""abc\"":1,\""def\"":5}\n"", json);"
True,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,95,"assertEquals(""{\""abc\"":1,\""def\"":5}"", json);"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,117,"ssertEquals(""[[[1],[2]]]\n"", json);"
True,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,115,"assertEquals(""[[[1],[2]]]"", json);"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,126,rivate void assertPrintMargin(String str) {
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,127,nt position = 0;
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,128,har[] chars = str.toCharArray();
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,129,"or (int i = 0; i < chars.length; ++i, ++position) {"
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,130,har c = chars[i];
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,131,f (c == '\n') {
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,132,osition = 0;
False,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java,134,ssertTrue(position <= PRINT_MARGIN - RIGHT_MARGIN + 1);

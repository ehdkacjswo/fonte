is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,395," Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not"
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,396," a generic type, returns null."
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,398,ublic static Type getFirstTypeArgument(Type type) {
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,399,ry {
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,400,f (!(type instanceof ParameterizedType)) return null;
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,401,arameterizedType ptype = (ParameterizedType) type;
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,402,ype[] actualTypeArguments = ptype.getActualTypeArguments();
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,403,f (actualTypeArguments.length == 0) return null;
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,404,eturn canonicalize(actualTypeArguments[0]);
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,405, catch (Exception e) {
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,406,eturn null;
False,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,791,"lass EntrySet extends AbstractSet<Entry<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,791,"final class EntrySet extends AbstractSet<Entry<K, V>> {"
False,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,826,lass KeySet extends AbstractSet<K> {
True,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,826,final class KeySet extends AbstractSet<K> {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,592,lass KeySet extends AbstractSet<K> {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,592,final class KeySet extends AbstractSet<K> {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,19,import java.lang.reflect.ParameterizedType;
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,29,"ssertEquals(A.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,30,"assertEquals(A.class, getFirstTypeArgument(type));"
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,33,"ssertEquals(B.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,34,"assertEquals(B.class, getFirstTypeArgument(type));"
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,44,"ssertEquals(D.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,45,"assertEquals(D.class, getFirstTypeArgument(type));"
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,48,ssertNull($Gson$Types.getFirstTypeArgument(A.class));
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,49,assertNull(getFirstTypeArgument(A.class));
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,51,"ssertEquals(B.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,52,"assertEquals(B.class, getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,63,"* Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,64,"* a generic type, returns null."
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,66,public static Type getFirstTypeArgument(Type type) {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,67,try {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,68,if (!(type instanceof ParameterizedType)) return null;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,69,ParameterizedType ptype = (ParameterizedType) type;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,70,Type[] actualTypeArguments = ptype.getActualTypeArguments();
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,71,if (actualTypeArguments.length == 0) return null;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,72,return $Gson$Types.canonicalize(actualTypeArguments[0]);
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,73,} catch (Exception e) {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,74,return null;

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,26,mport com.google.gson.internal.bind.FieldTypeAdapterFactory;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,243,actories.add(new FieldTypeAdapterFactory());
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,2, Copyright (C) 2014 Google Inc.
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,17,ackage com.google.gson.internal.bind;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,19,mport java.lang.reflect.Field;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,20,mport java.lang.reflect.Modifier;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,21,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,23,mport com.google.gson.Gson;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,24,mport com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,25,mport com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,26,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,27,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,30," Given a type T, looks for the magic static field named GSON_TYPE_ADAPTER of type"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,31, TypeAdapter&lt;T&gt; and uses it as the default type adapter.
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,33, @since 2.3
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,35,ublic final class FieldTypeAdapterFactory implements TypeAdapterFactory {
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,36,"rivate static final String FIELD_ADAPTER_NAME = ""GSON_TYPE_ADAPTER"";"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,38,"SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,39,"ublic <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,40,lass<? super T> clazz = targetType.getRawType();
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,41,ry {
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,42,ield typeAdapterField = clazz.getDeclaredField(FIELD_ADAPTER_NAME);
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,43,ypeAdapterField.setAccessible(true);
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,44,f (!Modifier.isStatic(typeAdapterField.getModifiers())) return null;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,45,bject fieldAdapterValue = typeAdapterField.get(null);
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,46,f (fieldAdapterValue != null && fieldAdapterValue instanceof TypeAdapter) {
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,47,/ We know that the GSON_TYPE_ADAPTER field is of type TypeAdapter.
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,48,"/ However, we need to assert that its type variable TypeAdapter<TypeVariable> matches"
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,49,/ the target type
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,50,ype fieldTypeVariable = $Gson$Types.getFirstTypeArgument(typeAdapterField.getGenericType());
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,51,f (targetType.getType().equals(fieldTypeVariable)) {
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,52,eturn (TypeAdapter) fieldAdapterValue;
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,55, catch (Exception e) { // ignore1
False,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,57,eturn null;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,2, Copyright (C) 2014 Google Inc.
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,17,ackage com.google.gson.functional;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,19,mport java.io.IOException;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,20,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,22,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,24,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,25,mport com.google.gson.GsonBuilder;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,26,mport com.google.gson.JsonDeserializationContext;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,27,mport com.google.gson.JsonDeserializer;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,28,mport com.google.gson.JsonElement;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,29,mport com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,30,mport com.google.gson.JsonPrimitive;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,31,mport com.google.gson.JsonSerializationContext;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,32,mport com.google.gson.JsonSerializer;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,33,mport com.google.gson.TypeAdapter;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,34,mport com.google.gson.stream.JsonReader;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,35,mport com.google.gson.stream.JsonWriter;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,38, Functional tests for the magic field GSON_TYPE_ADAPTER present in a class.
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,40,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,41,ublic final class GsonFieldTypeAdapterTest extends TestCase {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,43,ublic void testFieldAdapterInvoked() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,44,"tring json = new Gson().toJson(new ClassWithFieldAdapter(""bar""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,45,"ssertEquals(""\""fieldAdapter\"""", json);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,48,ublic void testRegisteredAdapterOverridesFieldAdapter() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,49,ypeAdapter<ClassWithFieldAdapter> typeAdapter = new TypeAdapter<ClassWithFieldAdapter>() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,50,"Override public void write(JsonWriter out, ClassWithFieldAdapter value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,51,"ut.value(""registeredAdapter"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,53,Override public ClassWithFieldAdapter read(JsonReader in) throws IOException {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,54,eturn new ClassWithFieldAdapter(in.nextString());
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,57,son gson = new GsonBuilder()
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,58,"registerTypeAdapter(ClassWithFieldAdapter.class, typeAdapter)"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,59,create();
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,60,"tring json = gson.toJson(new ClassWithFieldAdapter(""abcd""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,61,"ssertEquals(""\""registeredAdapter\"""", json);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,65," The serializer overrides field adapter, but for deserializer the fieldAdapter is used."
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,67,ublic void testRegisteredSerializerOverridesFieldAdapter() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,68,sonSerializer<ClassWithFieldAdapter> serializer = new JsonSerializer<ClassWithFieldAdapter>() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,69,"ublic JsonElement serialize(ClassWithFieldAdapter src, Type typeOfSrc,"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,70,sonSerializationContext context) {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,71,"eturn new JsonPrimitive(""registeredSerializer"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,74,son gson = new GsonBuilder()
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,75,"registerTypeAdapter(ClassWithFieldAdapter.class, serializer)"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,76,create();
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,77,"tring json = gson.toJson(new ClassWithFieldAdapter(""abcd""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,78,"ssertEquals(""\""registeredSerializer\"""", json);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,79,"lassWithFieldAdapter target = gson.fromJson(""abcd"", ClassWithFieldAdapter.class);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,80,"ssertEquals(""fieldAdapter"", target.value);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,84," The deserializer overrides field adapter, but for serializer the fieldAdapter is used."
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,86,ublic void testRegisteredDeserializerOverridesFieldAdapter() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,87,sonDeserializer<ClassWithFieldAdapter> deserializer = new JsonDeserializer<ClassWithFieldAdapter>() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,88,"ublic ClassWithFieldAdapter deserialize(JsonElement json, Type typeOfT,"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,89,sonDeserializationContext context) throws JsonParseException {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,90,"eturn new ClassWithFieldAdapter(""registeredDeserializer"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,93,son gson = new GsonBuilder()
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,94,"registerTypeAdapter(ClassWithFieldAdapter.class, deserializer)"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,95,create();
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,96,"tring json = gson.toJson(new ClassWithFieldAdapter(""abcd""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,97,"ssertEquals(""\""fieldAdapter\"""", json);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,98,"lassWithFieldAdapter target = gson.fromJson(""abcd"", ClassWithFieldAdapter.class);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,99,"ssertEquals(""registeredDeserializer"", target.value);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,102,ublic void testFieldAdapterNotInvokedIfNull() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,103,"tring json = new Gson().toJson(new ClassWithNullFieldAdapter(""bar""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,104,"ssertEquals(""{\""value\"":\""bar\""}"", json);"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,107,ublic void testNonStaticFieldAdapterNotInvoked() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,108,"tring json = new Gson().toJson(new ClassWithNonStaticFieldAdapter(""bar""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,109,"ssertFalse(json.contains(""fieldAdapter""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,112,ublic void testIncorrectTypeAdapterNotInvoked() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,113,"tring json = new Gson().toJson(new ClassWithIncorrectFieldAdapter(""bar""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,114,"ssertFalse(json.contains(""fieldAdapter""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,117,ublic void testSuperclassTypeAdapterNotInvoked() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,118,"tring json = new Gson().toJson(new ClassWithSuperClassFieldAdapter(""bar""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,119,"ssertFalse(json.contains(""fieldAdapter""));"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,122,rivate static class ClassWithFieldAdapter {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,123,inal String value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,124,lassWithFieldAdapter(String value) {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,125,his.value = value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,127,rivate static final TypeAdapter<ClassWithFieldAdapter> GSON_TYPE_ADAPTER =
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,128,ew TypeAdapter<GsonFieldTypeAdapterTest.ClassWithFieldAdapter>() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,129,"Override public void write(JsonWriter out, ClassWithFieldAdapter value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,130,"ut.value(""fieldAdapter"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,132,Override public ClassWithFieldAdapter read(JsonReader in) throws IOException {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,133,n.nextString();
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,134,"eturn new ClassWithFieldAdapter(""fieldAdapter"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,139,rivate static final class ClassWithSuperClassFieldAdapter extends ClassWithFieldAdapter {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,140,lassWithSuperClassFieldAdapter(String value) {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,141,uper(value);
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,145,rivate static final class ClassWithNullFieldAdapter {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,146,inal String value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,147,lassWithNullFieldAdapter(String value) {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,148,his.value = value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,150,rivate static final TypeAdapter<ClassWithFieldAdapter> GSON_TYPE_ADAPTER = null;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,153,rivate static final class ClassWithNonStaticFieldAdapter {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,154,inal String value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,155,lassWithNonStaticFieldAdapter(String value) {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,156,his.value = value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,158,rivate final TypeAdapter<ClassWithNonStaticFieldAdapter> GSON_TYPE_ADAPTER =
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,159,ew TypeAdapter<ClassWithNonStaticFieldAdapter>() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,160,"Override public void write(JsonWriter out, ClassWithNonStaticFieldAdapter value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,161,"ut.value(""fieldAdapter"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,163,Override public ClassWithNonStaticFieldAdapter read(JsonReader in) throws IOException {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,164,n.nextString();
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,165,"eturn new ClassWithNonStaticFieldAdapter(""fieldAdapter"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,170,rivate static final class ClassWithIncorrectFieldAdapter {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,171,inal String value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,172,lassWithIncorrectFieldAdapter(String value) {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,173,his.value = value;
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,175,/ Note that the type is NOT TypeAdapter<ClassWithIncorrectFieldAdapter> so this
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,176,/ field should be ignored.
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,177,rivate static final TypeAdapter<ClassWithFieldAdapter> GSON_TYPE_ADAPTER =
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,178,ew TypeAdapter<GsonFieldTypeAdapterTest.ClassWithFieldAdapter>() {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,179,"Override public void write(JsonWriter out, ClassWithFieldAdapter value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,180,"ut.value(""fieldAdapter"");"
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,182,Override public ClassWithFieldAdapter read(JsonReader in) throws IOException {
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,183,n.nextString();
False,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,184,"eturn new ClassWithFieldAdapter(""fieldAdapter"");"

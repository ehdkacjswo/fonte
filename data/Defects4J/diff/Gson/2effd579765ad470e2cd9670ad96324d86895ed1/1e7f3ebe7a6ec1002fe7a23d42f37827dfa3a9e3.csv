is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,73,bject target = visitor.getTarget();
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,74,"bjectNavigator on = navigatorFactory.create(target, typeOfT);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,73,"ObjectNavigator on = navigatorFactory.create(null, typeOfT);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,55, getTarget() {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,55,public T getTarget() {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,48,public Object getTarget() {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,49,return null;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,64,* Retrieve the current target
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,66,Object getTarget();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,91,f (obj == null) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,92,eturn;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,94,ypeInfo objTypeInfo = new TypeInfo(objType);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,95,f (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,96,eturn;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,99,f (ancestors.contains(obj)) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,100,"hrow new IllegalStateException(""Circular reference found: "" + obj);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,102,ncestors.push(obj);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,104,ry {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,105,"oolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,106,f (!visitedWithCustomHandler) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,96,"boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,97,if (!visitedWithCustomHandler) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,98,Object objectToVisit = (obj == null) ? visitor.getTarget() : obj;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,99,if (objectToVisit == null) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,100,return;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,102,TypeInfo objTypeInfo = new TypeInfo(objType);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,104,return;
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,107,if (ancestors.contains(objectToVisit)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,108,"throw new IllegalStateException(""Circular reference found: "" + objectToVisit);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,110,ancestors.push(objectToVisit);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,112,try {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,108,"isitor.visitArray(obj, objType);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,114,"visitor.visitArray(objectToVisit, objType);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,110,isitor.startVisitingObject(obj);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,116,visitor.startVisitingObject(objectToVisit);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,116,"avigateClassFields(obj, curr, visitor);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,122,"navigateClassFields(objectToVisit, curr, visitor);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,126,} finally {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,127,ancestors.pop();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,121, finally {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,122,ncestors.pop();
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,21,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,22,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,23,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,24,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,25,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,26,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,27,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,29,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,32,* Functional Test exercising custom deserialization only.  When test applies to both
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,33,* serialization and deserialization then add it to CustomTypeAdapterTest.
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,35,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,37,public class CustomDeserializerTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,38,"private static final String DEFAULT_VALUE = ""test123"";"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,39,"private static final String SUFFIX = ""blah"";"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,41,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,43,@Override
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,44,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,45,super.setUp();
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,46,"gson = new GsonBuilder().registerTypeAdapter(DataHolder.class, new DataHolderDeserializer()).create();"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,49,public void testDefaultConstructorNotCalledOnObject() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,50,DataHolder data = new DataHolder(DEFAULT_VALUE);
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,51,String json = gson.toJson(data);
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,53,"DataHolder actual = gson.fromJson(json, DataHolder.class);"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,54,"assertEquals(DEFAULT_VALUE + SUFFIX, actual.getData());"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,57,public void testDefaultConstructorNotCalledOnField() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,58,DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE));
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,59,String json = gson.toJson(dataWrapper);
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,61,"DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class);"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,62,"assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData());"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,65,private static class DataHolder {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,66,private final String data;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,68,public DataHolder() {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,69,throw new IllegalStateException();
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,72,public DataHolder(String data) {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,73,this.data = data;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,76,public String getData() {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,77,return data;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,81,private static class DataHolderWrapper {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,82,private final DataHolder wrappedData;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,84,public DataHolderWrapper() {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,85,this(new DataHolder(DEFAULT_VALUE));
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,88,public DataHolderWrapper(DataHolder data) {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,89,this.wrappedData = data;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,92,public DataHolder getWrappedData() {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,93,return wrappedData;
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,97,private static class DataHolderDeserializer implements JsonDeserializer<DataHolder> {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,98,"public DataHolder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,99,throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,100,JsonObject jsonObj = json.getAsJsonObject();
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,101,"String dataString = jsonObj.get(""data"").getAsString();"
True,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java,102,return new DataHolder(dataString + SUFFIX);

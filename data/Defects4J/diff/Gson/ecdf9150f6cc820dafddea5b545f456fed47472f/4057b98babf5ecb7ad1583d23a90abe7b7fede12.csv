is_addition,old_file_path,new_file_path,line_num,content
True,extras/src/main/java/com/google/gson/graph/GraphTypeAdapterFactory.java,extras/src/main/java/com/google/gson/graph/GraphTypeAdapterFactory.java,23,import com.google.gson.internal.GsonInternalAccess;
False,extras/src/main/java/com/google/gson/graph/GraphTypeAdapterFactory.java,extras/src/main/java/com/google/gson/graph/GraphTypeAdapterFactory.java,61,"inal TypeAdapter<T> typeAdapter = gson.getNextAdapter(this, type);"
True,extras/src/main/java/com/google/gson/graph/GraphTypeAdapterFactory.java,extras/src/main/java/com/google/gson/graph/GraphTypeAdapterFactory.java,62,"final TypeAdapter<T> typeAdapter = GsonInternalAccess.INSTANCE.getNextAdapter(gson, this, type);"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,27,import com.google.gson.internal.GsonInternalAccess;
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,196,"ypeAdapter<?> delegate = gson.getNextAdapter(this, TypeToken.get(entry.getValue()));"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,197,TypeAdapter<?> delegate = GsonInternalAccess.INSTANCE
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,198,".getNextAdapter(gson, this, TypeToken.get(entry.getValue()));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,21,import com.google.gson.internal.GsonInternalAccess;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,366, Returns a type adapter for {@code} type that isn't {@code skipPast}. This
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,367," can be used for type adapters to compose other, simpler type adapters."
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,369, @throws IllegalArgumentException if this GSON cannot serialize and
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,370,     deserialize {@code type}.
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,371, @since 2.1
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,373,"ublic <T> TypeAdapter<T> getNextAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,374,oolean skipPastFound = false;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,376,or (TypeAdapterFactory factory : factories) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,377,f (!skipPastFound) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,378,f (factory == skipPast) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,379,kipPastFound = true;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,366,static {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,367,GsonInternalAccess.INSTANCE = new GsonInternalAccess() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,368,@Override public <T> TypeAdapter<T> getNextAdapter(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,369,"Gson gson, TypeAdapterFactory skipPast, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,370,boolean skipPastFound = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,372,for (TypeAdapterFactory factory : gson.factories) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,373,if (!skipPastFound) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,374,if (factory == skipPast) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,375,skipPastFound = true;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,377,continue;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,380,"TypeAdapter<T> candidate = factory.create(gson, type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,381,if (candidate != null) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,382,return candidate;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,381,ontinue;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,384,"ypeAdapter<T> candidate = factory.create(this, type);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,385,f (candidate != null) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,386,eturn candidate;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,386,"throw new IllegalArgumentException(""GSON cannot serialize "" + type);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,390,"hrow new IllegalArgumentException(""GSON cannot serialize "" + type);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,20,import com.google.gson.internal.GsonInternalAccess;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,78," (delegate = gson.getNextAdapter(skipPast, typeToken));"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,79,": (delegate = GsonInternalAccess.INSTANCE.getNextAdapter(gson, skipPast, typeToken));"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,71," convert all elements, and finish with a call to {@code endArray}. For"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,71,"* convert all elements, and finish with a call to {@code endArray()}. For"
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,144," (delegate = gson.getNextAdapter(Excluder.this, type));"
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,144,": (delegate = GsonInternalAccess.INSTANCE.getNextAdapter(gson, Excluder.this, type));"
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,17,package com.google.gson.internal;
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,19,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,20,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,21,import com.google.gson.TypeAdapterFactory;
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,25,* Internal-only APIs of Gson available only to other classes in Gson.
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,27,public abstract class GsonInternalAccess {
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,28,public static GsonInternalAccess INSTANCE;
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,31,* Returns a type adapter for {@code} type that isn't {@code skipPast}. This
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,32,"* can be used for type adapters to compose other, simpler type adapters."
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,34,* @throws IllegalArgumentException if this GSON cannot serialize and
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,35,*     deserialize {@code type}.
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,37,public abstract <T> TypeAdapter<T> getNextAdapter(
True,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,gson/src/main/java/com/google/gson/internal/GsonInternalAccess.java,38,"Gson gson, TypeAdapterFactory skipPast, TypeToken<T> type);"

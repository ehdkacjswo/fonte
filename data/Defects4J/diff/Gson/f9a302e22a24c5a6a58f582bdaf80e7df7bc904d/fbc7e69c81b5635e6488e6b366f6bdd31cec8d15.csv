is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,78, @return
False,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,77, The above annotation will ensure UserJsonAdapter2 supersedes UserJsonAdapter for the user
False,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,78, field of the Gadget class.
True,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,77,* The above annotation will ensure UserJsonAdapter2 takes precedence over UserJsonAdapter
True,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,gson/src/main/java/com/google/gson/annotations/JsonAdapter.java,78,* for the user field of the Gadget class.
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,147,public void testJsonAdapterInvokedOnlyForAnnotatedFields() {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,148,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,149,"String json = ""{'part1':'name','part2':{'name':'name2'}}"";"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,150,"GadgetWithTwoParts gadget = gson.fromJson(json, GadgetWithTwoParts.class);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,151,"assertEquals(""partJsonAdapter"", gadget.part1.name);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,152,"assertEquals(""name2"", gadget.part2.name);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,155,private static final class GadgetWithTwoParts {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,156,@JsonAdapter(PartJsonAdapter.class) final Part part1;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,157,final Part part2; // Doesn't have the JsonAdapter annotation
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,158,"@SuppressWarnings(""unused"") GadgetWithTwoParts(Part part1, Part part2) {"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,159,this.part1 = part1;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,160,this.part2 = part2;
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,27,ublic void testNewParameterizedTypeWithoutOwner() {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,27,public void testNewParameterizedTypeWithoutOwner() throws Exception {
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,48,ublic void testGetFirstTypeArgument() {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,48,public void testGetFirstTypeArgument() throws Exception {
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,66,ublic static Type getFirstTypeArgument(Type type) {
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,67,ry {
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,68,f (!(type instanceof ParameterizedType)) return null;
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,69,arameterizedType ptype = (ParameterizedType) type;
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,70,ype[] actualTypeArguments = ptype.getActualTypeArguments();
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,71,f (actualTypeArguments.length == 0) return null;
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,72,eturn $Gson$Types.canonicalize(actualTypeArguments[0]);
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,73, catch (Exception e) {
False,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,74,eturn null;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,66,public static Type getFirstTypeArgument(Type type) throws Exception {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,67,if (!(type instanceof ParameterizedType)) return null;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,68,ParameterizedType ptype = (ParameterizedType) type;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,69,Type[] actualTypeArguments = ptype.getActualTypeArguments();
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,70,if (actualTypeArguments.length == 0) return null;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,71,return $Gson$Types.canonicalize(actualTypeArguments[0]);

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,2, Copyright (C) 2010 Google Inc.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,17,ackage com.google.gson.stream;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,19,mport java.io.Closeable;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,20,mport java.io.EOFException;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,21,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,22,mport java.io.Reader;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,25," Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,26, encoded value as a stream of tokens. This stream includes both literal
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,27," values (strings, numbers, booleans, and nulls) as well as the begin and"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,28, end delimiters of objects and arrays. The tokens are traversed in
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,29," depth-first order, the same order that they appear in the JSON document."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,30," Within JSON objects, name/value pairs are represented by a single token."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,32, <h3>Parsing JSON</h3>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,33," To create a recursive descent parser for your own JSON streams, first create"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,34, an entry point method that creates a {@code JsonReader}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,36," <p>Next, create handler methods for each structure in your JSON text. You'll"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,37, need a method for each object type and for each array type.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,38, <ul>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,39,"   <li>Within <strong>array handling</strong> methods, first call {@link"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,40,       #beginArray} to consume the array's opening bracket. Then create a
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,41,"       while loop that accumulates values, terminating when {@link #hasNext}"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,42,"       is false. Finally, read the array's closing bracket by calling {@link"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,43,       #endArray}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,44,"   <li>Within <strong>object handling</strong> methods, first call {@link"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,45,       #beginObject} to consume the object's opening brace. Then create a
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,46,       while loop that assigns values to local variables based on their name.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,47,"       This loop should terminate when {@link #hasNext} is false. Finally,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,48,       read the object's closing brace by calling {@link #endObject}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,49, </ul>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,50," <p>When a nested object or array is encountered, delegate to the"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,51, corresponding handler method.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,53," <p>When an unknown name is encountered, strict parsers should fail with an"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,54, exception. Lenient parsers should call {@link #skipValue()} to recursively
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,55," skip the value's nested tokens, which may otherwise conflict."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,57," <p>If a value may be null, you should first check using {@link #peek()}."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,58, Null literals can be consumed using either {@link #nextNull()} or {@link
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,59, #skipValue()}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,61, <h3>Example</h3>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,62, Suppose we'd like to parse a stream of messages such as the following: <pre> {@code
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,65,"     ""id"": 912345678901,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,66,"     ""text"": ""How do I read a JSON stream in Java?"","
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,67,"     ""geo"": null,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,68,"     ""user"": {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,69,"       ""name"": ""json_newb"","
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,70,"       ""followers_count"": 41"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,74,"     ""id"": 912345678902,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,75,"     ""text"": ""@json_newb just use JsonReader!"","
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,76,"     ""geo"": [50.454722, -104.606667],"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,77,"     ""user"": {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,78,"       ""name"": ""jesse"","
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,79,"       ""followers_count"": 2"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,82, ]}</pre>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,83, This code implements the parser for the above structure: <pre>   {@code
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,85,   public List<Message> readJsonStream(InputStream in) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,86,"     JsonReader reader = new JsonReader(new InputStreamReader(in, ""UTF-8""));"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,87,     try {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,88,       return readMessagesArray(reader);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,89,     } finally {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,90,       reader.close();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,94,   public List<Message> readMessagesArray(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,95,     List<Message> messages = new ArrayList<Message>();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,97,     reader.beginArray();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,98,     while (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,99,       messages.add(readMessage(reader));
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,101,     reader.endArray();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,102,     return messages;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,105,   public Message readMessage(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,106,     long id = -1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,107,     String text = null;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,108,     User user = null;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,109,     List<Double> geo = null;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,111,     reader.beginObject();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,112,     while (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,113,       String name = reader.nextName();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,114,"       if (name.equals(""id"")) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,115,         id = reader.nextLong();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,116,"       } else if (name.equals(""text"")) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,117,         text = reader.nextString();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,118,"       } else if (name.equals(""geo"") && reader.peek() != JsonToken.NULL) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,119,         geo = readDoublesArray(reader);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,120,"       } else if (name.equals(""user"")) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,121,         user = readUser(reader);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,122,       } else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,123,         reader.skipValue();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,126,     reader.endObject();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,127,"     return new Message(id, text, user, geo);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,130,   public List<Double> readDoublesArray(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,131,     List<Double> doubles = new ArrayList<Double>();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,133,     reader.beginArray();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,134,     while (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,135,       doubles.add(reader.nextDouble());
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,137,     reader.endArray();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,138,     return doubles;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,141,   public User readUser(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,142,     String username = null;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,143,     int followersCount = -1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,145,     reader.beginObject();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,146,     while (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,147,       String name = reader.nextName();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,148,"       if (name.equals(""name"")) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,149,         username = reader.nextString();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,150,"       } else if (name.equals(""followers_count"")) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,151,         followersCount = reader.nextInt();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,152,       } else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,153,         reader.skipValue();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,156,     reader.endObject();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,157,"     return new User(username, followersCount);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,158,   }}</pre>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,160, <h3>Number Handling</h3>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,161, This reader permits numeric values to be read as strings and string values to
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,162," be read as numbers. For example, both elements of the JSON array {@code"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,163," [1, ""1""]} may be read using either {@link #nextInt} or {@link #nextString}."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,164, This behavior is intended to prevent lossy numeric conversions: double is
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,165, JavaScript's only numeric type and very large values like {@code
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,166, 9007199254740993} cannot be represented exactly on that platform. To minimize
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,167," precision loss, extremely large values should be written and read as strings"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,168, in JSON.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,170," <a name=""nonexecuteprefix""/><h3>Non-Execute Prefix</h3>"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,171, Web servers that serve private data using JSON may be vulnerable to <a
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,172," href=""http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery"">Cross-site"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,173," request forgery</a> attacks. In such an attack, a malicious site gains access"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,174, to a private JSON file by executing it with an HTML {@code <script>} tag.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,176," <p>Prefixing JSON files with <code>"")]}'\n""</code> makes them non-executable"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,177," by {@code <script>} tags, disarming the attack. Since the prefix is malformed"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,178," JSON, strict parsing fails when it is encountered. This class permits the"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,179, non-execute prefix when {@link #setLenient(boolean) lenient parsing} is
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,180, enabled.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,182, <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,183, of this class are not thread safe.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,185, @author Jesse Wilson
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,186, @since 1.6
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,188,ublic class JsonReaderV2 implements Closeable {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,189,rivate static final int PEEKED_NONE = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,190,rivate static final int PEEKED_BEGIN_OBJECT = 1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,191,rivate static final int PEEKED_END_OBJECT = 2;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,192,rivate static final int PEEKED_BEGIN_ARRAY = 3;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,193,rivate static final int PEEKED_END_ARRAY = 4;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,194,rivate static final int PEEKED_TRUE = 5;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,195,rivate static final int PEEKED_FALSE = 6;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,196,rivate static final int PEEKED_NULL = 7;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,197,rivate static final int PEEKED_SINGLE_QUOTED = 8;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,198,rivate static final int PEEKED_DOUBLE_QUOTED = 9;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,199,rivate static final int PEEKED_UNQUOTED = 10;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,200,rivate static final int PEEKED_SINGLE_QUOTED_NAME = 11;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,201,rivate static final int PEEKED_DOUBLE_QUOTED_NAME = 12;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,202,rivate static final int PEEKED_UNQUOTED_NAME = 13;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,203,"** When this is returned, the integer value is stored in peekedInteger. */"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,204,rivate static final int PEEKED_INTEGER = 14;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,205,rivate static final int PEEKED_NUMBER = 15;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,206,rivate static final int PEEKED_EOF = 16;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,208,** The input JSON. */
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,209,rivate final Reader in;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,211,** True to accept non-spec compliant JSON */
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,212,rivate boolean lenient = false;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,215," Use a manual buffer to easily read and unread upcoming characters, and"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,216, also so we can create strings without an intermediate StringBuilder.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,217," We decode literals directly out of this buffer, so it must be at least as"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,218, long as the longest token that can be reported as a number.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,220,rivate final char[] buffer = new char[1024];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,221,rivate int pos = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,222,rivate int limit = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,225, The offset of the first character in the buffer.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,227,rivate int bufferStartLine = 1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,228,rivate int bufferStartColumn = 1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,230,rivate int peeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,233, A peeked value that was composed entirely of digits with an optional
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,234, leading dash. Positive values may not have a leading 0.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,236,rivate long peekedInteger;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,239, The number of characters in the peeked number.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,241,rivate int peekedNumberLength;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,244, The nesting stack. Using a manual array rather than an ArrayList saves 20%.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,246,rivate int[] stack = new int[32];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,247,rivate int stackSize = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,249,tack[stackSize++] = JsonScope.EMPTY_DOCUMENT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,253, Creates a new instance that reads a JSON-encoded stream from {@code in}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,255,ublic JsonReaderV2(Reader in) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,256,f (in == null) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,257,"hrow new NullPointerException(""in == null"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,259,his.in = in;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,263," Configure this parser to be  be liberal in what it accepts. By default,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,264, this parser is strict and only accepts JSON as specified by <a
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,265," href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. Setting the"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,266, parser to lenient causes it to ignore the following syntax errors:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,268, <ul>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,269,"   <li>Streams that start with the <a href=""#nonexecuteprefix"">non-execute"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,270,"       prefix</a>, <code>"")]}'\n""</code>."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,271,"   <li>Streams that include multiple top-level values. With strict parsing,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,272,       each stream must contain exactly one top-level value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,273,"   <li>Top-level values of any type. With strict parsing, the top-level"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,274,       value must be an object or an array.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,275,   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,276,       Double#isInfinite() infinities}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,277,   <li>End of line comments starting with {@code //} or {@code #} and
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,278,       ending with a newline character.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,279,   <li>C-style comments starting with {@code /*} and ending with
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,280,       {@code *}{@code /}. Such comments may not be nested.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,281,   <li>Names that are unquoted or {@code 'single quoted'}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,282,   <li>Strings that are unquoted or {@code 'single quoted'}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,283,"   <li>Array elements separated by {@code ;} instead of {@code ,}."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,284,   <li>Unnecessary array separators. These are interpreted as if null
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,285,       was the omitted value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,286,   <li>Names and values separated by {@code =} or {@code =>} instead of
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,287,       {@code :}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,288,"   <li>Name/value pairs separated by {@code ;} instead of {@code ,}."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,289, </ul>
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,291,ublic final void setLenient(boolean lenient) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,292,his.lenient = lenient;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,296, Returns true if this parser is liberal in what it accepts.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,298,ublic final boolean isLenient() {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,299,eturn lenient;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,303, Consumes the next token from the JSON stream and asserts that it is the
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,304, beginning of a new array.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,306,ublic void beginArray() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,307,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,308,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,309, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,311,f (p == PEEKED_BEGIN_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,312,ush(JsonScope.EMPTY_ARRAY);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,313,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,314, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,315,"hrow new IllegalStateException(""Expected BEGIN_ARRAY but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,316," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,321, Consumes the next token from the JSON stream and asserts that it is the
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,322, end of the current array.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,324,ublic void endArray() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,325,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,326,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,327, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,329,f (p == PEEKED_END_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,330,tackSize--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,331,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,332, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,333,"hrow new IllegalStateException(""Expected END_ARRAY but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,334," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,339, Consumes the next token from the JSON stream and asserts that it is the
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,340, beginning of a new object.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,342,ublic void beginObject() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,343,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,344,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,345, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,347,f (p == PEEKED_BEGIN_OBJECT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,348,ush(JsonScope.EMPTY_OBJECT);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,349,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,350, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,351,"hrow new IllegalStateException(""Expected BEGIN_OBJECT but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,352," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,357, Consumes the next token from the JSON stream and asserts that it is the
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,358, end of the current object.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,360,ublic void endObject() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,361,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,362,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,363, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,365,f (p == PEEKED_END_OBJECT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,366,tackSize--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,367,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,368, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,369,"hrow new IllegalStateException(""Expected END_OBJECT but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,370," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,375, Returns true if the current array or object has another element.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,377,ublic boolean hasNext() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,378,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,379,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,380, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,382,eturn p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,386, Returns the type of the next token without consuming it.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,388,ublic JsonToken peek() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,389,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,390,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,391, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,394,witch (p) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,395,ase PEEKED_BEGIN_OBJECT:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,396,eturn JsonToken.BEGIN_OBJECT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,397,ase PEEKED_END_OBJECT:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,398,eturn JsonToken.END_OBJECT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,399,ase PEEKED_BEGIN_ARRAY:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,400,eturn JsonToken.BEGIN_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,401,ase PEEKED_END_ARRAY:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,402,eturn JsonToken.END_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,403,ase PEEKED_SINGLE_QUOTED_NAME:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,404,ase PEEKED_DOUBLE_QUOTED_NAME:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,405,ase PEEKED_UNQUOTED_NAME:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,406,eturn JsonToken.NAME;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,407,ase PEEKED_TRUE:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,408,ase PEEKED_FALSE:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,409,eturn JsonToken.BOOLEAN;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,410,ase PEEKED_NULL:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,411,eturn JsonToken.NULL;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,412,ase PEEKED_SINGLE_QUOTED:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,413,ase PEEKED_DOUBLE_QUOTED:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,414,ase PEEKED_UNQUOTED:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,415,eturn JsonToken.STRING;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,416,ase PEEKED_INTEGER:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,417,ase PEEKED_NUMBER:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,418,eturn JsonToken.NUMBER;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,419,ase PEEKED_EOF:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,420,eturn JsonToken.END_DOCUMENT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,421,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,422,hrow new AssertionError();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,426,rivate int doPeek() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,427,nt peekStack = stack[stackSize - 1];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,428,f (peekStack == JsonScope.EMPTY_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,429,tack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,430, else if (peekStack == JsonScope.NONEMPTY_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,431,/ Look for a comma before the next element.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,432,nt c = nextNonWhitespace(true);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,433,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,434,ase ']':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,435,eturn peeked = PEEKED_END_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,436,ase ';':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,437,heckLenient(); // fall-through
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,438,"ase ',':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,439,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,440,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,441,"hrow syntaxError(""Unterminated array"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,443, else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,444,tack[stackSize - 1] = JsonScope.DANGLING_NAME;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,445,/ Look for a comma before the next element.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,446,f (peekStack == JsonScope.NONEMPTY_OBJECT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,447,nt c = nextNonWhitespace(true);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,448,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,449,ase '}':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,450,eturn peeked = PEEKED_END_OBJECT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,451,ase ';':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,452,heckLenient(); // fall-through
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,453,"ase ',':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,454,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,455,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,456,"hrow syntaxError(""Unterminated object"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,459,nt c = nextNonWhitespace(true);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,460,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,461,ase '\'':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,462,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,463,eturn peeked = PEEKED_SINGLE_QUOTED_NAME;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,464,"ase '""':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,465,eturn peeked = PEEKED_DOUBLE_QUOTED_NAME;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,466,ase '}':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,467,eturn peeked = PEEKED_END_OBJECT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,468,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,469,os--; // Don't consume the first character in an unquoted string.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,470,f (isLiteral((char) c)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,471,eturn peeked = PEEKED_UNQUOTED_NAME;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,472, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,473,"hrow syntaxError(""Expected name"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,476, else if (peekStack == JsonScope.DANGLING_NAME) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,477,tack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,478,/ Look for a colon before the value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,479,"/ TODO: support '=' and ""=>"" delimiters in lenient mode."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,480,nt c = nextNonWhitespace(true);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,481,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,482,ase ':':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,483,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,484,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,485,"hrow syntaxError(""Expected ':'"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,487, else if (peekStack == JsonScope.EMPTY_DOCUMENT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,488,tack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,489, else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,490,nt c = nextNonWhitespace(false);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,491,f (c == -1) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,492,eturn peeked = PEEKED_EOF;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,493, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,494,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,495,os--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,499,nt c = nextNonWhitespace(true);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,500,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,501,ase ']':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,502,f (peekStack == JsonScope.EMPTY_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,503,eturn peeked = PEEKED_END_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,505,"/ fall-through to handle "",]"""
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,506,ase ';':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,507,"ase ',':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,508,"/ In lenient mode, a 0-length literal in an array means 'null'."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,509,f (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,510,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,511,os--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,512,eturn peeked = PEEKED_NULL;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,513, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,514,"hrow syntaxError(""Unexpected value"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,516,ase '\'':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,517,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,518,eturn peeked = PEEKED_SINGLE_QUOTED;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,519,"ase '""':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,520,eturn peeked = PEEKED_DOUBLE_QUOTED;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,521,ase '[':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,522,eturn peeked = PEEKED_BEGIN_ARRAY;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,523,ase '{':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,524,eturn peeked = PEEKED_BEGIN_OBJECT;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,525,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,526,os--; // Don't consume the first character in a literal value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,529,nt result = peekKeyword();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,530,f (result != PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,531,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,534,esult = peekNumber();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,535,f (result != PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,536,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,539,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,540,eturn peeked = PEEKED_UNQUOTED;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,543,rivate int peekKeyword() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,544,/ TODO: figure out a way to avoid repeatedly accessing 'buffer'
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,545,nt c;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,546,f ((pos + 4 < limit || fillBuffer(5))
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,547,& ((c = buffer[pos    ]) == 't' || c == 'T')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,548,& ((c = buffer[pos + 1]) == 'r' || c == 'R')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,549,& ((c = buffer[pos + 2]) == 'u' || c == 'U')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,550,& ((c = buffer[pos + 3]) == 'e' || c == 'E')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,551,& !isLiteral(buffer[pos + 4])) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,552,os += 4;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,553,eturn peeked = PEEKED_TRUE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,554, else if ((pos + 5 < limit || fillBuffer(6))
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,555,& ((c = buffer[pos    ]) == 'f' || c == 'F')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,556,& ((c = buffer[pos + 1]) == 'a' || c == 'A')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,557,& ((c = buffer[pos + 2]) == 'l' || c == 'L')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,558,& ((c = buffer[pos + 3]) == 's' || c == 'S')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,559,& ((c = buffer[pos + 4]) == 'e' || c == 'E')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,560,& !isLiteral(buffer[pos + 5])) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,561,os += 5;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,562,eturn peeked = PEEKED_FALSE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,563, else if ((pos + 4 < limit || fillBuffer(5))
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,564,& ((c = buffer[pos    ]) == 'n' || c == 'N')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,565,& ((c = buffer[pos + 1]) == 'u' || c == 'U')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,566,& ((c = buffer[pos + 2]) == 'l' || c == 'L')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,567,& ((c = buffer[pos + 3]) == 'l' || c == 'L')
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,568,& !isLiteral(buffer[pos + 4])) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,569,os += 4;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,570,eturn peeked = PEEKED_NULL;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,571, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,572,eturn PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,576,rivate int peekNumber() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,577,ong integer = 0; // Negative to accommodate Long.MIN_VALUE more easily.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,578,oolean negative = false;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,579,nt i = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,580,nt c = get(i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,582,/ TODO: figure out a way to speed up repopulating 'c'
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,584,f (c == '-') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,585,egative = true;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,586, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,589,f (c == '0') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,590, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,591, else if (c >= '1' && c <= '9') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,592,nteger -= (c - '0');
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,593, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,594,hile (c >= '0' && c <= '9') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,595,nteger = integer * 10 - (c - '0'); // TODO: detect overflow
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,596, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,598, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,599,eturn PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,602,f (c == -1 || !isLiteral((char) c)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,603,eekedInteger = negative ? integer : -integer;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,604,os += i;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,605,eturn peeked = PEEKED_INTEGER;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,608,f (c == '.') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,609, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,610,hile (c >= '0' && c <= '9') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,611, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,615,f (c == 'e' || c == 'E') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,616, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,617,f (c == '+' || c == '-') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,618, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,620,f (c >= '0' && c <= '9') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,621, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,622,hile (c >= '0' && c <= '9') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,623, = get(++i);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,625, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,626,eturn PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,630,f (c == -1 || !isLiteral((char) c)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,631,eekedNumberLength = i;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,632,eturn peeked = PEEKED_NUMBER;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,635,eturn PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,639," Returns a character at position {@code pos + offset}, reading additional"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,640, bytes into the buffer if necessary.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,642,rivate int get(int offset) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,643,eturn (pos + offset < limit || fillBuffer(offset + 1)) ? buffer[pos + offset] : -1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,646,rivate boolean isLiteral(char c) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,647,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,648,ase '/':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,649,ase '\\':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,650,ase ';':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,651,ase '#':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,652,ase '=':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,653,heckLenient(); // fall-through
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,654,ase '{':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,655,ase '}':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,656,ase '[':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,657,ase ']':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,658,ase ':':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,659,"ase ',':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,660,ase ' ':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,661,ase '\t':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,662,ase '\f':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,663,ase '\r':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,664,ase '\n':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,665,eturn false;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,666,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,667,eturn true;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,672," Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,673, consumes it.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,675, @throws java.io.IOException if the next token in the stream is not a property
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,676,     name.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,678,ublic String nextName() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,679,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,680,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,681, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,683,tring result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,684,f (p == PEEKED_UNQUOTED_NAME) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,685,esult = nextUnquotedValue();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,686, else if (p == PEEKED_SINGLE_QUOTED_NAME) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,687,esult = nextQuotedValue('\'');
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,688, else if (p == PEEKED_DOUBLE_QUOTED_NAME) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,689,"esult = nextQuotedValue('""');"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,690, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,691,"hrow new IllegalStateException(""Expected a name but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,692," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,694,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,695,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,699," Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,700," consuming it. If the next token is a number, this method will return its"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,701, string form.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,703, @throws IllegalStateException if the next token is not a string or if
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,704,     this reader is closed.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,706,ublic String nextString() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,707,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,708,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,709, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,711,tring result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,712,f (p == PEEKED_UNQUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,713,esult = nextUnquotedValue();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,714, else if (p == PEEKED_SINGLE_QUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,715,esult = nextQuotedValue('\'');
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,716, else if (p == PEEKED_DOUBLE_QUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,717,"esult = nextQuotedValue('""');"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,718, else if (p == PEEKED_INTEGER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,719,esult = Long.toString(peekedInteger);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,720, else if (p == PEEKED_NUMBER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,721,"esult = new String(buffer, pos, peekedNumberLength);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,722,os += peekedNumberLength;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,723, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,724,"hrow new IllegalStateException(""Expected a string but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,725," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,727,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,728,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,732," Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,733, consuming it.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,735, @throws IllegalStateException if the next token is not a boolean or if
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,736,     this reader is closed.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,738,ublic boolean nextBoolean() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,739,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,740,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,741, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,743,f (p == PEEKED_TRUE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,744,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,745,eturn true;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,746, else if (p == PEEKED_FALSE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,747,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,748,eturn false;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,750,"hrow new IllegalStateException(""Expected a boolean but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,751," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,755, Consumes the next token from the JSON stream and asserts that it is a
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,756, literal null.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,758, @throws IllegalStateException if the next token is not null or if this
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,759,     reader is closed.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,761,ublic void nextNull() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,762,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,763,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,764, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,766,f (p == PEEKED_NULL) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,767,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,768, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,769,"hrow new IllegalStateException(""Expected null but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,770," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,775," Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,776," consuming it. If the next token is a string, this method will attempt to"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,777, parse it as a double using {@link Double#parseDouble(String)}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,779, @throws IllegalStateException if the next token is not a literal value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,780, @throws NumberFormatException if the next literal value cannot be parsed
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,781,"     as a double, or is non-finite."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,783,ublic double nextDouble() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,784,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,785,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,786, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,789,f (p == PEEKED_INTEGER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,790,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,791,eturn (double) peekedInteger;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,794,tring asString;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,795,f (p == PEEKED_NUMBER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,796,"sString = new String(buffer, pos, peekedNumberLength);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,797,os += peekedNumberLength;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,798, else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,799,"sString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '""');"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,800, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,801,"hrow new IllegalStateException(""Expected a double but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,802," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,805,ouble result = Double.parseDouble(asString); // don't catch this NumberFormatException.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,806,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,807,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,811," Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,812," consuming it. If the next token is a string, this method will attempt to"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,813, parse it as a long. If the next token's numeric value cannot be exactly
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,814," represented by a Java {@code long}, this method throws."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,816, @throws IllegalStateException if the next token is not a literal value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,817, @throws NumberFormatException if the next literal value cannot be parsed
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,818,"     as a number, or exactly represented as a long."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,820,ublic long nextLong() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,821,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,822,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,823, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,826,f (p == PEEKED_INTEGER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,827,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,828,eturn peekedInteger;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,831,tring asString;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,832,f (p == PEEKED_NUMBER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,833,"sString = new String(buffer, pos, peekedNumberLength);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,834,os += peekedNumberLength;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,835, else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,836,"sString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '""');"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,837,ry {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,838,ong result = Long.parseLong(asString);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,839,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,840,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,841, catch (NumberFormatException ignored) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,842,/ Fall back to parse as a double below.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,844, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,845,"hrow new IllegalStateException(""Expected a long but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,846," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,849,ouble asDouble = Double.parseDouble(asString); // don't catch this NumberFormatException.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,850,ong result = (long) asDouble;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,851,f (result != asDouble) { // Make sure no precision was lost casting to 'long'.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,852,"hrow new NumberFormatException(""Expected a long but was "" + asString"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,853," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,855,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,856,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,860," Returns the string up to but not including {@code quote}, unescaping any"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,861, character escape sequences encountered along the way. The opening quote
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,862," should have already been read. This consumes the closing quote, but does"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,863, not include it in the returned string.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,865," @param quote either ' or ""."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,866, @throws NumberFormatException if any unicode escape sequences are
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,867,     malformed.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,869,rivate String nextQuotedValue(char quote) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,870,"/ Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,871,har[] buffer = this.buffer;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,872,tringBuilder builder = null;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,873,hile (true) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,874,nt p = pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,875,nt l = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,876,* the index of the first character not yet appended to the builder. */
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,877,nt start = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,878,hile (p < l) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,879,nt c = buffer[p++];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,881,f (c == quote) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,882,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,883,f (false /* TODO: skipping */) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,884,"eturn ""skipped!"";"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,885, else if (builder == null) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,886,"eturn new String(buffer, start, p - start - 1);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,887, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,888,"uilder.append(buffer, start, p - start - 1);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,889,eturn builder.toString();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,892, else if (c == '\\') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,893,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,894,f (builder == null) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,895,uilder = new StringBuilder();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,897,"uilder.append(buffer, start, p - start - 1);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,898,uilder.append(readEscapeCharacter());
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,899, = pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,900, = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,901,tart = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,905,f (builder == null) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,906,uilder = new StringBuilder();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,908,"uilder.append(buffer, start, p - start);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,909,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,910,f (!fillBuffer(1)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,911,"hrow syntaxError(""Unterminated string"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,917, Returns an unquoted value as a string.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,919,"SuppressWarnings(""fallthrough"")"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,920,rivate String nextUnquotedValue() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,921,tringBuilder builder = null;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,922,nt i = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,924,indNonLiteralCharacter:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,925,hile (true) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,926,or (; pos + i < limit; i++) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,927,witch (buffer[pos + i]) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,928,ase '/':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,929,ase '\\':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,930,ase ';':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,931,ase '#':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,932,ase '=':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,933,heckLenient(); // fall-through
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,934,ase '{':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,935,ase '}':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,936,ase '[':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,937,ase ']':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,938,ase ':':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,939,"ase ',':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,940,ase ' ':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,941,ase '\t':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,942,ase '\f':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,943,ase '\r':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,944,ase '\n':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,945,reak findNonLiteralCharacter;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,949,/ Attempt to load the entire literal into the buffer at once.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,950,f (i < buffer.length) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,951,f (fillBuffer(i + 1)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,952,ontinue;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,953, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,954,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,958,/ use a StringBuilder when the value is too long. This is too long to be a number!
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,959,f (builder == null) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,960,uilder = new StringBuilder();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,962,"uilder.append(buffer, pos, i);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,963,os += i;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,964, = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,965,f (!fillBuffer(1)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,966,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,970,tring result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,971,f (false /* TODO: support skipping */) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,972,"esult = ""skipped!"";"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,973, else if (builder == null) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,974,"esult = new String(buffer, pos, i);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,975, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,976,"uilder.append(buffer, pos, i);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,977,esult = builder.toString();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,979,os += i;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,980,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,984," Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,985," consuming it. If the next token is a string, this method will attempt to"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,986, parse it as an int. If the next token's numeric value cannot be exactly
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,987," represented by a Java {@code int}, this method throws."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,989, @throws IllegalStateException if the next token is not a literal value.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,990, @throws NumberFormatException if the next literal value cannot be parsed
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,991,"     as a number, or exactly represented as an int."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,993,ublic int nextInt() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,994,nt p = peeked;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,995,f (p == PEEKED_NONE) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,996, = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,999,nt result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1000,f (p == PEEKED_INTEGER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1001,esult = (int) peekedInteger;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1002,f (peekedInteger != result) { // Make sure no precision was lost casting to 'int'.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1003,"hrow new NumberFormatException(""Expected an int but was "" + peekedInteger"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1004," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1006,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1007,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1010,tring asString;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1011,f (p == PEEKED_NUMBER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1012,"sString = new String(buffer, pos, peekedNumberLength);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1013,os += peekedNumberLength;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1014, else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1015,"sString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '""');"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1016,ry {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1017,esult = Integer.parseInt(asString);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1018,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1019,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1020, catch (NumberFormatException ignored) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1021,/ Fall back to parse as a double below.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1023, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1024,"hrow new IllegalStateException(""Expected an int but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1025," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1028,ouble asDouble = Double.parseDouble(asString); // don't catch this NumberFormatException.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1029,esult = (int) asDouble;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1030,f (result != asDouble) { // Make sure no precision was lost casting to 'int'.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1031,"hrow new NumberFormatException(""Expected an int but was "" + asString"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1032," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1034,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1035,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1039, Closes this JSON reader and the underlying {@link java.io.Reader}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1041,ublic void close() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1045," Skips the next value recursively. If it is an object or array, all nested"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1046, elements are skipped. This method is intended for use when the JSON token
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1047, stream contains unrecognized or unhandled values.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1049,ublic void skipValue() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1050,nt count = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1051,o {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1052,nt p = doPeek();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1053,f (p == PEEKED_BEGIN_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1054,ush(JsonScope.EMPTY_ARRAY);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1055,ount++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1056, else if (p == PEEKED_BEGIN_OBJECT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1057,ush(JsonScope.EMPTY_OBJECT);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1058,ount++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1059, else if (p == PEEKED_END_ARRAY) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1060,tackSize--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1061,ount--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1062, else if (p == PEEKED_END_OBJECT) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1063,tackSize--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1064,ount--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1065, else if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1066,extUnquotedValue();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1067, else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1068,extQuotedValue('\'');
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1069, else if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1070,"extQuotedValue('""');"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1071, else if (p == PEEKED_NUMBER) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1072,os += peekedNumberLength;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1074,eeked = PEEKED_NONE;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1075, while (count != 0);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1078,rivate void push(int newTop) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1079,f (stackSize == stack.length) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1080,nt[] newStack = new int[stackSize * 2];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1081,"ystem.arraycopy(stack, 0, newStack, 0, stackSize);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1082,tack = newStack;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1084,tack[stackSize++] = newTop;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1088, Returns true once {@code limit - pos >= minimum}. If the data is
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1089," exhausted before that many characters are available, this returns"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1090, false.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1092,rivate boolean fillBuffer(int minimum) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1093,har[] buffer = this.buffer;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1095,"/ Before clobbering the old characters, update where buffer starts"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1096,/ Using locals here saves ~2%.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1097,nt line = bufferStartLine;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1098,nt column = bufferStartColumn;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1099,"or (int i = 0, p = pos; i < p; i++) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1100,f (buffer[i] == '\n') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1101,ine++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1102,olumn = 1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1103, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1104,olumn++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1107,ufferStartLine = line;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1108,ufferStartColumn = column;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1110,f (limit != pos) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1111,imit -= pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1112,"ystem.arraycopy(buffer, pos, buffer, 0, limit);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1113, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1114,imit = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1117,os = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1118,nt total;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1119,"hile ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1120,imit += total;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1122,"/ if this is the first read, consume an optional byte order mark (BOM) if it exists"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1123,f (bufferStartLine == 1 && bufferStartColumn == 1 && limit > 0 && buffer[0] == '\ufeff') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1124,os++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1125,ufferStartColumn--;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1128,f (limit >= minimum) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1129,eturn true;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1132,eturn false;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1135,rivate int getLineNumber() {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1136,nt result = bufferStartLine;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1137,or (int i = 0; i < pos; i++) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1138,f (buffer[i] == '\n') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1139,esult++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1142,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1145,rivate int getColumnNumber() {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1146,nt result = bufferStartColumn;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1147,or (int i = 0; i < pos; i++) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1148,f (buffer[i] == '\n') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1149,esult = 1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1150, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1151,esult++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1154,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1158, Returns the next character in the stream that is neither whitespace nor a
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1159," part of a comment. When this returns, the returned character is always at"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1160, {@code buffer[pos-1]}; this means the caller can always push back the
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1161, returned character by decrementing {@code pos}.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1163,rivate int nextNonWhitespace(boolean throwOnEof) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1165, This code uses ugly local variables 'p' and 'l' representing the 'pos'
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1166, and 'limit' fields respectively. Using locals rather than fields saves
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1167, a few field reads for each whitespace character in a pretty-printed
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1168," document, resulting in a 5% speedup. We need to flush 'p' to its field"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1169, before any (potentially indirect) call to fillBuffer() and reread both
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1170, 'p' and 'l' after any (potentially indirect) call to the same method.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1172,har[] buffer = this.buffer;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1173,nt p = pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1174,nt l = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1175,hile (true) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1176,f (p == l) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1177,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1178,f (!fillBuffer(1)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1179,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1181, = pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1182, = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1185,nt c = buffer[p++];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1186,witch (c) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1187,ase '\t':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1188,ase ' ':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1189,ase '\n':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1190,ase '\r':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1191,ontinue;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1193,ase '/':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1194,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1195,f (p == l) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1196,os--; // push back '/' so it's still in the buffer when this method returns
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1197,oolean charsLoaded = fillBuffer(2);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1198,os++; // consume the '/' again
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1199,f (!charsLoaded) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1200,eturn c;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1204,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1205,har peek = buffer[pos];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1206,witch (peek) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1207,ase '*':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1208,/ skip a /* c-style comment */
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1209,os++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1210,"f (!skipTo(""*/"")) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1211,"hrow syntaxError(""Unterminated comment"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1213, = pos + 2;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1214, = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1215,ontinue;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1217,ase '/':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1218,/ skip a // end-of-line comment
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1219,os++;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1220,kipToEndOfLine();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1221, = pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1222, = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1223,ontinue;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1225,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1226,eturn c;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1229,ase '#':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1230,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1232, Skip a # hash end-of-line comment. The JSON RFC doesn't
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1233," specify this behaviour, but it's required to parse"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1234, existing documents. See http://b/2571423.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1236,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1237,kipToEndOfLine();
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1238, = pos;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1239, = limit;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1240,ontinue;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1242,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1243,os = p;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1244,eturn c;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1247,f (throwOnEof) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1248,"hrow new EOFException(""End of input"""
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1249," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1250, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1251,eturn -1;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1255,rivate void checkLenient() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1256,f (!lenient) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1257,"hrow syntaxError(""Use JsonReader.setLenient(true) to accept malformed JSON"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1262, Advances the position until after the next newline character. If the line
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1263," is terminated by ""\r\n"", the '\n' must be consumed as whitespace by the"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1264, caller.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1266,rivate void skipToEndOfLine() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1267,hile (pos < limit || fillBuffer(1)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1268,har c = buffer[pos++];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1269,f (c == '\r' || c == '\n') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1270,reak;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1275,rivate boolean skipTo(String toFind) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1276,uter:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1277,or (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1278,or (int c = 0; c < toFind.length(); c++) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1279,f (buffer[pos + c] != toFind.charAt(c)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1280,ontinue outer;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1283,eturn true;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1285,eturn false;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1288,Override public String toString() {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1289,eturn getClass().getSimpleName()
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1290," "" at line "" + getLineNumber() + "" column "" + getColumnNumber();"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1294, Unescapes the character identified by the character or characters that
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1295, immediately follow a backslash. The backslash '\' should have already
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1296," been read. This supports both unicode escapes ""u000A"" and two-character"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1297," escapes ""\n""."
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1299, @throws NumberFormatException if any unicode escape sequences are
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1300,     malformed.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1302,rivate char readEscapeCharacter() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1303,f (pos == limit && !fillBuffer(1)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1304,"hrow syntaxError(""Unterminated escape sequence"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1307,har escaped = buffer[pos++];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1308,witch (escaped) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1309,ase 'u':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1310,f (pos + 4 > limit && !fillBuffer(4)) {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1311,"hrow syntaxError(""Unterminated escape sequence"");"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1313,"/ Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1314,har result = 0;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1315,"or (int i = pos, end = i + 4; i < end; i++) {"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1316,har c = buffer[i];
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1317,esult <<= 4;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1318,f (c >= '0' && c <= '9') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1319,esult += (c - '0');
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1320, else if (c >= 'a' && c <= 'f') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1321,esult += (c - 'a' + 10);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1322, else if (c >= 'A' && c <= 'F') {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1323,esult += (c - 'A' + 10);
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1324, else {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1325,"hrow new NumberFormatException(""\\u"" + new String(buffer, pos, 4));"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1328,os += 4;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1329,eturn result;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1331,ase 't':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1332,eturn '\t';
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1334,ase 'b':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1335,eturn '\b';
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1337,ase 'n':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1338,eturn '\n';
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1340,ase 'r':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1341,eturn '\r';
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1343,ase 'f':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1344,eturn '\f';
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1346,ase '\'':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1347,"ase '""':"
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1348,ase '\\':
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1349,efault:
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1350,eturn escaped;
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1355, Throws a new IO exception with the given message and a context snippet
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1356, with this reader's content.
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1358,rivate IOException syntaxError(String message) throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1359,hrow new MalformedJsonException(message
False,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1360," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,405,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,76, @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,76,* @throws IllegalStateException if the element is of another type.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,79,eturn (JsonObject) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,79,if (isJsonObject()) {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,80,return (JsonObject) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,81,} else {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,82,"throw new IllegalStateException(""This is not a JSON Object."");"
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,89, @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,93,* @throws IllegalStateException if the element is of another type.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,92,eturn (JsonArray) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,96,if (isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,97,return (JsonArray) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,98,} else {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,99,"throw new IllegalStateException(""This is not a JSON Array."");"
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,102, @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,110,* @throws IllegalStateException if the element is of another type.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,105,eturn (JsonPrimitive) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,113,if (isJsonPrimitive()) {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,114,return (JsonPrimitive) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,115,} else {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,116,"throw new IllegalStateException(""This is not a JSON Primitive."");"
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,115, @throws ClassCastException if the element is of another type.
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,127,* @throws IllegalStateException if the element is of another type.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,119,eturn (JsonNull) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,131,if (isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,132,return (JsonNull) this;
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,133,} else {
True,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,134,"throw new IllegalStateException(""This is not a JSON Null."");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,19,import java.io.StringReader;
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,24,import com.google.gson.JsonArray;
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,26,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,28,import com.google.gson.JsonPrimitive;
False,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,24,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,26,mport java.io.StringReader;
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,30,import com.google.gson.common.TestTypes.Nested;
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,56,public void testBadTypeForDeserializingCustomTree() {
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,57,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,58,"obj.addProperty(""stringValue"", ""foo"");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,59,"obj.addProperty(""intValue"", 11);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,60,JsonArray array = new JsonArray();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,61,array.add(obj);
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,62,try {
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,63,"gson.fromJson(array, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,64,"fail(""BagOfPrimitives is not an array"");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,65,} catch (UnsupportedOperationException expected) { }
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,68,public void testBadFieldTypeForCustomDeserializerCustomTree() {
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,69,JsonArray array = new JsonArray();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,70,"array.add(new JsonPrimitive(""blah""));"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,71,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,72,"obj.addProperty(""stringValue"", ""foo"");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,73,"obj.addProperty(""intValue"", 11);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,74,"obj.add(""longValue"", array);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,76,try {
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,77,"gson.fromJson(obj, BagOfPrimitives.class);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,78,"fail(""BagOfPrimitives is not an array"");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,79,} catch (JsonParseException expected) { }
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,82,public void testBadFieldTypeForDeserializingCustomTree() {
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,83,JsonArray array = new JsonArray();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,84,"array.add(new JsonPrimitive(""blah""));"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,85,JsonObject primitive1 = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,86,"primitive1.addProperty(""string"", ""foo"");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,87,"primitive1.addProperty(""intValue"", 11);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,89,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,90,"obj.add(""primitive1"", primitive1);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,91,"obj.add(""primitive2"", array);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,93,try {
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,94,"gson.fromJson(obj, Nested.class);"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,95,"fail(""Nested has field BagOfPrimitives which is not an array"");"
True,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,gson/src/test/java/com/google/gson/functional/JsonParserTest.java,96,} catch (IllegalStateException expected) { }
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,476,ublic static final class Amount<Q extends Quantity> implements
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,477,"easurable<Q>, Field<Amount<?>>, Serializable, Immutable {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,476,public static final class Amount<Q extends Quantity>
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,477,"implements Measurable<Q>, Field<Amount<?>>, Serializable, Immutable {"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,478,private static final long serialVersionUID = -7560491093120970437L;

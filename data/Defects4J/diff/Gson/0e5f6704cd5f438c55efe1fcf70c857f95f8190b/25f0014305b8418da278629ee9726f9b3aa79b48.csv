is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,2, Copyright (C) 2010 Google Inc.
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,17,ackage com.google.gson.reflect;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,19,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,20,mport java.util.ArrayList;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,21,mport java.util.List;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,22,mport java.util.RandomAccess;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,23,mport java.util.Set;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,24,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,27, @author Jesse Wilson
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,29,"SuppressWarnings({""UnusedDeclaration"", ""deprecation""})"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,30,ublic final class TypeTokenTest extends TestCase {
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,32,ist<Integer> listOfInteger = null;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,33,ist<Number> listOfNumber = null;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,34,ist<String> listOfString = null;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,35,ist<?> listOfUnknown = null;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,36,ist<Set<String>> listOfSetOfString = null;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,37,ist<Set<?>> listOfSetOfUnknown = null;
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,39,ublic void testIsAssignableFromRawTypes() {
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,40,ssertTrue(TypeToken.get(Object.class).isAssignableFrom(String.class));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,41,ssertFalse(TypeToken.get(String.class).isAssignableFrom(Object.class));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,42,ssertTrue(TypeToken.get(RandomAccess.class).isAssignableFrom(ArrayList.class));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,43,ssertFalse(TypeToken.get(ArrayList.class).isAssignableFrom(RandomAccess.class));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,46,ublic void testIsAssignableFromWithTypeParameters() throws Exception {
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,47,"ype a = getClass().getDeclaredField(""listOfInteger"").getGenericType();"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,48,"ype b = getClass().getDeclaredField(""listOfNumber"").getGenericType();"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,49,ssertTrue(TypeToken.get(a).isAssignableFrom(a));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,50,ssertTrue(TypeToken.get(b).isAssignableFrom(b));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,52,/ listOfInteger = listOfNumber; // doesn't compile; must be false
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,53,ssertFalse(TypeToken.get(a).isAssignableFrom(b));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,54,/ listOfNumber = listOfInteger; // doesn't compile; must be false
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,55,ssertFalse(TypeToken.get(b).isAssignableFrom(a));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,58,ublic void testIsAssignableFromWithBasicWildcards() throws Exception {
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,59,"ype a = getClass().getDeclaredField(""listOfString"").getGenericType();"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,60,"ype b = getClass().getDeclaredField(""listOfUnknown"").getGenericType();"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,61,ssertTrue(TypeToken.get(a).isAssignableFrom(a));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,62,ssertTrue(TypeToken.get(b).isAssignableFrom(b));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,64,/ listOfString = listOfUnknown  // doesn't compile; must be false
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,65,ssertFalse(TypeToken.get(a).isAssignableFrom(b));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,66,istOfUnknown = listOfString; // compiles; must be true
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,67,ssertTrue(TypeToken.get(b).isAssignableFrom(a));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,70,ublic void testIsAssignableFromWithNestedWildcards() throws Exception {
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,71,"ype a = getClass().getDeclaredField(""listOfSetOfString"").getGenericType();"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,72,"ype b = getClass().getDeclaredField(""listOfSetOfUnknown"").getGenericType();"
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,73,ssertTrue(TypeToken.get(a).isAssignableFrom(a));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,74,ssertTrue(TypeToken.get(b).isAssignableFrom(b));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,76,/ listOfSetOfString = listOfSetOfUnknown; // doesn't compile; must be false
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,77,ssertFalse(TypeToken.get(a).isAssignableFrom(b));
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,78,/ listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false
False,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java,79,ssertFalse(TypeToken.get(b).isAssignableFrom(a));

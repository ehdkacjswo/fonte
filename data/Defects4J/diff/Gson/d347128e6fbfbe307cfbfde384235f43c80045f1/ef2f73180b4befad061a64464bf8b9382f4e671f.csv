is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,21,import java.lang.reflect.TypeVariable;
False,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,62,ype resolvedTypeOfField = fieldAttributes.getResolvedType();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,63,"Type resolvedTypeOfField = getMoreSpecificType(fieldAttributes.getResolvedType(), obj, fieldAttributes);"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,76,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,77,"private Type getMoreSpecificType(Type type, Object obj, FieldAttributes fieldAttributes) {"
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,78,try {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,79,if (obj != null && (Object.class == type || type instanceof TypeVariable)) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,80,Object fieldValue = fieldAttributes.get(obj);
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,81,if (fieldValue != null) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,82,type = fieldValue.getClass();
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,85,} catch (IllegalAccessException e) {
True,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java,87,return type;
False,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,21,mport junit.framework.AssertionFailedError;
False,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,57,ry {
False,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,58,tring json = gson.toJson(bar);
False,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,59,"ssertEquals(expectedJson, json);"
False,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,60, catch (AssertionFailedError expected) {
False,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,62,"tring json = gson.toJson(bar, new TypeToken<Bar<Foo>>(){}.getType());"
True,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,56,// Ensure that serialization works without specifying the type explicitly
True,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,57,String json = gson.toJson(bar);
True,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,58,"assertEquals(expectedJson, json);"
True,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,59,// Ensure that serialization also works when the type is specified explicitly
True,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,gson/src/test/java/com/google/gson/functional/RawSerializationTest.java,60,"json = gson.toJson(bar, new TypeToken<Bar<Foo>>(){}.getType());"

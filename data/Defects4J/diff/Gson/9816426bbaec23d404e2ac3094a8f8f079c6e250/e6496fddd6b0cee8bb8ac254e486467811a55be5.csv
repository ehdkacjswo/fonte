is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,20,* Defines generic cache interface.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,22,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,23,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,25,"interface Cache<K, V> {"
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,28,* Adds the new value object into the cache for the given key.  If the key already
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,29,"* exists, then this method will override the value for the key."
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,31,* @param key the key identifier for the {@code value} object
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,32,* @param value the value object to store in the cache
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,34,"void addElement(K key, V value);"
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,37,* Retrieve the cached value for the given {@code key}.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,39,* @param key the key identifying the value
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,40,* @return the cached value for the given {@code key}
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,42,V getElement(K key);
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,45,* Removes the value from the cache for the given key.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,47,* @param key the key identifying the value to remove
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,48,* @return the value for the given {@code key}
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,50,V removeElement(K key);
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,53,* Removes everything from this cache.
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,55,void clear();
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,58,* @return the number of objects in this cache
True,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,60,int size();
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,37,// TODO(Joel): Fix how we configure this cache in a follow-up CL.
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,38,"private static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE ="
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,39,"new LruCache<Pair<Class<?>,String>, Collection<Annotation>>(1500);"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,41,private final Class<?> parentClazz;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,52,ieldAttributes(final Field f) {
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,53,reconditions.checkNotNull(f);
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,54,ield = f;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,55,ame = field.getName();
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,57,"FieldAttributes(final Class<?> parentClazz, final Field f) {"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,58,Preconditions.checkNotNull(parentClazz);
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,59,this.parentClazz = parentClazz;
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,60,name = f.getName();
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,58,odifiers = field.getModifiers();
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,63,modifiers = f.getModifiers();
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,64,field = f;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,130,nnotations = Collections.unmodifiableCollection(
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,131,rrays.asList(field.getAnnotations()));
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,136,"Pair<Class<?>, String> key = new Pair<Class<?>, String>(parentClazz, name);"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,137,annotations = ANNOTATION_CACHE.getElement(key);
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,138,if (annotations == null) {
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,139,annotations = Collections.unmodifiableCollection(
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,140,Arrays.asList(field.getAnnotations()));
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,141,"ANNOTATION_CACHE.addElement(key, annotations);"
False,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,20, A {@link FieldNamingStrategy} that ensures the JSON field names consist of only
True,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,gson/src/main/java/com/google/gson/LowerCamelCaseSeparatorNamingPolicy.java,20,* A {@link FieldNamingStrategy2} that ensures the JSON field names consist of only
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,19,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,20,import java.util.Map;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,23,* An implementation of the {@link Cache} interface that evict objects from the cache using an
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,24,* LRU (least recently used) algorithm.  Object start getting evicted from the cache once the
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,25,* {@code maxCapacity} is reached.
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,27,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,28,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,30,"class LruCache<K, V> extends LinkedHashMap<K, V> implements Cache<K, V> {"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,31,private static final long serialVersionUID = 1L;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,33,private final int maxCapacity;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,35,LruCache(int maxCapacity) {
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,36,"super(maxCapacity, 0.7F, true);"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,37,this.maxCapacity = maxCapacity;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,40,"public void addElement(K key, V value) {"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,41,"put(key, value);"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,44,public void clear() {
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,45,super.clear();
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,48,public V getElement(K key) {
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,49,return get(key);
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,52,public V removeElement(K key) {
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,53,return remove(key);
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,56,public int size() {
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,57,return super.size();
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,60,@Override
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,61,"protected boolean removeEldestEntry(Map.Entry<K, V> entry) {"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,62,return size() > maxCapacity;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,151,ieldAttributes fieldAttributes = new FieldAttributes(f);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,151,"FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);"
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,34,rivate static final FieldAttributes FIELD = new FieldAttributes(CLAZZ.getFields()[0]);
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,34,"private static final FieldAttributes FIELD = new FieldAttributes(CLAZZ, CLAZZ.getFields()[0]);"
False,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,45,ssertTrue(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,45,"assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,50,ssertTrue(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,50,"assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,55,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,55,"assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,60,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategyTest.java,60,"assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,45,ssertTrue(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,45,"assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,50,ssertTrue(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,50,"assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,55,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,55,"assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,60,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategyTest.java,60,"assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f)));"
False,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,39,"ieldAttributes = new FieldAttributes(Foo.class.getField(""bar""));"
True,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,39,"fieldAttributes = new FieldAttributes(Foo.class, Foo.class.getField(""bar""));"
False,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,44,ew FieldAttributes(null);
True,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,44,"new FieldAttributes(Foo.class, null);"
False,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,46, catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,46,} catch (NullPointerException expected) { }
False,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,49,ssertTrue(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,49,"assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));"
False,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,59,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,59,"assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));"
False,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,37,ieldAttributes f = new FieldAttributes(String.class.getFields()[0]);
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,37,"FieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0]);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,19,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,22,* Unit test for the {@link LruCache} class.
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,24,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,25,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,27,public class LruCacheTest extends TestCase {
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,29,public void testCacheHitAndMiss() throws Exception {
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,30,"Cache<String, Integer> cache = new LruCache<String, Integer>(3);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,32,"String key = ""key1"";"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,33,assertNull(cache.getElement(key));
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,34,"cache.addElement(key, 1);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,35,"assertEquals(1, cache.getElement(key).intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,37,"String key2 = ""key2"";"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,38,"cache.addElement(key2, 2);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,39,"assertEquals(1, cache.getElement(key).intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,40,"assertEquals(2, cache.getElement(key2).intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,43,public void testCacheKeyOverwrite() throws Exception {
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,44,"Cache<String, Integer> cache = new LruCache<String, Integer>(3);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,46,"String key = ""key1"";"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,47,assertNull(cache.getElement(key));
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,48,"cache.addElement(key, 1);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,49,"assertEquals(1, cache.getElement(key).intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,51,"cache.addElement(key, 5);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,52,"assertEquals(5, cache.getElement(key).intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,55,public void testCacheEviction() throws Exception {
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,56,"Cache<String, Integer> cache = new LruCache<String, Integer>(3);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,58,"cache.addElement(""key1"", 1);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,59,"cache.addElement(""key2"", 2);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,60,"cache.addElement(""key3"", 3);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,61,"assertEquals(1, cache.getElement(""key1"").intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,62,"assertEquals(2, cache.getElement(""key2"").intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,63,"assertEquals(3, cache.getElement(""key3"").intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,65,// Access key1 to show key2 will be evicted (shows not a FIFO cache)
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,66,"cache.getElement(""key1"");"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,67,"cache.addElement(""key4"", 4);"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,68,"assertEquals(1, cache.getElement(""key1"").intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,69,"assertNull(cache.getElement(""key2""));"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,70,"assertEquals(3, cache.getElement(""key3"").intValue());"
True,gson/src/test/java/com/google/gson/LruCacheTest.java,gson/src/test/java/com/google/gson/LruCacheTest.java,71,"assertEquals(4, cache.getElement(""key4"").intValue());"
False,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,41,ew FieldAttributes(String.class.getFields()[0])));
True,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java,41,"new FieldAttributes(String.class, String.class.getFields()[0])));"
False,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,41,ieldAttributes f = new FieldAttributes(SomeObject.class.getField(fieldName));
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,41,FieldAttributes f = new FieldAttributes(
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,42,"SomeObject.class, SomeObject.class.getField(fieldName));"
False,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,49,ieldAttributes f = new FieldAttributes(SomeObject.class.getField(fieldName));
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,50,FieldAttributes f = new FieldAttributes(
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,51,"SomeObject.class, SomeObject.class.getField(fieldName));"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,46,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,46,"assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f)));"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,55,ssertFalse(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,55,"assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f)));"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,64,ssertTrue(strategy.shouldSkipField(new FieldAttributes(f)));
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,64,"assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz, f)));"

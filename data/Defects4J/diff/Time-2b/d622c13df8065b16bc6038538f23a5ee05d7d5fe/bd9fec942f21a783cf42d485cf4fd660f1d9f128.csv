is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,21,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1179,* Converts this period to a period in weeks assuming a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1180,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1181,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1182,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1183,* However to achieve this it makes the assumption that all
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1184,"* weeks are 7 days, all days are 24 hours, all hours are 60 minutes and"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1185,* all minutes are 60 seconds. This is not true when daylight savings time
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1186,"* is considered, and may also not be true for some unusual chronologies."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1187,"* However, it is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1188,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1189,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1190,"* If the period contains years or months, an exception will be thrown."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1192,* @return a period representing the number of standard weeks in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1193,* @throws IllegalStateException if the period contains years or months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1194,* @throws ArithmeticException if the number of weeks is too large to be represented
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1195,* @since 1.5
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1197,public Weeks toStandardWeeks() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1198,"checkYearsAndMonths(""Weeks"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1199,long millis = getMillis();  // assign to a long
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1200,millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1201,millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1202,millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1203,millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1204,long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1205,return Weeks.weeks(FieldUtils.safeToInt(weeks));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1209,* Converts this period to a period in days assuming a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1210,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1211,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1212,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1213,* However to achieve this it makes the assumption that all
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1214,"* weeks are 7 days, all days are 24 hours, all hours are 60 minutes and"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1215,* all minutes are 60 seconds. This is not true when daylight savings time
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1216,"* is considered, and may also not be true for some unusual chronologies."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1217,"* However, it is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1218,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1219,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1220,"* If the period contains years or months, an exception will be thrown."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1222,* @return a period representing the number of standard days in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1223,* @throws IllegalStateException if the period contains years or months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1224,* @throws ArithmeticException if the number of days is too large to be represented
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1225,* @since 1.5
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1227,public Days toStandardDays() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1228,"checkYearsAndMonths(""Days"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1229,long millis = getMillis();  // assign to a long
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1230,millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1231,millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1232,millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1233,long days = millis / DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1234,"days = FieldUtils.safeAdd(days, getDays());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1235,"days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1236,return Days.days(FieldUtils.safeToInt(days));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1240,* Converts this period to a period in hours assuming a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1241,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1242,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1243,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1244,* However to achieve this it makes the assumption that all
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1245,"* weeks are 7 days, all days are 24 hours, all hours are 60 minutes and"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1246,* all minutes are 60 seconds. This is not true when daylight savings time
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1247,"* is considered, and may also not be true for some unusual chronologies."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1248,"* However, it is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1249,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1250,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1251,"* If the period contains years or months, an exception will be thrown."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1253,* @return a period representing the number of standard hours in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1254,* @throws IllegalStateException if the period contains years or months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1255,* @throws ArithmeticException if the number of hours is too large to be represented
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1256,* @since 1.5
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1258,public Hours toStandardHours() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1259,"checkYearsAndMonths(""Hours"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1260,long millis = getMillis();  // assign to a long
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1261,millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1262,millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1263,long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1264,"hours = FieldUtils.safeAdd(hours, getHours());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1265,"hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1266,"hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1267,return Hours.hours(FieldUtils.safeToInt(hours));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1271,* Converts this period to a period in minutes assuming a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1272,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1273,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1274,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1275,* However to achieve this it makes the assumption that all
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1276,"* weeks are 7 days, all days are 24 hours, all hours are 60 minutes and"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1277,* all minutes are 60 seconds. This is not true when daylight savings time
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1278,"* is considered, and may also not be true for some unusual chronologies."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1279,"* However, it is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1280,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1281,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1282,"* If the period contains years or months, an exception will be thrown."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1284,* @return a period representing the number of standard minutes in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1285,* @throws IllegalStateException if the period contains years or months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1286,* @throws ArithmeticException if the number of minutes is too large to be represented
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1287,* @since 1.5
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1289,public Minutes toStandardMinutes() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1290,"checkYearsAndMonths(""Minutes"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1291,long millis = getMillis();  // assign to a long
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1292,millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1293,long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1294,"minutes = FieldUtils.safeAdd(minutes, getMinutes());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1295,"minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1296,"minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1297,"minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1298,return Minutes.minutes(FieldUtils.safeToInt(minutes));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1302,* Converts this period to a period in seconds assuming a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1303,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1304,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1305,* This method allows you to convert between different types of period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1306,* However to achieve this it makes the assumption that all
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1307,"* weeks are 7 days, all days are 24 hours, all hours are 60 minutes and"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1308,* all minutes are 60 seconds. This is not true when daylight savings time
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1309,"* is considered, and may also not be true for some unusual chronologies."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1310,"* However, it is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1311,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1312,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1313,"* If the period contains years or months, an exception will be thrown."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1315,* @return a period representing the number of standard seconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1316,* @throws IllegalStateException if the period contains years or months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1317,* @throws ArithmeticException if the number of seconds is too large to be represented
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1318,* @since 1.5
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1320,public Seconds toStandardSeconds() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1321,"checkYearsAndMonths(""Seconds"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1322,long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1323,"seconds = FieldUtils.safeAdd(seconds, getSeconds());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1324,"seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1325,"seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1326,"seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1327,"seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1328,return Seconds.seconds(FieldUtils.safeToInt(seconds));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1333,* Converts this period to a duration assuming a
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1334,"* 7 day week, 24 hour day, 60 minute hour and 60 second minute."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1335,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1336,* This method allows you to convert from a period to a duration.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1337,* However to achieve this it makes the assumption that all
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1338,"* weeks are 7 days, all days are 24 hours, all hours are 60 minutes and"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1339,* all minutes are 60 seconds. This is not true when daylight savings time
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1340,"* is considered, and may also not be true for some unusual chronologies."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1341,"* However, it is included as it is a useful operation for many"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1342,* applications and business rules.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1343,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1344,"* If the period contains years or months, an exception will be thrown."
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1346,* @return a duration equivalent to this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1347,* @throws IllegalStateException if the period contains years or months
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1348,* @since 1.5
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1350,public Duration toStandardDuration() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1351,"checkYearsAndMonths(""Duration"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1352,"long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1353,millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1354,millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1355,millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1356,millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1357,millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1358,return new Duration(millis);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1362,* Check that there are no years or months in the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1364,"* @param destintionType  the destination type, not null"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1366,private void checkYearsAndMonths(String destintionType) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1367,if (getMonths() != 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1368,"throw new IllegalStateException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1370,if (getYears() != 0) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,1371,"throw new IllegalStateException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,22,import java.math.BigInteger;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,42,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,43,"//private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,791,public void testToStandardWeeks() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,792,"Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,793,"assertEquals(3, test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,795,"test = new Period(0, 0, 3, 7, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,796,"assertEquals(4, test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,798,"test = new Period(0, 0, 0, 6, 23, 59, 59, 1000);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,799,"assertEquals(1, test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,801,"test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,802,"assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,804,"test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,805,long intMax = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,806,BigInteger expected = BigInteger.valueOf(intMax);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,807,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,808,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,809,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,810,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,811,expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,812,assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,813,"assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,815,"test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,816,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,817,test.toStandardWeeks();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,818,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,819,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,822,public void testToStandardWeeks_years() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,823,Period test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,824,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,825,test.toStandardWeeks();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,826,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,827,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,829,test = Period.years(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,830,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,831,test.toStandardWeeks();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,832,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,833,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,835,test = Period.years(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,836,"assertEquals(0, test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,839,public void testToStandardWeeks_months() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,840,Period test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,841,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,842,test.toStandardWeeks();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,843,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,844,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,846,test = Period.months(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,847,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,848,test.toStandardWeeks();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,849,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,850,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,852,test = Period.months(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,853,"assertEquals(0, test.toStandardWeeks().getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,857,public void testToStandardDays() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,858,"Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,859,"assertEquals(4, test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,861,"test = new Period(0, 0, 1, 4, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,862,"assertEquals(11, test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,864,"test = new Period(0, 0, 0, 0, 23, 59, 59, 1000);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,865,"assertEquals(1, test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,867,"test = new Period(0, 0, 0, Integer.MAX_VALUE, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,868,"assertEquals(Integer.MAX_VALUE, test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,870,"test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,871,long intMax = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,872,BigInteger expected = BigInteger.valueOf(intMax);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,873,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,874,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,875,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,876,expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,877,assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,878,"assertEquals(expected.longValue(), test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,880,"test = new Period(0, 0, 0, Integer.MAX_VALUE, 24, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,881,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,882,test.toStandardDays();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,883,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,884,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,887,public void testToStandardDays_years() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,888,Period test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,889,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,890,test.toStandardDays();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,891,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,892,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,894,test = Period.years(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,895,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,896,test.toStandardDays();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,897,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,898,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,900,test = Period.years(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,901,"assertEquals(0, test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,904,public void testToStandardDays_months() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,905,Period test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,906,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,907,test.toStandardDays();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,908,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,909,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,911,test = Period.months(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,912,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,913,test.toStandardDays();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,914,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,915,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,917,test = Period.months(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,918,"assertEquals(0, test.toStandardDays().getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,922,public void testToStandardHours() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,923,"Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,924,"assertEquals(5, test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,926,"test = new Period(0, 0, 0, 1, 5, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,927,"assertEquals(29, test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,929,"test = new Period(0, 0, 0, 0, 0, 59, 59, 1000);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,930,"assertEquals(1, test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,932,"test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,933,"assertEquals(Integer.MAX_VALUE, test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,935,"test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,936,long intMax = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,937,BigInteger expected = BigInteger.valueOf(intMax);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,938,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,939,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,940,expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,941,assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,942,"assertEquals(expected.longValue(), test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,944,"test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 60, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,945,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,946,test.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,947,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,948,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,951,public void testToStandardHours_years() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,952,Period test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,953,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,954,test.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,955,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,956,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,958,test = Period.years(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,959,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,960,test.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,961,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,962,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,964,test = Period.years(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,965,"assertEquals(0, test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,968,public void testToStandardHours_months() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,969,Period test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,970,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,971,test.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,972,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,973,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,975,test = Period.months(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,976,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,977,test.toStandardHours();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,978,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,979,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,981,test = Period.months(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,982,"assertEquals(0, test.toStandardHours().getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,986,public void testToStandardMinutes() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,987,"Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,988,"assertEquals(6, test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,990,"test = new Period(0, 0, 0, 0, 1, 6, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,991,"assertEquals(66, test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,993,"test = new Period(0, 0, 0, 0, 0, 0, 59, 1000);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,994,"assertEquals(1, test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,996,"test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,997,"assertEquals(Integer.MAX_VALUE, test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,999,"test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1000,long intMax = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1001,BigInteger expected = BigInteger.valueOf(intMax);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1002,expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1003,expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1004,assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1005,"assertEquals(expected.longValue(), test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1007,"test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 60, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1008,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1009,test.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1010,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1011,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1014,public void testToStandardMinutes_years() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1015,Period test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1016,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1017,test.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1018,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1019,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1021,test = Period.years(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1022,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1023,test.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1024,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1025,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1027,test = Period.years(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1028,"assertEquals(0, test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1031,public void testToStandardMinutes_months() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1032,Period test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1033,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1034,test.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1035,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1036,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1038,test = Period.months(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1039,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1040,test.toStandardMinutes();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1041,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1042,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1044,test = Period.months(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1045,"assertEquals(0, test.toStandardMinutes().getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1049,public void testToStandardSeconds() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1050,"Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1051,"assertEquals(7, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1053,"test = new Period(0, 0, 0, 0, 0, 1, 3, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1054,"assertEquals(63, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1056,"test = new Period(0, 0, 0, 0, 0, 0, 0, 1000);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1057,"assertEquals(1, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1059,"test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1060,"assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1062,"test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1063,long expected = 20;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1064,expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1065,"assertEquals(expected, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1067,"test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1068,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1069,test.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1070,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1071,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1074,public void testToStandardSeconds_years() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1075,Period test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1076,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1077,test.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1078,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1079,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1081,test = Period.years(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1082,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1083,test.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1084,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1085,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1087,test = Period.years(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1088,"assertEquals(0, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1091,public void testToStandardSeconds_months() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1092,Period test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1093,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1094,test.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1095,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1096,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1098,test = Period.months(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1099,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1100,test.toStandardSeconds();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1101,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1102,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1104,test = Period.months(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1105,"assertEquals(0, test.toStandardSeconds().getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1109,public void testToStandardDuration() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1110,"Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1111,"assertEquals(8, test.toStandardDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1113,"test = new Period(0, 0, 0, 0, 0, 0, 1, 20);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1114,"assertEquals(1020, test.toStandardDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1116,"test = new Period(0, 0, 0, 0, 0, 0, 0, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1117,"assertEquals(Integer.MAX_VALUE, test.toStandardDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1119,"test = new Period(0, 0, 0, 0, 0, 10, 20, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1120,long expected = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1121,expected += 10L * ((long) DateTimeConstants.MILLIS_PER_MINUTE);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1122,expected += 20L * ((long) DateTimeConstants.MILLIS_PER_SECOND);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1123,"assertEquals(expected, test.toStandardDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1125,// proof that overflow does not occur
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1126,BigInteger intMax = BigInteger.valueOf(Integer.MAX_VALUE);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1127,BigInteger exp = intMax;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1128,exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_SECOND)));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1129,exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE)));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1130,exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR)));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1131,exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY)));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1132,exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)));
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1133,assertTrue(exp.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1134,"//        test = new Period(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1135,//        try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1136,//            test.toStandardDuration();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1137,//            fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1138,//        } catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1141,public void testToStandardDuration_years() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1142,Period test = Period.years(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1143,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1144,test.toStandardDuration();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1145,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1146,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1148,test = Period.years(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1149,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1150,test.toStandardDuration();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1151,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1152,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1154,test = Period.years(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1155,"assertEquals(0, test.toStandardDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1158,public void testToStandardDuration_months() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1159,Period test = Period.months(1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1160,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1161,test.toStandardDuration();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1162,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1163,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1165,test = Period.months(-1);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1166,try {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1167,test.toStandardDuration();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1168,fail();
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1169,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1171,test = Period.months(0);
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,1172,"assertEquals(0, test.toStandardDuration().getMillis());"

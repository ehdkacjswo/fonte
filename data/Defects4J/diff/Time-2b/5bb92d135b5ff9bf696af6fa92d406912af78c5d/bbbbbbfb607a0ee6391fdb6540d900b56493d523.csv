is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1033,ong instantLocal = oldInstant + getOffset(oldInstant);
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1034,eturn instantLocal - newZone.getOffsetFromLocal(instantLocal);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1033,long instantLocal = convertUTCToLocal(oldInstant);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,1034,"return newZone.convertLocalToUTC(instantLocal, false, oldInstant);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1220,public void testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1221,"final DateTimeZone fromDTZ = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1222,"final DateTimeZone toDTZ = DateTimeZone.forID(""Europe/Lisbon"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1223,"DateTime baseBefore = new DateTime(2007, 10, 28, 1, 15, fromDTZ).minusHours(1);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1224,"DateTime baseAfter = new DateTime(2007, 10, 28, 1, 15, fromDTZ);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1225,DateTime testBefore = baseBefore.withZoneRetainFields(toDTZ);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1226,DateTime testAfter = baseAfter.withZoneRetainFields(toDTZ);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1227,// toString ignores time-zone but includes offset
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1228,"assertEquals(baseBefore.toString(), testBefore.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1229,"assertEquals(baseAfter.toString(), testAfter.toString());"

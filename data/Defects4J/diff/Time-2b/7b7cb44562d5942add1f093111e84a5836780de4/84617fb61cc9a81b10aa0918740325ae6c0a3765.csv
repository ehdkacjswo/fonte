is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,56,/ These arrays are NOT public. We trust ourselves not to alter the array.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,57,/ They use zero-based array indexes so the that valid range of months is
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,58,/ automatically checked.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,60,rivate static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,61,"1,28,31,30,31,30,31,31,30,31,30,31"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,64,rivate static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,65,"1,29,31,30,31,30,31,31,30,31,30,31"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,68,rivate static final long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,69,rivate static final long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,92,IN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,93,AX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,95,ong minSum = 0;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,96,ong maxSum = 0;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,97,or (int i=0; i<12; i++) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,98,ong millis = MIN_DAYS_PER_MONTH_ARRAY[i]
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,99, (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,100,inSum += millis;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,101,IN_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = minSum;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,103,illis = MAX_DAYS_PER_MONTH_ARRAY[i]
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,104, (long)DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,105,axSum += millis;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,106,AX_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = maxSum;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,205,"ublic final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,206,nt millisOfDay)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,207,hrows IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,173,public long getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,174,"int year, int monthOfYear, int dayOfMonth, int millisOfDay)"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,175,throws IllegalArgumentException {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,219,"ublic final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,220,"nt hourOfDay, int minuteOfHour,"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,221,"nt secondOfMinute, int millisOfSecond)"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,222,hrows IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,186,public long getDateTimeMillis(
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,187,"int year, int monthOfYear, int dayOfMonth,"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,188,"int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,189,throws IllegalArgumentException {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,242,ublic final int getMinimumDaysInFirstWeek() {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,208,public int getMinimumDaysInFirstWeek() {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,301,ields.year = new GJYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,267,fields.year = new BasicYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,317,"ields.dayOfMonth = new GJDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,283,"fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,342,inal int getDaysInYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,308,int getDaysInYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,346,"inal int getDaysInYearMonth(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,347,f (isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,348,eturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,349, else {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,350,eturn MIN_DAYS_PER_MONTH_ARRAY[month - 1];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,355, Gets the maximum days in the specified month.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,357, @param month  the month
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,358, @return the max days
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,360,inal int getDaysInMonthMax(int month) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,361,eturn MAX_DAYS_PER_MONTH_ARRAY[month - 1];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,365," Returns the total number of milliseconds elapsed in the year, by the end"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,366, of the month.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,368,"inal long getTotalMillisByYearMonth(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,369,f (isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,370,eturn MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,371, else {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,372,eturn MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,381,inal int getWeeksInYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,317,int getWeeksInYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,392,inal long getFirstWeekOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,328,long getFirstWeekOfYearMillis(int year) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,413,inal long getYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,349,long getYearMillis(int year) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,415,/return calculateFirstDayOfYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,425,"inal long getYearMonthMillis(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,360,"long getYearMonthMillis(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,442,"inal long getYearMonthDayMillis(int year, int month, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,377,"long getYearMonthDayMillis(int year, int month, int dayOfMonth) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,455,inal int getYear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,390,int getYear(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,509,rivate final int getYearOverflow(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,444,private int getYearOverflow(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,539, @param instant millis from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,541,"inal long setYear(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,542,nt thisYear = getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,543,"nt dayOfYear = getDayOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,544,nt millisOfDay = getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,546,f (dayOfYear > (31 + 28)) { // after Feb 28
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,547,f (isLeapYear(thisYear)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,548,/ Current date is Feb 29 or later.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,549,f (!isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,550,"/ Moving to a non-leap year, Feb 29 does not exist."
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,551,ayOfYear--;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,553, else {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,554,/ Current date is Mar 01 or later.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,555,f (isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,556,"/ Moving to a leap year, account for Feb 29."
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,557,ayOfYear++;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,562,"nstant = getYearMonthDayMillis(year, 1, dayOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,563,nstant += millisOfDay;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,565,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,571,inal int getMonthOfYear(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,476,int getMonthOfYear(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,579,"inal int getMonthOfYear(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,580,"/ Perform a binary search to get the month. To make it go even faster,"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,581,/ compare using ints instead of longs. The number of milliseconds per
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,582,"/ year exceeds the limit of a 32-bit int's capacity, so divide by"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,583,/ 1024. No precision is lost (except time of day) since the number of
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,584,"/ milliseconds per day contains 1024 as a factor. After the division,"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,585,"/ the instant isn't measured in milliseconds, but in units of"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,586,/ (128/125)seconds.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,588,nt i = (int)((millis - getYearMillis(year)) >> 10);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,590,"/ There are 86400000 milliseconds per day, but divided by 1024 is"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,591,/ 84375. There are 84375 (128/125)seconds per day.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,593,eturn
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,594,isLeapYear(year))
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,595, ((i < 182 * 84375)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,596, ((i < 91 * 84375)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,597, ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,598, ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,599, ((i < 274 * 84375)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,600, ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,601, ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,602, ((i < 181 * 84375)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,603, ((i < 90 * 84375)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,604, ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,605, ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,606, ((i < 273 * 84375)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,607, ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,608, ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,484,"abstract int getMonthOfYear(long millis, int year);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,614,inal int getDayOfMonth(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,489,int getDayOfMonth(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,624,"inal int getDayOfMonth(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,499,"int getDayOfMonth(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,634,"inal int getDayOfMonth(long millis, int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,509,"int getDayOfMonth(long millis, int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,645,inal int getDayOfYear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,520,int getDayOfYear(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,653,"inal int getDayOfYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,528,"int getDayOfYear(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,661,inal int getWeekyear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,536,int getWeekyear(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,676,inal int getWeekOfWeekyear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,551,int getWeekOfWeekyear(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,684,"inal int getWeekOfWeekyear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,559,"int getWeekOfWeekyear(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,699,inal int getDayOfWeek(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,574,int getDayOfWeek(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,719,inal int getMillisOfDay(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,594,int getMillisOfDay(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,728,"ong getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,729,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,731,"ieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,732,"ieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,604,* Gets the maximum number of days in any month.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,606,* @return 31
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,608,int getDaysInMonthMax() {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,609,return 31;
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,613,* Gets the maximum number of days in the month specified by the instant.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,615,* @param instant  millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,616,* @return the maximum number of days in the month
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,618,int getDaysInMonthMax(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,619,int thisYear = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,620,"int thisMonth = getMonthOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,621,"return getDaysInYearMonth(thisYear, thisMonth);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,734,oolean isLeap = isLeapYear(year);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,625,* Gets the maximum number of days in the month specified by the instant.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,626,"* The value represents what the user is trying to set, and can be"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,627,* used to optimise this method.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,629,* @param instant  millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,630,* @param value  the value being set
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,631,* @return the maximum number of days in the month
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,633,"int getDaysInMonthMaxForSet(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,634,return getDaysInMonthMax(instant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,736,"ieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1,"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,737,isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,738,monthOfYear - 1]);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,639,* Gets the milliseconds for a date at midnight.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,641,* @param year  the year
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,642,* @param monthOfYear  the month
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,643,* @param dayOfMonth  the day
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,644,* @return the milliseconds
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,646,"abstract long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,740,ong instant = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,649,* Gets the difference between the two instants in years.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,651,* @param minuendInstant  the first instant
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,652,* @param subtrahendInstant  the second instant
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,653,* @return the difference
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,655,"abstract long getYearDifference(long minuendInstant, long subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,742,f (monthOfYear > 1) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,743,nstant +=
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,744,isLeap ? MAX_TOTAL_MILLIS_BY_MONTH_ARRAY : MIN_TOTAL_MILLIS_BY_MONTH_ARRAY)
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,745,monthOfYear - 2];
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,658,* Is the specified year a leap year?
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,660,* @param year  the year to test
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,661,* @return true if leap
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,663,abstract boolean isLeapYear(int year);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,748,f (dayOfMonth != 1) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,749,nstant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,666,* Gets the number of days in the specified month and year.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,668,* @param year  the year
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,669,* @param month  the month
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,670,* @return the number of days
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,672,"abstract int getDaysInYearMonth(int year, int month);"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,752,eturn instant;
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,675,* Gets the maximum days in the specified month.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,677,* @param month  the month
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,678,* @return the max days
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,680,abstract int getDaysInMonthMax(int month);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,755,bstract boolean isLeapYear(int year);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,683,* Gets the total number of millis elapsed in this year at the end
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,684,* of the specified month.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,686,* @param year  the year
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,687,* @param month  the month
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,688,* @return the elapsed millis
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,690,"abstract long getTotalMillisByYearMonth(int year, int month);"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,714,* Sets the year from an instant and year.
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,716,* @param instant  millis from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,717,* @param year  the year to set
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,718,* @return the updated millis
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,720,"abstract long setYear(long instant, int year);"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,31,inal class GJDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,31,final class BasicDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,40,"JDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,40,"BasicDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,46, Get the day of the month component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,48, @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,49, @return the day of the month extracted from the input.
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,64,eturn 31;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,59,return iChronology.getDaysInMonthMax();
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,68,nt thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,69,"nt thisMonth = iChronology.getMonthOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,70,"eturn iChronology.getDaysInYearMonth(thisYear, thisMonth);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,63,return iChronology.getDaysInMonthMax(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,82,eturn 31;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,75,return getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,99,eturn 31;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,92,return getMaximumValue();
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,103,eturn value > 28 ? getMaximumValue(instant) : 28;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,96,"return iChronology.getDaysInMonthMaxForSet(instant, value);"
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,24,* A year field suitable for many calendars.
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,26,* @author Guy Allard
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,27,* @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,28,inal class CopticYearDateTimeField extends ImpreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,31,class BasicYearDateTimeField extends ImpreciseDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,30,rivate static final long serialVersionUID = 8990199361773280783L;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,33,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,34,private static final long serialVersionUID = -98628754872287L;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,32,rivate final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,36,/** The underlying basic chronology. */
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,37,protected final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,35, Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,40,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,42,* @param chronology  the chronology this field belogs to
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,37,opticYearDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,44,BasicYearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,54,"eturn set(instant, get(instant) + years);"
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,61,int thisYear = get(instant);
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,62,"int newYear = FieldUtils.safeAdd(thisYear, years);"
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,63,"return set(instant, newYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,72,"ublic long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,73,f (minuendInstant < subtrahendInstant) {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,74,"eturn -getDifference(subtrahendInstant, minuendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,77,nt minuendYear = get(minuendInstant);
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,78,nt subtrahendYear = get(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,80,/ Inlined remainder method to avoid duplicate calls to get.
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,81,ong minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,82,ong subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,84,nt difference = minuendYear - subtrahendYear;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,85,f (minuendRem < subtrahendRem) {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,86,ifference--;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,88,eturn difference;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,84,"return iChronology.setYear(instant, year);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,95,aseGJChronology chrono = iChronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,97,nt thisYear = chrono.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,98,"nt dayOfYear = chrono.getDayOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,99,nt millisOfDay = chrono.getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,101,f (dayOfYear > 365) {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,102,"/ Current year is leap, and day is leap."
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,103,f (!chrono.isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,104,"/ Moving to a non-leap year, leap day doesn't exist."
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,105,ayOfYear--;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,87,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,88,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,89,"return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,109,"nstant = chrono.getYearMonthDayMillis(year, 1, dayOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,110,nstant += millisOfDay;
False,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,112,eturn instant;
True,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,91,"return iChronology.getYearDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,18,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,19,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,20,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,21,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,24,* Abstract Chronology for implementing chronologies based on Gregorian/Julian formulae.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,25,"* Most of the utility methods required by subclasses are package-private,"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,26,* reflecting the intention that they be defined in the same package.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,27,* <p>
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,28,"* CommonGJChronology is thread-safe and immutable, and all subclasses must"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,29,* be as well.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,31,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,32,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,33,* @author Guy Allard
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,34,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,36,public abstract class CommonGJChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,38,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,39,private static final long serialVersionUID = 538276888268L;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,41,// These arrays are NOT public. We trust ourselves not to alter the array.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,42,// They use zero-based array indexes so the that valid range of months is
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,43,// automatically checked.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,44,private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,45,"31,28,31,30,31,30,31,31,30,31,30,31"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,47,private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,48,"31,29,31,30,31,30,31,31,30,31,30,31"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,50,private static final long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,51,private static final long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,52,private static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,54,static {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,55,MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,56,MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,58,long minSum = 0;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,59,long maxSum = 0;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,60,for (int i=0; i<12; i++) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,61,long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,62,* (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,63,minSum += millis;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,64,MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = minSum;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,66,millis = MAX_DAYS_PER_MONTH_ARRAY[i]
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,67,* (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,68,maxSum += millis;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,69,MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = maxSum;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,74,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,76,"CommonGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,77,"super(base, param, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,81,"int getMonthOfYear(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,82,"// Perform a binary search to get the month. To make it go even faster,"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,83,// compare using ints instead of longs. The number of milliseconds per
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,84,"// year exceeds the limit of a 32-bit int's capacity, so divide by"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,85,// 1024. No precision is lost (except time of day) since the number of
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,86,"// milliseconds per day contains 1024 as a factor. After the division,"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,87,"// the instant isn't measured in milliseconds, but in units of"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,88,// (128/125)seconds.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,90,int i = (int)((millis - getYearMillis(year)) >> 10);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,92,"// There are 86400000 milliseconds per day, but divided by 1024 is"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,93,// 84375. There are 84375 (128/125)seconds per day.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,95,return
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,96,(isLeapYear(year))
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,97,? ((i < 182 * 84375)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,98,? ((i < 91 * 84375)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,99,? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,100,: ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,101,: ((i < 274 * 84375)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,102,? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,103,: ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,104,: ((i < 181 * 84375)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,105,? ((i < 90 * 84375)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,106,? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,107,: ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,108,: ((i < 273 * 84375)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,109,? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,110,: ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,115,* Gets the number of days in the specified month and year.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,117,* @param year  the year
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,118,* @param month  the month
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,119,* @return the number of days
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,121,"int getDaysInYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,122,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,123,return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,124,} else {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,125,return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,130,int getDaysInMonthMax(int month) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,131,return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,135,"int getDaysInMonthMaxForSet(long instant, int value) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,136,return (value > 28 ? getDaysInMonthMax(instant) : 28);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,140,"long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,141,"FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,142,"FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,143,"FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,144,"return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,148,"long getTotalMillisByYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,149,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,150,return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,151,} else {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,152,return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,157,"long getYearDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,158,int minuendYear = getYear(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,159,int subtrahendYear = getYear(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,161,// Inlined remainder method to avoid duplicate calls to get.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,162,long minuendRem = minuendInstant - getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,163,long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,165,// Balance leap year differences on remainders.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,166,if (subtrahendRem >= FEB_29) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,167,if (isLeapYear(subtrahendYear)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,168,if (!isLeapYear(minuendYear)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,169,subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,171,} else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,172,minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,176,int difference = minuendYear - subtrahendYear;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,177,if (minuendRem < subtrahendRem) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,178,difference--;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,180,return difference;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,184,"long setYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,185,int thisYear = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,186,"int dayOfYear = getDayOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,187,int millisOfDay = getMillisOfDay(instant);
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,189,if (dayOfYear > (31 + 28)) { // after Feb 28
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,190,if (isLeapYear(thisYear)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,191,// Current date is Feb 29 or later.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,192,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,193,"// Moving to a non-leap year, Feb 29 does not exist."
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,194,dayOfYear--;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,196,} else {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,197,// Current date is Mar 01 or later.
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,198,if (isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,199,"// Moving to a leap year, account for Feb 29."
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,200,dayOfYear++;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,205,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,206,instant += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java,208,return instant;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,204,"ong getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,205,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,207,"ieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,208,"ieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,210,nt dayLimit = (monthOfYear != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,211,"ieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, dayLimit);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,205,"long setYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,206,"// optimsed implementation of set, due to 30 day months"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,207,int thisYear = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,208,"int dayOfYear = getDayOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,209,int millisOfDay = getMillisOfDay(instant);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,211,if (dayOfYear > 365) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,212,"// Current year is leap, and day is leap."
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,213,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,214,"// Moving to a non-leap year, leap day doesn't exist."
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,215,dayOfYear--;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,213,ong instant = getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,219,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,220,instant += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,221,return instant;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,215,f (monthOfYear > 1) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,216,nstant += (monthOfYear - 1) * 30L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,225,"long getYearDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,226,"// optimsed implementation of getDifference, due to 30 day months"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,227,int minuendYear = getYear(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,228,int subtrahendYear = getYear(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,230,// Inlined remainder method to avoid duplicate calls to get.
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,231,long minuendRem = minuendInstant - getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,232,long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,234,int difference = minuendYear - subtrahendYear;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,235,if (minuendRem < subtrahendRem) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,236,difference--;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,238,return difference;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,219,f (dayOfMonth != 1) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,220,nstant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,242,"long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,243,"FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,244,"FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,245,"FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,246,"return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,223,eturn instant;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,250,"long getTotalMillisByYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,251,return (month * 30L * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,255,int getDayOfMonth(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,256,// optimised for 30 day months
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,257,return (getDayOfYear(millis) - 1) % 30 + 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,266,"int getDaysInYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,267,return (month != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,271,int getDaysInMonthMax() {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,272,return 30;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,276,int getDaysInMonthMax(int month) {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,277,return (month != 13 ? 30 : 6);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,281,"int getMonthOfYear(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,282,return ((int) ((millis - getYearMillis(year)) / 30)) + 1;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,283,ields.year = new CopticYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,345,fields.year = new BasicYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,293,"ields.dayOfMonth = new CopticDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,355,"fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,2,  Copyright 2001-2005 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,6,  You may obtain a copy of the License at
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,14,  limitations under the License.
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,16,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,18,mport org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,19,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,20,mport org.joda.time.ReadablePartial;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,21,mport org.joda.time.field.PreciseDurationDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,24, Provides time calculations for the day of the month component of time.
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,26, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,27, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,29,inal class CopticDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,31,rivate static final long serialVersionUID = -5441610762799659434L;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,33,rivate final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,36, Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,38,"opticDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,39,"uper(DateTimeFieldType.dayOfMonth(), days);"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,40,Chronology = chronology;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,43,ublic int get(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,44,eturn (iChronology.getDayOfYear(instant) - 1) % 30 + 1;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,47,ublic DurationField getRangeDurationField() {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,48,eturn iChronology.months();
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,51,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,52,eturn 1;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,55,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,56,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,59,ublic int getMaximumValue(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,60,f (((iChronology.getDayOfYear(instant) - 1) / 30) < 12) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,61,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,63,eturn iChronology.isLeapYear(iChronology.getYear(instant)) ? 6 : 5;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,66,ublic int getMaximumValue(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,67,f (partial.isSupported(DateTimeFieldType.monthOfYear())) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,68,/ find month
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,69,nt month = partial.get(DateTimeFieldType.monthOfYear());
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,70,f (month <= 12) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,71,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,73,"/ 13th month, so check year"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,74,f (partial.isSupported(DateTimeFieldType.year())) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,75,nt year = partial.get(DateTimeFieldType.year());
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,76,eturn iChronology.isLeapYear(year) ? 6 : 5;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,78,eturn 6;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,80,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,83,"ublic int getMaximumValue(ReadablePartial partial, int[] values) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,84,nt size = partial.size();
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,85,or (int i = 0; i < size; i++) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,86,/ find month
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,87,f (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,88,nt month = values[i];
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,89,f (month <= 12) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,90,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,92,"/ 13th month, so check year"
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,93,or (int j = 0; j < size; j++) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,94,f (partial.getFieldType(j) == DateTimeFieldType.year()) {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,95,nt year = values[j];
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,96,eturn iChronology.isLeapYear(year) ? 6 : 5;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,99,eturn 6;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,102,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,106, Serialization singleton
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,108,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,109,eturn iChronology.dayOfMonth();
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,2,  Copyright 2001-2005 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,4,"  Licensed under the Apache License, Version 2.0 (the ""License"");"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,5,  you may not use this file except in compliance with the License.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,6,  You may obtain a copy of the License at
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,10,"  Unless required by applicable law or agreed to in writing, software"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,11,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,12,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,13,  See the License for the specific language governing permissions and
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,14,  limitations under the License.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,16,ackage org.joda.time.chrono;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,18,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,19,mport org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,20,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,21,mport org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,22,mport org.joda.time.field.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,25, Provides time calculations for the year component of time.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,27, @author Guy Allard
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,28, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,29, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,30, @since 1.0
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,32,inal class GJYearDateTimeField extends ImpreciseDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,34,rivate static final long serialVersionUID = -679076949530018869L;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,36,rivate static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,38,rivate final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,41, Restricted constructor
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,43,JYearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,44,"uper(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,45,Chronology = chronology;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,48,ublic boolean isLenient() {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,49,eturn false;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,53, Get the Year component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,55, @param instant  the time instant in millis to query.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,56, @return the year extracted from the input.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,58,ublic int get(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,59,eturn iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,63, Add the specified year to the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,64, The amount added may be negative.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,66, @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,67, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,68, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,70,"ublic long add(long instant, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,71,f (years == 0) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,72,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,74,nt thisYear = get(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,75,nt newYear = thisYear + years;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,76,"eturn set(instant, newYear);"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,79,"ublic long add(long instant, long years) {"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,80,"eturn add(instant, FieldUtils.safeToInt(years));"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,84, Add to the Year component of the specified time instant
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,85, wrapping around within that component if necessary.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,87, @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,88, @param years  the years to add (can be negative).
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,89, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,91,"ublic long addWrapField(long instant, int years) {"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,92,f (years == 0) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,93,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,95,/ Return newly calculated millis value
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,96,nt thisYear = iChronology.getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,97,nt wrappedYear = FieldUtils.getWrappedValue
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,98,"thisYear, years, iChronology.getMinYear(), iChronology.getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,99,"eturn set(instant, wrappedYear);"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,102,"ublic long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,103,f (minuendInstant < subtrahendInstant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,104,"eturn -getDifference(subtrahendInstant, minuendInstant);"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,107,nt minuendYear = get(minuendInstant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,108,nt subtrahendYear = get(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,110,/ Inlined remainder method to avoid duplicate calls to get.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,111,ong minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,112,ong subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,114,/ Balance leap year differences on remainders.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,115,f (subtrahendRem >= FEB_29) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,116,f (iChronology.isLeapYear(subtrahendYear)) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,117,f (!iChronology.isLeapYear(minuendYear)) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,118,ubtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,120, else if (minuendRem >= FEB_29 && iChronology.isLeapYear(minuendYear)) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,121,inuendRem -= DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,125,nt difference = minuendYear - subtrahendYear;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,126,f (minuendRem < subtrahendRem) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,127,ifference--;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,129,eturn difference;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,133, Set the Year component of the specified time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,135, @param instant  the time instant in millis to update.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,136," @param year  the year (-292269055,292278994) to update the time to."
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,137, @return the updated time instant.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,138, @throws IllegalArgumentException  if year is invalid.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,140,"ublic long set(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,141,ieldUtils.verifyValueBounds
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,142,"this, year, iChronology.getMinYear(), iChronology.getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,143,"eturn iChronology.setYear(instant, year);"
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,146,ublic DurationField getRangeDurationField() {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,147,eturn null;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,150,ublic boolean isLeap(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,151,eturn iChronology.isLeapYear(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,154,ublic int getLeapAmount(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,155,f (iChronology.isLeapYear(get(instant))) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,156,eturn 1;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,157, else {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,158,eturn 0;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,162,ublic DurationField getLeapDurationField() {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,163,eturn iChronology.days();
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,166,ublic int getMinimumValue() {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,167,eturn iChronology.getMinYear();
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,170,ublic int getMaximumValue() {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,171,eturn iChronology.getMaxYear();
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,174,ublic long roundFloor(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,175,eturn iChronology.getYearMillis(get(instant));
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,178,ublic long roundCeiling(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,179,nt year = get(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,180,ong yearStartMillis = iChronology.getYearMillis(year);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,181,f (instant != yearStartMillis) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,182,/ Bump up to start of next year.
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,183,nstant = iChronology.getYearMillis(year + 1);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,185,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,188,ublic long remainder(long instant) {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,189,eturn instant - roundFloor(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,193, Serialization singleton
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,195,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,196,eturn iChronology.year();
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,45,ublic final class GregorianChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,45,public final class GregorianChronology extends CommonGJChronology {
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,50,ublic final class JulianChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,50,public final class JulianChronology extends CommonGJChronology {

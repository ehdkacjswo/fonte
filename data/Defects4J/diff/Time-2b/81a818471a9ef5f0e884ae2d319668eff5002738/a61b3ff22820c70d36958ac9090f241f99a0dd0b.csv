is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,281,fields.centuries = fields.centuryOfEra.getDurationField();
False,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,296,"ields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);"
True,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,297,"fields.weekyear, fields.centuries, DateTimeFieldType.weekyearOfCentury(), 100);"
False,src/main/java/org/joda/time/chrono/BasicChronology.java,src/main/java/org/joda/time/chrono/BasicChronology.java,304,ields.centuries = fields.centuryOfEra.getDurationField();
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,27,import org.joda.time.DurationFieldType;
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,33,import org.joda.time.field.UnsupportedDurationField;
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,218,// force init as used below
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,219,fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,224,"ields.year, DateTimeFieldType.yearOfEra());"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,229,"fields.year, fields.eras, DateTimeFieldType.yearOfEra());"
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,233,"ield, DateTimeFieldType.centuryOfEra(), 100);"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,238,"field, fields.eras, DateTimeFieldType.centuryOfEra(), 100);"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,239,fields.centuries = fields.centuryOfEra.getDurationField();
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,241,"ields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,247,"fields.weekyear, fields.centuries, DateTimeFieldType.weekyearOfCentury(), 100);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,533,/ DayOfYear and weekOfWeekyear require special handling since cutover
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,534,/ year has fewer days and weeks. Extend the cutover to the start of
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,535,/ the next year or weekyear. This keeps the sequence unbroken during
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,536,/ the cutover year.
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,539,ong cutover = gregorian.year().roundCeiling(iCutoverMillis);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,540,ields.dayOfYear = new CutoverField(
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,541,"ulian.dayOfYear(), fields.dayOfYear, cutover);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,545,ong cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,546,ields.weekOfWeekyear = new CutoverField(
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,547,"ulian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,559,ields.yearOfCentury = new ImpreciseCutoverField(
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,560,"ulian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,547,fields.yearOfCentury = new ImpreciseCutoverField(
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,548,"julian.yearOfCentury(), fields.yearOfCentury, fields.years, fields.centuries, iCutoverMillis);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,567,"ulian.monthOfYear(), fields.monthOfYear, iCutoverMillis);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,551,"julian.monthOfYear(), fields.monthOfYear, null, fields.years, iCutoverMillis);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,572,ields.weekyearOfCentury = new ImpreciseCutoverField(
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,573,"ulian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,557,fields.weekyearOfCentury = new ImpreciseCutoverField(
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,558,"julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, fields.centuries, iCutoverMillis);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,561,// DayOfYear and weekOfWeekyear require special handling since cutover
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,562,// year has fewer days and weeks. Extend the cutover to the start of
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,563,// the next year or weekyear. This keeps the sequence unbroken during
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,564,// the cutover year.
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,567,long cutover = gregorian.year().roundCeiling(iCutoverMillis);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,568,fields.dayOfYear = new CutoverField(
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,569,"julian.dayOfYear(), fields.dayOfYear, fields.years, cutover, false);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,573,long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,574,fields.weekOfWeekyear = new CutoverField(
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,575,"julian.weekOfWeekyear(), fields.weekOfWeekyear, fields.weekyears, cutover, true);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,638,"this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,642,* @param julianField field from the chronology used before the cutover instant
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,643,* @param gregorianField field from the chronology used at and after the cutover
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,644,* @param rangeField  the range field
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,645,* @param cutoverMillis  the millis of the cutover
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,646,* @param convertByWeekyear
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,648,"CutoverField(DateTimeField julianField, DateTimeField gregorianField,"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,649,"DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) {"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,646,urationField rangeField = gregorianField.getRangeDurationField();
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,648,angeField = julianField.getRangeDurationField();
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,659,rangeField = gregorianField.getRangeDurationField();
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,660,if (rangeField == null) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,661,rangeField = julianField.getRangeDurationField();
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,978,* Uses shared duration fields rather than creating a new one.
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,980,* @param durationField shared duration field
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,982,"ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,983,"DurationField durationField, DurationField rangeDurationField, long cutoverMillis)"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,985,"this(julianField, gregorianField, durationField, cutoverMillis, false);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,986,iRangeDurationField = rangeDurationField;
True,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,20,import org.joda.time.DurationField;
True,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,46,@Override
True,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,47,public DurationField getRangeDurationField() {
True,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,48,return iChronology.eras();
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,173,fields.centuries = fields.centuryOfEra.getDurationField();
False,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,176,"DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury());"
False,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,178,ields.centuries = fields.centuryOfEra.getDurationField();
True,src/main/java/org/joda/time/chrono/ISOChronology.java,src/main/java/org/joda/time/chrono/ISOChronology.java,178,"(DividedDateTimeField) fields.centuryOfEra, fields.weekyears, DateTimeFieldType.weekyearOfCentury());"
True,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,20,import org.joda.time.DurationField;
True,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,51,@Override
True,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,52,public DurationField getRangeDurationField() {
True,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,53,return GregorianChronology.getInstanceUTC().eras();
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,364,@Override
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,365,public boolean equals(Object obj) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,366,if (this == obj) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,367,return true;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,368,} else if (obj instanceof ZonedDurationField) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,369,ZonedDurationField other = (ZonedDurationField) obj;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,370,return iField.equals(other.iField) &&
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,371,iZone.equals(other.iZone);
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,373,return false;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,376,@Override
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,377,public int hashCode() {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,378,return iField.hashCode() ^ iZone.hashCode();
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,616,@Override
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,617,public boolean equals(Object obj) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,618,if (this == obj) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,619,return true;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,620,} else if (obj instanceof ZonedDateTimeField) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,621,ZonedDateTimeField other = (ZonedDateTimeField) obj;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,622,return iField.equals(other.iField) &&
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,623,iZone.equals(other.iZone) &&
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,624,iDurationField.equals(other.iDurationField) &&
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,625,iRangeDurationField.equals(other.iRangeDurationField);
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,627,return false;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,630,@Override
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,631,public int hashCode() {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,632,return iField.hashCode() ^ iZone.hashCode();
False,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,41,** The DateTimeField being wrapped */
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,41,/** The DateTimeField being wrapped. */
False,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,43,** The override field type */
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,43,/** The range duration. */
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,44,private final DurationField iRangeDurationField;
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,45,/** The override field type. */
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,64,"this(field, null, type);"
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,68,* Constructor.
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,70,* @param field  the field being decorated
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,71,"* @param rangeField  the range field, null to derive"
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,72,* @param type  the field type override
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,74,"public DelegatedDateTimeField(DateTimeField field, DurationField rangeField, DateTimeFieldType type) {"
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,80,iRangeDurationField = rangeField;
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,210,if (iRangeDurationField != null) {
True,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,src/main/java/org/joda/time/field/DelegatedDateTimeField.java,211,return iRangeDurationField;
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,43,final DurationField iRangeDurationField;
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,58,"this(field, field.getRangeDurationField(), type, divisor);"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,62,* Constructor.
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,64,"* @param field  the field to wrap, like ""year()""."
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,65,"* @param rangeField  the range field, null to derive"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,66,* @param type  the field type this field will actually use
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,67,"* @param divisor  divisor, such as 100 years in a century"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,68,* @throws IllegalArgumentException if divisor is less than two
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,70,"public DividedDateTimeField(DateTimeField field, DurationField rangeField,"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,71,"DateTimeFieldType type, int divisor) {"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,83,iRangeDurationField = rangeField;
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,101,"this(remainderField, null, type);"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,105,* Construct a DividedDateTimeField that compliments the given
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,106,* RemainderDateTimeField.
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,108,"* @param remainderField  complimentary remainder field, like ""yearOfCentury()""."
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,109,"* @param rangeField  the range field, null to derive"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,110,* @param type  the field type this field will actually use
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,112,"public DividedDateTimeField(RemainderDateTimeField remainderField, DurationField rangeField, DateTimeFieldType type) {"
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,116,iRangeDurationField = rangeField;
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,126,@Override
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,127,public DurationField getRangeDurationField() {
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,128,if (iRangeDurationField != null) {
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,129,return iRangeDurationField;
True,src/main/java/org/joda/time/field/DividedDateTimeField.java,src/main/java/org/joda/time/field/DividedDateTimeField.java,131,return super.getRangeDurationField();
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,41,final DurationField iDurationField;
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,67,iDurationField = field.getDurationField();
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,68,iDivisor = divisor;
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,72,* Constructor.
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,74,"* @param field  the field to wrap, like ""year()""."
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,75,* @param rangeField  the range field
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,76,* @param type  the field type this field actually uses
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,77,"* @param divisor  divisor, such as 100 years in a century"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,78,* @throws IllegalArgumentException if divisor is less than two
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,80,"public RemainderDateTimeField(DateTimeField field, DurationField rangeField,"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,81,"DateTimeFieldType type, int divisor) {"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,82,"super(field, type);"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,83,if (divisor < 2) {
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,84,"throw new IllegalArgumentException(""The divisor must be at least 2"");"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,86,iRangeField = rangeField;
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,87,iDurationField = field.getDurationField();
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,109,"this(dividedField, dividedField.getWrappedField().getDurationField(), type);"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,113,* Construct a RemainderDateTimeField that compliments the given
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,114,* DividedDateTimeField.
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,115,* This constructor allows the duration field to be set.
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,117,"* @param dividedField  complimentary divided field, like ""century()""."
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,118,* @param durationField  the duration field
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,119,* @param type  the field type this field actually uses
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,121,"public RemainderDateTimeField(DividedDateTimeField dividedField, DurationField durationField, DateTimeFieldType type) {"
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,124,iDurationField = durationField;
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,171,@Override
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,172,public DurationField getDurationField() {
True,src/main/java/org/joda/time/field/RemainderDateTimeField.java,src/main/java/org/joda/time/field/RemainderDateTimeField.java,173,return iDurationField;
False,src/test/java/org/joda/time/TestDateMidnight_Properties.java,src/test/java/org/joda/time/TestDateMidnight_Properties.java,139,"ssertEquals(null, test.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/TestDateMidnight_Properties.java,src/test/java/org/joda/time/TestDateMidnight_Properties.java,139,"assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField());"
False,src/test/java/org/joda/time/TestDateMidnight_Properties.java,src/test/java/org/joda/time/TestDateMidnight_Properties.java,157,"ssertEquals(null, test.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/TestDateMidnight_Properties.java,src/test/java/org/joda/time/TestDateMidnight_Properties.java,157,"assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField());"
False,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,144,"ssertEquals(null, test.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,144,"assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField());"
False,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,163,"ssertEquals(null, test.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,163,"assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField());"
False,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,130,"ssertEquals(null, test.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,130,"assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField());"
False,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,147,"ssertEquals(null, test.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,src/test/java/org/joda/time/TestMutableDateTime_Properties.java,147,"assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,241,"assertEquals(buddhist.eras(), buddhist.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,242,"assertEquals(buddhist.centuries(), buddhist.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,243,"assertEquals(buddhist.years(), buddhist.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,244,"assertEquals(buddhist.years(), buddhist.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,245,"assertEquals(buddhist.years(), buddhist.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,246,"assertEquals(buddhist.months(), buddhist.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,247,"assertEquals(buddhist.weekyears(), buddhist.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,248,"assertEquals(buddhist.weekyears(), buddhist.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,249,"assertEquals(buddhist.weeks(), buddhist.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,250,"assertEquals(buddhist.days(), buddhist.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,251,"assertEquals(buddhist.days(), buddhist.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,252,"assertEquals(buddhist.days(), buddhist.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,254,"assertEquals(null, buddhist.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,255,"assertEquals(buddhist.eras(), buddhist.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,256,"assertEquals(buddhist.centuries(), buddhist.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,257,"assertEquals(buddhist.eras(), buddhist.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,258,"assertEquals(null, buddhist.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,259,"assertEquals(buddhist.years(), buddhist.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,260,"assertEquals(buddhist.centuries(), buddhist.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,261,"assertEquals(null, buddhist.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,262,"assertEquals(buddhist.weekyears(), buddhist.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,263,"assertEquals(buddhist.years(), buddhist.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,264,"assertEquals(buddhist.months(), buddhist.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,src/test/java/org/joda/time/chrono/TestBuddhistChronology.java,265,"assertEquals(buddhist.weeks(), buddhist.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,244,"assertEquals(coptic.eras(), coptic.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,245,"assertEquals(coptic.centuries(), coptic.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,246,"assertEquals(coptic.years(), coptic.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,247,"assertEquals(coptic.years(), coptic.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,248,"assertEquals(coptic.years(), coptic.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,249,"assertEquals(coptic.months(), coptic.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,250,"assertEquals(coptic.weekyears(), coptic.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,251,"assertEquals(coptic.weekyears(), coptic.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,252,"assertEquals(coptic.weeks(), coptic.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,253,"assertEquals(coptic.days(), coptic.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,254,"assertEquals(coptic.days(), coptic.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,255,"assertEquals(coptic.days(), coptic.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,257,"assertEquals(null, coptic.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,258,"assertEquals(coptic.eras(), coptic.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,259,"assertEquals(coptic.centuries(), coptic.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,260,"assertEquals(coptic.eras(), coptic.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,261,"assertEquals(null, coptic.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,262,"assertEquals(coptic.years(), coptic.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,263,"assertEquals(coptic.centuries(), coptic.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,264,"assertEquals(null, coptic.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,265,"assertEquals(coptic.weekyears(), coptic.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,266,"assertEquals(coptic.years(), coptic.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,267,"assertEquals(coptic.months(), coptic.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestCopticChronology.java,src/test/java/org/joda/time/chrono/TestCopticChronology.java,268,"assertEquals(coptic.weeks(), coptic.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,244,"assertEquals(ethiopic.eras(), ethiopic.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,245,"assertEquals(ethiopic.centuries(), ethiopic.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,246,"assertEquals(ethiopic.years(), ethiopic.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,247,"assertEquals(ethiopic.years(), ethiopic.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,248,"assertEquals(ethiopic.years(), ethiopic.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,249,"assertEquals(ethiopic.months(), ethiopic.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,250,"assertEquals(ethiopic.weekyears(), ethiopic.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,251,"assertEquals(ethiopic.weekyears(), ethiopic.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,252,"assertEquals(ethiopic.weeks(), ethiopic.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,253,"assertEquals(ethiopic.days(), ethiopic.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,254,"assertEquals(ethiopic.days(), ethiopic.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,255,"assertEquals(ethiopic.days(), ethiopic.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,257,"assertEquals(null, ethiopic.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,258,"assertEquals(ethiopic.eras(), ethiopic.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,259,"assertEquals(ethiopic.centuries(), ethiopic.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,260,"assertEquals(ethiopic.eras(), ethiopic.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,261,"assertEquals(null, ethiopic.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,262,"assertEquals(ethiopic.years(), ethiopic.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,263,"assertEquals(ethiopic.centuries(), ethiopic.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,264,"assertEquals(null, ethiopic.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,265,"assertEquals(ethiopic.weekyears(), ethiopic.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,266,"assertEquals(ethiopic.years(), ethiopic.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,267,"assertEquals(ethiopic.months(), ethiopic.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,src/test/java/org/joda/time/chrono/TestEthiopicChronology.java,268,"assertEquals(ethiopic.weeks(), ethiopic.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,294,"assertEquals(gj.eras(), gj.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,295,"assertEquals(gj.centuries(), gj.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,296,"assertEquals(gj.years(), gj.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,297,"assertEquals(gj.years(), gj.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,298,"assertEquals(gj.years(), gj.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,299,"assertEquals(gj.months(), gj.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,300,"assertEquals(gj.weekyears(), gj.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,301,"assertEquals(gj.weekyears(), gj.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,302,"assertEquals(gj.weeks(), gj.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,303,"assertEquals(gj.days(), gj.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,304,"assertEquals(gj.days(), gj.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,305,"assertEquals(gj.days(), gj.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,307,"assertEquals(null, gj.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,308,"assertEquals(gj.eras(), gj.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,309,"assertEquals(gj.centuries(), gj.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,310,"assertEquals(gj.eras(), gj.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,311,"assertEquals(null, gj.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,312,"assertEquals(gj.years(), gj.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,313,"assertEquals(gj.centuries(), gj.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,314,"assertEquals(null, gj.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,315,"assertEquals(gj.weekyears(), gj.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,316,"assertEquals(gj.years(), gj.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,317,"assertEquals(gj.months(), gj.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGJChronology.java,src/test/java/org/joda/time/chrono/TestGJChronology.java,318,"assertEquals(gj.weeks(), gj.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,250,"assertEquals(greg.eras(), greg.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,251,"assertEquals(greg.centuries(), greg.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,252,"assertEquals(greg.years(), greg.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,253,"assertEquals(greg.years(), greg.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,254,"assertEquals(greg.years(), greg.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,255,"assertEquals(greg.months(), greg.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,256,"assertEquals(greg.weekyears(), greg.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,257,"assertEquals(greg.weekyears(), greg.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,258,"assertEquals(greg.weeks(), greg.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,259,"assertEquals(greg.days(), greg.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,260,"assertEquals(greg.days(), greg.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,261,"assertEquals(greg.days(), greg.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,263,"assertEquals(null, greg.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,264,"assertEquals(greg.eras(), greg.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,265,"assertEquals(greg.centuries(), greg.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,266,"assertEquals(greg.eras(), greg.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,267,"assertEquals(null, greg.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,268,"assertEquals(greg.years(), greg.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,269,"assertEquals(greg.centuries(), greg.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,270,"assertEquals(null, greg.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,271,"assertEquals(greg.weekyears(), greg.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,272,"assertEquals(greg.years(), greg.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,273,"assertEquals(greg.months(), greg.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,src/test/java/org/joda/time/chrono/TestGregorianChronology.java,274,"assertEquals(greg.weeks(), greg.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,254,"assertEquals(iso.eras(), iso.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,255,"assertEquals(iso.centuries(), iso.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,256,"assertEquals(iso.years(), iso.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,257,"assertEquals(iso.years(), iso.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,258,"assertEquals(iso.years(), iso.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,259,"assertEquals(iso.months(), iso.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,260,"assertEquals(iso.weekyears(), iso.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,261,"assertEquals(iso.weekyears(), iso.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,262,"assertEquals(iso.weeks(), iso.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,263,"assertEquals(iso.days(), iso.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,264,"assertEquals(iso.days(), iso.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,265,"assertEquals(iso.days(), iso.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,267,"assertEquals(null, iso.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,268,"assertEquals(iso.eras(), iso.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,269,"assertEquals(iso.centuries(), iso.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,270,"assertEquals(iso.eras(), iso.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,271,"assertEquals(null, iso.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,272,"assertEquals(iso.years(), iso.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,273,"assertEquals(iso.centuries(), iso.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,274,"assertEquals(null, iso.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,275,"assertEquals(iso.weekyears(), iso.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,276,"assertEquals(iso.years(), iso.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,277,"assertEquals(iso.months(), iso.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestISOChronology.java,src/test/java/org/joda/time/chrono/TestISOChronology.java,278,"assertEquals(iso.weeks(), iso.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,241,"assertEquals(islamic.eras(), islamic.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,242,"assertEquals(islamic.centuries(), islamic.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,243,"assertEquals(islamic.years(), islamic.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,244,"assertEquals(islamic.years(), islamic.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,245,"assertEquals(islamic.years(), islamic.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,246,"assertEquals(islamic.months(), islamic.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,247,"assertEquals(islamic.weekyears(), islamic.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,248,"assertEquals(islamic.weekyears(), islamic.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,249,"assertEquals(islamic.weeks(), islamic.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,250,"assertEquals(islamic.days(), islamic.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,251,"assertEquals(islamic.days(), islamic.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,252,"assertEquals(islamic.days(), islamic.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,254,"assertEquals(null, islamic.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,255,"assertEquals(islamic.eras(), islamic.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,256,"assertEquals(islamic.centuries(), islamic.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,257,"assertEquals(islamic.eras(), islamic.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,258,"assertEquals(null, islamic.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,259,"assertEquals(islamic.years(), islamic.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,260,"assertEquals(islamic.centuries(), islamic.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,261,"assertEquals(null, islamic.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,262,"assertEquals(islamic.weekyears(), islamic.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,263,"assertEquals(islamic.years(), islamic.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,264,"assertEquals(islamic.months(), islamic.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,src/test/java/org/joda/time/chrono/TestIslamicChronology.java,265,"assertEquals(islamic.weeks(), islamic.dayOfWeek().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,246,"assertEquals(julian.eras(), julian.era().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,247,"assertEquals(julian.centuries(), julian.centuryOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,248,"assertEquals(julian.years(), julian.yearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,249,"assertEquals(julian.years(), julian.yearOfEra().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,250,"assertEquals(julian.years(), julian.year().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,251,"assertEquals(julian.months(), julian.monthOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,252,"assertEquals(julian.weekyears(), julian.weekyearOfCentury().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,253,"assertEquals(julian.weekyears(), julian.weekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,254,"assertEquals(julian.weeks(), julian.weekOfWeekyear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,255,"assertEquals(julian.days(), julian.dayOfYear().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,256,"assertEquals(julian.days(), julian.dayOfMonth().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,257,"assertEquals(julian.days(), julian.dayOfWeek().getDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,259,"assertEquals(null, julian.era().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,260,"assertEquals(julian.eras(), julian.centuryOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,261,"assertEquals(julian.centuries(), julian.yearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,262,"assertEquals(julian.eras(), julian.yearOfEra().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,263,"assertEquals(null, julian.year().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,264,"assertEquals(julian.years(), julian.monthOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,265,"assertEquals(julian.centuries(), julian.weekyearOfCentury().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,266,"assertEquals(null, julian.weekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,267,"assertEquals(julian.weekyears(), julian.weekOfWeekyear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,268,"assertEquals(julian.years(), julian.dayOfYear().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,269,"assertEquals(julian.months(), julian.dayOfMonth().getRangeDurationField());"
True,src/test/java/org/joda/time/chrono/TestJulianChronology.java,src/test/java/org/joda/time/chrono/TestJulianChronology.java,270,"assertEquals(julian.weeks(), julian.dayOfWeek().getRangeDurationField());"

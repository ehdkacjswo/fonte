is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,433, Select a suitable field for this type from the given Chronology.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,433,* Gets a suitable field for this type from the given Chronology.
False,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,435," @param chronology Chronology to select a field from, null means"
False,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,436, ISOChronology in default zone
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,435,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,441,* Checks whether this field supported in the given Chronology.
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,443,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,444,* @return true if supported
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,446,public boolean isSupported(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,JodaTime/src/java/org/joda/time/DateTimeFieldType.java,447,return getField(chronology).isSupported();
False,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,258, Select a suitable field for this type from the given Chronology.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,258,* Gets a suitable field for this type from the given Chronology.
False,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,260," @param chronology Chronology to select a field from, null means"
False,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,261, ISOChronology in default zone
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,260,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,266,* Checks whether this field supported in the given Chronology.
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,268,"* @param chronology  the chronology to use, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,269,* @return true if supported
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,271,public boolean isSupported(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/DurationFieldType.java,JodaTime/src/java/org/joda/time/DurationFieldType.java,272,return getField(chronology).isSupported();
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,76,suite.addTest(TestDateTimeFieldType.suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,63,* This class is a Junit unit test for Chronology.
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,67,public class TestDateTimeFieldType extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,68,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,69,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,71,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,72,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,74,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,75,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,76,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,77,366 + 365;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,78,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,79,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,80,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,81,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,83,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,84,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,85,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,87,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,88,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,89,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,90,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,91,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,93,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,94,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,95,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,96,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,97,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,99,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,100,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,101,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,103,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,104,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,107,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,108,return new TestSuite(TestDateTimeFieldType.class);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,111,public TestDateTimeFieldType(String name) {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,112,super(name);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,115,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,116,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,117,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,118,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,119,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,120,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,121,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,122,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,125,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,126,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,127,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,128,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,129,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,130,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,131,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,132,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,136,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,137,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,138,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,139,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,143,public void test_era() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,144,"assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,145,"assertEquals(""era"", DateTimeFieldType.era().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,146,"assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,147,"assertEquals(null, DateTimeFieldType.era().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,148,"assertEquals(Chronology.getCopticUTC().era(), DateTimeFieldType.era().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,149,"assertEquals(Chronology.getCopticUTC().era().isSupported(), DateTimeFieldType.era().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,152,public void test_centuryOfEra() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,153,"assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,154,"assertEquals(""centuryOfEra"", DateTimeFieldType.centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,155,"assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,156,"assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,157,"assertEquals(Chronology.getCopticUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,158,"assertEquals(Chronology.getCopticUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,161,public void test_yearOfCentury() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,162,"assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,163,"assertEquals(""yearOfCentury"", DateTimeFieldType.yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,164,"assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,165,"assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,166,"assertEquals(Chronology.getCopticUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,167,"assertEquals(Chronology.getCopticUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,170,public void test_yearOfEra() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,171,"assertEquals(DateTimeFieldType.yearOfEra(), DateTimeFieldType.yearOfEra());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,172,"assertEquals(""yearOfEra"", DateTimeFieldType.yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,173,"assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,174,"assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,175,"assertEquals(Chronology.getCopticUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,176,"assertEquals(Chronology.getCopticUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,179,public void test_year() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,180,"assertEquals(DateTimeFieldType.year(), DateTimeFieldType.year());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,181,"assertEquals(""year"", DateTimeFieldType.year().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,182,"assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,183,"assertEquals(null, DateTimeFieldType.year().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,184,"assertEquals(Chronology.getCopticUTC().year(), DateTimeFieldType.year().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,185,"assertEquals(Chronology.getCopticUTC().year().isSupported(), DateTimeFieldType.year().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,188,public void test_monthOfYear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,189,"assertEquals(DateTimeFieldType.monthOfYear(), DateTimeFieldType.monthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,190,"assertEquals(""monthOfYear"", DateTimeFieldType.monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,191,"assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,192,"assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,193,"assertEquals(Chronology.getCopticUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,194,"assertEquals(Chronology.getCopticUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,197,public void test_weekyearOfCentury() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,198,"assertEquals(DateTimeFieldType.weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,199,"assertEquals(""weekyearOfCentury"", DateTimeFieldType.weekyearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,200,"assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,201,"assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,202,"assertEquals(Chronology.getCopticUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,203,"assertEquals(Chronology.getCopticUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,206,public void test_weekyear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,207,"assertEquals(DateTimeFieldType.weekyear(), DateTimeFieldType.weekyear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,208,"assertEquals(""weekyear"", DateTimeFieldType.weekyear().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,209,"assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,210,"assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,211,"assertEquals(Chronology.getCopticUTC().weekyear(), DateTimeFieldType.weekyear().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,212,"assertEquals(Chronology.getCopticUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,215,public void test_weekOfWeekyear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,216,"assertEquals(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,217,"assertEquals(""weekOfWeekyear"", DateTimeFieldType.weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,218,"assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,219,"assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,220,"assertEquals(Chronology.getCopticUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,221,"assertEquals(Chronology.getCopticUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,224,public void test_dayOfYear() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,225,"assertEquals(DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,226,"assertEquals(""dayOfYear"", DateTimeFieldType.dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,227,"assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,228,"assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,229,"assertEquals(Chronology.getCopticUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,230,"assertEquals(Chronology.getCopticUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,233,public void test_dayOfMonth() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,234,"assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,235,"assertEquals(""dayOfMonth"", DateTimeFieldType.dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,236,"assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,237,"assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,238,"assertEquals(Chronology.getCopticUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,239,"assertEquals(Chronology.getCopticUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,242,public void test_dayOfWeek() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,243,"assertEquals(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.dayOfWeek());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,244,"assertEquals(""dayOfWeek"", DateTimeFieldType.dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,245,"assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,246,"assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,247,"assertEquals(Chronology.getCopticUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,248,"assertEquals(Chronology.getCopticUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,251,public void test_halfdayOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,252,"assertEquals(DateTimeFieldType.halfdayOfDay(), DateTimeFieldType.halfdayOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,253,"assertEquals(""halfdayOfDay"", DateTimeFieldType.halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,254,"assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,255,"assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,256,"assertEquals(Chronology.getCopticUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,257,"assertEquals(Chronology.getCopticUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,260,public void test_clockhourOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,261,"assertEquals(DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.clockhourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,262,"assertEquals(""clockhourOfDay"", DateTimeFieldType.clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,263,"assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,264,"assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,265,"assertEquals(Chronology.getCopticUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,266,"assertEquals(Chronology.getCopticUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,269,public void test_clockhourOfHalfday() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,270,"assertEquals(DateTimeFieldType.clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,271,"assertEquals(""clockhourOfHalfday"", DateTimeFieldType.clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,272,"assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,273,"assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,274,"assertEquals(Chronology.getCopticUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,275,"assertEquals(Chronology.getCopticUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,278,public void test_hourOfHalfday() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,279,"assertEquals(DateTimeFieldType.hourOfHalfday(), DateTimeFieldType.hourOfHalfday());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,280,"assertEquals(""hourOfHalfday"", DateTimeFieldType.hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,281,"assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,282,"assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,283,"assertEquals(Chronology.getCopticUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,284,"assertEquals(Chronology.getCopticUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,287,public void test_hourOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,288,"assertEquals(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,289,"assertEquals(""hourOfDay"", DateTimeFieldType.hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,290,"assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,291,"assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,292,"assertEquals(Chronology.getCopticUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,293,"assertEquals(Chronology.getCopticUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,296,public void test_minuteOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,297,"assertEquals(DateTimeFieldType.minuteOfDay(), DateTimeFieldType.minuteOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,298,"assertEquals(""minuteOfDay"", DateTimeFieldType.minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,299,"assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,300,"assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,301,"assertEquals(Chronology.getCopticUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,302,"assertEquals(Chronology.getCopticUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,305,public void test_minuteOfHour() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,306,"assertEquals(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.minuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,307,"assertEquals(""minuteOfHour"", DateTimeFieldType.minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,308,"assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,309,"assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,310,"assertEquals(Chronology.getCopticUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,311,"assertEquals(Chronology.getCopticUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,314,public void test_secondOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,315,"assertEquals(DateTimeFieldType.secondOfDay(), DateTimeFieldType.secondOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,316,"assertEquals(""secondOfDay"", DateTimeFieldType.secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,317,"assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,318,"assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,319,"assertEquals(Chronology.getCopticUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,320,"assertEquals(Chronology.getCopticUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,323,public void test_secondOfMinute() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,324,"assertEquals(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.secondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,325,"assertEquals(""secondOfMinute"", DateTimeFieldType.secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,326,"assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,327,"assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,328,"assertEquals(Chronology.getCopticUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,329,"assertEquals(Chronology.getCopticUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,332,public void test_millisOfDay() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,333,"assertEquals(DateTimeFieldType.millisOfDay(), DateTimeFieldType.millisOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,334,"assertEquals(""millisOfDay"", DateTimeFieldType.millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,335,"assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,336,"assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,337,"assertEquals(Chronology.getCopticUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,338,"assertEquals(Chronology.getCopticUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,341,public void test_millisOfSecond() {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,342,"assertEquals(DateTimeFieldType.millisOfSecond(), DateTimeFieldType.millisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,343,"assertEquals(""millisOfSecond"", DateTimeFieldType.millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,344,"assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,345,"assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,346,"assertEquals(Chronology.getCopticUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,347,"assertEquals(Chronology.getCopticUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(Chronology.getCopticUTC()));"

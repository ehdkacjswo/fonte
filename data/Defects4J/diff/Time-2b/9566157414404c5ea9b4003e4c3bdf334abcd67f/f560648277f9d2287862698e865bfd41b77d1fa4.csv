is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,194," If the object contains no chronology, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,195, in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,194,"* If the object implies a chronology (such as GregorianCalendar does),"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,195,"* then that chronology will be used. Otherwise, ISO default is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,196,"* Thus if a GregorianCalendar is passed in, the chronology used will"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,197,"* be GJ, but if a Date is passed in the chronology will be ISO."
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,205,uper(instant);
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,207,"super(instant, (Chronology) null);"
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,213," If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,215,"* If the object implies a chronology (such as GregorianCalendar does),"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,216,"* then that chronology will be used, but with the time zone adjusted."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,217,"* Otherwise, ISO is used in the specified time zone."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,219,"* Thus if a GregorianCalendar is passed in, the chronology used will"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,220,"* be GJ, but if a Date is passed in the chronology will be ISO."
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,233," If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,239,"* If the chronology is null, ISO in the default time zone is used."
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,240,* Any chronology implied by the object (such as GregorianCalendar does)
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,241,* is ignored.
False,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,244,"uper(instant, chronology);"
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,252,"super(instant, DateTimeUtils.getChronology(chronology));"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,182," If the object contains no chronology, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,183, in the default time zone is used.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,182,"* If the object implies a chronology (such as GregorianCalendar does),"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,183,"* then that chronology will be used. Otherwise, ISO default is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,184,"* Thus if a GregorianCalendar is passed in, the chronology used will"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,185,"* be GJ, but if a Date is passed in the chronology will be ISO."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,193,uper(instant);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,195,"super(instant, (Chronology) null);"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,200," If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,202,"* If the object implies a chronology (such as GregorianCalendar does),"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,203,"* then that chronology will be used, but with the time zone adjusted."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,204,"* Otherwise, ISO is used in the specified time zone."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,206,"* Thus if a GregorianCalendar is passed in, the chronology used will"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,207,"* be GJ, but if a Date is passed in the chronology will be ISO."
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,219," If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,225,"* If the chronology is null, ISO in the default time zone is used."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,226,* Any chronology implied by the object (such as GregorianCalendar does)
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,227,* is ignored.
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,226," @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,234,"* @param chronology  the chronology, null means ISO in default zone"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,230,"uper(instant, chronology);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,238,"super(instant, DateTimeUtils.getChronology(chronology));"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,213,ong lhsMillis = conv.getInstantMillis(lhsObj);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,214,hronology lhsChrono = conv.getChronology(lhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,213,"Chronology lhsChrono = conv.getChronology(lhsObj, (Chronology) null);"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,214,"long lhsMillis = conv.getInstantMillis(lhsObj, lhsChrono);"
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,217,ong rhsMillis = conv.getInstantMillis(rhsObj);
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,218,hronology rhsChrono = conv.getChronology(rhsObj);
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,217,"Chronology rhsChrono = conv.getChronology(rhsObj, (Chronology) null);"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,218,"long rhsMillis = conv.getInstantMillis(rhsObj, rhsChrono);"
False,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,127,Millis = converter.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/Instant.java,JodaTime/src/java/org/joda/time/Instant.java,127,"iMillis = converter.getInstantMillis(instant, Chronology.getISOUTC());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,204," If the object contains no chronology, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,205, in the default time zone is used.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,204,"* If the object implies a chronology (such as GregorianCalendar does),"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,205,"* then that chronology will be used. Otherwise, ISO default is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,206,"* Thus if a GregorianCalendar is passed in, the chronology used will"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,207,"* be GJ, but if a Date is passed in the chronology will be ISO."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,215,uper(instant);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,217,"super(instant, (Chronology) null);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,222," If the object contains no chronology, <code>ISOChronology</code> is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,224,"* If the object implies a chronology (such as GregorianCalendar does),"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,225,"* then that chronology will be used, but with the time zone adjusted."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,226,"* Otherwise, ISO is used in the specified time zone."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,228,"* Thus if a GregorianCalendar is passed in, the chronology used will"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,229,"* be GJ, but if a Date is passed in the chronology will be ISO."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,241," If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,247,"* If the chronology is null, ISO in the default time zone is used."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,248,* Any chronology implied by the object (such as GregorianCalendar does)
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,249,* is ignored.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,252,"uper(instant, chronology);"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,260,"super(instant, DateTimeUtils.getChronology(chronology));"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,169, Constructs an instance from an Object that represents a datetime.
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,170, <p>
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,171," If the object contains no chronology, <code>ISOChronology</code>"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,172, in the default time zone is used.
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,173, <p>
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,174, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,175, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,176," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,178," @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,179, @throws IllegalArgumentException if the instant is invalid
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,181,ublic BaseDateTime(Object instant) {
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,182,uper();
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,183,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,184,Chronology = checkChronology(converter.getChronology(instant));
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,185,"Millis = checkInstant(converter.getInstantMillis(instant), iChronology);"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,199," @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,200," @param zone  the time zone, null means default time zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,179,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,180,* @param zone  the time zone
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,206,"Chronology = checkChronology(converter.getChronology(instant, zone));"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,207,"Millis = checkInstant(converter.getInstantMillis(instant, zone), iChronology);"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,186,"Chronology chrono = checkChronology(converter.getChronology(instant, zone));"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,187,iChronology = chrono;
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,188,"iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,214," If the chronology is null, ISOChronology in the default time zone is used."
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,195,"* If the chronology is null, ISO in the default time zone is used."
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,220," @param instant  the datetime object, null means now"
False,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,221," @param chronology  the chronology, null means ISOChronology in default zone"
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,201,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,JodaTime/src/java/org/joda/time/base/BaseDateTime.java,202,* @param chronology  the chronology
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,163," @param instant  the datetime object, null means use converter"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,163,* @param instant  the datetime object
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,57,import org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,60,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,81," This implementation calls {@link #getInstantMillis(Object, DateTimeZone)}."
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,83," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,84, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,85, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,87,ublic long getInstantMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,88,"eturn getInstantMillis(object, (DateTimeZone) null);"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,92, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,93, <p>
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,94, This implementation calls {@link #getInstantMillis(Object)}.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,96," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,97," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,98, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,99, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,101,"ublic long getInstantMillis(Object object, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,102,eturn getInstantMillis(object);
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,106, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,107, <p>
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,108, This implementation calls {@link #getInstantMillis(Object)}.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,81,* This implementation returns the current time.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,110," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,111," @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,83,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,84,"* @param chrono  the chronology to use, which is always non-null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,113, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,116,eturn getInstantMillis(object);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,88,return DateTimeUtils.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,121, Extracts the chronology from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,122, <p>
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,123, This implementation returns the ISOChronology.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,125," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,126," @return the chronology, never null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,127, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,129,ublic Chronology getChronology(Object object) {
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,130,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,137, This implementation returns the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,96,* This implementation returns the ISO chronology.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,139," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,98,* @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,142, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,145,eturn ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,103,return Chronology.getISO(zone);
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,153, ISOChronology in the default zone if null passed in.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,111,* ISO chronology in the default zone if null passed in.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,155," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,156," @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,113,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,114,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,158, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,161,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,162,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,164,eturn chrono;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,118,return DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,178, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,189," @param object  the object to examine, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,142,* @param object  the object to examine
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,191, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,203," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,155,* @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,206, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,63,mport org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,64,mport org.joda.time.chrono.JulianChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,65,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,92," Gets the millis, which is the Calendar millis value."
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,94," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,95, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,97,ublic long getInstantMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,98,eturn ((Calendar) object).getTime().getTime();
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,102," Gets the chronology, which is the GJChronology if a GregorianCalendar is used,"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,89,* Gets the chronology.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,90,* <p>
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,91,* If a chronology is specified then it is used.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,92,"* Otherwise, it is the GJChronology if a GregorianCalendar is used,"
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,106," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,96,"* @param object  the Calendar to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,97,"* @param chrono  the chronology to use, null means use Calendar"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,99,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,100,* @throws ClassCastException if the object is an invalid type
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,109,ublic Chronology getChronology(Object object) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,102,"public Chronology getChronology(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,103,if (chrono != null) {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,104,return chrono;
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,126," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,122,"* @param object  the Calendar to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,125,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,126,* @throws ClassCastException if the object is an invalid type
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,137,eturn GregorianChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,135,return Chronology.getGregorian(zone);
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,139,eturn JulianChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,137,return Chronology.getJulian(zone);
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,144,eturn ISOChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,142,return Chronology.getISO(zone);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,147,"* Gets the millis, which is the Calendar millis value."
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,149,"* @param object  the Calendar to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,150,"* @param chrono  the chronology result from getChronology, non-null"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,151,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,152,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,153,* @throws ClassCastException if the object is an invalid type
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,155,"public long getInstantMillis(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,156,return ((Calendar) object).getTime().getTime();
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,58,import org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,84," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,86,"* @param object  the Date to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,87,* @param chrono  the non-null result of getChronology
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,89,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,90,* @throws ClassCastException if the object is an invalid type
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,87,ublic long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,92,"public long getInstantMillis(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,61,* <p>
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,62,"* The two methods in this interface must be called in order, as the"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,63,* <code>getInstantMillis</code> method relies on the result of the
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,64,* <code>getChronology</code> method being passed in.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,68, Extracts the millis from an object of this converter's type.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,70, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,71, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,72, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,74,ong getInstantMillis(Object object);
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,77, Extracts the millis from an object of this converter's type. The zone
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,78," parameter is a hint to the converter, should it require a time zone to"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,79, aid in conversion.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,81, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,82," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,83, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,84, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,86,"ong getInstantMillis(Object object, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,89, Extracts the millis from an object of this converter's type. The chrono
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,90," parameter is a hint to the converter, should it require a chronology to"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,91, aid in conversion.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,93, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,94," @param chrono  the chronology to use, null usually means ISO"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,95, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,96, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,98,"ong getInstantMillis(Object object, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,102, Extracts the chronology from an object of this converter's type.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,104, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,105," @return the chronology, never null"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,106, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,108,hronology getChronology(Object object);
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,123, where the chronology is specified.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,84,* where the chronology may be specified.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,85,* <p>
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,86,"* If the chronology is non-null it should be used. If it is null, then the"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,87,"* object should be queried, and if it has no chronology then ISO default is used."
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,126," @param chrono  the chronology to use, null usually means ISO"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,90,"* @param chrono  the chronology to use, null means use object"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,98,* Extracts the millis from an object of this converter's type.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,99,* <p>
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,100,* The chronology passed in is the result of the call to <code>getChronology</code>.
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,102,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,103,"* @param chrono  the chronology to use, which is the non-null result of getChronology()"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,104,* @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,105,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,107,"long getInstantMillis(Object object, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,56,import org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,83," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,84, @return the millisecond instant
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,85,"* @param object  the Long to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,86,"* @param chrono  the chronology to use, which is always non-null"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,87,* @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,88,ublic long getInstantMillis(Object object) {
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,91,"public long getInstantMillis(Object object, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,96," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,99,"* @param object  the Long to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,88," Gets the millisecond instant, which is now."
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,90, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,91, @return the millisecond instant of now
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,93,ublic long getInstantMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,94,eturn DateTimeUtils.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,101, @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,90,"* @param object  the object to convert, which is null"
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,113, @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,102,"* @param object  the object to convert, which is null"
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,127," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,116,"* @param object  the object to convert, which is null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,57,import org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,84, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,86," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,87, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,89,ublic long getInstantMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,90,eturn ((ReadableInstant) object).getMillis();
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,94," Gets the chronology, which is taken from the ReadableInstant."
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,95," If the chronology on the instant is null, the ISOChronology in the"
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,96, default time zone is used.
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,98," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,99," @return the chronology, never null"
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,101,ublic Chronology getChronology(Object object) {
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,102,hronology chrono = ((ReadableInstant) object).getChronology();
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,103,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,104,eturn ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,106,eturn chrono;
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,116," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,91,"* @param object  the ReadableInstant to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,111,"* Gets the chronology, which is taken from the ReadableInstant."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,112,* <p>
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,113,"* If the passed in chronology is non-null, it is used."
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,114,* Otherwise the chronology from the instant is used.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,116,"* @param object  the ReadableInstant to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,117,"* @param chrono  the chronology to use, null means use that from object"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,118,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,120,"public Chronology getChronology(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,121,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,122,chrono = ((ReadableInstant) object).getChronology();
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,123,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,125,return chrono;
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,129,* Extracts the millis from an object of this convertor's type.
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,131,"* @param object  the ReadableInstant to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,132,* @param chrono  the non-null result of getChronology
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,133,* @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,134,* @throws NullPointerException if the object is null
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,135,* @throws ClassCastException if the object is an invalid type
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,137,"public long getInstantMillis(Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,138,return ((ReadableInstant) object).getMillis();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,62,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,97," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,98," @param zone  the zone to use, null means default zone"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,99, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,100, @throws IllegalArgumentException if the value if invalid
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,102,"ublic long getInstantMillis(Object object, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,103,tring str = (String) object;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,104,hronology chrono = ISOChronology.getInstance(zone);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,105,ateTimeParser p = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,106,eturn p.parseMillis(str);
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,110," Gets the millis, which is the ISO parsed string value."
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,112," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,113," @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,95,"* @param object  the String to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,96,"* @param chrono  the chronology to use, non-null result of getChronology"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,119,"hrono = getChronology(object, chrono);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,129," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,111,"* @param object  the String to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,183," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,165,"* @param object  the String to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,206, @param object  the string to set from
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,188,"* @param object  the String to convert, must not be null"
False,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,69,ublic long getInstantMillis(Object object) {
False,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,70,eturn 0;
False,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,73,"ublic long getInstantMillis(Object object, DateTimeZone zone) {"
False,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,74,eturn 0;
False,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,81,ublic Chronology getChronology(Object object) {
False,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java,82,eturn null;
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,127,ublic void testGetInstantMillis_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,128,regorianCalendar cal = new GregorianCalendar();
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,129,al.setTime(new Date(123L));
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,130,"ssertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,133,ublic void testGetInstantMillis_Object_Zone() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,134,regorianCalendar cal = new GregorianCalendar();
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,135,al.setTime(new Date(123L));
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,136,"ssertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,137,"ssertEquals(123L, cal.getTime().getTime());"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,138,"ssertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,139,"ssertEquals(123L, cal.getTime().getTime());"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,147,"ssertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,148,"ssertEquals(123L, cal.getTime().getTime());"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,152,ublic void testGetChronology_Object() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,135,public void testGetChronology_Object_Zone() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,154,"ssertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,137,"assertEquals(GJChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,139,"cal = new GregorianCalendar(TimeZone.getTimeZone(""Europe/Moscow""));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,140,"assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,158,"ssertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,144,"assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,162,"ssertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,148,"assertEquals(JulianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,166,"ssertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,168,al = new GregorianCalendar(new MockUnknownTimeZone());
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,169,"ssertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,152,"assertEquals(GregorianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,172,"ssertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,155,"assertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,177,"ssertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,160,"assertEquals(BuddhistChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(bc, PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,183,ublic void testGetChronology_Object_Zone() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,166,public void testGetChronology_Object_nullChronology() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,185,"ssertEquals(GJChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,187,"al = new GregorianCalendar(TimeZone.getTimeZone(""Europe/Moscow""));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,188,"ssertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (DateTimeZone) null));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,168,"assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,192,"ssertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,172,"assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,196,"ssertEquals(JulianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,176,"assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,200,"ssertEquals(GregorianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,180,"assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,182,cal = new GregorianCalendar(new MockUnknownTimeZone());
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,183,"assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,203,"ssertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,186,"assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,208,"ssertEquals(BuddhistChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(bc, PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,191,"assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,217,"ssertEquals(ISO, CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,121,ublic void testGetInstantMillis_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,122,"ssertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,125,ublic void testGetInstantMillis_Object_Zone() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,126,"ssertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,127,"ssertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,136,ublic void testGetChronology_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,137,"ssertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,153,"nt[] expected = Chronology.getISO().get(tod, 12345678L);"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,154,"nt[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,140,"int[] expected = Chronology.getCoptic().get(tod, 12345678L);"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,141,"int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,120,ublic void testGetInstantMillis_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,121,"ssertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,124,ublic void testGetInstantMillis_Object_Zone() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,125,"ssertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,126,"ssertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,135,ublic void testGetChronology_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,136,"ssertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,140,ublic void testGetInstantMillis_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,141,"ssertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null));"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,144,ublic void testGetInstantMillis_Object_Zone() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,145,"ssertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,146,"ssertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,155,ublic void testGetChronology_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,156,"ssertEquals(ISO, NullConverter.INSTANCE.getChronology(null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,124,ublic void testGetInstantMillis_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,125,"ssertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,126,"ssertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,129,ublic void testGetInstantMillis_Object_Zone() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,130,"ssertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,131,"ssertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,132,"ssertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,133,"ssertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (DateTimeZone) null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,144,ublic void testGetChronology_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,145,"ssertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,146,"ssertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,148,utableDateTime mdt = new MutableDateTime() {
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,149,ublic Chronology getChronology() {
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,150,eturn null; // bad
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,153,"ssertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,150,public void testGetChronology_Object_nullChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,151,"assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,152,"assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,154,MutableDateTime mdt = new MutableDateTime() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,155,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,156,return null; // bad
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,159,"assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt, (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,177,"ssertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,178,"ssertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,82,"rivate static final DateTimeZone ONE_HOUR = DateTimeZone.getInstance(""+01:00"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,82,private static final DateTimeZone ONE_HOUR = DateTimeZone.getInstance(1);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,83,private static final DateTimeZone EIGHT = DateTimeZone.getInstance(8);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,89,private static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,91,private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,142,"ateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,143,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,145,"DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,146,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,145,"t = new DateTime(2004, 1, 1, 0, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,146,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004T+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,148,"dt = new DateTime(2004, 1, 1, 0, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,149,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004T+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,148,"t = new DateTime(2004, 6, 1, 0, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,149,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06T+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,151,"dt = new DateTime(2004, 6, 1, 0, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,152,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06T+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,151,"t = new DateTime(2004, 6, 9, 0, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,152,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,154,"dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,155,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,154,"t = new DateTime(2004, 6, 9, 0, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,155,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-161T+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,157,"dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,158,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-161T+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,157,"t = new DateTime(2004, 6, 9, 0, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,158,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-W24-3T+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,160,"dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,161,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-W24-3T+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,160,"t = new DateTime(2004, 6, 7, 0, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,161,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-W24T+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,163,"dt = new DateTime(2004, 6, 7, 0, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,164,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-W24T+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,163,"t = new DateTime(2004, 6, 9, 12, 0, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,164,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,166,"dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,167,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,166,"t = new DateTime(2004, 6, 9, 12, 24, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,167,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,169,"dt = new DateTime(2004, 6, 9, 12, 24, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,170,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,169,"t = new DateTime(2004, 6, 9, 12, 24, 48, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,170,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,172,"dt = new DateTime(2004, 6, 9, 12, 24, 48, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,173,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,172,"t = new DateTime(2004, 6, 9, 12, 30, 0, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,173,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12.5+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,175,"dt = new DateTime(2004, 6, 9, 12, 30, 0, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,176,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12.5+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,175,"t = new DateTime(2004, 6, 9, 12, 24, 30, 0, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,176,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24.5+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,178,"dt = new DateTime(2004, 6, 9, 12, 24, 30, 0, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,179,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24.5+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,178,"t = new DateTime(2004, 6, 9, 12, 24, 48, 500, ONE_HOUR);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,179,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.5+01:00""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,181,"dt = new DateTime(2004, 6, 9, 12, 24, 48, 500, EIGHT);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,182,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.5+08:00"", ISO_EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,182,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501""));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,185,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501"", ISO));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,187,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+02:00"", PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,189,"t = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,190,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+01:00"", (DateTimeZone) null));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,190,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+02:00"", ISO_PARIS));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,193,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501"", PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,193,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501"", ISO_PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,195,"dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,196,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+01:00"", ISO_LONDON));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,196,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501"", (DateTimeZone) null));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,199,"assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501"", ISO_LONDON));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,203,"t = new DateTime(2004, 6, 9, 12, 24, 48, 501, ISOChronology.getInstance(LONDON));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,204,"ssertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(""2004-06-09T12:24:48.501+01:00"", (Chronology) null));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,209,"tringConverter.INSTANCE.getInstantMillis("""");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,209,"StringConverter.INSTANCE.getInstantMillis("""", (Chronology) null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,213,"tringConverter.INSTANCE.getInstantMillis(""X"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,213,"StringConverter.INSTANCE.getInstantMillis(""X"", (Chronology) null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,219,ublic void testGetChronology_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,220,"ssertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(""2004-06-09T12:24:48.501+01:00""));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,221,"ssertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(""2004-06-09T12:24:48.501""));"

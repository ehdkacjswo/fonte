is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,28,mport org.joda.time.base.AbstractPartial;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,28,import org.joda.time.base.BaseLocal;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,78,xtends AbstractPartial
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,78,extends BaseLocal
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,493,ong getLocalMillis() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,493,protected long getLocalMillis() {
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,26,mport org.joda.time.base.AbstractPartial;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,26,import org.joda.time.base.BaseLocal;
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,77,xtends AbstractPartial
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,77,extends BaseLocal
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,534,ong getLocalMillis() {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,534,protected long getLocalMillis() {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,28,mport org.joda.time.base.AbstractPartial;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,28,import org.joda.time.base.BaseLocal;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,74,xtends AbstractPartial
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,74,extends BaseLocal
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,556,ong getLocalMillis() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,556,protected long getLocalMillis() {
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,16,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,19,* BaseLocal is an abstract implementation of ReadablePartial that
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,20,* use a local milliseconds internal representation.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,21,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,22,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,23,* The {@link org.joda.time.ReadablePartial} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,24,* kinds of partial objects are to be referenced.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,25,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,26,* BasePartial subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,28,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,29,* @since 1.5
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,31,public abstract class BaseLocal
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,32,extends AbstractPartial {
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,34,/** Serialization version */
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,35,private static final long serialVersionUID = 276453175381783L;
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,39,"* Constructs a partial with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,40,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,41,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,42,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,43,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,44,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,46,protected BaseLocal() {
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,47,super();
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,52,* Gets the local milliseconds from the Java epoch
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,53,* of 1970-01-01T00:00:00 (not fixed to any specific time zone).
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,54,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,55,* This method is useful in certain circustances for high performance
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,56,* access to the datetime fields.
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,58,* @return the number of milliseconds since 1970-01-01T00:00:00
True,JodaTime/src/java/org/joda/time/base/BaseLocal.java,JodaTime/src/java/org/joda/time/base/BaseLocal.java,60,protected abstract long getLocalMillis();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,2,*  Copyright 2001-2007 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,121,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,150,f (start.size() != end.size()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,151,"hrow new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,153,"or (int i = 0, isize = start.size(); i < isize; i++) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,154,f (start.getFieldType(i) != end.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,149,if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,150,// for performance
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,151,type = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,152,long startMillis = ((BaseLocal) start).getLocalMillis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,153,long endMillis = ((BaseLocal) end).getLocalMillis();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,154,Chronology chrono = start.getChronology();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,155,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,156,iType = type;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,157,"iValues = chrono.get(this, startMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,158,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,159,if (start.size() != end.size()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,162,"for (int i = 0, isize = start.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,163,if (start.getFieldType(i) != end.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,164,"throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,167,if (DateTimeUtils.isContiguous(start) == false) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,168,"throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,170,iType = checkPeriodType(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,171,Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,172,"iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,158,f (DateTimeUtils.isContiguous(start) == false) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,159,"hrow new IllegalArgumentException(""ReadablePartial objects must be contiguous"");"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,161,Type = checkPeriodType(type);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,162,hronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,163,"Values = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,2,*  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,768,public void testConstructor_RP_RP2Local() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,769,"LocalDate dt1 = new LocalDate(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,770,"LocalDate dt2 = new LocalDate(2005, 5, 17);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,771,"Period test = new Period(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,772,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,773,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,774,"assertEquals(11, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,775,"assertEquals(1, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,776,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,777,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,778,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,779,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,780,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,868,public void testConstructor_RP_RP_PeriodType2Local() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,869,"LocalDate dt1 = new LocalDate(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,870,"LocalDate dt2 = new LocalDate(2005, 5, 17);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,871,"Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,872,"assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,873,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,874,"assertEquals(11, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,875,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,876,"assertEquals(8, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,877,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,878,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,879,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,880,"assertEquals(0, test.getMillis());"

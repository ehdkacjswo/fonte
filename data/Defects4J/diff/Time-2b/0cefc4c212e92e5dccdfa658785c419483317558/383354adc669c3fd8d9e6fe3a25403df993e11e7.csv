is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,121,hrow new ArithmeticException
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,122,"""The calculation caused an overflow: "" + val1 + "" * "" + val2);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,121,"throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,131, @param scalar  the second value
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,130,* @param val2  the second value
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,136,"ublic static long safeMultiply(long val1, int scalar) {"
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,137,witch (scalar) {
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,138,ase -1:
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,139,eturn -val1;
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,140,ase 0:
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,141,eturn 0L;
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,142,ase 1:
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,143,eturn val1;
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,135,"public static long safeMultiply(long val1, int val2) {"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,136,switch (val2) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,137,case -1:
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,138,if (val1 == Long.MIN_VALUE) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,139,"throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,141,return -val1;
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,142,case 0:
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,143,return 0L;
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,144,case 1:
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,145,return val1;
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,145,ong total = val1 * scalar;
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,146,f (total / scalar != val1) {
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,147,hrow new ArithmeticException
False,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,148,"""The calculation caused an overflow: "" + val1 + "" * "" + scalar);"
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,147,long total = val1 * val2;
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,148,if (total / val2 != val1) {
True,src/main/java/org/joda/time/field/FieldUtils.java,src/main/java/org/joda/time/field/FieldUtils.java,149,"throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,194,"ssertEquals(0L, FieldUtils.safeMultiply(0L, 0L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,196,"ssertEquals(1L, FieldUtils.safeMultiply(1L, 1L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,197,"ssertEquals(3L, FieldUtils.safeMultiply(1L, 3L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,198,"ssertEquals(3L, FieldUtils.safeMultiply(3L, 1L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,200,"ssertEquals(6L, FieldUtils.safeMultiply(2L, 3L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,201,"ssertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,202,"ssertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,203,"ssertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,205,"ssertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,206,"ssertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,207,"ssertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,209,ry {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,210,"ieldUtils.safeMultiply(Long.MIN_VALUE, -1L);"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,211,ail();
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,212, catch (ArithmeticException e) {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,215,ry {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,216,"ieldUtils.safeMultiply(-1L, Long.MIN_VALUE);"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,217,ail();
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,218, catch (ArithmeticException e) {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,221,ry {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,222,"ieldUtils.safeMultiply(Long.MIN_VALUE, 100L);"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,223,ail();
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,224, catch (ArithmeticException e) {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,227,ry {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,228,"ieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,229,ail();
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,230, catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,194,"assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,196,"assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,197,"assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,198,"assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,200,"assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,201,"assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,202,"assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,203,"assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,205,"assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,206,"assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,207,"assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,209,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,210,"FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,211,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,212,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,215,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,216,"FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,217,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,218,} catch (ArithmeticException e) {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,233,ry {
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,234,"ieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);"
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,235,ail();
False,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,236, catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,221,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,222,"FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,223,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,224,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,227,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,228,"FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,229,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,230,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,233,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,234,"FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,235,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,236,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,241,public void testSafeMultiplyLongInt() {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,242,"assertEquals(0L, FieldUtils.safeMultiply(0L, 0));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,244,"assertEquals(1L, FieldUtils.safeMultiply(1L, 1));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,245,"assertEquals(3L, FieldUtils.safeMultiply(1L, 3));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,246,"assertEquals(3L, FieldUtils.safeMultiply(3L, 1));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,248,"assertEquals(6L, FieldUtils.safeMultiply(2L, 3));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,249,"assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,250,"assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,251,"assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,253,"assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,255,"assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,256,"assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,257,"assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,259,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,260,"FieldUtils.safeMultiply(Long.MIN_VALUE, -1);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,261,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,262,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,265,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,266,"FieldUtils.safeMultiply(Long.MIN_VALUE, 100);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,267,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,268,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,271,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,272,"FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,273,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,274,} catch (ArithmeticException e) {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,277,try {
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,278,"FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);"
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,279,fail();
True,src/test/java/org/joda/time/field/TestFieldUtils.java,src/test/java/org/joda/time/field/TestFieldUtils.java,280,} catch (ArithmeticException e) {

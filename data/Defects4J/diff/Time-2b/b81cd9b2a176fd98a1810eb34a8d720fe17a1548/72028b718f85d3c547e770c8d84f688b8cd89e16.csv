is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,226, Gets a copy of this instant with different millis.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,227, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,228, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,229," Only the millis will change, the chronology is kept."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,231," @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,232, @return a copy of this instant with different millis
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,234,ublic ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,235,"eturn new MutableDateOnly(newMillis, getChronology());"
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,239, Gets a copy of this instant with a different chronology.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,240, <p>
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,241, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,242," Only the chronology will change, the millis are kept."
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,244, @param newChronology  the new chronology
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,245, @return a copy of this instant with a different chronology
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,247,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,248,ewChronology = newChronology == null ? ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,249, newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,250,"eturn new MutableDateOnly(getMillis(), newChronology);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,316, Gets a copy of this instant with different millis.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,317, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,318, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,319," Only the millis will change, the chronology and time zone are kept."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,321," @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,322, @return a copy of this instant with different millis
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,324,ublic ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,325,"eturn new MutableDateTime(newMillis, getChronology());"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,329, Gets a copy of this instant with a different chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,330, <p>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,331, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,332," Only the chronology will change, the millis are kept."
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,334, @param newChronology  the new chronology
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,335, @return a copy of this instant with a different chronology
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,337,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,338,"eturn new MutableDateTime(getMillis(), newChronology);"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,230, Gets a copy of this instant with different millis.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,231, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,232, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,233," Only the millis will change, the chronology is kept."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,234, Immutable subclasses may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,236," @param newMillis  the new millis, from 1970-01-01T00:00:00Z"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,237, @return a copy of this instant with different millis
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,239,ublic ReadableInstant withMillis(long newMillis) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,240,"eturn new MutableTimeOnly(newMillis, getChronology());"
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,244, Gets a copy of this instant with a different chronology.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,245, <p>
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,246, The returned object will be a new instance of the same implementation type.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,247," Only the chronology will change, the millis are kept."
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,248, Immutable subclasses may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,250, @param newChronology  the new chronology
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,251, @return a copy of this instant with a different chronology
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,253,ublic ReadableInstant withChronology(Chronology newChronology) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,254,ewChronology = newChronology == null ? ISOChronology.getInstanceUTC()
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,255, newChronology.withUTC();
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,256,"eturn new MutableTimeOnly(getMillis(), newChronology);"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,567, Sets the value of the specified field.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,568, It is permitted to use a field from another Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,569, For example:
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,570, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,571, MutableDateTime dt = new MutableDateTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,572," dt.set(GJChronology.getInstance().year(), 2002);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,573, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,575, @param field  the DateTimeField to use
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,576, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,577, @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,567,"* Sets the value of one of the fields of the instant, such as hourOfDay."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,569,"* @param type  a field type, usually obtained from DateTimeFieldType, null ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,570,* @param value  the value to set the field to
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,580,"ublic void set(final DateTimeField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,581,f (field == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,582,"hrow new IllegalArgumentException(""The DateTimeField must not be null"");"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,573,"public void set(DateTimeFieldType type, int value) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,574,if (type != null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,575,"setMillis(type.getField(getChronology()).set(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,584,"etMillis(field.set(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,588, Adds the to the datetime the amount represented by the duration multiplied by the value.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,589, It is permitted to use a field from another Chronology.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,590, For example:
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,591, <pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,592, MutableDateTime dt = new MutableDateTime();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,593," dt.add(GJChronology.getInstance().years(), 2);"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,594, </pre>
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,596, @param field  the DurationField to use
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,597, @param value the value
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,598, @throws IllegalArgumentException if the field is null
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,599, @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,580,* Adds to the instant specifying the duration and multiple to add.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,582,"* @param type  a field type, usually obtained from DateTimeFieldType, null ignored"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,583,* @param amount  the amount to add of this duration
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,584,* @throws ArithmeticException if the result exceeds the capacity of the instant
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,601,"ublic void add(final DurationField field, final int value) {"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,602,f (field == null) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,603,"hrow new IllegalArgumentException(""The DurationField must not be null"");"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,586,"public void add(DurationFieldType type, int amount) {"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,587,if (type != null) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,588,"setMillis(type.getField(getChronology()).add(getMillis(), amount));"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,605,"etMillis(field.add(getMillis(), value));"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,180, Sets the value of one of the fields of a datetime.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,181, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,182, DateTimeField instances are generally obtained from a {@link Chronology} subclass.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,183," However, an application can create its own DateTimeField to manipulate the"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,184, date time millis in new ways.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,180,"* Sets the value of one of the fields of the instant, such as hourOfDay."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,186," @param field  a DateTimeField instance, usually obtained from a Chronology"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,187, @param value  the value of that field for the millis set in the implementation
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,188, @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,182,"* @param type  a field type, usually obtained from DateTimeFieldType, null ignored"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,183,* @param value  the value to set the field to
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,191,"oid set(DateTimeField field, int value);"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,186,"void set(DateTimeFieldType type, int value);"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,194, Adds to the instant specifying the duration and multiple.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,195, <p>
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,196, DurationField instances are generally obtained from a {@link Chronology} subclass.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,197," However, an application can create its own DurationField to manipulate the"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,198, date time millis in new ways.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,189,* Adds to the instant specifying the duration and multiple to add.
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,200," @param field  a DurationField instance, usually obtained from a Chronology"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,201, @param value  the number of times to add the duration
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,202, @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,191,"* @param type  a field type, usually obtained from DateTimeFieldType, null ignored"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,192,* @param amount  the amount to add of this duration
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,205,"oid add(DurationField field, int value);"
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,195,"void add(DurationFieldType type, int amount);"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,75, Get the value of one of the fields of a datetime.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,76, <p>
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,77, This method uses the chronology of the datetime to obtain the value.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,78, It is essentially a generic way of calling one of the get methods.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,80," @param type  a field type, usually obtained from DateTimeFieldType"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,81, @return the value of that field
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,82, @throws IllegalArgumentException if the field is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,84,nt get(DateTimeFieldType type);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,227, Get this object as a DateTime.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,228, <p>
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,229," If the implementation of the interface is a DateTime in the correct zone,"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,230, it is returned directly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,232, @param zone  time zone to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,233, @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,234, @throws IllegalArgumentException if the time zone is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,236,ateTime toDateTime(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,239, Get this object as a DateTime.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,240, <p>
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,241," If the implementation of the interface is a DateTime in the correct chronology,"
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,242, it is returned directly.
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,244, @param chronology  chronology to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,245, @return a DateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,246, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,248,ateTime toDateTime(Chronology chronology);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,258," Get this object as a MutableDateTime, always returning a new instance."
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,260, @param zone  time zone to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,261, @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,262, @throws IllegalArgumentException if the time zone is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,264,utableDateTime toMutableDateTime(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,267," Get this object as a MutableDateTime, always returning a new instance."
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,269, @param chronology  chronology to apply
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,270, @return a MutableDateTime using the same millis
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,271, @throws IllegalArgumentException if the chronology is null
False,JodaTime/src/java/org/joda/time/ReadableDateTime.java,JodaTime/src/java/org/joda/time/ReadableDateTime.java,273,utableDateTime toMutableDateTime(Chronology chronology);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,98," Gets a value of the specified field, which is obtained from a Chronology."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,98,* Get the value of one of the fields of a datetime.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,100, Field instances are generally obtained from a {@link Chronology}.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,101," However, an application can create its own fields to manipulate the"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,102, datetime millis in new ways.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,100,* This method uses the chronology of the instant to obtain the value.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,104," @param field  a field, usually obtained from a Chronology"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,105, @return the value of that field for the millis set in the implementation
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,106, @throws IllegalArgumentException if the field is null
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,102,"* @param type  a field type, usually obtained from DateTimeFieldType, not null"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,103,* @return the value of that field
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,104,* @throws IllegalArgumentException if the field type is null
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,108,nt get(DateTimeField field);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,106,int get(DateTimeFieldType type);
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,61,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,109, Get the value of the specified field.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,110,* Get the value of one of the fields of a datetime using the chronology of the instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,111,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,112,* This method uses the chronology of the instant to obtain the value.
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,113,* For example:
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,114,* <pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,115,* DateTime dt = new DateTime();
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,116,* int year = dt.get(DateTimeFieldType.year());
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,117,* </pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,119,"* @param type  a field type, usually obtained from DateTimeFieldType, not null"
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,120,* @return the value of that field
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,121,* @throws IllegalArgumentException if the field type is null
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,123,public int get(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,124,if (type == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,125,"throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");"
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,127,return type.getField(getChronology()).get(getMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,131,* Get the value of one of the fields of a datetime.
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,115, int gjYear = dt.get(GJChronology.getInstance().year());
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,137,* int gjYear = dt.get(Chronology.getCoptic().year());
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,118, @param field  the DateTimeField subclass to use
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,140,"* @param field  the DateTimeField to use, not null"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,153,ublic void testGet() {
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,154,nstant test = new Instant();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,153,public void testGet_DateTimeFieldType() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,154,Instant test = new Instant();  // 2002-06-09
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,155,"assertEquals(1, test.get(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,156,"assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,157,"assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,158,"assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,159,"assertEquals(2002, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,160,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,161,"assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,162,"assertEquals(2002, test.get(DateTimeFieldType.weekyear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,163,"assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,164,"assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,165,"assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,166,"assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,167,"assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));  // UTC zone"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,168,"assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));  // UTC zone"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,169,"assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));  // UTC zone"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,170,"assertEquals(0, test.get(DateTimeFieldType.hourOfDay()));  // UTC zone"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,171,"assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,172,"assertEquals(0, test.get(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,173,"assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,174,"assertEquals(0, test.get(DateTimeFieldType.secondOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,175,"assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,176,"assertEquals(0, test.get(DateTimeFieldType.millisOfDay()));"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,177,try {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,178,test.get((DateTimeFieldType) null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,179,fail();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,180,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,183,public void testGet_DateTimeField() {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,184,Instant test = new Instant();  // 2002-06-09
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,178,est.get(null);
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,208,test.get((DateTimeField) null);
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,208,ublic void testAdd_DurationField_int1() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,208,public void testAdd_DurationFieldType_int1() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,210,"est.add(ISOChronology.getInstance().years(), 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,210,"test.add(DurationFieldType.years(), 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,214,ublic void testAdd_DurationField_int2() {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,214,public void testAdd_DurationFieldType_int2() {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,216,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,217,"est.add((DurationField) null, 2010);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,218,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,219, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,216,"test.add((DurationFieldType) null, 2010); // has no effect"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,232,"est.set(ISOChronology.getInstance().year(), 2010);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,232,"test.set(DateTimeFieldType.year(), 2010);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,238,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,239,"est.set(null, 2010);"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,240,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,241, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,238,"test.set(null, 2010); // has no effect"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,248,"est.set(ISOChronology.getInstance().monthOfYear(), 13);"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,245,"test.set(DateTimeFieldType.monthOfYear(), 13);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,183,"assertEquals(Chronology.getGJ(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,186,public void testSetIntoInterval_Object4() throws Exception {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,187,"MutableInterval i = new MutableInterval(0L, 123L) {"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,188,public Chronology getChronology() {
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,189,return null; // bad
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,192,"MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,193,"ReadableIntervalConverter.INSTANCE.setInto(m, i, null);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,194,"assertEquals(0L, m.getStartMillis());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,195,"assertEquals(123L, m.getEndMillis());"

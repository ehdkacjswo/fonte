is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,16,package org.joda.time;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,18,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,19,import java.util.ArrayList;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,20,import java.util.Arrays;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,21,import java.util.List;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,22,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,24,import org.joda.time.base.AbstractPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,25,import org.joda.time.field.AbstractPartialFieldProperty;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,26,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,27,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,28,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,29,import org.joda.time.format.ISODateTimeFormat;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,32,* Partial is an immutable partial datetime where the fields supported
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,33,* are defined by the constructor.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,34,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,35,* Calculations on Partial are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,36,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,37,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,38,* Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,39,* <ul>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,40,* <li><code>get(DateTimeFieldType.monthOfYear())</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,41,* <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,42,* </ul>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,43,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,44,* field:
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,45,* <ul>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,46,* <li>numeric value - <code>monthOfYear().get()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,47,* <li>text value - <code>monthOfYear().getAsText()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,48,* <li>short text value - <code>monthOfYear().getAsShortText()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,49,* <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,50,* <li>add/subtract - <code>monthOfYear().addToCopy()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,51,* <li>set - <code>monthOfYear().setCopy()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,52,* </ul>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,53,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,54,"* Partial is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,55,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,57,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,58,* @since 1.1
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,60,public final class Partial
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,61,extends AbstractPartial
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,62,"implements ReadablePartial, Serializable {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,64,/** Serialization version */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,65,private static final long serialVersionUID = 12324121189002L;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,67,/** The chronology in use. */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,68,private final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,69,/** The set of field types. */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,70,private final DateTimeFieldType[] iTypes;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,71,/** The values of each field in this partial. */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,72,private final int[] iValues;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,73,"/** The formatter to use, [0] may miss some fields, [1] doesn't miss any fields. */"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,74,private transient DateTimeFormatter[] iFormatter;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,76,// Constructors
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,79,"* Constructs a Partial with no fields or values, which can be considered"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,80,* to represent any date.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,81,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,82,"* This is most useful when constructing partials, for example:"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,83,* <pre>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,84,* Partial p = new Partial()
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,85,"*     .with(DateTimeFieldType.dayOfWeek(), 5)"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,86,"*     .with(DateTimeFieldType.hourOfDay(), 12)"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,87,"*     .with(DateTimeFieldType.minuteOfHour(), 20);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,88,* </pre>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,89,"* Note that, although this is a clean way to write code, it is fairly"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,90,* inefficient internally.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,91,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,92,* The constructor uses the default ISO chronology.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,94,public Partial() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,95,this((Chronology) null);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,99,"* Constructs a Partial with no fields or values, which can be considered"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,100,* to represent any date.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,101,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,102,"* This is most useful when constructing partials, for example:"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,103,* <pre>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,104,* Partial p = new Partial(chrono)
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,105,"*     .with(DateTimeFieldType.dayOfWeek(), 5)"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,106,"*     .with(DateTimeFieldType.hourOfDay(), 12)"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,107,"*     .with(DateTimeFieldType.minuteOfHour(), 20);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,108,* </pre>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,109,"* Note that, although this is a clean way to write code, it is fairly"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,110,* inefficient internally.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,112,"* @param chronology  the chronology, null means ISO"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,114,public Partial(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,115,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,116,iChronology = DateTimeUtils.getChronology(chrono).withUTC();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,117,iTypes = new DateTimeFieldType[0];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,118,iValues = new int[0];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,122,* Constructs a Partial with the specified field and value.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,123,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,124,* The constructor uses the default ISO chronology.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,126,"* @param type  the single type to create the partial from, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,127,* @param value  the value to store
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,128,* @throws IllegalArgumentException if the type or value is invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,130,"public Partial(DateTimeFieldType type, int value) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,131,"this(type, value, null);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,135,* Constructs a Partial with the specified field and value.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,136,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,137,* The constructor uses the specified chronology.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,139,"* @param type  the single type to create the partial from, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,140,* @param value  the value to store
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,141,"* @param chronology  the chronology, null means ISO"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,142,* @throws IllegalArgumentException if the type or value is invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,144,"public Partial(DateTimeFieldType type, int value, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,145,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,146,chronology = DateTimeUtils.getChronology(chronology).withUTC();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,147,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,148,if (type == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,149,"throw new IllegalArgumentException(""The field type must not be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,151,iTypes = new DateTimeFieldType[] {type};
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,152,iValues = new int[] {value};
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,153,"chronology.validate(this, iValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,157,* Constructs a Partial with the specified fields and values.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,158,* The fields must be specified in the order largest to smallest.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,159,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,160,* The constructor uses the specified chronology.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,162,"* @param types  the types to create the partial from, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,163,"* @param values  the values to store, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,164,* @throws IllegalArgumentException if the types or values are invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,166,"public Partial(DateTimeFieldType[] types, int[] values) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,167,"this(types, values, null);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,171,* Constructs a Partial with the specified fields and values.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,172,* The fields must be specified in the order largest to smallest.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,173,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,174,* The constructor uses the specified chronology.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,176,"* @param types  the types to create the partial from, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,177,"* @param values  the values to store, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,178,"* @param chronology  the chronology, null means ISO"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,179,* @throws IllegalArgumentException if the types or values are invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,181,"public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,182,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,183,chronology = DateTimeUtils.getChronology(chronology).withUTC();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,184,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,185,if (types == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,186,"throw new IllegalArgumentException(""Types array must not be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,188,if (values == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,189,"throw new IllegalArgumentException(""Values array must not be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,191,if (values.length != types.length) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,192,"throw new IllegalArgumentException(""Values array must be the same length as the types array"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,194,if (types.length == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,195,iTypes = types;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,196,iValues = values;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,197,return;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,199,for (int i = 0; i < types.length; i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,200,if (types[i] == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,201,"throw new IllegalArgumentException(""Types array must not contain null: index "" + i);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,204,DurationField lastUnitField = null;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,205,for (int i = 0; i < types.length; i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,206,DateTimeFieldType loopType = types[i];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,207,DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,208,if (i > 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,209,int compare = lastUnitField.compareTo(loopUnitField);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,210,if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,211,"throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,212,"types[i - 1].getName() + "" < "" + loopType.getName());"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,213,} else if (compare == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,214,if (types[i - 1].getRangeDurationType() == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,215,if (loopType.getRangeDurationType() == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,216,"throw new IllegalArgumentException(""Types array must not contain duplicate: "" + loopType.getName());"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,218,} else {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,219,if (loopType.getRangeDurationType() == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,220,"throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,221,"types[i - 1].getName() + "" < "" + loopType.getName());"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,223,DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,224,DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,225,if (lastRangeField.compareTo(loopRangeField) < 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,226,"throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,227,"types[i - 1].getName() + "" < "" + loopType.getName());"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,229,if (lastRangeField.compareTo(loopRangeField) == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,230,"throw new IllegalArgumentException(""Types array must not contain duplicate: "" + loopType.getName());"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,235,lastUnitField = loopUnitField;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,238,iTypes = (DateTimeFieldType[]) types.clone();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,239,"chronology.validate(this, values);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,240,iValues = (int[]) values.clone();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,244,* Constructs a Partial by copying all the fields and types from
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,245,* another partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,246,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,247,* This is most useful when copying from a YearMonthDay or TimeOfDay.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,249,public Partial(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,250,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,251,if (partial == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,252,"throw new IllegalArgumentException(""The partial must not be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,254,iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,255,iTypes = new DateTimeFieldType[partial.size()];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,256,iValues = new int[partial.size()];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,257,for (int i = 0; i < partial.size(); i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,258,iTypes[i] = partial.getFieldType(i);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,259,iValues[i] = partial.getValue(i);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,264,* Constructs a Partial with the specified values.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,265,* This constructor assigns and performs no validation.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,267,* @param partial  the partial to copy
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,268,* @param values  the values to store
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,269,* @throws IllegalArgumentException if the types or values are invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,271,"Partial(Partial partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,272,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,273,iChronology = partial.iChronology;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,274,iTypes = partial.iTypes;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,275,iValues = values;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,279,"* Constructs a Partial with the specified chronology, fields and values."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,280,* This constructor assigns and performs no validation.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,282,* @param chronology  the chronology
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,283,* @param types  the types to create the partial from
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,284,* @param values  the values to store
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,285,* @throws IllegalArgumentException if the types or values are invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,287,"Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,288,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,289,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,290,iTypes = types;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,291,iValues = values;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,296,* Gets the number of fields in this partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,298,* @return the field count
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,300,public int size() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,301,return iTypes.length;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,305,* Gets the chronology of the partial which is never null.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,306,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,307,* The {@link Chronology} is the calculation engine behind the partial and
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,308,* provides conversion and validation of the fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,310,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,312,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,313,return iChronology;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,317,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,319,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,320,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,321,* @return the field
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,322,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,324,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,325,return iTypes[index].getField(chrono);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,329,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,331,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,332,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,333,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,335,public DateTimeFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,336,return iTypes[index];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,340,* Gets an array of the field type of each of the fields that
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,341,* this partial supports.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,342,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,343,* The fields are returned largest to smallest.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,345,"* @return the array of field types (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,347,public DateTimeFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,348,return (DateTimeFieldType[]) iTypes.clone();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,353,* Gets the value of the field at the specifed index.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,355,* @param index  the index
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,356,* @return the value
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,357,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,359,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,360,return iValues[index];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,364,* Gets an array of the value of each of the fields that
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,365,* this partial supports.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,366,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,367,* The fields are returned largest to smallest.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,368,* Each value corresponds to the same array index as <code>getFieldTypes()</code>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,370,"* @return the current values of each field (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,372,public int[] getValues() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,373,return (int[]) iValues.clone();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,378,* Creates a new Partial instance with the specified chronology.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,379,* This instance is immutable and unaffected by this method call.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,380,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,381,"* This method retains the values of the fields, thus the result will"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,382,* typically refer to a different instant.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,383,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,384,"* The time zone of the specified chronology is ignored, as Partial"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,385,* operates without a time zone.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,387,"* @param newChronology  the new chronology, null means ISO"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,388,* @return a copy of this datetime with a different chronology
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,389,* @throws IllegalArgumentException if the values are invalid for the new chronology
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,391,public Partial withChronologyRetainFields(Chronology newChronology) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,392,newChronology = DateTimeUtils.getChronology(newChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,393,newChronology = newChronology.withUTC();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,394,if (newChronology == getChronology()) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,395,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,396,} else {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,397,"Partial newPartial = new Partial(newChronology, iTypes, iValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,398,"newChronology.validate(newPartial, iValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,399,return newPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,405,* Gets a copy of this date with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,406,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,407,"* If this partial did not previously support the field, the new one will."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,408,"* Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,409,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,410,"* For example, if the field type is <code>dayOfMonth</code> then the day"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,411,* would be changed/added in the returned instance.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,413,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,414,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,415,* @return a copy of this instance with the field set
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,416,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,418,"public Partial with(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,419,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,420,"throw new IllegalArgumentException(""The field type must not be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,422,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,423,if (index == -1) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,424,DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,425,int[] newValues = new int[newTypes.length];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,427,// find correct insertion point to keep largest-smallest order
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,428,int i = 0;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,429,DurationField unitField = fieldType.getDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,430,if (unitField.isSupported()) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,431,for (; i < iTypes.length; i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,432,DateTimeFieldType loopType = iTypes[i];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,433,DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,434,if (loopUnitField.isSupported()) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,435,int compare = unitField.compareTo(loopUnitField);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,436,if (compare > 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,437,break;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,438,} else if (compare == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,439,DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,440,DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,441,if (rangeField.compareTo(loopRangeField) > 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,442,break;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,448,"System.arraycopy(iTypes, 0, newTypes, 0, i);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,449,"System.arraycopy(iValues, 0, newValues, 0, i);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,450,newTypes[i] = fieldType;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,451,newValues[i] = value;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,452,"System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,453,"System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,455,"Partial newPartial = new Partial(iChronology, newTypes, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,456,"iChronology.validate(newPartial, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,457,return newPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,459,if (value == getValue(index)) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,460,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,462,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,463,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,464,"return new Partial(this, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,468,* Gets a copy of this date with the specified field removed.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,469,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,470,"* If this partial did not previously support the field, no error occurs."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,472,"* @param fieldType  the field type to remove, may be null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,473,* @return a copy of this instance with the field removed
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,475,public Partial without(DateTimeFieldType fieldType) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,476,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,477,if (index != -1) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,478,DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,479,int[] newValues = new int[size() - 1];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,480,"System.arraycopy(iTypes, 0, newTypes, 0, index);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,481,"System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,482,"System.arraycopy(iValues, 0, newValues, 0, index);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,483,"System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,484,"Partial newPartial = new Partial(iChronology, newTypes, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,485,"iChronology.validate(newPartial, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,486,return newPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,488,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,493,* Gets a copy of this Partial with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,494,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,495,"* If this partial does not support the field, an exception is thrown."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,496,"* Contrast this behaviour with {@link #with(DateTimeFieldType, int)}."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,497,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,498,"* For example, if the field type is <code>dayOfMonth</code> then the day"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,499,* would be changed in the returned instance if supported.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,501,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,502,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,503,* @return a copy of this instance with the field set
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,504,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,506,"public Partial withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,507,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,508,if (value == getValue(index)) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,509,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,511,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,512,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,513,"return new Partial(this, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,517,* Gets a copy of this Partial with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,518,"* If this partial does not support the field, an exception is thrown."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,519,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,520,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,521,* The addition will overflow into larger fields (eg. minute to hour).
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,522,"* However, it will not wrap around if the top maximum is reached."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,524,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,525,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,526,* @return a copy of this instance with the field updated
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,527,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,528,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,530,"public Partial withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,531,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,532,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,533,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,535,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,536,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,537,"return new Partial(this, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,541,* Gets a copy of this Partial with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,542,"* If this partial does not support the field, an exception is thrown."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,543,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,544,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,545,* The addition will overflow into larger fields (eg. minute to hour).
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,546,"* If the maximum is reached, the addition will wra."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,548,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,549,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,550,* @return a copy of this instance with the field updated
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,551,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,552,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,554,"public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,555,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,556,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,557,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,559,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,560,"newValues = getField(index).addWrapPartial(this, index, newValues, amount);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,561,"return new Partial(this, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,565,* Gets a copy of this Partial with the specified period added.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,566,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,567,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,568,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,569,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,570,* This method is typically used to add multiple copies of complex
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,571,* period instances. Adding one field is best achieved using the method
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,572,"* {@link #withFieldAdded(DurationFieldType, int)}."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,574,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,575,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,576,* @return a copy of this instance with the period added
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,577,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,579,"public Partial withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,580,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,581,return this;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,583,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,584,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,585,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,586,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,587,if (index >= 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,588,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,589,"FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,592,"return new Partial(this, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,596,* Gets a copy of this instance with the specified period added.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,597,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,598,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,600,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,601,* @return a copy of this instance with the period added
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,602,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,604,public Partial plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,605,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,609,* Gets a copy of this instance with the specified period take away.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,610,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,611,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,613,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,614,* @return a copy of this instance with the period taken away
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,615,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,617,public Partial minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,618,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,623,"* Gets the property object for the specified type, which contains"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,624,* many useful methods for getting and manipulating the partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,625,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,626,* See also {@link ReadablePartial#get(DateTimeFieldType)}.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,628,"* @param type  the field type to get the property for, not null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,629,* @return the property object
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,630,* @throws IllegalArgumentException if the field is null or unsupported
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,632,public Property property(DateTimeFieldType type) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,633,"return new Property(this, indexOfSupported(type));"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,638,* Compares this ReadablePartial with another returning an integer
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,639,* indicating the order.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,640,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,641,* The specified object must be a ReadablePartial whose field types
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,642,* match those of this partial. Normally that means that the partials
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,643,* must be the same class.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,645,* @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,646,"* @return negative if this is less, zero if equal, positive if greater"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,647,* @throws ClassCastException if the partial is the wrong class
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,648,*  or if it has field types that don't match
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,649,* @throws NullPointerException if the partial is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,651,public int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,652,if (this == partial) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,653,return 0;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,655,ReadablePartial other = (ReadablePartial) partial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,656,if (size() != other.size()) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,657,"throw new ClassCastException(""ReadablePartial objects must have matching field types"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,659,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,660,if (getFieldType(i) != other.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,661,"throw new ClassCastException(""ReadablePartial objects must have matching field types"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,664,// fields are ordered largest first
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,665,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,666,if (getValue(i) > other.getValue(i)) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,667,return 1;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,669,if (getValue(i) < other.getValue(i)) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,670,return -1;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,673,return 0;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,677,* Is this partial later than the specified partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,678,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,679,* You may not pass null into this method. This is because you need
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,680,* a time zone to accurately determine the current date.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,682,"* @param date  an date to check against, null means now"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,683,* @return true if this date is after the date passed in
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,684,* @throws IllegalArgumentException if the specified YearMonthDay is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,686,public boolean isAfter(Partial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,687,if (date == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,688,"throw new IllegalArgumentException(""Partial cannot be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,690,return compareTo(date) > 0;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,694,* Is this partial earlier than the specified partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,695,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,696,* You may not pass null into this method. This is because you need
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,697,* a time zone to accurately determine the current date.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,699,"* @param date  an date to check against, null means now"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,700,* @return true if this date is before the date passed in
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,701,* @throws IllegalArgumentException if the specified YearMonthDay is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,703,public boolean isBefore(Partial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,704,if (date == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,705,"throw new IllegalArgumentException(""Partial cannot be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,707,return compareTo(date) < 0;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,711,* Is this partial the same as the specified partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,712,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,713,* You may not pass null into this method. This is because you need
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,714,* a time zone to accurately determine the current date.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,716,"* @param date  an date to check against, null means now"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,717,* @return true if this date is the same as the date passed in
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,718,* @throws IllegalArgumentException if the specified YearMonthDay is null
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,720,public boolean isEqual(Partial date) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,721,if (date == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,722,"throw new IllegalArgumentException(""Partial cannot be null"");"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,724,return compareTo(date) == 0;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,729,* Gets a formatter suitable for the fields in this partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,730,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,731,"* If there is no appropriate ISO format, null is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,732,* This method may return a formatter that does not display all the
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,733,* fields of the partial. This might occur when you have overlapping
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,734,"* fields, such as dayOfWeek and dayOfMonth."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,736,"* @return a formatter suitable for the fields in this partial, null"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,737,*  if none is suitable
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,739,public DateTimeFormatter getFormatter() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,740,DateTimeFormatter[] f = iFormatter;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,741,if (f == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,742,if (size() == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,743,return null;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,745,f = new DateTimeFormatter[2];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,746,try {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,747,List list = new ArrayList(Arrays.asList(iTypes));
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,748,"f[0] = ISODateTimeFormat.forFields(list, true, false);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,749,if (list.size() == 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,750,f[1] = f[0];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,752,} catch (IllegalArgumentException ex) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,753,// ignore
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,755,iFormatter = f;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,757,return f[0];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,762,* Output the date in an appropriate ISO8601 format.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,763,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,764,* This method will output the partial in one of two ways.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,765,* If {@link #getFormatter()}
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,767,* If there is no appropriate ISO format a dump of the fields is output
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,768,* via {@link #toStringList()}. An appropr
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,770,* @return ISO8601 formatted string
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,772,public String toString() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,773,DateTimeFormatter[] f = iFormatter;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,774,if (f == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,775,getFormatter();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,776,f = iFormatter;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,777,if (f == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,778,return toStringList();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,781,DateTimeFormatter f1 = f[1];
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,782,if (f1 == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,783,return toStringList();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,785,return f1.print(this);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,789,* Gets a string version of the partial that lists all the fields.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,790,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,791,* This method exists to provide a better debugging toString than
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,792,* the standard toString. This method lists all the fields and their
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,793,* values in a style similar to the collections framework.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,795,* @return a toString format that lists all the fields
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,797,public String toStringList() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,798,int size = size();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,799,StringBuffer buf = new StringBuffer(20 * size);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,800,buf.append('[');
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,801,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,802,if (i > 0) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,803,"buf.append(',').append(' ');"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,805,buf.append(iTypes[i].getName());
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,806,buf.append('=');
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,807,buf.append(iValues[i]);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,809,buf.append(']');
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,810,return buf.toString();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,814,* Output the date using the specified format pattern.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,815,* Unsupported fields will appear as special unicode characters.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,817,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,818,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,820,public String toString(String pattern) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,821,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,822,return toString();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,824,return DateTimeFormat.forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,828,* Output the date using the specified format pattern.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,829,* Unsupported fields will appear as special unicode characters.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,831,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,832,"* @param locale  Locale to use, null means default"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,833,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,835,"public String toString(String pattern, Locale locale) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,836,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,837,return toString();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,839,return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,844,* The property class for <code>YearMonthDay</code>.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,845,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,846,* This class binds a <code>YearMonthDay</code> to a <code>DateTimeField</code>.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,848,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,849,* @since 1.0
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,851,public static class Property extends AbstractPartialFieldProperty implements Serializable {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,853,/** Serialization version */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,854,private static final long serialVersionUID = 53278362873888L;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,856,/** The partial */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,857,private final Partial iPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,858,/** The field index */
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,859,private final int iFieldIndex;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,862,* Constructs a property.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,864,* @param partial  the partial instance
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,865,* @param fieldIndex  the index in the partial
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,867,"Property(Partial partial, int fieldIndex) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,868,super();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,869,iPartial = partial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,870,iFieldIndex = fieldIndex;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,874,* Gets the field that this property uses.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,876,* @return the field
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,878,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,879,return iPartial.getField(iFieldIndex);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,883,* Gets the partial that this property belongs to.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,885,* @return the partial
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,887,protected ReadablePartial getReadablePartial() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,888,return iPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,892,* Gets the partial that this property belongs to.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,894,* @return the partial
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,896,public Partial getPartial() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,897,return iPartial;
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,901,* Gets the value of this field.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,903,* @return the field value
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,905,public int get() {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,906,return iPartial.getValue(iFieldIndex);
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,911,* Adds to the value of this field in a copy of this Partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,912,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,913,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,914,* added solely to this field then it will affect larger fields.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,915,* Smaller fields are unaffected.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,916,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,917,"* If the result would be too large, beyond the maximum year, then an"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,918,* IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,919,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,920,* The Partial attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,921,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,923,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,924,* @return a copy of the Partial with the field value changed
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,925,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,927,public Partial addToCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,928,int[] newValues = iPartial.getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,929,"newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,930,"return new Partial(iPartial, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,934,* Adds to the value of this field in a copy of this Partial wrapping
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,935,* within this field if the maximum value is reached.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,936,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,937,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,938,* added solely to this field then it wraps within this field.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,939,* Other fields are unaffected.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,940,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,941,"* For example,"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,942,* <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,943,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,944,* The Partial attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,945,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,947,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,948,* @return a copy of the Partial with the field value changed
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,949,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,951,public Partial addWrapFieldToCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,952,int[] newValues = iPartial.getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,953,"newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,954,"return new Partial(iPartial, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,959,* Sets this field in a copy of the Partial.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,960,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,961,* The Partial attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,962,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,964,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,965,* @return a copy of the Partial with the field value changed
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,966,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,968,public Partial setCopy(int value) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,969,int[] newValues = iPartial.getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,970,"newValues = getField().set(iPartial, iFieldIndex, newValues, value);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,971,"return new Partial(iPartial, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,975,* Sets this field in a copy of the Partial to a parsed text value.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,976,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,977,* The Partial attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,978,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,980,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,981,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,982,* @return a copy of the Partial with the field value changed
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,983,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,985,"public Partial setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,986,int[] newValues = iPartial.getValues();
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,987,"newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,988,"return new Partial(iPartial, newValues);"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,992,* Sets this field in a copy of the Partial to a parsed text value.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,993,* <p>
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,994,* The Partial attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,995,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,997,* @param text  the text value to set
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,998,* @return a copy of the Partial with the field value changed
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,999,* @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,1001,public Partial setCopy(String text) {
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,1002,"return setCopy(text, null);"
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,83,suite.addTest(TestPartial_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,84,suite.addTest(TestPartial_Constructors.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,85,suite.addTest(TestPartial_Properties.suite());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,20,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,21,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,22,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,23,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,24,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,26,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,27,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,29,import org.joda.time.format.DateTimeFormat;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,30,import org.joda.time.format.DateTimeFormatter;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,33,* This class is a Junit unit test for Partial.
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,35,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,37,public class TestPartial_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,40,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,41,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,42,private static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,43,private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,44,private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,45,private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,46,private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,47,private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,48,private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,49,private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,50,private static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,51,private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,52,private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,53,private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,54,private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,56,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,57,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,58,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,59,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,60,+ 40L;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,62,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,63,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,64,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,65,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,66,+ 4L;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,68,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,69,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,70,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,71,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,72,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,73,+ 8L;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,75,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,77,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,78,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,81,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,82,return new TestSuite(TestPartial_Basics.class);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,85,public TestPartial_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,86,super(name);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,89,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,90,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,91,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,92,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,95,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,96,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,97,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,98,zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,102,public void testGet() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,103,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,104,"assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,105,"assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,106,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,107,test.get(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,108,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,109,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,110,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,111,test.get(DateTimeFieldType.secondOfMinute());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,112,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,113,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,116,public void testSize() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,117,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,118,"assertEquals(2, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,121,public void testGetFieldType() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,122,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,123,"assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,124,"assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,125,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,126,test.getFieldType(-1);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,127,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,128,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,129,test.getFieldType(2);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,130,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,133,public void testGetFieldTypes() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,134,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,135,DateTimeFieldType[] fields = test.getFieldTypes();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,136,"assertEquals(2, fields.length);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,137,"assertSame(DateTimeFieldType.hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,138,"assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,139,"assertNotSame(test.getFieldTypes(), test.getFieldTypes());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,142,public void testGetField() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,143,Partial test = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,144,"assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,145,"assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,146,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,147,test.getField(-1);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,148,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,149,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,150,test.getField(5);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,151,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,154,public void testGetFields() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,155,Partial test = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,156,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,157,"assertEquals(2, fields.length);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,158,"assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,159,"assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,160,"assertNotSame(test.getFields(), test.getFields());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,163,public void testGetValue() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,164,Partial test = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,165,"assertEquals(10, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,166,"assertEquals(20, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,167,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,168,test.getValue(-1);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,169,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,170,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,171,test.getValue(2);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,172,} catch (IndexOutOfBoundsException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,175,public void testGetValues() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,176,Partial test = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,177,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,178,"assertEquals(2, values.length);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,179,"assertEquals(10, values[0]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,180,"assertEquals(20, values[1]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,181,"assertNotSame(test.getValues(), test.getValues());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,184,public void testIsSupported() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,185,Partial test = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,186,"assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,187,"assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,188,"assertEquals(false, test.isSupported(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,189,"assertEquals(false, test.isSupported(DateTimeFieldType.millisOfSecond()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,190,"assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,193,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,194,Partial test1 = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,195,Partial test2 = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,196,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,197,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,198,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,199,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,200,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,201,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,202,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,204,Partial test3 = createHourMinPartial2(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,205,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,206,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,207,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,208,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,209,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,210,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,212,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,213,"assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,214,"assertEquals(new TimeOfDay(10, 20, 30, 40), createTODPartial(ISO_UTC));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,218,public void testCompareTo() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,219,Partial test1 = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,220,Partial test1a = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,221,"assertEquals(0, test1.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,222,"assertEquals(0, test1a.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,223,"assertEquals(0, test1.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,224,"assertEquals(0, test1a.compareTo(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,226,Partial test2 = createHourMinPartial2(ISO_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,227,"assertEquals(-1, test1.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,228,"assertEquals(+1, test2.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,230,Partial test3 = createHourMinPartial2(COPTIC_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,231,"assertEquals(-1, test1.compareTo(test3));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,232,"assertEquals(+1, test3.compareTo(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,233,"assertEquals(0, test3.compareTo(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,235,"assertEquals(0, new TimeOfDay(10, 20, 30, 40).compareTo(createTODPartial(ISO_UTC)));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,237,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,238,test1.compareTo(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,239,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,240,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,241,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,242,test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,243,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,244,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,245,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,246,test1.compareTo(new YearMonthDay());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,247,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,248,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,249,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,250,createTODPartial(ISO_UTC).without(DateTimeFieldType.hourOfDay()).compareTo(new YearMonthDay());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,251,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,252,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,256,public void testIsEqual_TOD() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,257,Partial test1 = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,258,Partial test1a = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,259,"assertEquals(true, test1.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,260,"assertEquals(true, test1a.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,261,"assertEquals(true, test1.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,262,"assertEquals(true, test1a.isEqual(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,264,Partial test2 = createHourMinPartial2(ISO_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,265,"assertEquals(false, test1.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,266,"assertEquals(false, test2.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,268,Partial test3 = createHourMinPartial2(COPTIC_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,269,"assertEquals(false, test1.isEqual(test3));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,270,"assertEquals(false, test3.isEqual(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,271,"assertEquals(true, test3.isEqual(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,273,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,274,createHourMinPartial().isEqual(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,275,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,276,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,280,public void testIsBefore_TOD() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,281,Partial test1 = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,282,Partial test1a = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,283,"assertEquals(false, test1.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,284,"assertEquals(false, test1a.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,285,"assertEquals(false, test1.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,286,"assertEquals(false, test1a.isBefore(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,288,Partial test2 = createHourMinPartial2(ISO_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,289,"assertEquals(true, test1.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,290,"assertEquals(false, test2.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,292,Partial test3 = createHourMinPartial2(COPTIC_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,293,"assertEquals(true, test1.isBefore(test3));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,294,"assertEquals(false, test3.isBefore(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,295,"assertEquals(false, test3.isBefore(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,297,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,298,createHourMinPartial().isBefore(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,299,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,300,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,304,public void testIsAfter_TOD() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,305,Partial test1 = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,306,Partial test1a = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,307,"assertEquals(false, test1.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,308,"assertEquals(false, test1a.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,309,"assertEquals(false, test1.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,310,"assertEquals(false, test1a.isAfter(test1a));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,312,Partial test2 = createHourMinPartial2(ISO_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,313,"assertEquals(false, test1.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,314,"assertEquals(true, test2.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,316,Partial test3 = createHourMinPartial2(COPTIC_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,317,"assertEquals(false, test1.isAfter(test3));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,318,"assertEquals(true, test3.isAfter(test1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,319,"assertEquals(false, test3.isAfter(test2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,321,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,322,createHourMinPartial().isAfter(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,323,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,324,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,328,public void testWithChronologyRetainFields_Chrono() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,329,Partial base = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,330,Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,331,"check(base, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,332,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,333,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,334,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,337,public void testWithChronologyRetainFields_sameChrono() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,338,Partial base = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,339,Partial test = base.withChronologyRetainFields(COPTIC_TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,340,"assertSame(base, test);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,343,public void testWithChronologyRetainFields_nullChrono() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,344,Partial base = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,345,Partial test = base.withChronologyRetainFields(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,346,"check(base, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,347,"assertEquals(COPTIC_UTC, base.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,348,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,349,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,353,public void testWith1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,354,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,355,"Partial result = test.with(DateTimeFieldType.hourOfDay(), 15);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,356,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,357,"check(result, 15, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,360,public void testWith2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,361,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,362,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,363,"test.with(null, 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,364,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,365,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,366,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,369,public void testWith3a() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,370,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,371,"Partial result = test.with(DateTimeFieldType.secondOfMinute(), 15);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,372,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,373,"assertEquals(3, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,374,"assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,375,"assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,376,"assertEquals(true, result.isSupported(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,377,"assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,378,"assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,379,"assertEquals(DateTimeFieldType.secondOfMinute(), result.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,380,"assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,381,"assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,382,"assertEquals(15, result.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,385,public void testWith3b() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,386,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,387,"Partial result = test.with(DateTimeFieldType.minuteOfDay(), 15);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,388,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,389,"assertEquals(3, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,390,"assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,391,"assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,392,"assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,393,"assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,394,"assertEquals(DateTimeFieldType.minuteOfDay(), result.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,395,"assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,396,"assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,397,"assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,398,"assertEquals(15, result.get(DateTimeFieldType.minuteOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,401,public void testWith3c() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,402,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,403,"Partial result = test.with(DateTimeFieldType.dayOfMonth(), 15);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,404,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,405,"assertEquals(3, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,406,"assertEquals(true, result.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,407,"assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,408,"assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,409,"assertEquals(DateTimeFieldType.dayOfMonth(), result.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,410,"assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,411,"assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,412,"assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,413,"assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,414,"assertEquals(15, result.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,417,public void testWith3d() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,418,"Partial test = new Partial(DateTimeFieldType.year(), 2005);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,419,"Partial result = test.with(DateTimeFieldType.monthOfYear(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,420,"assertEquals(2, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,421,"assertEquals(2005, result.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,422,"assertEquals(6, result.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,425,public void testWith3e() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,426,"Partial test = new Partial(DateTimeFieldType.era(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,427,"Partial result = test.with(DateTimeFieldType.halfdayOfDay(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,428,"assertEquals(2, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,429,"assertEquals(1, result.get(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,430,"assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,431,"assertEquals(0, result.indexOf(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,432,"assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,435,public void testWith3f() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,436,"Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,437,"Partial result = test.with(DateTimeFieldType.era(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,438,"assertEquals(2, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,439,"assertEquals(1, result.get(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,440,"assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,441,"assertEquals(0, result.indexOf(DateTimeFieldType.era()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,442,"assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,445,public void testWith4() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,446,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,447,"Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,448,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,452,public void testWithout1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,453,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,454,Partial result = test.without(DateTimeFieldType.year());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,455,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,456,"check(result, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,459,public void testWithout2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,460,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,461,Partial result = test.without((DateTimeFieldType) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,462,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,463,"check(result, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,466,public void testWithout3() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,467,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,468,Partial result = test.without(DateTimeFieldType.hourOfDay());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,469,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,470,"assertEquals(1, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,471,"assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,472,"assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,473,"assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,476,public void testWithout4() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,477,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,478,Partial result = test.without(DateTimeFieldType.minuteOfHour());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,479,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,480,"assertEquals(1, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,481,"assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,482,"assertEquals(false, result.isSupported(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,483,"assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,486,public void testWithout5() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,487,"Partial test = new Partial(DateTimeFieldType.hourOfDay(), 12);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,488,Partial result = test.without(DateTimeFieldType.hourOfDay());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,489,"assertEquals(0, result.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,490,"assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,494,public void testWithField1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,495,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,496,"Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,497,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,498,"check(result, 15, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,501,public void testWithField2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,502,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,503,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,504,"test.withField(null, 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,505,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,506,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,507,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,510,public void testWithField3() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,511,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,512,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,513,"test.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,514,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,515,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,516,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,519,public void testWithField4() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,520,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,521,"Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,522,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,526,public void testWithFieldAdded1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,527,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,528,"Partial result = test.withFieldAdded(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,530,"assertEquals(createHourMinPartial(), test);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,531,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,532,"check(result, 16, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,535,public void testWithFieldAdded2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,536,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,537,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,538,"test.withFieldAdded(null, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,539,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,540,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,541,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,544,public void testWithFieldAdded3() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,545,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,546,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,547,"test.withFieldAdded(null, 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,548,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,549,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,550,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,553,public void testWithFieldAdded4() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,554,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,555,"Partial result = test.withFieldAdded(DurationFieldType.hours(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,556,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,559,public void testWithFieldAdded5() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,560,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,561,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,562,"test.withFieldAdded(DurationFieldType.days(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,563,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,564,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,565,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,568,public void testWithFieldAdded6() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,569,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,570,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,571,"test.withFieldAdded(DurationFieldType.hours(), 16);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,572,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,573,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,574,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,576,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,579,public void testWithFieldAdded7() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,580,"Partial test = createHourMinPartial(23, 59, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,581,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,582,"test.withFieldAdded(DurationFieldType.minutes(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,583,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,584,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,585,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,587,"check(test, 23, 59);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,589,"test = createHourMinPartial(23, 59, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,590,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,591,"test.withFieldAdded(DurationFieldType.hours(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,592,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,593,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,594,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,596,"check(test, 23, 59);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,599,public void testWithFieldAdded8() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,600,"Partial test = createHourMinPartial(0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,601,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,602,"test.withFieldAdded(DurationFieldType.minutes(), -1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,603,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,604,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,605,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,607,"check(test, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,609,"test = createHourMinPartial(0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,610,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,611,"test.withFieldAdded(DurationFieldType.hours(), -1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,612,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,613,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,614,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,616,"check(test, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,620,public void testWithFieldAddWrapped1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,621,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,622,"Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,624,"assertEquals(createHourMinPartial(), test);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,625,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,626,"check(result, 16, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,629,public void testWithFieldAddWrapped2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,630,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,631,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,632,"test.withFieldAddWrapped(null, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,633,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,634,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,635,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,638,public void testWithFieldAddWrapped3() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,639,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,640,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,641,"test.withFieldAddWrapped(null, 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,642,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,643,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,644,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,647,public void testWithFieldAddWrapped4() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,648,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,649,"Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,650,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,653,public void testWithFieldAddWrapped5() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,654,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,655,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,656,"test.withFieldAddWrapped(DurationFieldType.days(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,657,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,658,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,659,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,662,public void testWithFieldAddWrapped6() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,663,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,664,"Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 16);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,666,"assertEquals(createHourMinPartial(), test);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,667,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,668,"check(result, 2, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,671,public void testWithFieldAddWrapped7() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,672,"Partial test = createHourMinPartial(23, 59, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,673,"Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,674,"check(test, 23, 59);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,675,"check(result, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,677,"test = createHourMinPartial(23, 59, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,678,"result = test.withFieldAddWrapped(DurationFieldType.hours(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,679,"check(test, 23, 59);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,680,"check(result, 0, 59);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,683,public void testWithFieldAddWrapped8() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,684,"Partial test = createHourMinPartial(0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,685,"Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,686,"check(test, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,687,"check(result, 23, 59);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,689,"test = createHourMinPartial(0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,690,"result = test.withFieldAddWrapped(DurationFieldType.hours(), -1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,691,"check(test, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,692,"check(result, 23, 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,696,public void testPlus_RP() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,697,Partial test = createHourMinPartial(BUDDHIST_LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,698,"Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,699,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,700,"check(result, 15, 26);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,702,result = test.plus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,703,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,707,public void testMinus_RP() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,708,Partial test = createHourMinPartial(BUDDHIST_LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,709,"Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,710,"check(test, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,711,"check(result, 9, 19);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,713,result = test.minus((ReadablePeriod) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,714,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,718,public void testToDateTime_RI() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,719,Partial base = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,720,DateTime dt = new DateTime(0L); // LONDON zone
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,721,"assertEquals(""1970-01-01T01:00:00.000+01:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,723,DateTime test = base.toDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,724,"check(base, 10, 20);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,725,"assertEquals(""1970-01-01T01:00:00.000+01:00"", dt.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,726,"assertEquals(""1970-01-01T10:20:00.000+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,729,public void testToDateTime_nullRI() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,730,"Partial base = createHourMinPartial(1, 2, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,731,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,733,DateTime test = base.toDateTime((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,734,"check(base, 1, 2);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,735,"assertEquals(""1970-01-02T01:02:07.008+01:00"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,739,public void testProperty() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,740,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,741,assertNotNull(test.property(DateTimeFieldType.hourOfDay()));
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,742,assertNotNull(test.property(DateTimeFieldType.minuteOfHour()));
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,743,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,744,test.property(DateTimeFieldType.secondOfDay());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,745,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,746,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,747,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,748,test.property(null);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,749,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,750,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,754,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,755,Partial test = createHourMinPartial(COPTIC_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,757,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,758,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,759,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,760,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,761,oos.close();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,763,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,764,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,765,Partial result = (Partial) ois.readObject();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,766,ois.close();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,768,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,769,"assertTrue(Arrays.equals(test.getValues(), result.getValues()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,770,"assertTrue(Arrays.equals(test.getFields(), result.getFields()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,771,"assertEquals(test.getChronology(), result.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,775,public void testGetFormatter1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,776,"Partial test = new Partial(DateTimeFieldType.year(), 2005);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,777,"assertEquals(""2005"", test.getFormatter().print(test));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,779,"test = test.with(DateTimeFieldType.monthOfYear(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,780,"assertEquals(""2005-06"", test.getFormatter().print(test));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,782,"test = test.with(DateTimeFieldType.dayOfMonth(), 25);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,783,"assertEquals(""2005-06-25"", test.getFormatter().print(test));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,785,test = test.without(DateTimeFieldType.monthOfYear());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,786,"assertEquals(""2005--25"", test.getFormatter().print(test));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,789,public void testGetFormatter2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,790,Partial test = new Partial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,791,"assertEquals(null, test.getFormatter());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,793,"test = test.with(DateTimeFieldType.era(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,794,"assertEquals(null, test.getFormatter());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,796,"test = test.with(DateTimeFieldType.halfdayOfDay(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,797,"assertEquals(null, test.getFormatter());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,800,public void testGetFormatter3() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,801,"Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,802,"assertEquals(""-W-5"", test.getFormatter().print(test));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,804,// contrast with testToString5
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,805,"test = test.with(DateTimeFieldType.dayOfMonth(), 13);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,806,"assertEquals(""---13"", test.getFormatter().print(test));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,810,public void testToString1() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,811,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,812,"assertEquals(""10:20"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,815,public void testToString2() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,816,Partial test = new Partial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,817,"assertEquals(""[]"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,820,public void testToString3() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,821,"Partial test = new Partial(DateTimeFieldType.year(), 2005);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,822,"assertEquals(""2005"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,824,"test = test.with(DateTimeFieldType.monthOfYear(), 6);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,825,"assertEquals(""2005-06"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,827,"test = test.with(DateTimeFieldType.dayOfMonth(), 25);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,828,"assertEquals(""2005-06-25"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,830,test = test.without(DateTimeFieldType.monthOfYear());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,831,"assertEquals(""2005--25"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,834,public void testToString4() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,835,"Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,836,"assertEquals(""-W-5"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,838,"test = test.with(DateTimeFieldType.dayOfMonth(), 13);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,839,"assertEquals(""[dayOfMonth=13, dayOfWeek=5]"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,842,public void testToString5() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,843,"Partial test = new Partial(DateTimeFieldType.era(), 1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,844,"assertEquals(""[era=1]"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,846,"test = test.with(DateTimeFieldType.halfdayOfDay(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,847,"assertEquals(""[era=1, halfdayOfDay=0]"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,851,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,852,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,853,"assertEquals(""\ufffd\ufffd\ufffd\ufffd 10"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,854,"assertEquals(""10:20"", test.toString((String) null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,858,public void testToString_String_Locale() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,859,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,860,"assertEquals(""10 20"", test.toString(""H m"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,861,"assertEquals(""10:20"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,862,"assertEquals(""10 20"", test.toString(""H m"", null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,863,"assertEquals(""10:20"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,867,public void testToString_DTFormatter() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,868,Partial test = createHourMinPartial();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,869,"assertEquals(""\ufffd\ufffd\ufffd\ufffd 10"", test.toString(DateTimeFormat.forPattern(""yyyy HH"")));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,870,"assertEquals(""10:20"", test.toString((DateTimeFormatter) null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,874,private Partial createHourMinPartial() {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,875,return createHourMinPartial(ISO_UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,878,private Partial createHourMinPartial(Chronology chrono) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,879,"return createHourMinPartial(10, 20, chrono);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,882,private Partial createHourMinPartial2(Chronology chrono) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,883,"return createHourMinPartial(15, 20, chrono);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,886,"private Partial createHourMinPartial(int hour, int min, Chronology chrono) {"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,887,return new Partial(
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,888,"new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour()},"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,889,"new int[] {hour, min},"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,890,chrono);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,893,private Partial createTODPartial(Chronology chrono) {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,894,return new Partial(
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,895,new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,896,"DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,897,"DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,898,"new int[] {10, 20, 30, 40},"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,899,chrono);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,902,"private void check(Partial test, int hour, int min) {"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,903,"assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,904,"assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,18,import java.util.Arrays;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,23,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,24,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,27,* This class is a Junit unit test for Partial.
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,29,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,31,public class TestPartial_Constructors extends TestCase {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,33,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,35,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,36,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,37,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,38,private static final int OFFSET = 1;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,40,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,41,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,42,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,43,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,44,+ 40L;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,46,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,47,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,48,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,49,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,50,+ 4L;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,52,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,53,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,54,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,55,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,56,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,57,+ 8L;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,59,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,61,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,62,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,65,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,66,return new TestSuite(TestPartial_Constructors.class);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,69,public TestPartial_Constructors(String name) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,70,super(name);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,73,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,74,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,75,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,76,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,79,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,80,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,81,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,82,zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,87,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,89,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,90,Partial test = new Partial();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,91,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,92,"assertEquals(0, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,97,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,99,public void testConstructor_Chrono() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,100,Partial test = new Partial((Chronology) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,101,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,102,"assertEquals(0, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,104,test = new Partial(GREGORIAN_PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,105,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,106,"assertEquals(0, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,111,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,113,public void testConstructor_Type_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,114,"Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,115,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,116,"assertEquals(1, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,117,"assertEquals(4, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,118,"assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,119,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,123,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,125,public void testConstructorEx1_Type_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,126,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,127,"new Partial(null, 4);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,128,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,129,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,130,"assertMessageContains(ex, ""must not be null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,135,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,137,public void testConstructorEx2_Type_int() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,138,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,139,"new Partial(DateTimeFieldType.dayOfYear(), 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,140,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,141,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,142,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,148,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,150,public void testConstructor_Type_int_Chrono() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,151,"Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,152,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,153,"assertEquals(1, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,154,"assertEquals(4, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,155,"assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,156,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,160,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,162,public void testConstructorEx_Type_int_Chrono() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,163,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,164,"new Partial(null, 4, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,165,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,166,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,167,"assertMessageContains(ex, ""must not be null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,172,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,174,public void testConstructorEx2_Type_int_Chrono() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,175,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,176,"new Partial(DateTimeFieldType.dayOfYear(), 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,177,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,178,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,179,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,185,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,187,public void testConstructor_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,188,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,189,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,190,DateTimeFieldType.dayOfYear()
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,192,"int[] values = new int[] {2005, 33};"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,193,"Partial test = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,194,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,195,"assertEquals(2, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,196,"assertEquals(2005, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,197,"assertEquals(2005, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,198,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,199,"assertEquals(33, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,200,"assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,201,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,202,"assertEquals(true, Arrays.equals(test.getFieldTypes(), types));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,203,"assertEquals(true, Arrays.equals(test.getValues(), values));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,207,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,209,public void testConstructor2_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,210,DateTimeFieldType[] types = new DateTimeFieldType[0];
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,211,int[] values = new int[0];
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,212,"Partial test = new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,213,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,214,"assertEquals(0, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,218,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,220,public void testConstructorEx1_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,221,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,222,"new Partial((DateTimeFieldType[]) null, new int[] {1});"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,223,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,224,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,225,"assertMessageContains(ex, ""must not be null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,230,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,232,public void testConstructorEx3_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,233,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,234,"new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, null);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,235,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,236,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,237,"assertMessageContains(ex, ""must not be null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,242,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,244,public void testConstructorEx5_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,245,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,246,"new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, new int[2]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,247,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,248,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,249,"assertMessageContains(ex, ""same length"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,254,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,256,public void testConstructorEx6_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,257,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,258,"new Partial(new DateTimeFieldType[] {null, DateTimeFieldType.dayOfYear()}, new int[2]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,259,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,260,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,261,"assertMessageContains(ex, ""contain null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,263,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,264,"new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear(), null}, new int[2]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,265,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,266,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,267,"assertMessageContains(ex, ""contain null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,272,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,274,public void testConstructorEx7_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,275,"int[] values = new int[] {1, 1, 1};"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,276,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,277,"DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,278,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,279,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,280,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,281,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,282,"assertMessageContains(ex, ""must be in order"", ""largest-smallest"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,285,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,286,"DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,287,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,288,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,289,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,290,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,291,"assertMessageContains(ex, ""must be in order"", ""largest-smallest"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,294,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,295,"DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,296,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,297,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,298,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,299,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,300,"assertMessageContains(ex, ""must be in order"", ""largest-smallest"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,303,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,304,"DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,305,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,306,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,307,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,308,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,309,"assertMessageContains(ex, ""must be in order"", ""largest-smallest"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,312,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,313,"DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,314,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,315,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,316,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,317,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,318,"assertMessageContains(ex, ""must be in order"", ""largest-smallest"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,321,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,322,"DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,323,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,324,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,325,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,326,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,327,"assertMessageContains(ex, ""must be in order"", ""largest-smallest"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,332,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,334,public void testConstructorEx8_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,335,"int[] values = new int[] {1, 1, 1};"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,336,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,337,"DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,338,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,339,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,340,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,341,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,342,"assertMessageContains(ex, ""must not"", ""duplicate"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,345,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,346,"DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,347,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,348,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,349,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,350,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,351,"assertMessageContains(ex, ""must not"", ""duplicate"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,354,types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,355,"DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() };"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,356,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,357,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,358,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,359,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,360,"assertMessageContains(ex, ""must not"", ""duplicate"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,365,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,367,public void testConstructorEx9_TypeArray_intArray() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,368,"int[] values = new int[] {3, 0};"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,369,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,370,"DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek()};"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,371,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,372,"new Partial(types, values);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,373,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,374,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,375,// expected
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,381,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,383,public void testConstructor_TypeArray_intArray_Chrono() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,384,DateTimeFieldType[] types = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,385,"DateTimeFieldType.year(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,386,DateTimeFieldType.dayOfYear()
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,388,"int[] values = new int[] {2005, 33};"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,389,"Partial test = new Partial(types, values, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,390,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,391,"assertEquals(2, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,392,"assertEquals(2005, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,393,"assertEquals(2005, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,394,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,395,"assertEquals(33, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,396,"assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,397,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,398,"assertEquals(true, Arrays.equals(test.getFieldTypes(), types));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,399,"assertEquals(true, Arrays.equals(test.getValues(), values));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,404,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,406,public void testConstructor_Partial() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,407,"YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,408,Partial test = new Partial(ymd);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,409,"assertEquals(GREGORIAN_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,410,"assertEquals(3, test.size());"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,411,"assertEquals(2005, test.getValue(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,412,"assertEquals(2005, test.get(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,413,"assertEquals(true, test.isSupported(DateTimeFieldType.year()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,414,"assertEquals(6, test.getValue(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,415,"assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,416,"assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,417,"assertEquals(25, test.getValue(2));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,418,"assertEquals(25, test.get(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,419,"assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,423,* Test constructor
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,425,public void testConstructorEx_Partial() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,426,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,427,new Partial((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,428,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,429,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,430,"assertMessageContains(ex, ""must not be null"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,436,* Checks if the exception message is valid.
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,438,* @param ex  the exception to check
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,439,* @param str  the string to check
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,441,"private void assertMessageContains(Exception ex, String str) {"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,442,"assertEquals(ex.getMessage() + "": "" + str, true, ex.getMessage().indexOf(str) >= 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,446,* Checks if the exception message is valid.
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,448,* @param ex  the exception to check
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,449,* @param str1  the string to check
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,450,* @param str2  the string to check
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,452,"private void assertMessageContains(Exception ex, String str1, String str2) {"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,453,"assertEquals(ex.getMessage() + "": "" + str1 + ""/"" + str2, true,"
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,454,ex.getMessage().indexOf(str1) >= 0 &&
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,455,ex.getMessage().indexOf(str2) >= 0 &&
True,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,JodaTime/src/test/org/joda/time/TestPartial_Constructors.java,456,ex.getMessage().indexOf(str1) < ex.getMessage().indexOf(str2));
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,24,* This class is a Junit unit test for Partial.
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,26,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,28,public class TestPartial_Properties extends TestCase {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,30,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,31,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,33,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,34,private static final DateTimeFieldType[] TYPES = new DateTimeFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,35,"DateTimeFieldType.hourOfDay(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,36,"DateTimeFieldType.minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,37,"DateTimeFieldType.secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,38,DateTimeFieldType.millisOfSecond()
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,40,"private static final int[] VALUES = new int[] {10, 20, 30, 40};"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,41,"private static final int[] VALUES1 = new int[] {1, 2, 3, 4};"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,42,"private static final int[] VALUES2 = new int[] {5, 6, 7, 8};"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,44,//    private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,45,//        10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,46,//        + 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,47,//        + 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,48,//        + 40L;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,50,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,51,1L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,52,+ 2L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,53,+ 3L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,54,+ 4L;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,55,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,56,1L * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,57,+ 5L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,58,+ 6L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,59,+ 7L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,60,+ 8L;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,62,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,63,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,66,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,67,return new TestSuite(TestPartial_Properties.class);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,70,public TestPartial_Properties(String name) {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,71,super(name);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,74,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,75,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,76,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,79,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,80,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,81,zone = null;
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,85,public void testPropertyGetHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,86,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,87,"assertSame(test.getChronology().hourOfDay(), test.property(DateTimeFieldType.hourOfDay()).getField());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,88,"assertEquals(""hourOfDay"", test.property(DateTimeFieldType.hourOfDay()).getName());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,89,"assertEquals(""Property[hourOfDay]"", test.property(DateTimeFieldType.hourOfDay()).toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,90,"assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,91,"assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getPartial());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,92,"assertEquals(10, test.property(DateTimeFieldType.hourOfDay()).get());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,93,"assertEquals(""10"", test.property(DateTimeFieldType.hourOfDay()).getAsString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,94,"assertEquals(""10"", test.property(DateTimeFieldType.hourOfDay()).getAsText());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,95,"assertEquals(""10"", test.property(DateTimeFieldType.hourOfDay()).getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,96,"assertEquals(""10"", test.property(DateTimeFieldType.hourOfDay()).getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,97,"assertEquals(""10"", test.property(DateTimeFieldType.hourOfDay()).getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,98,"assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.hourOfDay()).getDurationField());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,99,"assertEquals(test.getChronology().days(), test.property(DateTimeFieldType.hourOfDay()).getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,100,"assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,101,"assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,104,public void testPropertyGetMaxMinValuesHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,105,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,106,"assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,107,"assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,108,"assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,109,"assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,112,//    public void testPropertyAddHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,113,"//        Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,114,//        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,115,"//        check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,116,"//        check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,118,//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,119,"//        check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,121,//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,122,"//        check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,124,//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(14);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,125,"//        check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,127,//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,128,"//        check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,130,//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,131,"//        check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,134,public void testPropertyAddHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,135,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,136,Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,137,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,138,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,140,copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,141,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,143,copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,144,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,146,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,147,test.property(DateTimeFieldType.hourOfDay()).addToCopy(14);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,148,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,149,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,150,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,152,copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,153,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,155,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,156,test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,157,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,158,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,159,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,162,public void testPropertyAddWrapFieldHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,163,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,164,Partial copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,165,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,166,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,168,copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(0);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,169,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,171,copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(18);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,172,"check(copy, 4, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,174,copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(-15);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,175,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,178,public void testPropertySetHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,179,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,180,Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy(12);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,181,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,182,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,184,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,185,test.property(DateTimeFieldType.hourOfDay()).setCopy(24);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,186,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,187,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,188,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,189,test.property(DateTimeFieldType.hourOfDay()).setCopy(-1);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,190,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,191,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,194,public void testPropertySetTextHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,195,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,196,"Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,197,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,198,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,201,public void testPropertyCompareToHour() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,202,"Partial test1 = new Partial(TYPES, VALUES1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,203,"Partial test2 = new Partial(TYPES, VALUES2);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,204,"assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,205,"assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,206,"assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,207,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,208,test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,209,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,210,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,212,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,213,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,214,"assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,215,"assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,216,"assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,217,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,218,test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,219,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,220,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,224,public void testPropertyGetMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,225,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,226,"assertSame(test.getChronology().minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()).getField());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,227,"assertEquals(""minuteOfHour"", test.property(DateTimeFieldType.minuteOfHour()).getName());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,228,"assertEquals(""Property[minuteOfHour]"", test.property(DateTimeFieldType.minuteOfHour()).toString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,229,"assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getReadablePartial());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,230,"assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getPartial());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,231,"assertEquals(20, test.property(DateTimeFieldType.minuteOfHour()).get());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,232,"assertEquals(""20"", test.property(DateTimeFieldType.minuteOfHour()).getAsString());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,233,"assertEquals(""20"", test.property(DateTimeFieldType.minuteOfHour()).getAsText());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,234,"assertEquals(""20"", test.property(DateTimeFieldType.minuteOfHour()).getAsText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,235,"assertEquals(""20"", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,236,"assertEquals(""20"", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText(Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,237,"assertEquals(test.getChronology().minutes(), test.property(DateTimeFieldType.minuteOfHour()).getDurationField());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,238,"assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.minuteOfHour()).getRangeDurationField());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,239,"assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,240,"assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumShortTextLength(null));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,243,public void testPropertyGetMaxMinValuesMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,244,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,245,"assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValue());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,246,"assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,247,"assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValue());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,248,"assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,251,//    public void testPropertyAddMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,252,"//        Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,253,//        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,254,"//        check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,255,"//        check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,257,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,258,"//        check(copy, 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,260,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,261,"//        check(copy, 11, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,263,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,264,"//        check(copy, 12, 5, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,266,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,267,"//        check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,269,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,270,"//        check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,272,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,273,"//        check(copy, 10, 11, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,275,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,276,"//        check(copy, 10, 1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,278,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,279,"//        check(copy, 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,281,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,282,"//        check(copy, 9, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,284,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20));
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,285,"//        check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,287,//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21));
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,288,"//        check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,291,public void testPropertyAddMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,292,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,293,Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,294,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,295,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,297,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,298,"check(copy, 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,300,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,301,"check(copy, 11, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,303,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,304,"check(copy, 12, 5, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,306,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,307,"check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,309,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,310,test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,311,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,312,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,313,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,315,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,316,"check(copy, 10, 11, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,318,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,319,"check(copy, 10, 1, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,321,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,322,"check(copy, 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,324,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,325,"check(copy, 9, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,327,copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20));
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,328,"check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,330,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,331,test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21));
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,332,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,333,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,334,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,337,public void testPropertyAddWrapFieldMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,338,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,339,Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(9);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,340,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,341,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,343,copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(49);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,344,"check(copy, 10, 9, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,346,copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(-47);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,347,"check(copy, 10, 33, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,350,public void testPropertySetMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,351,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,352,Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy(12);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,353,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,354,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,356,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,357,test.property(DateTimeFieldType.minuteOfHour()).setCopy(60);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,358,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,359,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,360,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,361,test.property(DateTimeFieldType.minuteOfHour()).setCopy(-1);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,362,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,363,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,366,public void testPropertySetTextMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,367,"Partial test = new Partial(TYPES, VALUES);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,368,"Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,369,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,370,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,373,public void testPropertyCompareToMinute() {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,374,"Partial test1 = new Partial(TYPES, VALUES1);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,375,"Partial test2 = new Partial(TYPES, VALUES2);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,376,"assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test2) < 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,377,"assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,378,"assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,379,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,380,test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadablePartial) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,381,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,382,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,384,DateTime dt1 = new DateTime(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,385,DateTime dt2 = new DateTime(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,386,"assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt2) < 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,387,"assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) > 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,388,"assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) == 0);"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,389,try {
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,390,test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,391,fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,392,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,396,"private void check(Partial test, int hour, int min, int sec, int milli) {"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,397,"assertEquals(hour, test.get(DateTimeFieldType.hourOfDay()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,398,"assertEquals(min, test.get(DateTimeFieldType.minuteOfHour()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,399,"assertEquals(sec, test.get(DateTimeFieldType.secondOfMinute()));"
True,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,JodaTime/src/test/org/joda/time/TestPartial_Properties.java,400,"assertEquals(milli, test.get(DateTimeFieldType.millisOfSecond()));"

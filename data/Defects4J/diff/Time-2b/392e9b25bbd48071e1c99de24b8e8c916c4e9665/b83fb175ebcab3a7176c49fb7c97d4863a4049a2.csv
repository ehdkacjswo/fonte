is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,97,suite.addTest(TestDurationField.suite());
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,22,import java.lang.reflect.Constructor;
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,283,public void test_other() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,284,"assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,285,Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,286,"assertEquals(1, cls.getDeclaredConstructors().length);"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,287,Constructor con = cls.getDeclaredConstructors()[0];
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,288,Object[] params = new Object[] {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,289,"""other"", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,290,DateTimeFieldType type = (DateTimeFieldType) con.newInstance(params);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,292,"assertEquals(""other"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,293,"assertSame(DurationFieldType.hours(), type.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,294,"assertSame(DurationFieldType.months(), type.getRangeDurationType());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,295,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,296,type.getField(Chronology.getCopticUTC());
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,297,fail();
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,298,} catch (InternalError ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,299,DateTimeFieldType result = doSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,300,"assertEquals(type.getName(), result.getName());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,301,"assertNotSame(type, result);"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,283,ublic void assertSerialization(DateTimeFieldType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,305,private void assertSerialization(DateTimeFieldType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,306,DateTimeFieldType result = doSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,307,"assertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,310,private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,295,"ssertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,321,return result;
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,18,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,20,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,21,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,24,* This class is a Junit unit test for DurationField.
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,26,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,28,public class TestDurationField extends TestCase {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,30,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,31,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,34,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,35,return new TestSuite(TestDurationField.class);
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,38,public TestDurationField(String name) {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,39,super(name);
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,42,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,45,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,49,public void test_subtract() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,50,DurationField fld = ISOChronology.getInstanceUTC().millis();
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,51,"assertEquals(900, fld.subtract(1000L, 100));"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,52,"assertEquals(900L, fld.subtract(1000L, 100L));"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,53,"assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,54,"assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE));"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,55,"assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE));"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,56,try {
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,57,"fld.subtract(-1000L, Long.MIN_VALUE);"
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,58,fail();
True,JodaTime/src/test/org/joda/time/TestDurationField.java,JodaTime/src/test/org/joda/time/TestDurationField.java,59,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,22,import java.lang.reflect.Constructor;
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,149,public void test_other() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,150,"assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,151,Class cls = DurationFieldType.class.getDeclaredClasses()[0];
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,152,"assertEquals(1, cls.getDeclaredConstructors().length);"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,153,Constructor con = cls.getDeclaredConstructors()[0];
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,154,"Object[] params = new Object[] {""other"", new Byte((byte) 128)};"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,155,DurationFieldType type = (DurationFieldType) con.newInstance(params);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,157,"assertEquals(""other"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,158,try {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,159,type.getField(Chronology.getCopticUTC());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,160,fail();
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,161,} catch (InternalError ex) {}
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,162,DurationFieldType result = doSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,163,"assertEquals(type.getName(), result.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,164,"assertNotSame(type, result);"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,149,ublic void assertSerialization(DurationFieldType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,168,private void assertSerialization(DurationFieldType type) throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,169,DurationFieldType result = doSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,170,"assertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,173,private DurationFieldType doSerialization(DurationFieldType type) throws Exception {
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,161,"ssertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,184,return result;

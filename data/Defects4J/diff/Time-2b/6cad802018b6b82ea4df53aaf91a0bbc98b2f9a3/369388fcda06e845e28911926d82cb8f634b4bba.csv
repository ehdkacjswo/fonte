is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,71,import org.joda.time.format.FormatUtils;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,231,"d = offsetFormatter().print(0, UTC, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,232,StringBuffer buf = new StringBuffer();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,233,id = printTimeZone(offset);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,242,* This method assumes standard length hours.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,256,"* This method assumes 60 minutes in an hour, and standard length minutes."
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,282,"tring id = offsetFormatter().print(0, UTC, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,286,String id = printTimeZone(offset);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,329,"onvId = offsetFormatter().print(0, UTC, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,333,convId = printTimeZone(offset);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,594,"OffsetFormatter = new DateTimeFormatterBuilder((Chronology)null, null)"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,598,cOffsetFormatter = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,606,* Formats a timezone offset string.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,607,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,608,* This method is kept separate from the formatting classe to speed and
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,609,* simplify startup and classloading.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,611,* @param offset  the offset in milliseconds
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,612,* @return the time zone string
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,614,private static String printTimeZone(int offset) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,615,StringBuffer buf = new StringBuffer();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,616,if (offset >= 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,617,buf.append('+');
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,618,} else {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,619,buf.append('-');
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,620,offset = -offset;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,623,int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,624,"FormatUtils.appendPaddedInteger(buf, hours, 2);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,625,offset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,627,int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,628,buf.append(':');
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,629,"FormatUtils.appendPaddedInteger(buf, minutes, 2);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,630,offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,631,if (offset == 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,632,return buf.toString();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,635,int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,636,buf.append(':');
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,637,"FormatUtils.appendPaddedInteger(buf, seconds, 2);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,638,offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,639,if (offset == 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,640,return buf.toString();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,643,buf.append('.');
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,644,"FormatUtils.appendPaddedInteger(buf, offset, 3);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,645,return buf.toString();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,676,"eturn offsetFormatter().print(instant, this);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,723,return printTimeZone(getOffset(instant));
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,715,"eturn offsetFormatter().print(instant, this);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,762,return printTimeZone(getOffset(instant));
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1160,eturn ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1160,return ISODateTimeFormat.getInstance().dateTime().print(this);
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,536,eturn ISODateTimeFormat.getInstanceUTC().tTime().print(this);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,536,return ISODateTimeFormat.getInstance().tTime().print(this);
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,493,eturn ISODateTimeFormat.getInstanceUTC().yearMonthDay().print(this);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,493,return ISODateTimeFormat.getInstance().yearMonthDay().print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,321,eturn DateTimeFormat.getInstance(getChronology()).forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,321,return DateTimeFormat.getInstance().forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,335,"eturn DateTimeFormat.getInstance(getChronology(), locale).forPattern(pattern).print(this);"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,335,return DateTimeFormat.getInstance(locale).forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,444,eturn ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,444,return ISODateTimeFormat.getInstance().dateTime().print(this);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,65,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,441,ateTimePrinter printer =
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,442,SODateTimeFormat.getInstance(ISOChronology.getInstanceUTC())
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,443,dateHourMinuteSecondFraction();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,440,DateTimePrinter printer = ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,445,"rinter.printTo(buf, getStartMillis());"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,442,"printer.printTo(buf, getStartMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,447,"rinter.printTo(buf, getEndMillis());"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,444,"printer.printTo(buf, getEndMillis(), getChronology());"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,447,SODateTimeFormat format = ISODateTimeFormat.getInstance(withUTC());
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,450,rinter = format.date();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,449,printer = ISODateTimeFormat.getInstance().date();
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,452,rinter = format.dateTime();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,451,printer = ISODateTimeFormat.getInstance().dateTime();
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,454,"rinter.printTo(sb, iCutoverMillis);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,453,"printer.printTo(sb, iCutoverMillis, withUTC());"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,358,ateTimePrinter p = ISODateTimeFormat.getInstance(getBase()).dateTime();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,358,DateTimePrinter p = ISODateTimeFormat.getInstance().dateTime();
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,362,".printTo(buf, getLowerLimit());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,362,"p.printTo(buf, getLowerLimit().getMillis(), getBase());"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,365,".printTo(buf, getUpperLimit());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,365,"p.printTo(buf, getUpperLimit().getMillis(), getBase());"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,102,ateTimeParser p = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,103,eturn p.parseMillis(str);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,102,DateTimeParser p = ISODateTimeFormat.getInstance().dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,103,"return p.parseMillis(str, chrono);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,209,ateTimeParser dateTimeParser = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,209,DateTimeParser dateTimeParser = ISODateTimeFormat.getInstance().dateTimeParser();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,220,ateTime start = dateTimeParser.parseDateTime(leftStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,220,"DateTime start = dateTimeParser.parseDateTime(leftStr, chrono);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,235,ateTime end = dateTimeParser.parseDateTime(rightStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,235,"DateTime end = dateTimeParser.parseDateTime(rightStr, chrono);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,10, are met:
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,54,ackage org.joda.time.format;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,56,mport java.io.IOException;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,57,mport java.io.Writer;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,59,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,60,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,61,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,62,mport org.joda.time.MutableDateTime;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,63,mport org.joda.time.ReadWritableInstant;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,64,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,65,mport org.joda.time.ReadablePartial;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,68," Abstract base class for implementing {@link DateTimePrinter}s,"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,69," {@link DateTimeParser}s, and {@link DateTimeFormatter}s. This class"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,70, intentionally does not implement any of those interfaces. You can subclass
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,71, and implement only the interfaces that you need to.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,72, <p>
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,73, The print methods assume that your subclass has implemented DateTimePrinter or
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,74," DateTimeFormatter. If not, a ClassCastException is thrown when calling those"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,75, methods.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,76, <p>
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,77," Likewise, the parse methods assume that your subclass has implemented"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,78," DateTimeParser or DateTimeFormatter. If not, a ClassCastException is thrown"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,79, when calling the parse methods.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,80, <p>
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,81, AbstractDateTimeFormatter is thread-safe and immutable.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,83, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,84, @since 1.0
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,86,ublic abstract class AbstractDateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,88,/ Accessed also by AbstractPeriodFormatter.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,89,"tatic String createErrorMessage(final String text, final int errorPos) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,90,nt sampleLen = errorPos + 20;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,91,tring sampleText;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,92,f (text.length() <= sampleLen + 3) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,93,ampleText = text;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,94, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,95,"ampleText = text.substring(0, sampleLen).concat(""..."");"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,98,f (errorPos <= 0) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,99,"eturn ""Invalid format: \"""" + sampleText + '""';"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,102,f (errorPos >= text.length()) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,103,"eturn ""Invalid format: \"""" + sampleText + ""\"" is too short"";"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,106,"eturn ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,107,"ampleText.substring(errorPos) + '""';"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,111," Returns the Chronology being used by the formatter, or null if none."
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,113,ublic abstract Chronology getChronology();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,116," Returns the DateTimeZone from the formatter's Chronology, defaulting to"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,117, UTC if the Chronology or its DateTimeZone is null.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,119,ublic DateTimeZone getZone() {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,120,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,121,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,122,eturn DateTimeZone.UTC;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,124,ateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,125,eturn zone == null ? DateTimeZone.UTC : zone;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,128,"ublic void printTo(final StringBuffer buf, final ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,129,ong millisUTC = instant.getMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,130,hronology chrono;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,131,f ((chrono = instant.getChronology()) != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,132,"rintTo(buf, millisUTC, chrono.getZone());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,133, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,134,"(DateTimePrinter)this).printTo(buf, millisUTC, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,138,"ublic void printTo(final Writer out, final ReadableInstant instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,139,ong millisUTC = instant.getMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,140,hronology chrono;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,141,f ((chrono = instant.getChronology()) != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,142,"rintTo(out, millisUTC, chrono.getZone());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,143, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,144,"(DateTimePrinter)this).printTo(out, millisUTC, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,148,"ublic void printTo(final StringBuffer buf, final long instant) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,149,"rintTo(buf, instant, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,152,"ublic void printTo(final Writer out, final long instant) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,153,"rintTo(out, instant, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,156,"ublic void printTo(final StringBuffer buf, final long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,157,f (zone == null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,158,one = getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,160,(DateTimePrinter) this).printTo
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,161,"buf, instant, zone, instant + zone.getOffset(instant));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,164,"ublic void printTo(final Writer out, final long instant, DateTimeZone zone) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,165,f (zone == null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,166,one = getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,168,(DateTimePrinter) this).printTo
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,169,"out, instant, zone, instant + zone.getOffset(instant));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,172,ublic String print(final ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,173,ong millisUTC = instant.getMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,174,hronology chrono;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,175,f ((chrono = instant.getChronology()) != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,176,"eturn print(millisUTC, chrono.getZone());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,177, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,178,"eturn print(millisUTC, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,182,ublic String print(final long instant) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,183,"eturn print(instant, null);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,186,"ublic String print(final long instant, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,187,f (zone == null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,188,one = getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,190,"eturn print(instant, zone, instant + zone.getOffset(instant));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,193,"ublic String print(final long instant, final DateTimeZone zone, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,194,ateTimePrinter p = (DateTimePrinter) this;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,195,tringBuffer buf = new StringBuffer(p.estimatePrintedLength());
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,196,".printTo(buf, instant, zone, instantLocal);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,197,eturn buf.toString();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,200,ublic String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,201,ateTimePrinter p = (DateTimePrinter) this;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,202,tringBuffer buf = new StringBuffer(p.estimatePrintedLength());
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,203,".printTo(buf, partial);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,204,eturn buf.toString();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,208,"ublic int parseInto(final ReadWritableInstant instant, final String text, final int position) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,209,ateTimeParser p = (DateTimeParser)this;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,211,ong millis = instant.getMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,212,hronology chrono = instant.getChronology();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,213,f (chrono != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,214,ateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,215,f (zone != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,216,/ Move millis to local time.
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,217,illis += zone.getOffset(millis);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,221,ateTimeParserBucket bucket = createBucket(millis);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,222,"nt resultPos = p.parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,223,nstant.setMillis(bucket.computeMillis());
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,224,eturn resultPos;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,227,ublic long parseMillis(final String text) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,228,ateTimeParser p = (DateTimeParser)this;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,229,ateTimeParserBucket bucket = createBucket(0);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,231,"nt newPos = p.parseInto(bucket, text, 0);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,232,f (newPos >= 0) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,233,f (newPos >= text.length()) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,234,eturn bucket.computeMillis(true);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,236, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,237,ewPos = ~newPos;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,240,"hrow new IllegalArgumentException(createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,243,"ublic long parseMillis(final String text, final long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,244,ateTimeParser p = (DateTimeParser)this;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,245,ateTimeParserBucket bucket = createBucket(instantLocal);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,247,"nt newPos = p.parseInto(bucket, text, 0);"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,248,f (newPos >= 0) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,249,f (newPos >= text.length()) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,250,eturn bucket.computeMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,252, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,253,ewPos = ~newPos;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,256,"hrow new IllegalArgumentException(createErrorMessage(text, newPos));"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,259,ublic DateTime parseDateTime(final String text) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,260,"eturn new DateTime(parseMillis(text), getChronology());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,263,"ublic DateTime parseDateTime(final String text, final ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,264,"eturn new DateTime(parseMillis(text, getInstantLocal(instant)), getChronology());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,267,ublic MutableDateTime parseMutableDateTime(final String text) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,268,"eturn new MutableDateTime(parseMillis(text), getChronology());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,271,"ublic MutableDateTime parseMutableDateTime(final String text, final ReadableInstant instant) {"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,272,"eturn new MutableDateTime(parseMillis(text, getInstantLocal(instant)), getChronology());"
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,275,rivate long getInstantLocal(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,276,ong instantLocal;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,277,f (instant == null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,278,nstantLocal = 0;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,279, else {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,280,nstantLocal = instant.getMillis();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,281,ateTimeZone zone = instant.getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,282,f (zone != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,283,nstantLocal += zone.getOffset(instantLocal);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,286,eturn instantLocal;
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,289,rivate DateTimeParserBucket createBucket(final long millis) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,290,ateTimeParserBucket bucket = new DateTimeParserBucket(millis);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,291,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,292,f (chrono != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,293,ateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,294,f (zone != null) {
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,295,ucket.setZone(zone);
False,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/AbstractDateTimeFormatter.java,298,eturn bucket;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,57,import java.io.Writer;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,60,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,61,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,62,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,63,import org.joda.time.MutableDateTime;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,64,import org.joda.time.ReadWritableInstant;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,65,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,66,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,67,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,70,"* Abstract base class for implementing {@link DateTimePrinter}s,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,71,"* {@link DateTimeParser}s, and {@link DateTimeFormatter}s. This class"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,72,* intentionally does not implement any of those interfaces. You can subclass
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,73,* and implement only the interfaces that you need to.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,74,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,75,* The print methods assume that your subclass has implemented DateTimePrinter or
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,76,"* DateTimeFormatter. If not, a ClassCastException is thrown when calling those"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,77,* methods.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,78,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,79,"* Likewise, the parse methods assume that your subclass has implemented"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,80,"* DateTimeParser or DateTimeFormatter. If not, a ClassCastException is thrown"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,81,* when calling the parse methods.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,82,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,83,* BaseDateTimeFormatter is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,85,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,86,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,87,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,89,public abstract class BaseDateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,91,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,92,return (BoundDateTimePrinter) this;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,96,"public void printTo(StringBuffer buf, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,97,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,98,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,99,"printTo(buf, millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,102,"public void printTo(Writer out, ReadableInstant instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,103,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,104,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,105,"printTo(out, millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,108,"public void printTo(StringBuffer buf, long instant) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,109,"printTo(buf, instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,112,"public void printTo(Writer out, long instant) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,113,"printTo(out, instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,116,"public void printTo(StringBuffer buf, long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,117,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,118,"printTo(buf, instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,121,"public void printTo(Writer out, long instant, DateTimeZone zone) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,122,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,123,"printTo(out, instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,126,"public void printTo(StringBuffer buf, long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,127,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,128,"printTo(buf,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,129,"instant + chrono.getZone().getOffset(instant), chrono.withUTC(),"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,130,"instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,133,"public void printTo(Writer out, long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,134,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,135,"printTo(out,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,136,"instant + chrono.getZone().getOffset(instant), chrono.withUTC(),"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,137,"instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,141,public String print(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,142,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,143,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,144,"return print(millis, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,147,public String print(long instant) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,148,"return print(instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,151,"public String print(long instant, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,152,zone = DateTimeUtils.getZone(zone);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,153,"return print(instant, ISOChronology.getInstance(zone));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,156,"public String print(long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,157,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,158,"return print(instant + chrono.getZone().getOffset(instant), chrono.withUTC(),"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,159,"instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,162,public String print(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,163,StringBuffer buf = new StringBuffer(estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,164,"printTo(buf, partial);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,165,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,169,protected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,170,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,173,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,174,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,175,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,176,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,179,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,180,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,181,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,182,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,185,"public void printTo(StringBuffer buf, ReadablePartial partial) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,186,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,189,"public void printTo(Writer out, ReadablePartial partial) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,190,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,193,"protected String print(long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,194,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,195,StringBuffer buf = new StringBuffer(estimatePrintedLength());
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,196,"printTo(buf, instantLocal, chronoLocal, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,197,return buf.toString();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,201,"public int parseInto(ReadWritableInstant instant, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,202,if (instant == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,203,"throw new IllegalArgumentException(""Instant must not be null"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,206,long millis = instant.getMillis();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,207,Chronology chrono = instant.getChronology();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,208,long instantLocal = millis + chrono.getZone().getOffset(millis);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,210,"DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,211,"int resultPos = parseInto(bucket, text, position);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,212,instant.setMillis(bucket.computeMillis());
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,213,return resultPos;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,216,public long parseMillis(String text) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,217,"return parseMillis(text, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,220,"public long parseMillis(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,221,"DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,223,"int newPos = parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,224,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,225,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,226,return bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,228,} else {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,229,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,232,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,235,"public long parseMillis(String text, long instant) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,236,"return parseMillis(text, instant, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,239,"public long parseMillis(String text, long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,240,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,241,long instantLocal = instant + chrono.getZone().getOffset(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,242,"DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,244,"int newPos = parseInto(bucket, text, 0);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,245,if (newPos >= 0) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,246,if (newPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,247,return bucket.computeMillis();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,249,} else {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,250,newPos = ~newPos;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,253,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,256,public DateTime parseDateTime(String text) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,257,"return parseDateTime(text, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,260,"public DateTime parseDateTime(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,261,"return new DateTime(parseMillis(text, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,264,"public DateTime parseDateTime(String text, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,265,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,266,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,267,"return new DateTime(parseMillis(text, millis, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,270,public MutableDateTime parseMutableDateTime(String text) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,271,"return parseMutableDateTime(text, ISOChronology.getInstance());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,274,"public MutableDateTime parseMutableDateTime(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,275,"return new MutableDateTime(parseMillis(text, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,278,"public MutableDateTime parseMutableDateTime(String text, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,279,Chronology chrono = DateTimeUtils.getInstantChronology(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,280,long millis = DateTimeUtils.getInstantMillis(instant);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,281,"return new MutableDateTime(parseMillis(text, millis, chrono), chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,285,protected int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,286,"throw new UnsupportedOperationException(""Parsing not supported"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,289,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,290,"throw new UnsupportedOperationException(""Parsing not supported"");"
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,56,mport org.joda.time.PeriodType;
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,57,import java.io.Writer;
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,58,mport org.joda.time.ReadablePeriod;
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,61,import org.joda.time.PeriodType;
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,62,import org.joda.time.ReadWritablePeriod;
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,63,import org.joda.time.ReadablePeriod;
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,78,ublic abstract class AbstractPeriodFormatter {
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,82,public abstract class BasePeriodFormatter {
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,80,ublic int countFieldsToPrint(ReadablePeriod period) {
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,81,"eturn ((PeriodPrinter) this).countFieldsToPrint(period, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,85,* Returns the exact number of characters produced for the given period.
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,87,* @param period  the period to use
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,88,* @return the estimated length
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,90,protected int calculatePrintedLength(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,91,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,95,* Returns the amount of fields from the given period that this printer
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,96,* will print.
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,98,* @param period  the period to use
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,99,* @return amount of fields printed
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,101,protected int countFieldsToPrint(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,102,"return countFieldsToPrint(period, Integer.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,106,* Returns the amount of fields from the given period that this printer
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,107,* will print.
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,109,* @param period  the period to use
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,110,* @param stopAt stop counting at this value
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,111,* @return amount of fields printed
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,113,"protected int countFieldsToPrint(ReadablePeriod period, int stopAt) {"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,114,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,118,"public void printTo(StringBuffer buf, ReadablePeriod period) {"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,119,"throw new UnsupportedOperationException(""Printing not supported"");"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,122,"public void printTo(Writer out, ReadablePeriod period) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,123,"throw new UnsupportedOperationException(""Printing not supported"");"
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,85,eriodPrinter p = (PeriodPrinter) this;
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,86,tringBuffer buf = new StringBuffer(p.calculatePrintedLength(period));
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,87,".printTo(buf, period);"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,127,StringBuffer buf = new StringBuffer(calculatePrintedLength(period));
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,128,"printTo(buf, period);"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,133,"public int parseInto(ReadWritablePeriod period, String periodStr, int position) {"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,134,"throw new UnsupportedOperationException(""Parsing not supported"");"
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,108,hrow new IllegalArgumentException(
False,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,109,"bstractDateTimeFormatter.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/AbstractPeriodFormatter.java,JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java,154,"throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,54,package org.joda.time.format;
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,56,import java.io.IOException;
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,57,import java.io.Writer;
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,60,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,61,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,64,"* Defines an interface, bound to a single chronology, for creating textual"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,65,* representations of datetimes.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,67,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,68,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,70,public interface BoundDateTimePrinter {
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,73,* Returns another bound printer that uses the specified chronology.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,74,* <p>
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,75,* It is the callers resposibility to ensure that the printer is then only
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,76,* used with instances of the correct chronology.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,78,"* @param chrono  the chronology to use, null means ISO"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,79,* @return the chronology specific printer
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,81,BoundDateTimePrinter bindPrinter(Chronology chrono);
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,85,"* Prints a ReadableInstant, using the chronology of this printer."
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,87,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,88,"* @param instant  instant to format, null means now"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,90,"void printTo(StringBuffer buf, ReadableInstant instant);"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,93,"* Prints a ReadableInstant, using the chronology of this printer."
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,95,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,96,"* @param instant  instant to format, null means now"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,98,"void printTo(Writer out, ReadableInstant instant) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,102,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,103,* using the chronology of this printer.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,105,* @param buf  formatted instant is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,106,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,108,"void printTo(StringBuffer buf, long instant);"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,111,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,112,* using the chronology of this printer.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,114,* @param out  formatted instant is written out
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,115,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,117,"void printTo(Writer out, long instant) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,121,* Prints a ReadablePartial using the chronology of this printer.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,123,* @param buf  formatted partial is appended to this buffer
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,124,* @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,126,"void printTo(StringBuffer buf, ReadablePartial partial);"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,129,* Prints a ReadablePartial using the chronology of this printer.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,131,* @param out  formatted partial is written out
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,132,* @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,134,"void printTo(Writer out, ReadablePartial partial) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,138,"* Prints a ReadableInstant to a new String, using the chronology of this printer."
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,140,"* @param instant  instant to format, null means now"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,141,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,143,String print(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,146,"* Prints an instant from milliseconds since 1970-01-01T00:00:00Z,"
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,147,* using the chronology of this printer.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,149,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,150,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,152,String print(long instant);
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,155,* Prints a ReadablePartial to a new String using the chronology of this printer.
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,157,* @param partial  partial to format
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,158,* @return the printed result
True,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,JodaTime/src/java/org/joda/time/format/BoundDateTimePrinter.java,160,String print(ReadablePartial partial);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,75,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,172, Gets a formatter provider that works using ISOChronology with UTC in the
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,173, default locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,175, @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,177,ublic static DateTimeFormat getInstanceUTC() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,178,"eturn getInstance(ISOChronology.getInstanceUTC(), Locale.getDefault());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,182, Gets a formatter provider that works using ISOChronology with the default
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,183, time zone and the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,172,* Gets an instance of the formatter provider that works with the default locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,188,"eturn getInstance(ISOChronology.getInstance(), Locale.getDefault());"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,177,return getInstance(Locale.getDefault());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,192, Gets a formatter provider that works using ISOChronology with the
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,193, specified time zone and the default locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,181,* Gets an instance of the formatter provider that works with the given locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,195," @param zone  the time zone to use, null for default zone"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,196, @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,198,ublic static DateTimeFormat getInstance(final DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,199,"eturn getInstance(ISOChronology.getInstance(zone), Locale.getDefault());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,203, Gets a formatter provider that works using ISOChronology with the
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,204, specified time zone and locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,206," @param zone  the time zone to use, null for default zone"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,210,"ublic static DateTimeFormat getInstance(final DateTimeZone zone, final Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,211,"eturn getInstance(ISOChronology.getInstance(zone), locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,215, Gets a formatter provider that works using the specified chronology and
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,216, the default locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,218," @param chrono  the chronology to use, null means ISOChronology in the default time zone"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,219, @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,221,ublic static DateTimeFormat getInstance(final Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,222,"eturn getInstance(chrono, Locale.getDefault());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,226, Gets a formatter provider that works using the specified chronology and
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,227, locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,229," @param chrono  the chronology to use, null means ISOChronology in the default time zone"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,230," @param locale  the Locale to use, null for default locale"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,231, @return a format provider
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,233,"ublic static synchronized DateTimeFormat getInstance(Chronology chrono, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,234,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,235,hrono = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,186,public synchronized static DateTimeFormat getInstance(Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,240,ap map = (Map)cInstanceCache.get(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,241,f (map == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,242,ap = new HashMap(7);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,243,"InstanceCache.put(chrono, map);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,245,ateTimeFormat dtf = (DateTimeFormat)map.get(locale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,190,DateTimeFormat dtf = (DateTimeFormat) cInstanceCache.get(locale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,247,"tf = new DateTimeFormat(chrono, locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,248,"ap.put(locale, dtf);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,192,dtf = new DateTimeFormat(locale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,193,"cInstanceCache.put(locale, dtf);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,505,** The chronology to use */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,506,rivate final Chronology iChrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,519," @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,522,"rivate DateTimeFormat(final Chronology chrono, final Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,465,private DateTimeFormat(final Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,524,Chrono = chrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,546,"ateTimeFormatterBuilder builder = new DateTimeFormatterBuilder(iChrono, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,488,DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder(iLocale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,702,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,703,eturn mPrinter.getChronology();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,706,ublic int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,707,eturn mPrinter.estimatePrintedLength();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,644,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,645,return mPrinter.bindPrinter(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,735,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,736,"ateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,737,"Printer.printTo(buf, instant, zone, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,673,"public void printTo(StringBuffer buf, long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,674,"mPrinter.printTo(buf, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,740,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,741,"ateTimeZone zone, long instantLocal)"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,742,hrows IOException {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,743,"Printer.printTo(out, instant, zone, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,677,"public void printTo(Writer out, long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,678,"mPrinter.printTo(out, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,766,"ublic String print(long instant, DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,767,"eturn mPrinter.print(instant, zone, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,701,"public String print(long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,702,"return mPrinter.print(instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,778,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,713,"public int parseInto(ReadWritableInstant instant, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,782,"ublic int parseInto(ReadWritableInstant instant, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,717,public long parseMillis(String text) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,786,ublic long parseMillis(String text) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,721,"public long parseMillis(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,729,"public long parseMillis(String text, long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,730,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,737,"public DateTime parseDateTime(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,738,throw unsupported();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,749,"public MutableDateTime parseMutableDateTime(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,750,throw unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,828,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,829,eturn mParser.getChronology();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,832,ublic int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,833,eturn 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,775,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,776,throw unsupported();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,860,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,861,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,803,"public void printTo(StringBuffer buf, long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,865,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,866,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,807,"public void printTo(Writer out, long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,890,"ublic String print(long instant, DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,831,"public String print(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,898,ublic int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,899,eturn mParser.estimateParsedLength();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,902,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,903,"eturn mParser.parseInto(bucket, text, position);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,914,"ublic long parseMillis(String text, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,915,"eturn mParser.parseMillis(text, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,847,"public long parseMillis(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,848,"return mParser.parseMillis(text, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,851,"public long parseMillis(String text, long instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,852,"return mParser.parseMillis(text, instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,855,"public long parseMillis(String text, long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,856,"return mParser.parseMillis(text, instant, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,863,"public DateTime parseDateTime(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,864,"return mParser.parseDateTime(text, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,930,"ublic MutableDateTime parseMutableDateTime(String text,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,931,eadableInstant instant) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,875,"public MutableDateTime parseMutableDateTime(String text, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,876,"return mParser.parseMutableDateTime(text, chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,879,"public MutableDateTime parseMutableDateTime(String text, ReadableInstant instant) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,60,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,61,* Note: This interface represents a view onto {@link BaseDateTimeFormatter}.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,62,* All implementations must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,66,import org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,70,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,75, formatters.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,75,* formatters. All formatters must extend {@link BaseDateTimeFormatter}.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,92, @see DateTimeFormat
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,93,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,94,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,95,* @see DateTimeFormat
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,96,* @see ISODateTimeFormat
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,97,rivate final Chronology iChrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,98,rivate final Chronology iChronoUTC;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,100,/** The locale the builder uses. */
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,106," Creates a DateTimeFormatterBuilder with {@link ISOChronology}, in the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,107, default time zone and locale.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,109,* Creates a DateTimeFormatterBuilder for the default locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,110,his(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,112,this(Locale.getDefault());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,114," Creates a DateTimeFormatterBuilder with {@link ISOChronology}, in the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,115," given time zone, with the default locale."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,117,ublic DateTimeFormatterBuilder(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,118,his(ISOChronology.getInstance(zone));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,122," Creates a DateTimeFormatterBuilder with {@link ISOChronology}, in the"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,123," given time zone, with any locale."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,125,"ublic DateTimeFormatterBuilder(DateTimeZone zone, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,126,"his(ISOChronology.getInstance(zone), locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,130, Creates a DateTimeFormatterBuilder with any chronology and the default
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,131, locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,133, @param chrono Chronology to use
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,135,ublic DateTimeFormatterBuilder(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,136,"his(chrono, Locale.getDefault());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,140, Creates a DateTimeFormatterBuilder with any chronology and locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,142," @param chrono Chronology to use, or null for default of ISO"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,116,* Creates a DateTimeFormatterBuilder for the specified locale.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,145,"ublic DateTimeFormatterBuilder(Chronology chrono, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,146,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,147,f (DateTimeZone.getDefault() == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,148,/ See DateTimeZone's static initializer for details on this
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,149,/ special case.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,150,Chrono = iChronoUTC = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,151, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,152,Chrono = iChronoUTC = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,154, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,155,Chrono = chrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,156,ChronoUTC = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,120,public DateTimeFormatterBuilder(Locale locale) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,166, Returns the chronology being used by the formatter builder.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,168,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,169,eturn iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,223,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,224,* The formatter must extend <code>DateTimeFormatterProvider</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,225,"* This is an internal class, which all supplied format classes extend."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,227,* @param formatter  the formatter to add
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,264, @throws IllegalArgumentException if formatter is null
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,229,* @throws IllegalArgumentException if formatter is null or of an invalid type
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,266,ublic DateTimeFormatterBuilder append(DateTimeFormatter formatter)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,267,hrows IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,231,public DateTimeFormatterBuilder append(DateTimeFormatter formatter) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,235,if (formatter instanceof BaseDateTimeFormatter == false) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,236,"throw new IllegalArgumentException(""Formatter must extend BaseDateTimeFormatter"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,244,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,245,* The printer added must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,246,"* This is an internal class, which all supplied format classes extend."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,248,* @param printer  the printer to add
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,280, @throws IllegalArgumentException if printer is null
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,250,* @throws IllegalArgumentException if printer is null or of an invalid type
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,282,ublic DateTimeFormatterBuilder append(DateTimePrinter printer)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,283,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,285,f (printer == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,286,"hrow new IllegalArgumentException(""No printer supplied"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,252,public DateTimeFormatterBuilder append(DateTimePrinter printer) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,253,checkPrinter(printer);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,260,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,261,* The parser added must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,262,"* This is an internal class, which all supplied format classes extend."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,264,* @param parser  the parser to add
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,296, @throws IllegalArgumentException if parser is null
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,266,* @throws IllegalArgumentException if parser is null or of an invalid type
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,299,f (parser == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,300,"hrow new IllegalArgumentException(""No parser supplied"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,269,checkParser(parser);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,275,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,276,* The printer and parser must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,277,"* This is an internal class, which all supplied format classes extend."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,279,* @param printer  the printer to add
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,280,* @param parser  the parser to add
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,309, @throws IllegalArgumentException if printer or parser is null
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,282,* @throws IllegalArgumentException if printer or parser is null or of an invalid type
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,311,"ublic DateTimeFormatterBuilder append(DateTimePrinter printer,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,312,ateTimeParser parser)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,313,hrows IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,315,f (printer == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,316,"hrow new IllegalArgumentException(""No printer supplied"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,318,f (parser == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,319,"hrow new IllegalArgumentException(""No parser supplied"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,284,"public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser parser) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,285,checkPrinter(printer);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,286,checkParser(parser);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,300,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,301,* The printer and parsers must extend <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,302,"* This is an internal class, which all supplied format classes extend."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,304,* @param printer  the printer to add
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,305,* @param parsers  the parsers to add
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,307,* @throws IllegalArgumentException if any printer or parser is of an invalid type
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,338,"ublic DateTimeFormatterBuilder append(DateTimePrinter printer,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,339,ateTimeParser[] parsers)
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,340,hrows IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,310,"public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,311,if (printer != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,312,checkPrinter(printer);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,346,f (length == 1) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,347,f (parsers[0] == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,348,"hrow new IllegalArgumentException(""No parser supplied"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,350,"eturn append0(printer, parsers[0]);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,353,ateTimeParser[] copyOfParsers = new DateTimeParser[length];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,354,nt i;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,355,or (i = 0; i < length - 1; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,356,f ((copyOfParsers[i] = parsers[i]) == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,357,"hrow new IllegalArgumentException(""Incomplete parser array"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,318,BaseDateTimeFormatter[] copyOfParsers = new BaseDateTimeFormatter[length];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,319,for (int i = 0; i < length; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,320,DateTimeParser parser = parsers[i];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,321,if (i == length - 1 && parser == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,322,// ok
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,323,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,324,if (parser == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,325,"throw new IllegalArgumentException(""Incomplete parser array"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,326,} else if (parser instanceof BaseDateTimeFormatter == false) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,327,"throw new IllegalArgumentException(""Parser must extend BaseDateTimeFormatter"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,329,copyOfParsers[i] = (BaseDateTimeFormatter) parser;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,360,opyOfParsers[i] = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,362,"eturn append0(printer, new MatchingParser(iChrono, copyOfParsers));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,333,"return append0(printer, new MatchingParser(copyOfParsers));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,339,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,340,* The parser must implement <code>BaseDateTimeFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,341,"* This is an internal interface, which all supplied format classes implement."
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,370, @throws IllegalArgumentException if parser is null
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,344,* @throws IllegalArgumentException if parser is null or of an invalid type
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,347,checkParser(parser);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,348,BaseDateTimeFormatter[] parsers = new BaseDateTimeFormatter[] {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,349,"(BaseDateTimeFormatter) parser, null};"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,350,"return append0(null, new MatchingParser(parsers));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,355,* Checks if the parser is non null and a provider.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,357,* @param parser  the parser to check
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,359,private void checkParser(DateTimeParser parser) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,376,"eturn append0(null, new MatchingParser(iChrono, new DateTimeParser[] {parser, null}));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,363,if (parser instanceof BaseDateTimeFormatter == false) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,364,"throw new IllegalArgumentException(""Parser must extend BaseDateTimeFormatter"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,369,* Checks if the printer is non null and a provider.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,371,* @param printer  the printer to check
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,373,private void checkPrinter(DateTimePrinter printer) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,374,if (printer == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,375,"throw new IllegalArgumentException(""No printer supplied"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,377,if (printer instanceof BaseDateTimeFormatter == false) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,378,"throw new IllegalArgumentException(""Printer must extend BaseDateTimeFormatter"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,402,"eturn append0(new CharacterLiteral(iChrono, c));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,406,return append0(new CharacterLiteral(c));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,416,"eturn append0(new StringLiteral(iChrono, text));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,420,switch (text.length()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,421,case 0:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,422,return this;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,423,case 1:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,424,return append0(new CharacterLiteral(text.charAt(0)));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,425,default:
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,426,return append0(new StringLiteral(text));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,441,ateTimeField field = fieldType.getField(iChronoUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,443,"eturn append0(new UnpaddedNumber(iChrono, field, maxDigits, false));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,453,"return append0(new UnpaddedNumber(fieldType, maxDigits, false));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,445,"eturn append0(new PaddedNumber(iChrono, field, maxDigits, false, minDigits));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,455,"return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,471,ateTimeField field = fieldType.getField(iChronoUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,473,"eturn append0(new UnpaddedNumber(iChrono, field, maxDigits, true));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,482,"return append0(new UnpaddedNumber(fieldType, maxDigits, true));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,475,"eturn append0(new PaddedNumber(iChrono, field, maxDigits, true, minDigits));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,484,"return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,491,ateTimeField field = fieldType.getField(iChronoUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,492,"eturn append0(new TextField(iChrono, field, iLocale, false));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,500,"return append0(new TextField(fieldType, iLocale, false));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,507,ateTimeField field = fieldType.getField(iChronoUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,508,"eturn append0(new TextField(iChrono, field, iLocale, true));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,515,"return append0(new TextField(fieldType, iLocale, true));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,535,ateTimeField field = fieldType.getField(iChronoUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,536,"eturn append0(new Fraction(iChrono, field, minDigits, maxDigits));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,542,"return append0(new Fraction(fieldType, minDigits, maxDigits));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,768,ateTimeField field = DateTimeFieldType.year().getField(iChronoUTC);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,769,"eturn append0(new TwoDigitYear(iChrono, field, pivot));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,774,return append0(new TwoDigitYear(pivot));
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,878,"eturn append0(new TimeZonePrinter(iChrono, iLocale, false), null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,883,"return append0(new TimeZonePrinter( iLocale, false), null);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,889,"eturn append0(new TimeZonePrinter(iChrono, iLocale, true), null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,894,"return append0(new TimeZonePrinter( iLocale, true), null);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,910,"iChrono, zeroOffsetText, showSeparators, minFields, maxFields));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,915,"(zeroOffsetText, showSeparators, minFields, maxFields));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,944," = new Composite(iChrono, iElementPairs);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,949,f = new Composite(iElementPairs);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,984,rivate static abstract class AbstractFormatter extends AbstractDateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,985,rotected final Chronology iChrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,987,bstractFormatter(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,988,Chrono = chrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,991,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,992,eturn iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,989,"static void appendUnknownString(StringBuffer buf, int len) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,990,for (int i = len; --i >= 0;) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,991,buf.append('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,995,"rotected void appendUnknownString(StringBuffer buf, int len) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,996,or (int i = len; --i >= 0;) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,997,uf.append('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1001,"rotected void printUnknownString(Writer out, int len) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1002,or (int i = len; --i >= 0;) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1003,ut.write('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,995,"static void printUnknownString(Writer out, int len) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,996,for (int i = len; --i >= 0;) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,997,out.write('\ufffd');
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1008,rivate static class CharacterLiteral extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1009,mplements DateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1002,static class CharacterLiteral
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1003,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1004,"implements DateTimeFormatter, BoundDateTimePrinter {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1013,"haracterLiteral(Chronology chrono, char value) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1014,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1008,CharacterLiteral(char value) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1009,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1022,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1023,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1017,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1019,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1027,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1028,"ateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1023,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1024,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1025,"long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1040,"ublic String print(long instant, DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1037,"protected String print(long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1038,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1048,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1046,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1052,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1050,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1076,rivate static class StringLiteral extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1077,mplements DateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1075,static class StringLiteral
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1076,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1077,"implements DateTimeFormatter, BoundDateTimePrinter {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1081,"tringLiteral(Chronology chrono, String value) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1082,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1081,StringLiteral(String value) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1082,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1090,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1091,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1090,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1091,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1092,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1095,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1096,"ateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1096,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1097,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1098,"long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1108,"ublic String print(long instant, DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1110,"protected String print(long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1111,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1128,rivate abstract static class NumberFormatter extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1129,mplements DateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1131,rotected final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1132,static abstract class NumberFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1133,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1134,implements DateTimeFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1135,protected final DateTimeFieldType iFieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1135,umberFormatter(
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1136,"hronology chrono, DateTimeField field,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1139,"NumberFormatter(DateTimeFieldType fieldType,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1138,uper(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1139,Field = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1141,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1142,iFieldType = fieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1144,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1147,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1148,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1151,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1198,"ucket.saveField(iField, value);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1201,"bucket.saveField(iFieldType, value);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1203,rivate static class UnpaddedNumber extends NumberFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1204,"npaddedNumber(Chronology chrono, DateTimeField field,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1207,static class UnpaddedNumber extends NumberFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1209,"protected UnpaddedNumber(DateTimeFieldType fieldType,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1207,"uper(chrono, field, maxParsedDigits, signed);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1212,"super(fieldType, maxParsedDigits, signed);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1210,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1215,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1216,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1217,DateTimeField field = iFieldType.getField(chrono.withUTC());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1218,"return new BoundUnpaddedNumber(field, iMaxParsedDigits, iSigned);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1221,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1214,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1215,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1225,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1226,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1227,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1217,"ormatUtils.appendUnpaddedInteger(buf, iField.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1229,DateTimeField field = iFieldType.getField(chronoLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1230,"FormatUtils.appendUnpaddedInteger(buf, field.get(instantLocal));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1223,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1224,"ateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1236,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1237,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1238,"long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1226,"ormatUtils.writeUnpaddedInteger(out, iField.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1240,DateTimeField field = iFieldType.getField(chronoLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1241,"FormatUtils.writeUnpaddedInteger(out, field.get(instantLocal));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1233,f (partial.isSupported(iField.getType())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1248,if (partial.isSupported(iFieldType)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1235,"ormatUtils.appendUnpaddedInteger(buf, partial.get(iField.getType()));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1250,"FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1245,f (partial.isSupported(iField.getType())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1260,if (partial.isSupported(iFieldType)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1247,"ormatUtils.writeUnpaddedInteger(out, partial.get(iField.getType()));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1262,"FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1257,rivate static class PaddedNumber extends NumberFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1258,rivate final int iMinPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1273,static class BoundUnpaddedNumber
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1274,extends UnpaddedNumber
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1275,implements BoundDateTimePrinter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1277,private final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1279,"BoundUnpaddedNumber(DateTimeField field, int maxParsedDigits, boolean signed) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1280,"super(field.getType(), maxParsedDigits, signed);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1281,iField = field;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1260,"addedNumber(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1261,"ateTimeField field, int maxParsedDigits,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1284,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1285,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1286,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1287,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1288,"FormatUtils.appendUnpaddedInteger(buf, iField.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1289,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1290,buf.append('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1294,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1295,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1296,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1297,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1298,"FormatUtils.writeUnpaddedInteger(out, iField.get(instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1299,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1300,out.write('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1306,static class PaddedNumber extends NumberFormatter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1308,protected final int iMinPrintedDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1310,"protected PaddedNumber(DateTimeFieldType fieldType, int maxParsedDigits,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1264,"uper(chrono, field, maxParsedDigits, signed);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1313,"super(fieldType, maxParsedDigits, signed);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1268,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1317,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1318,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1319,DateTimeField field = iFieldType.getField(chrono.withUTC());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1320,"return new BoundPaddedNumber(field, iMaxParsedDigits, iSigned, iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1323,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1272,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1273,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1327,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1328,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1329,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1275,"ormatUtils.appendPaddedInteger(buf, iField.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1331,DateTimeField field = iFieldType.getField(chronoLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1332,"FormatUtils.appendPaddedInteger(buf, field.get(instantLocal), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1281,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1282,"ateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1338,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1339,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1340,"long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1284,"ormatUtils.writePaddedInteger(out, iField.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1342,DateTimeField field = iFieldType.getField(chronoLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1343,"FormatUtils.writePaddedInteger(out, field.get(instantLocal), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1291,f (partial.isSupported(iField.getType())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1350,if (partial.isSupported(iFieldType)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1293,"ormatUtils.appendPaddedInteger(buf, partial.get(iField.getType()), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1352,"FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1303,f (partial.isSupported(iField.getType())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1362,if (partial.isSupported(iFieldType)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1305,"ormatUtils.writePaddedInteger(out, partial.get(iField.getType()), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1364,"FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1315,rivate static class TwoDigitYear extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1316,mplements DateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1375,static class BoundPaddedNumber
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1376,extends PaddedNumber
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1377,implements BoundDateTimePrinter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1319,rivate final int iPivot;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1321,"woDigitYear(Chronology chrono, DateTimeField field, int pivot) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1322,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1381,"BoundPaddedNumber(DateTimeField field, int maxParsedDigits,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1382,"boolean signed, int minPrintedDigits)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1384,"super(field.getType(), maxParsedDigits, signed, minPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1388,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1389,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1390,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1391,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1392,"FormatUtils.appendPaddedInteger(buf, iField.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1393,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1394,"appendUnknownString(buf, iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1398,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1399,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1400,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1401,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1402,"FormatUtils.writePaddedInteger(out, iField.get(instantLocal), iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1403,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1404,"printUnknownString(out, iMinPrintedDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1410,static class TwoDigitYear
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1411,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1412,"implements DateTimeFormatter, BoundDateTimePrinter {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1414,private final int iPivot;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1416,TwoDigitYear(int pivot) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1417,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1327,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1421,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1331,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1425,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1360,"ucket.saveField(iField, year);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1454,"bucket.saveField(DateTimeFieldType.year(), year);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1364,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1458,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1368,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1369,"ateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1370,nt year = getTwoDigitYear(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1462,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1463,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1464,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1465,"int year = getTwoDigitYear(instantLocal, chronoLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1379,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1380,"ateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1381,nt year = getTwoDigitYear(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1474,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1475,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1476,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1477,"int year = getTwoDigitYear(instantLocal, chronoLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1390,rivate int getTwoDigitYear(long instantLocal) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1486,"private int getTwoDigitYear(long instantLocal, Chronology chronoLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1392,nt year = iField.get(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1488,int year = chronoLocal.year().get(instantLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1423,f (partial.isSupported(iField.getType())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1519,if (partial.isSupported(DateTimeFieldType.year())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1425,nt year = partial.get(iField.getType());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1521,int year = partial.get(DateTimeFieldType.year());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1436,rivate static class TextField extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1437,mplements DateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1439,rivate final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1533,static class TextField
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1534,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1535,"implements DateTimeFormatter, BoundDateTimePrinter {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1537,private final DateTimeFieldType iFieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1443,"extField(Chronology chrono, DateTimeField field,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1444,"ocale locale, boolean isShort) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1445,uper(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1446,Field = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1541,"TextField(DateTimeFieldType fieldType, Locale locale, boolean isShort) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1542,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1543,iFieldType = fieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1451,ublic int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1452,ry {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1453,f (iShort) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1454,eturn iField.getMaximumShortTextLength(iLocale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1455, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1456,eturn iField.getMaximumTextLength(iLocale);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1458, catch (RuntimeException e) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1459,eturn 1;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1548,protected int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1549,return iShort ? 6 : 20;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1463,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1464,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1552,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1553,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1554,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1466,"uf.append(print(instant, zone, instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1556,"buf.append(print(instantLocal, chronoLocal, instant, chrono));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1472,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1473,"ateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1562,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1563,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1564,"long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1475,"ut.write(print(instant, zone, instantLocal));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1566,"out.write(print(instantLocal, chronoLocal, instant, chrono));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1497,"ublic final String print(long instant, DateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1588,"protected String print(long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1589,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1590,DateTimeField field = iFieldType.getField(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1499,"eturn iField.getAsShortText(instantLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1592,"return field.getAsShortText(instantLocal, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1501,"eturn iField.getAsText(instantLocal, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1594,"return field.getAsText(instantLocal, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1505,ublic final String print(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1506,f (partial.isSupported(iField.getType())) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1598,public String print(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1599,if (partial.isSupported(iFieldType)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1600,DateTimeField field = iFieldType.getField(partial.getChronology());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1508,"eturn iField.getAsShortText(partial, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1602,"return field.getAsShortText(partial, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1510,"eturn iField.getAsText(partial, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1604,"return field.getAsText(partial, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1517,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1611,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1521,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1615,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1539,"ucket.saveField(iField, text.substring(position, i), iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1633,"bucket.saveField(iFieldType, text.substring(position, i), iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1545,rivate static class Fraction extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1546,mplements DateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1548,rivate final DateTimeField iField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1549,rivate final long iRangeMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1550,rivate final int iMinDigits;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1551,rivate final int iMaxDigits;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1553,rivate final long iScalar;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1640,static class Fraction
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1641,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1642,implements DateTimeFormatter {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1555,rivate transient DateTimeField iParseField;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1557,"raction(Chronology chrono, DateTimeField field,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1558,"nt minDigits, int maxDigits) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1559,uper(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1560,Field = field;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1561,RangeMillis = field.getDurationField().getUnitMillis();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1644,private final DateTimeFieldType iFieldType;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1645,protected int iMinDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1646,protected int iMaxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1648,"protected Fraction(DateTimeFieldType fieldType, int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1649,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1650,iFieldType = fieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1570,ong scalar;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1571,hile (true) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1572,witch (maxDigits) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1573,efault: scalar = 1L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1574,ase 1:  scalar = 10L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1575,ase 2:  scalar = 100L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1576,ase 3:  scalar = 1000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1577,ase 4:  scalar = 10000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1578,ase 5:  scalar = 100000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1579,ase 6:  scalar = 1000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1580,ase 7:  scalar = 10000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1581,ase 8:  scalar = 100000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1582,ase 9:  scalar = 1000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1583,ase 10: scalar = 10000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1584,ase 11: scalar = 100000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1585,ase 12: scalar = 1000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1586,ase 13: scalar = 10000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1587,ase 14: scalar = 100000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1588,ase 15: scalar = 1000000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1589,ase 16: scalar = 10000000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1590,ase 17: scalar = 100000000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1591,ase 18: scalar = 1000000000000000000L; break;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1593,f (((iRangeMillis * scalar) / scalar) == iRangeMillis) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1594,reak;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1596,/ Overflowed: scale down.
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1597,axDigits--;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1601,Scalar = scalar;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1604,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1659,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1660,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1661,DateTimeField field = iFieldType.getField(chrono.withUTC());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1662,"return new BoundFraction(field, iMinDigits, iMaxDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1665,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1608,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1609,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1669,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1670,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1671,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1611,"rintTo(buf, null, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1673,"printTo(buf, null, instantLocal, chronoLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1617,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1618,"ateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1619,"rintTo(null, out, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1679,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1680,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1681,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1682,"printTo(null, out, instantLocal, chronoLocal);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1623,f (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1624,"ong millis = this.iChrono.withUTC().set(partial, 0L);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1686,if (partial.isSupported(iFieldType)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1687,"long millis = partial.getChronology().set(partial, 0L);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1626,"rintTo(buf, null, millis);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1689,"printTo(buf, null, millis, partial.getChronology());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1636,f (partial.isSupported(iField.getType())) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1637,"ong millis = this.iChrono.withUTC().set(partial, 0L);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1638,"rintTo(null, out, millis);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1699,if (partial.isSupported(iFieldType)) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1700,"long millis = partial.getChronology().set(partial, 0L);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1701,"printTo(null, out, millis, partial.getChronology());"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1644,"rivate void printTo(StringBuffer buf, Writer out, long instantLocal)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1707,"protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1710,DateTimeField field = iFieldType.getField(chronoLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1651,raction = iField.remainder(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1715,fraction = field.remainder(instantLocal);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1654,hile (--minDigits >= 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1655,uf.append('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1718,"appendUnknownString(buf, minDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1658,hile (--minDigits >= 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1659,ut.write('\ufffd');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1720,"printUnknownString(out, minDigits);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1679,ong scaled = fraction * iScalar / iRangeMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1739,"long[] fractionData = getFractionData(fraction, field);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1740,long scaled = fractionData[0];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1741,int maxDigits = (int) fractionData[1];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1681,tr = Integer.toString((int)scaled);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1744,str = Integer.toString((int) scaled);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1687,nt digits = iMaxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1750,int digits = maxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1791,"private long[] getFractionData(long fraction, DateTimeField field) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1792,long rangeMillis = field.getDurationField().getUnitMillis();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1793,long scalar;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1794,int maxDigits = iMaxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1795,while (true) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1796,switch (maxDigits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1797,default: scalar = 1L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1798,case 1:  scalar = 10L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1799,case 2:  scalar = 100L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1800,case 3:  scalar = 1000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1801,case 4:  scalar = 10000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1802,case 5:  scalar = 100000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1803,case 6:  scalar = 1000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1804,case 7:  scalar = 10000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1805,case 8:  scalar = 100000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1806,case 9:  scalar = 1000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1807,case 10: scalar = 10000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1808,case 11: scalar = 100000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1809,case 12: scalar = 1000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1810,case 13: scalar = 10000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1811,case 14: scalar = 100000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1812,case 15: scalar = 1000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1813,case 16: scalar = 10000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1814,case 17: scalar = 100000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1815,case 18: scalar = 1000000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1817,if (((rangeMillis * scalar) / scalar) == rangeMillis) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1818,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1820,// Overflowed: scale down.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1821,maxDigits--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1824,"return new long[] {fraction * scalar / rangeMillis, maxDigits};"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1729,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1827,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1733,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1831,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1832,DateTimeField field = iFieldType.getField(bucket.getChronology());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1737,ong n = iRangeMillis * 10;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1837,long n = field.getDurationField().getUnitMillis() * 10;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1760,f (iParseField == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1761,ParseField = new PreciseDateTimeField
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1762,"DateTimeFieldType.millisOfSecond(), MillisDurationField.INSTANCE, iField.getDurationField());"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1860,DateTimeField parseField = new PreciseDateTimeField(
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1861,"DateTimeFieldType.millisOfSecond(),"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1862,"MillisDurationField.INSTANCE,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1863,field.getDurationField());
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1765,"ucket.saveField(iParseField, (int)value);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1865,"bucket.saveField(parseField, (int) value);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1771,rivate static class TimeZoneOffsetFormatter extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1772,mplements DateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1872,static class BoundFraction
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1873,extends Fraction
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1874,implements BoundDateTimePrinter {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1876,private final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1877,private final long iScalar;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1878,private final long iRangeMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1880,"BoundFraction(DateTimeField field, int minDigits, int maxDigits) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1881,"super(field.getType(), minDigits, maxDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1882,iField = field;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1883,iMinDigits = minDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1885,long rangeMillis = field.getDurationField().getUnitMillis();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1886,long scalar;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1887,while (true) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1888,switch (maxDigits) {  // know this is 18 or less
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1889,default: scalar = 1L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1890,case 1:  scalar = 10L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1891,case 2:  scalar = 100L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1892,case 3:  scalar = 1000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1893,case 4:  scalar = 10000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1894,case 5:  scalar = 100000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1895,case 6:  scalar = 1000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1896,case 7:  scalar = 10000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1897,case 8:  scalar = 100000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1898,case 9:  scalar = 1000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1899,case 10: scalar = 10000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1900,case 11: scalar = 100000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1901,case 12: scalar = 1000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1902,case 13: scalar = 10000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1903,case 14: scalar = 100000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1904,case 15: scalar = 1000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1905,case 16: scalar = 10000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1906,case 17: scalar = 100000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1907,case 18: scalar = 1000000000000000000L; break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1909,if (((rangeMillis * scalar) / scalar) == rangeMillis) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1910,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1912,// Overflowed: scale down.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1913,maxDigits--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1915,iMaxDigits = maxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1916,iScalar = scalar;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1917,iRangeMillis = rangeMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1920,"protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal)"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1921,throws IOException
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1923,DateTimeField field = iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1924,int minDigits = iMinDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1926,long fraction;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1927,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1928,fraction = field.remainder(instantLocal);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1929,} catch (RuntimeException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1930,if (buf != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1931,"appendUnknownString(buf, minDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1932,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1933,"printUnknownString(out, minDigits);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1935,return;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1938,if (fraction == 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1939,if (buf != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1940,while (--minDigits >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1941,buf.append('0');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1943,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1944,while (--minDigits >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1945,out.write('0');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1948,return;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1951,String str;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1952,long scaled = fraction * iScalar / iRangeMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1953,int maxDigits = iMaxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1955,if ((scaled & 0x7fffffff) == scaled) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1956,str = Integer.toString((int) scaled);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1957,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1958,str = Long.toString(scaled);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1961,int length = str.length();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1962,int digits = maxDigits;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1963,while (length < digits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1964,if (buf != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1965,buf.append('0');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1966,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1967,out.write('0');
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1969,minDigits--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1970,digits--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1973,if (minDigits < digits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1974,// Chop off as many trailing zero digits as necessary.
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1975,while (minDigits < digits) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1976,if (length <= 1 || str.charAt(length - 1) != '0') {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1977,break;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1979,digits--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1980,length--;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1982,if (length < str.length()) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1983,if (buf != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1984,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1985,buf.append(str.charAt(i));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1987,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1988,for (int i=0; i<length; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1989,out.write(str.charAt(i));
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1992,return;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1996,if (buf != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1997,buf.append(str);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1998,} else {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1999,out.write(str);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2005,static class TimeZoneOffsetFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2006,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2007,"implements DateTimeFormatter, BoundDateTimePrinter {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1779,"imeZoneOffsetFormatter(Chronology chrono,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1780,"tring zeroOffsetText,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2014,"TimeZoneOffsetFormatter(String zeroOffsetText,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1784,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2018,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1798,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2032,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1809,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1810,"ateTimeZone zone, long instantLocal) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2043,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2044,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2045,"long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1866,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1867,"ateTimeZone zone, long instantLocal) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2101,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2102,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2103,"long instant, Chronology chrono) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1931,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2167,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1935,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2171,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2125,rivate static class TimeZonePrinter extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2126,mplements DateTimePrinter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2362,static class TimeZonePrinter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2363,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2364,"implements DateTimePrinter, BoundDateTimePrinter {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2131,"imeZonePrinter(Chronology chrono, Locale locale, boolean shortFormat) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2132,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2369,"TimeZonePrinter(Locale locale, boolean shortFormat) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2370,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2137,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2375,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2141,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2142,"ateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2143,f (zone == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2144,one = getZone();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2146,f (iShortFormat) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2147,"uf.append(zone.getShortName(instant, this.iLocale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2148, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2149,"uf.append(zone.getName(instant, this.iLocale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2379,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2380,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2381,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2382,"buf.append(print(instantLocal, chronoLocal, instant, chrono));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2153,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2154,"ateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2155,f (zone == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2156,one = getZone();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2158,f (iShortFormat) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2159,"ut.write(zone.getShortName(instant, this.iLocale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2160, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2161,"ut.write(zone.getName(instant, this.iLocale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2385,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2386,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2387,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2388,"out.write(print(instantLocal, chronoLocal, instant, chrono));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2165,"ublic String print(long instant, DateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2166,f (zone == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2167,one = getZone();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2391,"protected String print(long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2392,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2393,DateTimeZone zone = chrono.getZone();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2185,rivate static final class Composite extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2186,mplements DateTimeFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2188,rivate final DateTimePrinter[] iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2189,rivate final DateTimeParser[] iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2411,static class Composite
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2412,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2413,"implements DateTimeFormatter, BoundDateTimePrinter {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2415,private final BaseDateTimeFormatter[] iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2416,private final BaseDateTimeFormatter[] iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2194,"omposite(Chronology chrono, List elementPairs) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2195,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2421,Composite(List elementPairs) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2422,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2207,Printers = new DateTimePrinter[size];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2434,iPrinters = new BaseDateTimeFormatter[size];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2210,ateTimePrinter printer = (DateTimePrinter)printerList.get(i);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2437,BaseDateTimeFormatter printer = (BaseDateTimeFormatter) printerList.get(i);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2222,Parsers = new DateTimeParser[size];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2449,iParsers = new BaseDateTimeFormatter[size];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2225,ateTimeParser parser = (DateTimeParser)parserList.get(i);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2452,BaseDateTimeFormatter parser = (BaseDateTimeFormatter) parserList.get(i);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2233,ublic int estimatePrintedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2460,"private Composite(Composite base, BaseDateTimeFormatter[] printers) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2461,iPrinters = printers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2462,iParsers = base.iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2463,iPrintedLengthEstimate = base.iPrintedLengthEstimate;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2464,iParsedLengthEstimate = base.iParsedLengthEstimate;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2467,public BoundDateTimePrinter bindPrinter(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2468,BaseDateTimeFormatter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2469,if (elements == null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2470,throw new UnsupportedOperationException();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2473,int len = elements.length;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2474,BaseDateTimeFormatter[] array = new BaseDateTimeFormatter[len];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2475,for (int i = 0; i < len; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2476,BoundDateTimePrinter bound = ((DateTimePrinter) elements[i]).bindPrinter(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2477,array[i] = (BaseDateTimeFormatter) bound;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2479,"return new Composite(this, array);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2482,protected int estimatePrintedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2237,"ublic void printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2238,"ateTimeZone zone, long instantLocal) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2239,ateTimePrinter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2486,"protected void printTo(StringBuffer buf,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2487,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2488,"long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2489,BaseDateTimeFormatter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2245,or (int i=0; i<len; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2246,"lements[i].printTo(buf, instant, zone, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2495,for (int i = 0; i < len; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2496,"elements[i].printTo(buf, instantLocal, chronoLocal, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2250,"ublic void printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2251,"ateTimeZone zone, long instantLocal) throws IOException {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2252,ateTimePrinter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2500,"protected void printTo(Writer out,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2501,"long instantLocal, Chronology chronoLocal,"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2502,"long instant, Chronology chrono) throws IOException {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2503,BaseDateTimeFormatter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2258,or (int i=0; i<len; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2259,"lements[i].printTo(out, instant, zone, instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2509,for (int i = 0; i < len; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2510,"elements[i].printTo(out, instantLocal, chronoLocal, instant, chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2264,ateTimePrinter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2515,BaseDateTimeFormatter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2276,ateTimePrinter[] elements = iPrinters;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2527,BaseDateTimeFormatter[] elements = iPrinters;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2287,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2538,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2291,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2292,ateTimeParser[] elements = iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2542,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2543,BaseDateTimeFormatter[] elements = iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2349,rivate static final class MatchingParser extends AbstractFormatter
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2350,mplements DateTimeParser
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2352,rivate final DateTimeParser[] iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2600,static class MatchingParser
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2601,extends BaseDateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2602,implements DateTimeParser {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2604,private final BaseDateTimeFormatter[] iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2355,"atchingParser(Chronology chrono, DateTimeParser[] parsers) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2356,uper(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2607,MatchingParser(BaseDateTimeFormatter[] parsers) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2608,super();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2360,ateTimeParser parser = parsers[i];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2612,BaseDateTimeFormatter parser = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2371,ublic int estimateParsedLength() {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2623,protected int estimateParsedLength() {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2375,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2376,ateTimeParser[] parsers = iParsers;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2627,"protected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2628,BaseDateTimeFormatter[] parsers = iParsers;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2388,ateTimeParser parser = parsers[i];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2640,BaseDateTimeFormatter parser = parsers[i];
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,59,mport org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,60,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,64,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,65,* Note: This interface represents a view onto {@link BaseDateTimeFormatter}.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,66,* All implementations must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,74," Returns the Chronology being used by the parser, or null if none."
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,76," @return the chronology in use, may be null if none"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,78,hronology getChronology();
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,81, Returns the expected maximum number of characters consumed. The actual
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,82, amount should rarely exceed this estimate.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,84, @return the estimated length
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,86,nt estimateParsedLength();
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,90," Parse an element from the given text, saving any fields into the given"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,91," DateTimeParserBucket. If the parse succeeds, the return value is the new"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,92, text position. Note that the parse may succeed without fully reading the
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,93, text.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,94, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,95," If it fails, the return value is negative. To determine the position"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,96," where the parse failed, apply the one's complement operator (~) on the"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,97, return value.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,99, @param bucket  field are saved into this
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,100, @param text  the text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,101, @param position  position to start parsing from
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,102," @return new position, negative value means parse failed -"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,103,  apply complement operator (~) to get position of failure
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,104, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,106,"nt parseInto(DateTimeParserBucket bucket, String text, int position);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,85,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,86,* The parse will use the chronology of the instant.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,119, @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,89,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,93,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,102,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,103,"* The parse will use the ISO chronology, and the default time zone."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,104,* If the text contains a time zone string then that will be taken into account.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,113,"* Parses a datetime from the given text, returning the number of"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,114,"* milliseconds since the epoch, 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,115,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,116,* The parse will use the given chronology and time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,117,* If the text contains a time zone string then that will be taken into account.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,119,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,120,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,121,* @return parsed value expressed in milliseconds since the epoch
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,122,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,124,"long parseMillis(String text, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,142, local time.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,131,"* local time, and which can default field values."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,132,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,133,* The parse will use the ISO chronology and default time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,134,* If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,144, @param text  text to parse
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,145," @param instantLocal  initial value of instant, relative to the epoch, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,136,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,137,"* @param instant  initial value of instant, relative to the epoch, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,138,"* @return parsed value expressed in milliseconds since the epoch, UTC"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,139,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,141,"long parseMillis(String text, long instant);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,144,"* Parses a datetime from the given text, at the given position, returning"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,145,"* the number of milliseconds since the epoch, 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,146,"* An initial millisecond value is passed in, which is relative to the epoch,"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,147,* which can default field values.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,148,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,149,* The parse will use the given chronology and time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,150,* If the text contains a time zone string then that will be taken into account.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,152,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,153,"* @param instant  initial value of instant, relative to the epoch"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,154,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,149,"ong parseMillis(String text, long instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,158,"long parseMillis(String text, long instant, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,163,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,164,* The parse will use the ISO chronology and default time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,165,* If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,155, @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,167,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,174,"* Parses a datetime from the given text, returning a new DateTime."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,175,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,176,* The parse will use the given chronology and time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,177,* If the text contains a time zone string then that will be taken into account.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,179,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,180,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,181,* @return parsed value in a DateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,182,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,184,"DateTime parseDateTime(String text, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,189,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,190,* The parse will use the instant's chronology and time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,191,* If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,165, @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,193,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,203,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,204,* The parse will use the ISO chronology and default time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,205,* If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,175, @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,207,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,214,"* Parses a datetime from the given text, returning a new MutableDateTime."
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,215,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,216,* The parse will use the given chronology and time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,217,* If the text contains a time zone string then that will be taken into account.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,219,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,220,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,221,* @return parsed value in a MutableDateTime object
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,222,* @throws IllegalArgumentException if the text to parse is invalid
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,224,"MutableDateTime parseMutableDateTime(String text, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,229,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,230,* The parse will use the instant's chronology and time zone.
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,231,* If the text contains a time zone string then that will be taken into account.
False,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,185, @param text  text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,JodaTime/src/java/org/joda/time/format/DateTimeParser.java,233,* @param text  the text to parse
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,61,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,62,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,66,* Internal class used to build the state during parsing.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,67,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,85,* @since 1.0
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,83,inal long iMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,89,private final Chronology iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,90,private final long iMillis;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,103,* Constucts a bucket.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,106,* @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,98,ublic DateTimeParserBucket(long instantLocal) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,108,"public DateTimeParserBucket(long instantLocal, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,109,super();
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,110,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,112,iChrono = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,113,setZone(chrono.getZone());
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,118,"* Gets the chronology of the bucket, which will be a local (UTC) chronology."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,120,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,121,return iChrono;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,168,"* @param field  the field, whose chronology must match that of this bucket"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,169,* @param value  the value
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,176,* Saves a datetime field value.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,178,* @param fieldType  the field type
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,179,* @param value  the value
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,181,"public void saveField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,182,"saveField(new SavedField(fieldType.getField(iChrono), value));"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,188,* @param fieldType  the field type
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,189,* @param text  the text value
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,190,* @param locale  the locale to use
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,150,"ublic void saveField(DateTimeField field, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,151,"aveField(new SavedField(field, text, locale));"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,192,"public void saveField(DateTimeFieldType fieldType, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,193,"saveField(new SavedField(fieldType.getField(iChrono), text, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,205, Computes the parsed datetime by setting the saved fields. This method is
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,206," idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,247,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,248,"* This method is idempotent, but it is not thread-safe."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,216, Computes the parsed datetime by setting the saved fields. This method is
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,217," idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,258,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,259,"* This method is idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,66,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,67,* Instances of this interface are provided by the various builder classes.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,68,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,69,* Note: This interface represents a view onto {@link BaseDateTimeFormatter}.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,70,* All implementations must extend <code>BaseDateTimeFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,68, @see DateTimeFormatter
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,73,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,76,* @see ISODateTimeFormat
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,76," Returns the Chronology being used by the printer, or null if none."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,78," @return the chronology in use, may be null if none"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,80,hronology getChronology();
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,83, Returns the expected maximum number of characters produced. The actual
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,84, amount should rarely exceed this estimate.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,82,* Returns another printer instance that can only be used with the specified chronology.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,83,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,84,* The normal DateTimePrinter is a fast implementation of printing dates
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,85,"* and times, well over twice as fast as the JDK. However, it is possible to"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,86,* go even faster by specifying in advance the chronology to use. Note that
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,87,"* this optimisation should be rarely used, and only when you have identified a"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,88,* performance problem.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,89,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,90,* You should only use this method if you are going to use the printer for the
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,91,"* returned chronology multiple times, typically storing it in an instance or"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,92,* static variable. You should not use this method if you will only use the
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,93,"* printer once or a few times, as the setup cost will cause performance to be"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,94,* worse than using an ordinary printer.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,95,* <p>
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,96,* It is the callers resposibility to ensure that the printer is then only
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,97,* used with instances of the correct chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,86, @return the estimated length
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,99,"* @param chrono  the chronology to use, null means ISO"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,100,* @return the chronology specific printer
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,88,nt estimatePrintedLength();
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,102,BoundDateTimePrinter bindPrinter(Chronology chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,92," Prints a ReadableInstant, attempting to use the DateTimeZone supplied by"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,93, the instant.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,106,"* Prints a ReadableInstant, using the chronology supplied by the instant."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,96, @param instant  instant to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,109,"* @param instant  instant to format, null means now"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,101," Prints a ReadableInstant, attempting to use the DateTimeZone supplied by"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,102, the instant.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,114,"* Prints a ReadableInstant, using the chronology supplied by the instant."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,105, @param instant  instant to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,117,"* @param instant  instant to format, null means now"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,112, using the formatter's DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,124,* using ISO chronology in the default DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,121, using the formatter's DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,133,* using ISO chronology in the default DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,131, attempting to use the given DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,143,* using ISO chronology in the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,135," @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,147,"* @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,141, attempting to use the given DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,153,* using ISO chronology in the given DateTimeZone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,145," @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,157,"* @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,152, attempting to use the given DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,164,* using the given Chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,155," @param instant  millis since 1970-01-01T00:00:00Z, used by time zone printers"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,156," @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,157," @param instantLocal  pre-calculated millis since 1970-01-01T00:00:00, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,167,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,168,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,159,"oid printTo(StringBuffer buf, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,160,"ateTimeZone zone, long instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,170,"void printTo(StringBuffer buf, long instant, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,164, attempting to use the given DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,174,* using the given Chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,167," @param instant millis  since 1970-01-01T00:00:00Z, used by time zone printers"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,168," @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,169," @param instantLocal  pre-calculated millis since 1970-01-01T00:00:00, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,177,* @param instant  millis since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,178,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,171,"oid printTo(Writer out, long instant,"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,172,"ateTimeZone zone, long instantLocal) throws IOException;"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,180,"void printTo(Writer out, long instant, Chronology chrono) throws IOException;"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,193," Prints a ReadableInstant to a new String, attempting to use the"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,194, DateTimeZone supplied by the instant.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,201,"* Prints a ReadableInstant to a new String, using the chronology of the instant."
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,196, @param instant  instant to format
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,203,"* @param instant  instant to format, null means now"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,203, using the formatter's DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,210,* using ISO chronology in the default zone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,212, attempting to use the given DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,219,* using ISO chronology in the given zone.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,215," @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,222,"* @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,222, attempting to use the given DateTimeZone.
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,229,* using the given chronology.
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,225," @param zone  DateTimeZone to use, overriding the formatter's own zone if not null"
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,226," @param instantLocal  pre-calculated millis since 1970-01-01T00:00:00, local time"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,232,* @param chrono  the chronoogy to use
False,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,229,"tring print(long instant, DateTimeZone zone, long instantLocal);"
True,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,JodaTime/src/java/org/joda/time/format/DateTimePrinter.java,235,"String print(long instant, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,65,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,72,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,374,"static String createErrorMessage(final String text, final int errorPos) {"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,375,int sampleLen = errorPos + 20;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,376,String sampleText;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,377,if (text.length() <= sampleLen + 3) {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,378,sampleText = text;
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,379,} else {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,380,"sampleText = text.substring(0, sampleLen).concat(""..."");"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,383,if (errorPos <= 0) {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,384,"return ""Invalid format: \"""" + sampleText + '""';"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,387,if (errorPos >= text.length()) {
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,388,"return ""Invalid format: \"""" + sampleText + ""\"" is too short"";"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,391,"return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +"
True,JodaTime/src/java/org/joda/time/format/FormatUtils.java,JodaTime/src/java/org/joda/time/format/FormatUtils.java,392,"sampleText.substring(errorPos) + '""';"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,56,mport java.util.HashMap;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,57,mport java.util.Map;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,59,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,60,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,61,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,89, Cache that maps Chronology instances to instances.
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,91,rivate static Map cCache = new HashMap(7);
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,94, Gets an instance of a format provider that uses the ISOChronology in UTC.
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,96, @return a format provider
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,98,ublic static ISODateTimeFormat getInstanceUTC() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,99,eturn getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,82,/** The singleton instance. */
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,83,private static final ISODateTimeFormat INSTANCE = new ISODateTimeFormat();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,103, Gets an instance of a format provider that uses the ISOChronology
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,104, in the default time zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,86,* Gets an instance of a the format provider.
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,109,eturn getInstance(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,113, Gets an instance of a format provider that uses the ISOChronology
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,114, in the specified time zone.
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,116, @return a format provider
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,118,ublic static ISODateTimeFormat getInstance(final DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,119,eturn getInstance(ISOChronology.getInstance(zone));
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,123, Gets an instance of a format provider that uses the specified chronology.
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,125," @param chrono  the chronology to use, null means default chronology"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,126, @return a format provider
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,128,ublic static synchronized ISODateTimeFormat getInstance(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,129,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,130,hrono = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,132,SODateTimeFormat instance = (ISODateTimeFormat)cCache.get(chrono);
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,133,f (instance == null) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,134,nstance = new ISODateTimeFormat(chrono);
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,135,"Cache.put(chrono, instance);"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,137,eturn instance;
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,91,return INSTANCE;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,141,rivate final Chronology iChrono;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,215,rivate ISODateTimeFormat(final Chronology chrono) {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,216,Chrono = chrono;
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,167,private ISODateTimeFormat() {
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,234,p = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,185,dp = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,237,new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,188,(new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,258,pe = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,209,dpe = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,260,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,211,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,263,new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,214,(new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,268,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,219,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,273,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,224,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,297,p = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,248,tp = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,299,new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,250,(new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,322,ateTimeParser decimalPoint = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,273,DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,324,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,275,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,327,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,278,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,333,pe = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,284,tpe = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,338,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,289,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,343,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,294,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,347,appendOptional(new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,298,.appendOptional(new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,353,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,304,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,361,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,312,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,393,ateTimeParser time = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,344,DateTimeParser time = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,399,tp = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,350,dtp = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,402,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,353,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,406,ew DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,357,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,440, = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,391,t = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,457,x = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,408,tx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,475,t = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,426,tt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,493,tx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,444,ttx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,510,t = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,461,dt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,527,tx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,478,dtx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,554,dt = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,505,wdt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,571,dtx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,522,wdtx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,588,d = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,539,bd = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,607,t = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,558,bt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,628,tx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,579,btx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,648,tt = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,599,btt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,666,ttx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,617,bttx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,683,dt = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,634,bdt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,700,dtx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,651,bdtx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,716,wd = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,667,bwd = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,735,wdt = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,686,bwdt = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,752,wdtx = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,703,bwdtx = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,778,m = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,729,ym = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,794,md = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,745,ymd = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,820,w = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,771,ww = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,836,wd = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,787,wwd = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,862,m = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,813,hm = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,878,ms = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,829,hms = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,896,msl = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,847,hmsl = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,915,msf = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,866,hmsf = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,933,h = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,884,dh = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,950,hm = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,901,dhm = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,968,hms = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,919,dhms = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,986,hmsl = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,937,dhmsl = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1004,hmsf = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,955,dhmsf = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1016,e = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,967,ye = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1025,ye = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,976,mye = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1035,me = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,986,dme = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1045,e = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,996,we = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1054,we = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1005,wwe = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1064,we = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1015,dwe = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1074,ye = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1025,dye = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1084,te = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1035,lte = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1093,de = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1044,hde = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1102,he = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1053,mhe = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1112,me = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1063,sme = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1122,se = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1073,lse = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1132,se = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1083,fse = new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1144,e = new DateTimeFormatterBuilder(iChrono)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,1095,ze = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java,JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java,63,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/PeriodFormatter.java,JodaTime/src/java/org/joda/time/format/PeriodFormatter.java,60,* <p>
True,JodaTime/src/java/org/joda/time/format/PeriodFormatter.java,JodaTime/src/java/org/joda/time/format/PeriodFormatter.java,61,* Note: This interface represents a view onto {@link BasePeriodFormatter}.
True,JodaTime/src/java/org/joda/time/format/PeriodFormatter.java,JodaTime/src/java/org/joda/time/format/PeriodFormatter.java,62,* All implementations must extend <code>BasePeriodFormatter</code>.
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,90, @see PeriodFormat
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,91,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,92,* @see PeriodFormat
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,164,"eturn sep.finish(toFormatter(formatters.subList(1, size)));"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,165,"return sep.finish((BasePeriodFormatter) toFormatter(formatters.subList(1, size)));"
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,166,eturn createComposite(formatters);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,167,return (PeriodFormatter) createComposite(formatters);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,191,ublic PeriodFormatterBuilder append(PeriodFormatter formatter)
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,192,hrows IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,192,public PeriodFormatterBuilder append(PeriodFormatter formatter) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,196,if (formatter instanceof BasePeriodFormatter == false) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,197,"throw new IllegalArgumentException(""Formatter must extend BasePeriodFormatter"");"
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,675,eriodFormatter composite = createComposite(formatters);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,677,BasePeriodFormatter composite = createComposite(formatters);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,690,rivate static PeriodFormatter createComposite(List formatters) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,692,private static BasePeriodFormatter createComposite(List formatters) {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,695,eturn (PeriodFormatter) formatters.get(0);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,697,return (BasePeriodFormatter) formatters.get(0);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,706,rivate static interface PeriodFieldAffix {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,708,static interface PeriodFieldAffix {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,728,rivate static final class SimpleAffix implements PeriodFieldAffix {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,730,static class SimpleAffix implements PeriodFieldAffix {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,774,rivate static final class PluralAffix implements PeriodFieldAffix {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,776,static class PluralAffix implements PeriodFieldAffix {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,849,rivate static final class CompositeAffix implements PeriodFieldAffix {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,851,static class CompositeAffix implements PeriodFieldAffix {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,894,rivate static final class FieldFormatter extends AbstractPeriodFormatter
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,895,mplements PeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,896,static class FieldFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,897,extends BasePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,898,implements PeriodFormatter {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1368,rivate static final class Literal extends AbstractPeriodFormatter
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1369,mplements PeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1370,static class Literal
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1371,extends BasePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1372,implements PeriodFormatter {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1408,rivate static final class Separator extends AbstractPeriodFormatter
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1409,mplements PeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1410,static class Separator
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1411,extends BasePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1412,implements PeriodFormatter {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1417,rivate PeriodFormatter iBefore;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1418,rivate PeriodFormatter iAfter;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1419,private BasePeriodFormatter iBefore;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1420,private BasePeriodFormatter iAfter;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1420,"eparator(String text, String finalText, PeriodFormatter before, boolean useBefore, boolean useAfter) {"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1422,"Separator(String text, String finalText, BasePeriodFormatter before, boolean useBefore, boolean useAfter) {"
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1437,eriodPrinter before = iBefore;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1438,eriodPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1439,BasePeriodFormatter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1440,BasePeriodFormatter after = iAfter;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1462,eriodPrinter before = iBefore;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1463,eriodPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1464,BasePeriodFormatter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1465,BasePeriodFormatter after = iAfter;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1484,eriodPrinter before = iBefore;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1485,eriodPrinter after = iAfter;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1486,BasePeriodFormatter before = iBefore;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1487,BasePeriodFormatter after = iAfter;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1527,eparator finish(PeriodFormatter after) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1529,Separator finish(BasePeriodFormatter after) {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1537,rivate static final class Composite extends AbstractPeriodFormatter
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1538,mplements PeriodFormatter
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1540,rivate final PeriodFormatter[] iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1539,static class Composite
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1540,extends BasePeriodFormatter
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1541,implements PeriodFormatter {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1543,private final BasePeriodFormatter[] iFormatters;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1543,Formatters = (PeriodFormatter[])formatters.toArray
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1544,new PeriodFormatter[formatters.size()]);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1546,iFormatters = (BasePeriodFormatter[]) formatters.toArray(
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1547,new BasePeriodFormatter[formatters.size()]);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1549,eriodPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1552,BasePeriodFormatter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1558,eriodPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1561,BasePeriodFormatter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1566,eriodPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1569,BasePeriodFormatter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1574,eriodPrinter[] printers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1577,BasePeriodFormatter[] printers = iFormatters;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1583,eriodParser[] parsers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1586,BasePeriodFormatter[] parsers = iFormatters;
True,JodaTime/src/java/org/joda/time/format/PeriodParser.java,JodaTime/src/java/org/joda/time/format/PeriodParser.java,63,* <p>
True,JodaTime/src/java/org/joda/time/format/PeriodParser.java,JodaTime/src/java/org/joda/time/format/PeriodParser.java,64,* Note: This interface represents a view onto {@link BasePeriodFormatter}.
True,JodaTime/src/java/org/joda/time/format/PeriodParser.java,JodaTime/src/java/org/joda/time/format/PeriodParser.java,65,* All implementations must extend <code>BasePeriodFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/PeriodParser.java,JodaTime/src/java/org/joda/time/format/PeriodParser.java,68,* @since 1.0
False,JodaTime/src/java/org/joda/time/format/PeriodParser.java,JodaTime/src/java/org/joda/time/format/PeriodParser.java,68, @since 1.0
True,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,63,* <p>
True,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,64,* Note: This interface represents a view onto {@link BasePeriodFormatter}.
True,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,65,* All implementations must extend <code>BasePeriodFormatter</code>.
True,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,68,* @since 1.0
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,68, @since 1.0
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,73, Returns the amount of fields from the given period that this printer
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,74, will print.
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,76, @param period  the period to use
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,77, @return amount of fields printed
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,79,nt countFieldsToPrint(ReadablePeriod period);
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,82, Returns the amount of fields from the given period that this printer
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,83, will print.
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,85, @param period  the period to use
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,86, @param stopAt stop counting at this value
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,87, @return amount of fields printed
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,89,"nt countFieldsToPrint(ReadablePeriod period, int stopAt);"
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,92, Returns the exact number of characters produced for the given period.
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,94, @param period  the period to use
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,95, @return the estimated length
False,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,JodaTime/src/java/org/joda/time/format/PeriodPrinter.java,97,nt calculatePrintedLength(ReadablePeriod period);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,278,ateTimeParser p = ISODateTimeFormat
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,279,getInstance(getLenientISOChronology())
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,280,hourMinuteSecondFraction();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,278,DateTimeParser p = ISODateTimeFormat.getInstance().hourMinuteSecondFraction();
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,138,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,139,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,138,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,139,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,145,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,146,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,145,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,146,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,152,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,153,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,152,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,153,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,159,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,160,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,159,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,160,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,166,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,167,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,166,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,167,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,173,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,174,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,173,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,174,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,180,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,181,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,180,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,181,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,188,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,189,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,188,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,189,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,193,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,194,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,193,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,194,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,198,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,199,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,198,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,199,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,203,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,204,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,203,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,204,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,208,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,209,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,208,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,209,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,213,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,214,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,213,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,214,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,218,"ssertEquals(6, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,219,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,218,"assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,219,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,223,"ssertEquals(6, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,224,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,223,"assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,224,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,231,"ssertEquals(1, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,232,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,231,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,232,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,236,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,237,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,236,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,237,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,241,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,242,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,241,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,242,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,246,"ssertEquals(1, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,247,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,246,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,247,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,251,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,252,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,251,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,252,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,256,"ssertEquals(5, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,257,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,256,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,257,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,261,"ssertEquals(6, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,262,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,261,"assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,262,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,266,"ssertEquals(6, f.calculatePrintedLength(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,267,"ssertEquals(1, f.countFieldsToPrint(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,266,"assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,267,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,273,"ssertEquals(1, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,274,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,273,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,274,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,280,"ssertEquals(3, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,281,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,280,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,281,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,288,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,289,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,288,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,289,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,295,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,296,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,295,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,296,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,309,"ssertEquals(6, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,310,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,309,"assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,310,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,316,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,317,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,316,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,317,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,339,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,340,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,339,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,340,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,346,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,347,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,346,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,347,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,367,"ssertEquals(6, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,368,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,367,"assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,368,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,374,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,375,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,374,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,375,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,404,"ssertEquals(3, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,405,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,404,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,405,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,412,"ssertEquals(3, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,413,"ssertEquals(2, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,412,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,413,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,416,"ssertEquals(1, f.calculatePrintedLength(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,417,"ssertEquals(1, f.countFieldsToPrint(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,416,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,417,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,420,"ssertEquals(1, f.calculatePrintedLength(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,421,"ssertEquals(1, f.countFieldsToPrint(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,420,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,421,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,431,"ssertEquals(10, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,432,"ssertEquals(3, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,431,"assertEquals(10, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,432,"assertEquals(3, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,435,"ssertEquals(7, f.calculatePrintedLength(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,436,"ssertEquals(2, f.countFieldsToPrint(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,435,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,436,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,439,"ssertEquals(1, f.calculatePrintedLength(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,440,"ssertEquals(1, f.countFieldsToPrint(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,439,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,440,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,446,"ssertEquals(3, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,447,"ssertEquals(2, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,446,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,447,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,450,"ssertEquals(2, f.calculatePrintedLength(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,451,"ssertEquals(1, f.countFieldsToPrint(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,450,"assertEquals(2, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,451,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,454,"ssertEquals(1, f.calculatePrintedLength(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,455,"ssertEquals(1, f.countFieldsToPrint(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,454,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,455,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,461,"ssertEquals(3, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,462,"ssertEquals(2, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,461,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,462,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,465,"ssertEquals(1, f.calculatePrintedLength(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,466,"ssertEquals(1, f.countFieldsToPrint(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,465,"assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,466,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,469,"ssertEquals(2, f.calculatePrintedLength(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,470,"ssertEquals(1, f.countFieldsToPrint(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,469,"assertEquals(2, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,470,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,477,"ssertEquals(5, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,478,"ssertEquals(0, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,477,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,478,"assertEquals(0, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,485,"ssertEquals(3, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,486,"ssertEquals(2, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,485,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,486,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,492,"ssertEquals(4, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,493,"ssertEquals(1, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,492,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,493,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,505,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,506,"ssertEquals(4, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,505,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,506,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,509,"ssertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,510,"ssertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,509,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,510,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,513,"ssertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,514,"ssertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,513,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,514,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,517,"ssertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,518,"ssertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,517,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,518,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,525,"ssertEquals(2, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,526,"ssertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,525,"assertEquals(2, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,526,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,538,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,539,"ssertEquals(4, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,538,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,539,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,542,"ssertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,543,"ssertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,542,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,543,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,546,"ssertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,547,"ssertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,546,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,547,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,550,"ssertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,551,"ssertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,550,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,551,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,563,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,564,"ssertEquals(4, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,563,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,564,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,567,"ssertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,568,"ssertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,567,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,568,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,571,"ssertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,572,"ssertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,571,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,572,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,575,"ssertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,576,"ssertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,575,"assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,576,"assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,588,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,589,"ssertEquals(4, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,588,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,589,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,592,"ssertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,593,"ssertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,592,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,593,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,596,"ssertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,597,"ssertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,596,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,597,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,600,"ssertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,601,"ssertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,600,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,601,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,613,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,614,"ssertEquals(4, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,613,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,614,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,617,"ssertEquals(7, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,618,"ssertEquals(4, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,617,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,618,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,621,"ssertEquals(7, f.calculatePrintedLength(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,622,"ssertEquals(4, f.countFieldsToPrint(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,621,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,622,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,625,"ssertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,626,"ssertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,625,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,626,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,638,"ssertEquals(7, f.calculatePrintedLength(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,639,"ssertEquals(4, f.countFieldsToPrint(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,638,"assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,639,"assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,642,"ssertEquals(3, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,643,"ssertEquals(0, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,642,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,643,"assertEquals(0, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,646,"ssertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,647,"ssertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,646,"assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,647,"assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,650,"ssertEquals(3, f.calculatePrintedLength(EMPTY_PERIOD));"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,651,"ssertEquals(0, f.countFieldsToPrint(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,650,"assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,651,"assertEquals(0, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));"

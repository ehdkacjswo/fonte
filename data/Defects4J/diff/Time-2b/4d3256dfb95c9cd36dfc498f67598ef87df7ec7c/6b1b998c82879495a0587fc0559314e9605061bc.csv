is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,707,f (iOffsetParsed && bucket.getZone() == null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,707,if (iOffsetParsed && bucket.getOffset() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,711,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,712,chrono = chrono.withZone(bucket.getZone());
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,715,if (iZone != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,716,instant.setZone(iZone);
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,803,f (bucket.getZone() == null) {  // treat withOffsetParsed() as being true
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,808,if (bucket.getOffset() != null) {  // treat withOffsetParsed() as being true
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,812,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,813,chrono = chrono.withZone(bucket.getZone());
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,842,f (iOffsetParsed && bucket.getZone() == null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,849,if (iOffsetParsed && bucket.getOffset() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,853,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,854,chrono = chrono.withZone(bucket.getZone());
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,847,"eturn new DateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,856,"DateTime dt = new DateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,857,if (iZone != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,858,dt = dt.withZone(iZone);
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,860,return dt;
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,881,f (iOffsetParsed && bucket.getZone() == null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,894,if (iOffsetParsed && bucket.getOffset() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,898,} else if (bucket.getZone() != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,899,chrono = chrono.withZone(bucket.getZone());
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,901,"MutableDateTime dt = new MutableDateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,902,if (iZone != null) {
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,903,dt.setZone(iZone);
False,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,886,"eturn new MutableDateTime(millis, chrono);"
True,src/main/java/org/joda/time/format/DateTimeFormatter.java,src/main/java/org/joda/time/format/DateTimeFormatter.java,905,return dt;
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2,*  Copyright 2001-2011 Stephen Colebourne
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,973, Instructs the printer to emit a locale-specific time zone name. A
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,974, parser cannot be created from this builder if a time zone name is
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,975, appended.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,973,* Instructs the printer to emit a locale-specific time zone name.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,974,"* Using this method prevents parsing, because time zone names are not unique."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,975,* See {@link #appendTimeZoneName(Map)}.
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,980,"eturn append0(new TimeZoneName(TimeZoneName.LONG_NAME), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,980,"return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,984, Instructs the printer to emit a short locale-specific time zone
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,985, name. A parser cannot be created from this builder if time zone
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,986, name is appended.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,984,"* Instructs the printer to emit a locale-specific time zone name, providing a lookup for parsing."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,985,"* Time zone names are not unique, thus the API forces you to supply the lookup."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,986,"* The names are searched in the order of the map, thus it is strongly recommended"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,987,* to use a {@code LinkedHashMap} or similar.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,989,"* @param parseLookup  the table of names, not null"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,990,"* @return this DateTimeFormatterBuilder, for chaining"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,992,"public DateTimeFormatterBuilder appendTimeZoneName(Map<String, DateTimeZone> parseLookup) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,993,"TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,994,"return append0(pp, pp);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,998,* Instructs the printer to emit a short locale-specific time zone name.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,999,"* Using this method prevents parsing, because time zone names are not unique."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1000,* See {@link #appendTimeZoneShortName(Map)}.
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,991,"eturn append0(new TimeZoneName(TimeZoneName.SHORT_NAME), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1005,"return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1009,* Instructs the printer to emit a short locale-specific time zone
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1010,"* name, providing a lookup for parsing."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1011,"* Time zone names are not unique, thus the API forces you to supply the lookup."
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1012,"* The names are searched in the order of the map, thus it is strongly recommended"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1013,* to use a {@code LinkedHashMap} or similar.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1015,"* @param parseLookup  the table of names, not null"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1016,"* @return this DateTimeFormatterBuilder, for chaining"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1018,"public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> parseLookup) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1019,"TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1020,"return append0(pp, pp);"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,996, This field cannot currently be parsed.
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1025,"* From version 2.0, this field can be parsed."
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1001,"eturn append0(new TimeZoneName(TimeZoneName.ID), null);"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1030,"return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2401,mplements DateTimePrinter {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2430,"implements DateTimePrinter, DateTimeParser {"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2405,tatic final int ID = 2;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2435,"private final Map<String, DateTimeZone> iParseLookup;"
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2409,imeZoneName(int type) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2438,"TimeZoneName(int type, Map<String, DateTimeZone> parseLookup) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2441,iParseLookup = parseLookup;
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2439,ase ID:
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2440,eturn displayZone.getID();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2481,public int estimateParsedLength() {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2482,return (iType == SHORT_NAME ? 4 : 20);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2485,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2486,String str = text.substring(position);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2487,for (String name : iParseLookup.keySet()) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2488,if (str.startsWith(name)) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2489,bucket.setZone(iParseLookup.get(name));
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2490,return position + name.length();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2493,return ~position;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2498,static enum TimeZoneId
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2499,"implements DateTimePrinter, DateTimeParser {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2501,INSTANCE;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2502,static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2503,static final int MAX_LENGTH;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2504,static {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2505,int max = 0;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2506,for (String id : ALL_IDS) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2507,"max = Math.max(max, id.length());"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2509,MAX_LENGTH = max;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2512,public int estimatePrintedLength() {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2513,return MAX_LENGTH;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2516,public void printTo(
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2517,"StringBuffer buf, long instant, Chronology chrono,"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2518,"int displayOffset, DateTimeZone displayZone, Locale locale) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2519,"buf.append(displayZone != null ? displayZone.getID() : """");"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2522,public void printTo(
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2523,"Writer out, long instant, Chronology chrono,"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2524,"int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2525,"out.write(displayZone != null ? displayZone.getID() : """");"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2528,"public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2529,// no zone info
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2532,"public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2533,// no zone info
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2536,public int estimateParsedLength() {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2537,return MAX_LENGTH;
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2540,"public int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2541,String str = text.substring(position);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2542,for (String id : ALL_IDS) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2543,if (str.startsWith(id)) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2544,bucket.setZone(DateTimeZone.forID(id));
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2545,return position + id.length();
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2548,return ~position;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,63,rivate int iOffset;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,63,private Integer iOffset;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,121,iZone = chrono.getZone();
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,123,etZone(chrono.getZone());
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,148," Returns the time zone used by computeMillis, or null if an offset is"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,149, used instead.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,148,* Returns the time zone used by computeMillis.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,156," Set a time zone to be used when computeMillis is called, which"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,157, overrides any set time zone offset.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,155,* Set a time zone to be used when computeMillis is called.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,159," @param zone the date time zone to operate in, or null if UTC"
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,157,"* @param zone the date time zone to operate in, not null"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,163,Zone = zone == DateTimeZone.UTC ? null : zone;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,164,Offset = 0;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,161,iZone = zone;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,169," Returns the time zone offset in milliseconds used by computeMillis,"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,170, unless getZone doesn't return null.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,166,* Returns the time zone offset in milliseconds used by computeMillis.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,172,ublic int getOffset() {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,168,public Integer getOffset() {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,177," Set a time zone offset to be used when computeMillis is called, which"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,178, overrides the time zone.
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,173,* Set a time zone offset to be used when computeMillis is called.
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,180,ublic void setOffset(int offset) {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,175,public void setOffset(Integer offset) {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,183,Zone = null;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,367,f (iZone == null) {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,361,if (iOffset != null) {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,369, else {
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,363,} else if (iZone != null) {
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,419,inal int iOffset;
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,413,final Integer iOffset;
False,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,2,*  Copyright 2001-2011 Stephen Colebourne
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,18,import java.util.LinkedHashMap;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,19,import java.util.Locale;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,20,import java.util.Map;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,27,import org.joda.time.DateTimeZone;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,28,import org.joda.time.LocalDateTime;
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,40,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,220,public void test_appendTimeZoneId() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,221,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,222,bld.appendTimeZoneId();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,223,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,225,"assertEquals(""Asia/Tokyo"", f.print(new DateTime(2007, 3, 4, 0, 0, 0, TOKYO)));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,226,"assertEquals(TOKYO, f.parseDateTime(""Asia/Tokyo"").getZone());"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,227,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,228,"f.parseDateTime(""Nonsense"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,229,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,230,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,234,public void test_printParseZoneTokyo() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,235,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,236,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,237,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,239,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,240,"assertEquals(""2007-03-04 12:30 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,241,"assertEquals(dt, f.parseDateTime(""2007-03-04 12:30 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,244,public void test_printParseZoneParis() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,245,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,246,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,247,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,249,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, PARIS);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,250,"assertEquals(""2007-03-04 12:30 Europe/Paris"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,251,"assertEquals(dt, f.parseDateTime(""2007-03-04 12:30 Europe/Paris""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,252,"assertEquals(dt, f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 Europe/Paris""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,255,public void test_printParseOffset() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,256,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,257,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,258,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,260,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,261,"assertEquals(""2007-03-04 12:30 +09:00"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,262,"assertEquals(dt.withZone(DateTimeZone.getDefault()), f.parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,263,"assertEquals(dt, f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,264,"assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,267,public void test_printParseOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,268,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,269,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,270,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,272,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,273,"assertEquals(""2007-03-04 12:30 +09:00 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,274,"assertEquals(dt, f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,275,"assertEquals(dt.withZone(PARIS), f.withZone(PARIS).parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,276,"assertEquals(dt.withZone(DateTimeZone.forOffsetHours(9)), f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,279,public void test_parseWrongOffset() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,280,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,281,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,282,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,284,"DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,285,// parses offset time then adjusts to requested zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,286,"assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,287,// parses offset time returning offset zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,288,"assertEquals(expected, f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,289,// parses offset time then converts to default zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,290,"assertEquals(expected.withZone(DateTimeZone.getDefault()), f.parseDateTime(""2007-03-04 12:30 +07:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,293,public void test_parseWrongOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,294,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,295,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,296,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,298,"DateTime expected = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forOffsetHours(7));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,299,// parses offset time then adjusts to parsed zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,300,"assertEquals(expected.withZone(TOKYO), f.parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,301,// parses offset time then adjusts to requested zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,302,"assertEquals(expected.withZone(TOKYO), f.withZone(TOKYO).parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,303,// parses offset time returning offset zone (ignores zone)
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,304,"assertEquals(expected, f.withOffsetParsed().parseDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,308,public void test_localPrintParseZoneTokyo() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,309,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,310,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,311,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,313,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,314,"assertEquals(""2007-03-04 12:30 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,316,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,317,"assertEquals(expected, f.parseLocalDateTime(""2007-03-04 12:30 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,320,public void test_localPrintParseOffset() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,321,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,322,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,323,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,325,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,326,"assertEquals(""2007-03-04 12:30 +09:00"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,328,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,329,"assertEquals(expected, f.parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,330,"assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,331,"assertEquals(expected, f.withOffsetParsed().parseLocalDateTime(""2007-03-04 12:30 +09:00""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,334,public void test_localPrintParseOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,335,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,336,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,337,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,339,"DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, TOKYO);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,340,"assertEquals(""2007-03-04 12:30 +09:00 Asia/Tokyo"", f.print(dt));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,342,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,343,"assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,344,"assertEquals(expected, f.withZone(PARIS).parseLocalDateTime(""2007-03-04 12:30 +09:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,347,public void test_localParseWrongOffsetAndZone() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,348,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,349,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneOffset(""Z"", true, 2, 2).appendLiteral(' ').appendTimeZoneId();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,350,DateTimeFormatter f = bld.toFormatter();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,352,"LocalDateTime expected = new LocalDateTime(2007, 3, 4, 12, 30);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,353,// parses offset time then adjusts to parsed zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,354,"assertEquals(expected, f.parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,355,// parses offset time then adjusts to requested zone
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,356,"assertEquals(expected, f.withZone(TOKYO).parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,357,// parses offset time returning offset zone (ignores zone)
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,358,"assertEquals(expected, f.withOffsetParsed().parseLocalDateTime(""2007-03-04 12:30 +07:00 Asia/Tokyo""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,362,public void test_printParseShortName() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,363,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,364,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneShortName();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,365,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,367,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,368,"assertEquals(""2011-01-04 12:30 GMT"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,369,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,370,"assertEquals(""2011-07-04 12:30 BST"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,371,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,372,"f.parseDateTime(""2007-03-04 12:30 GMT"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,373,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,374,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,378,public void test_printParseShortNameWithLookup() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,379,"Map<String, DateTimeZone> lookup = new LinkedHashMap<String, DateTimeZone>();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,380,"lookup.put(""GMT"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,381,"lookup.put(""BST"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,382,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,383,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneShortName(lookup);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,384,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,386,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,387,"assertEquals(""2011-01-04 12:30 GMT"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,388,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,389,"assertEquals(""2011-07-04 12:30 BST"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,391,"assertEquals(dt1, f.parseDateTime(""2011-01-04 12:30 GMT""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,392,"assertEquals(dt2, f.parseDateTime(""2011-07-04 12:30 BST""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,393,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,394,"f.parseDateTime(""2007-03-04 12:30 EST"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,395,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,396,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,401,public void test_printParseLongName() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,402,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,403,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneName();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,404,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,406,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,407,"assertEquals(""2011-01-04 12:30 Greenwich Mean Time"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,408,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,409,"assertEquals(""2011-07-04 12:30 British Summer Time"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,410,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,411,"f.parseDateTime(""2007-03-04 12:30 GMT"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,412,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,413,} catch (IllegalArgumentException e) {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,417,public void test_printParseLongNameWithLookup() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,418,"Map<String, DateTimeZone> lookup = new LinkedHashMap<String, DateTimeZone>();"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,419,"lookup.put(""Greenwich Mean Time"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,420,"lookup.put(""British Summer Time"", LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,421,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,422,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneName(lookup);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,423,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,425,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,426,"assertEquals(""2011-01-04 12:30 Greenwich Mean Time"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,427,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,428,"assertEquals(""2011-07-04 12:30 British Summer Time"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,430,"assertEquals(dt1, f.parseDateTime(""2011-01-04 12:30 Greenwich Mean Time""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,431,"assertEquals(dt2, f.parseDateTime(""2011-07-04 12:30 British Summer Time""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,432,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,433,"f.parseDateTime(""2007-03-04 12:30 EST"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,434,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,435,} catch (IllegalArgumentException e) {

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,182," Any two intervals can overlap, abut, or have a gap between them."
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,211," Any two intervals can overlap, abut, or have a gap between them."
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,227,f (overlaps(interval) || abuts(interval)) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,228,eturn null;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,234,f (thisStart >= otherEnd) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,229,if (thisStart > otherEnd) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,236, else {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,231,} else if (otherStart > thisEnd) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,233,} else {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,234,return null;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,244,* Thus this method returns true if
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,245,* <code>thisStart == otherEnd || thisEnd == otherStart </code>.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,246,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,247,* A zero duration interval abuts with itself.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,248,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,249,* For example:
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,250,* <pre>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,251,* [09:00 to 10:00) abuts [08:00 to 08:30)  = false (completely before)
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,252,* [09:00 to 10:00) abuts [08:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,253,* [09:00 to 10:00) abuts [08:00 to 09:01)  = false (overlaps)
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,255,* [09:00 to 10:00) abuts [09:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,256,* [09:00 to 10:00) abuts [09:00 to 09:01)  = false (overlaps)
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,258,* [09:00 to 10:00) abuts [10:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,259,* [09:00 to 10:00) abuts [10:00 to 10:30)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,261,* [09:00 to 10:00) abuts [10:30 to 11:00)  = false (completely after)
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,263,* [14:00 to 14:00) abuts [14:00 to 14:00)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,264,* [14:00 to 14:00) abuts [14:00 to 15:00)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,265,* [14:00 to 14:00) abuts [13:00 to 14:00)  = true
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,266,* </pre>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,84, Does this time interval contain the specified instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,84,* Does this time interval contain or equal the specified instant.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,86, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,86,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,87,* The instant is contained if it is at the start or middle of this interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,88,* but not at the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,89,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,90,* A zero duration interval represents the smallest possible interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,91,* and only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,92,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,93,* For example:
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,94,* <pre>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,95,* [09:00 to 10:00) contains 08:59  = false (before start)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,96,* [09:00 to 10:00) contains 09:00  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,97,* [09:00 to 10:00) contains 09:59  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,98,* [09:00 to 10:00) contains 10:00  = false (equals end)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,99,* [09:00 to 10:00) contains 10:01  = false (after end)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,101,* [14:00 to 14:00) contains 14:00  = true (equal)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,102,* </pre>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,103,* Passng in a <code>null</code> parameter will have the same effect as
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,104,* calling {@link #containsNow()}.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,94, Does this time interval contain the specified time interval completely.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,112,* Does this time interval contain or equal the specified time interval.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,96, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,114,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115,"* The other interval is contained if this interval wholly contains, starts,"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,116,* finishes or equals it.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,117,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,118,* A zero duration interval represents the smallest possible interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,119,* and will contain itself (because it is equal to itself). It will also
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,120,"* be contained by a larger interval at the start, middle but not the end."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,121,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,122,* For example:
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,123,* <pre>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,124,* [09:00 to 10:00) contains [09:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,125,* [09:00 to 10:00) contains [09:00 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,126,* [09:00 to 10:00) contains [09:30 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,127,* [09:00 to 10:00) contains [09:15 to 09:45)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,128,* [09:00 to 10:00) contains [09:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,130,* [09:00 to 10:00) contains [08:59 to 10:00)  = false (otherStart before thisStart)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,131,* [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,132,* [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,134,* [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,135,* </pre>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,136,* Passng in a <code>null</code> parameter will have the same effect as
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,137,* calling {@link #containsNow()}.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,98," @param interval  the time interval to compare to, null means now"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,139,"* @param interval  the time interval to compare to, null means a zero length interval now"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,147,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,107, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,149,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,150,* A zero duration interval represents the smallest possible interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,151,* and will overlap itself and larger intervals. The size of the overlap will
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,152,* be a zero duration interval equal to the original zero duration interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,153,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,154,* For example:
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,155,* <pre>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,156,* [09:00 to 10:00) overlaps [08:00 to 08:30)  = false (completely before)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,157,* [09:00 to 10:00) overlaps [08:00 to 09:00)  = false (abuts before)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,158,* [09:00 to 10:00) overlaps [08:00 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,159,* [09:00 to 10:00) overlaps [08:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,160,* [09:00 to 10:00) overlaps [08:00 to 11:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,162,* [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,163,* [09:00 to 10:00) overlaps [09:00 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,164,* [09:00 to 10:00) overlaps [09:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,165,* [09:00 to 10:00) overlaps [09:00 to 11:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,167,* [09:00 to 10:00) overlaps [09:30 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,168,* [09:00 to 10:00) overlaps [09:30 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,169,* [09:00 to 10:00) overlaps [09:30 to 11:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,171,* [09:00 to 10:00) overlaps [10:00 to 10:00)  = false (abuts after)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,172,* [09:00 to 10:00) overlaps [10:00 to 11:00)  = false (abuts after)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,174,* [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,176,* [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,177,* [14:00 to 14:00) overlaps [13:00 to 15:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,178,* </pre>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,109," @param interval  the time interval to compare to, null means now"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,180,"* @param interval  the time interval to compare to, null means a zero length interval now"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,88, Does this time interval contain the specified millisecond instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,88,* Does this time interval contain or equal the specified millisecond instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,90, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,90,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,91,* A zero duration intervals only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,92,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,93,"* NOTE: From v1.3, comparing a zero duration interval to an instant"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,94,* with the same value will return true because they are equal
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,99,eturn (millisInstant >= thisStart && millisInstant < thisEnd);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,103,return (millisInstant >= thisStart && millisInstant < thisEnd) ||
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,104,(thisStart == millisInstant && thisEnd == millisInstant);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,103, Does this time interval contain the current instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,108,* Does this time interval contain or equal the current instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,105, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,110,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,111,* A zero duration intervals only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,112,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,113,"* NOTE: From v1.3, comparing a zero duration interval to an instant"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,114,* with the same value will return true because they are equal
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,114, Does this time interval contain the specified instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,123,* Does this time interval contain or equal the specified instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,116, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,125,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,126,* The instant is contained if it is at the start or middle of this interval
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,127,* but not at the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,128,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,129,* A zero duration interval represents the smallest possible interval
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,130,* and only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,131,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,132,* For example:
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,133,* <pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,134,* [09:00 to 10:00) contains 08:59  = false (before start)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,135,* [09:00 to 10:00) contains 09:00  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,136,* [09:00 to 10:00) contains 09:59  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,137,* [09:00 to 10:00) contains 10:00  = false (equals end)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,138,* [09:00 to 10:00) contains 10:01  = false (after end)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,140,* [14:00 to 14:00) contains 14:00  = true (equal)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,141,* </pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,142,* Passng in a <code>null</code> parameter will have the same effect as
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,143,* calling {@link #containsNow()}.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,144,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,145,"* NOTE: From v1.3, comparing a zero duration interval to an instant"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,146,* with the same value will return true because they are equal
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,129, Does this time interval contain the specified time interval completely.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,159,* Does this time interval contain or equal the specified time interval.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,131, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,161,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,162,"* The other interval is contained if this interval wholly contains, starts,"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,163,* finishes or equals it.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,164,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,165,* A zero duration interval represents the smallest possible interval
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,166,* and will contain itself (because it is equal to itself). It will also
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,167,"* be contained by a larger interval at the start, middle but not the end."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,168,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,169,* For example:
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,170,* <pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,171,* [09:00 to 10:00) contains [09:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,172,* [09:00 to 10:00) contains [09:00 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,173,* [09:00 to 10:00) contains [09:30 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,174,* [09:00 to 10:00) contains [09:15 to 09:45)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,175,* [09:00 to 10:00) contains [09:00 to 09:00)  = true
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,133," @param interval  the time interval to compare to, null means now"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,177,* [09:00 to 10:00) contains [08:59 to 10:00)  = false (otherStart before thisStart)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,178,* [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,179,* [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,181,* [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,182,* </pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,183,* Passng in a <code>null</code> parameter will have the same effect as
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,184,* calling {@link #containsNow()}.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,185,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,186,"* NOTE: From v1.3, comparing a zero duration interval to itself"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,187,* will return true because they are equal
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,189,"* @param interval  the time interval to compare to, null means a zero duration interval now"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,144,eturn (otherStart >= thisStart && otherStart < thisEnd && otherEnd <= thisEnd);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,200,return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd) ||
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,201,(thisStart == otherStart && thisEnd == otherEnd);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,207,* Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,151, Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,209,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,210,* A zero duration interval represents the smallest possible interval
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,211,* and will overlap itself and larger intervals. The size of the overlap will
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,212,* be a zero duration interval equal to the original zero duration interval.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,213,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,214,* For example:
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,215,* <pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,216,* [09:00 to 10:00) overlaps [08:00 to 08:30)  = false (completely before)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,217,* [09:00 to 10:00) overlaps [08:00 to 09:00)  = false (abuts before)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,218,* [09:00 to 10:00) overlaps [08:00 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,219,* [09:00 to 10:00) overlaps [08:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,220,* [09:00 to 10:00) overlaps [08:00 to 11:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,222,* [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,223,* [09:00 to 10:00) overlaps [09:00 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,224,* [09:00 to 10:00) overlaps [09:00 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,225,* [09:00 to 10:00) overlaps [09:00 to 11:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,227,* [09:00 to 10:00) overlaps [09:30 to 09:30)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,228,* [09:00 to 10:00) overlaps [09:30 to 10:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,229,* [09:00 to 10:00) overlaps [09:30 to 11:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,231,* [09:00 to 10:00) overlaps [10:00 to 10:00)  = false (abuts after)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,232,* [09:00 to 10:00) overlaps [10:00 to 11:00)  = false (abuts after)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,234,* [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,236,* [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,237,* [14:00 to 14:00) overlaps [13:00 to 15:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,238,* </pre>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,239,"* NOTE: From v1.3, comparing a zero duration interval at the start of"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,240,"* another interval will now return true, and comparing a zero duration"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,241,* interval to itself will return true
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,153," @param interval  the time interval to compare to, null means now"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,243,"* @param interval  the time interval to compare to, null means a zero length interval now"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,47,private Interval interval37;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,48,private Interval interval33;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,99,"interval37 = new Interval(3, 7);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,100,"interval33 = new Interval(3, 3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,202,public void test_useCase_ContainsOverlapAbutGap() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,203,// this is a simple test to ensure that the use case of these methods is OK
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,204,// when comparing any two intervals they can be in one and only one of these states
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,205,"// (a) have a gap between them, (b) abut or (c) overlap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,206,// contains is a subset of overlap
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,207,"Interval test1020 = new Interval(10, 20);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,209,"// [4,8) [10,20) - gap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,210,"Interval interval = new Interval(4, 8);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,211,assertNotNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,212,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,213,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,214,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,215,assertNotNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,216,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,217,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,218,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,220,"// [6,10) [10,20) - abuts"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,221,"interval = new Interval(6, 10);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,222,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,223,"assertEquals(true, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,224,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,225,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,226,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,227,"assertEquals(true, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,228,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,229,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,231,"// [8,12) [10,20) - overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,232,"interval = new Interval(8, 12);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,233,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,234,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,235,"assertEquals(true, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,236,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,237,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,238,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,239,"assertEquals(true, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,240,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,242,"// [10,14) [10,20) - overlaps and contains-one-way"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,243,"interval = new Interval(10, 14);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,244,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,245,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,246,"assertEquals(true, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,247,"assertEquals(true, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,248,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,249,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,250,"assertEquals(true, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,251,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,253,"// [10,20) [10,20) - overlaps and contains-both-ways"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,254,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,255,"assertEquals(false, test1020.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,256,"assertEquals(true, test1020.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,257,"assertEquals(true, test1020.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,259,"// [10,20) [16,20) - overlaps and contains-one-way"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,260,"interval = new Interval(16, 20);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,261,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,262,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,263,"assertEquals(true, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,264,"assertEquals(true, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,265,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,266,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,267,"assertEquals(true, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,268,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,270,"// [10,20) [18,22) - overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,271,"interval = new Interval(18, 22);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,272,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,273,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,274,"assertEquals(true, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,275,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,276,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,277,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,278,"assertEquals(true, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,279,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,281,"// [10,20) [20,24) - abuts"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,282,"interval = new Interval(20, 24);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,283,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,284,"assertEquals(true, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,285,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,286,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,287,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,288,"assertEquals(true, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,289,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,290,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,292,"// [10,20) [22,26) - gap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,293,"interval = new Interval(22, 26);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,294,assertNotNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,295,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,296,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,297,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,298,assertNotNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,299,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,300,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,301,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,305,public void test_useCase_ContainsOverlapAbutGap_zeroDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,306,// this is a simple test to ensure that the use case of these methods
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,307,// is OK when considering a zero duration inerval
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,308,// when comparing any two intervals they can be in one and only one of these states
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,309,"// (a) have a gap between them, (b) abut or (c) overlap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,310,// contains is a subset of overlap
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,311,"Interval test1020 = new Interval(10, 20);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,313,"// [8,8) [10,20) - gap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,314,"Interval interval = new Interval(8, 8);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,315,assertNotNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,316,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,317,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,318,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,319,assertNotNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,320,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,321,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,322,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,324,"// [10,10) [10,20) - abuts and contains-one-way and overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,325,"interval = new Interval(10, 10);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,326,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,327,"assertEquals(true,  test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,328,"assertEquals(true,  test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,329,"assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,330,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,331,"assertEquals(true,  interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,332,"assertEquals(true,  interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,333,"assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,335,"// [12,12) [10,20) - contains-one-way and overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,336,"interval = new Interval(12, 12);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,337,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,338,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,339,"assertEquals(true,  test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,340,"assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,341,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,342,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,343,"assertEquals(true,  interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,344,"assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,346,"// [10,20) [20,20) - abuts"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,347,"interval = new Interval(20, 20);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,348,assertNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,349,"assertEquals(true,  test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,350,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,351,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,352,assertNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,353,"assertEquals(true,  interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,354,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,355,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,357,"// [10,20) [22,22) - gap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,358,"interval = new Interval(22, 22);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,359,assertNotNull(test1020.gap(interval));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,360,"assertEquals(false, test1020.abuts(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,361,"assertEquals(false, test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,362,"assertEquals(false, test1020.contains(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,363,assertNotNull(interval.gap(test1020));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,364,"assertEquals(false, interval.abuts(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,365,"assertEquals(false, interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,366,"assertEquals(false, interval.contains(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,370,public void test_useCase_ContainsOverlapAbutGap_bothZeroDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,371,// this is a simple test to ensure that the use case of these methods
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,372,// is OK when considering two zero duration inervals
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,373,"// this is the simplest case, as the two intervals either have a gap or not"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,374,"// if not, then they are equal and abut"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,375,"Interval test0808 = new Interval(8, 8);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,376,"Interval test1010 = new Interval(10, 10);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,378,"// [8,8) [10,10) - gap"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,379,assertNotNull(test1010.gap(test0808));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,380,"assertEquals(false, test1010.abuts(test0808));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,381,"assertEquals(false, test1010.overlaps(test0808));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,382,"assertEquals(false, test1010.contains(test0808));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,383,assertNotNull(test0808.gap(test1010));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,384,"assertEquals(false, test0808.abuts(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,385,"assertEquals(false, test0808.overlaps(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,386,"assertEquals(false, test0808.contains(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,388,"// [10,10) [10,10) - abuts and overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,389,assertNull(test1010.gap(test1010));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,390,"assertEquals(true,  test1010.abuts(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,391,"assertEquals(true,  test1010.overlaps(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,392,"assertEquals(true,  test1010.contains(test1010));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,199,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,200,"ssertEquals(true, test.contains(TEST_TIME1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,201,"ssertEquals(false, test.contains(TEST_TIME1 - 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,202,"ssertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,203,"ssertEquals(false, test.contains(TEST_TIME2));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,204,"ssertEquals(true, test.contains(TEST_TIME2 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,397,"assertEquals(false, interval37.contains(2));  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,398,"assertEquals(true,  interval37.contains(3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,399,"assertEquals(true,  interval37.contains(4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,400,"assertEquals(true,  interval37.contains(5));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,401,"assertEquals(true,  interval37.contains(6));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,402,"assertEquals(false, interval37.contains(7));  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,403,"assertEquals(false, interval37.contains(8));  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,406,public void testContains_long_zeroDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,407,"assertEquals(false, interval33.contains(2));  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,408,"assertEquals(true,  interval33.contains(3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,409,"assertEquals(false, interval33.contains(4));  // value after"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,208,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,210,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,211,"ssertEquals(true, test.containsNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,212,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,213,"ssertEquals(false, test.containsNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,214,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,215,"ssertEquals(true, test.containsNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,216,ateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,217,"ssertEquals(false, test.containsNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,218,ateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,219,"ssertEquals(true, test.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,414,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,415,"assertEquals(false, interval37.containsNow());  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,416,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,417,"assertEquals(true,  interval37.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,418,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,419,"assertEquals(true,  interval37.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,420,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,421,"assertEquals(true,  interval37.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,422,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,423,"assertEquals(false, interval37.containsNow());  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,424,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,425,"assertEquals(false, interval37.containsNow());  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,427,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,428,"assertEquals(false, interval33.containsNow());  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,429,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,430,"assertEquals(true,  interval33.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,431,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,432,"assertEquals(false, interval33.containsNow());  // value after"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,223,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,224,"ssertEquals(true, test.contains(new Instant(TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,225,"ssertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,226,"ssertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,227,"ssertEquals(false, test.contains(new Instant(TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,228,"ssertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,229,"ssertEquals(true, test.contains((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,437,"assertEquals(false, interval37.contains(new Instant(2)));  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,438,"assertEquals(true,  interval37.contains(new Instant(3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,439,"assertEquals(true,  interval37.contains(new Instant(4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,440,"assertEquals(true,  interval37.contains(new Instant(5)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,441,"assertEquals(true,  interval37.contains(new Instant(6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,442,"assertEquals(false, interval37.contains(new Instant(7)));  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,443,"assertEquals(false, interval37.contains(new Instant(8)));  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,446,public void testContains_RI_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,447,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,448,"assertEquals(false, interval37.contains((ReadableInstant) null));  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,449,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,450,"assertEquals(true,  interval37.contains((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,451,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,452,"assertEquals(true,  interval37.contains((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,453,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,454,"assertEquals(true,  interval37.contains((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,455,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,456,"assertEquals(false, interval37.contains((ReadableInstant) null));  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,457,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,458,"assertEquals(false, interval37.contains((ReadableInstant) null));  // value after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,461,public void testContains_RI_zeroDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,462,"assertEquals(false, interval33.contains(new Instant(2)));  // value before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,463,"assertEquals(true,  interval33.contains(new Instant(3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,464,"assertEquals(false, interval33.contains(new Instant(4)));  // value after"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,234,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,236,"ssertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,237,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,239,"ssertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,240,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,241,"ssertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,243,"ssertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,244,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,245,"ssertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,246,"ssertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,247,"ssertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,249,"ssertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,250,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,251,"ssertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,252,"ssertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,253,"ssertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,255,"ssertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,256,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,257,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,258,"ssertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,259,"ssertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,260,"ssertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,262,"ssertEquals(true, test.contains((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,469,"assertEquals(false, interval37.contains(new Interval(1, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,470,"assertEquals(false, interval37.contains(new Interval(2, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,472,"assertEquals(false, interval37.contains(new Interval(2, 3)));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,473,"assertEquals(true,  interval37.contains(new Interval(3, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,475,"assertEquals(false, interval37.contains(new Interval(2, 4)));  // starts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,476,"assertEquals(true,  interval37.contains(new Interval(3, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,477,"assertEquals(true,  interval37.contains(new Interval(4, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,479,"assertEquals(false, interval37.contains(new Interval(2, 6)));  // starts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,480,"assertEquals(true,  interval37.contains(new Interval(3, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,481,"assertEquals(true,  interval37.contains(new Interval(4, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,482,"assertEquals(true,  interval37.contains(new Interval(5, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,483,"assertEquals(true,  interval37.contains(new Interval(6, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,485,"assertEquals(false, interval37.contains(new Interval(2, 7)));  // starts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,486,"assertEquals(true,  interval37.contains(new Interval(3, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,487,"assertEquals(true,  interval37.contains(new Interval(4, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,488,"assertEquals(true,  interval37.contains(new Interval(5, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,489,"assertEquals(true,  interval37.contains(new Interval(6, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,490,"assertEquals(false, interval37.contains(new Interval(7, 7)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,492,"assertEquals(false, interval37.contains(new Interval(2, 8)));  // ends after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,493,"assertEquals(false, interval37.contains(new Interval(3, 8)));  // ends after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,494,"assertEquals(false, interval37.contains(new Interval(4, 8)));  // ends after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,495,"assertEquals(false, interval37.contains(new Interval(5, 8)));  // ends after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,496,"assertEquals(false, interval37.contains(new Interval(6, 8)));  // ends after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,497,"assertEquals(false, interval37.contains(new Interval(7, 8)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,498,"assertEquals(false, interval37.contains(new Interval(8, 8)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,500,"assertEquals(false, interval37.contains(new Interval(8, 9)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,501,"assertEquals(false, interval37.contains(new Interval(9, 9)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,504,public void testContains_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,505,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,506,"assertEquals(false, interval37.contains((ReadableInterval) null));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,507,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,508,"assertEquals(true,  interval37.contains((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,509,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,510,"assertEquals(true,  interval37.contains((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,511,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,512,"assertEquals(true,  interval37.contains((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,513,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,514,"assertEquals(false, interval37.contains((ReadableInterval) null));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,515,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,516,"assertEquals(false, interval37.contains((ReadableInterval) null));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,519,public void testContains_RInterval_zeroDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,520,"assertEquals(true,  interval33.contains(interval33));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,521,"assertEquals(false, interval33.contains(interval37));  // zero-duration cannot contain anything"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,522,"assertEquals(true,  interval37.contains(interval33));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,523,"assertEquals(false, interval33.contains(new Interval(1, 2)));  // zero-duration cannot contain anything"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,524,"assertEquals(false, interval33.contains(new Interval(8, 9)));  // zero-duration cannot contain anything"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,525,"assertEquals(false, interval33.contains(new Interval(1, 9)));  // zero-duration cannot contain anything"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,527,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,528,"assertEquals(false, interval33.contains((ReadableInterval) null));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,529,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,530,"assertEquals(true,  interval33.contains((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,531,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,532,"assertEquals(false, interval33.contains((ReadableInterval) null));  // gap after"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,267,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,269,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,270,"ssertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,272,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,273,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,274,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,276,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,277,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,278,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,279,"ssertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,280,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,282,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,283,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,284,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,285,"ssertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,286,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,288,"ssertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,289,"ssertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,290,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,292,"ssertEquals(true, test.overlaps((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,294,"nterval empty = new Interval(TEST_TIME1, TEST_TIME1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,295,"ssertEquals(true, empty.overlaps(empty));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,296,"ssertEquals(true, empty.overlaps(test));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,297,"ssertEquals(true, test.overlaps(empty));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,537,"assertEquals(false, interval37.overlaps(new Interval(1, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,538,"assertEquals(false, interval37.overlaps(new Interval(2, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,540,"assertEquals(false, interval37.overlaps(new Interval(2, 3)));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,541,"assertEquals(true,  interval37.overlaps(new Interval(3, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,543,"assertEquals(true,  interval37.overlaps(new Interval(2, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,544,"assertEquals(true,  interval37.overlaps(new Interval(3, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,545,"assertEquals(true,  interval37.overlaps(new Interval(4, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,547,"assertEquals(true,  interval37.overlaps(new Interval(2, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,548,"assertEquals(true,  interval37.overlaps(new Interval(3, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,549,"assertEquals(true,  interval37.overlaps(new Interval(4, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,550,"assertEquals(true,  interval37.overlaps(new Interval(5, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,551,"assertEquals(true,  interval37.overlaps(new Interval(6, 6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,553,"assertEquals(true,  interval37.overlaps(new Interval(2, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,554,"assertEquals(true,  interval37.overlaps(new Interval(3, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,555,"assertEquals(true,  interval37.overlaps(new Interval(4, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,556,"assertEquals(true,  interval37.overlaps(new Interval(5, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,557,"assertEquals(true,  interval37.overlaps(new Interval(6, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,558,"assertEquals(false, interval37.overlaps(new Interval(7, 7)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,560,"assertEquals(true,  interval37.overlaps(new Interval(2, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,561,"assertEquals(true,  interval37.overlaps(new Interval(3, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,562,"assertEquals(true,  interval37.overlaps(new Interval(4, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,563,"assertEquals(true,  interval37.overlaps(new Interval(5, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,564,"assertEquals(true,  interval37.overlaps(new Interval(6, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,565,"assertEquals(false, interval37.overlaps(new Interval(7, 8)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,566,"assertEquals(false, interval37.overlaps(new Interval(8, 8)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,568,"assertEquals(false, interval37.overlaps(new Interval(8, 9)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,569,"assertEquals(false, interval37.overlaps(new Interval(9, 9)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,572,public void testOverlaps_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,573,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,574,"assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,575,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,576,"assertEquals(true,  interval37.overlaps((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,577,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,578,"assertEquals(true,  interval37.overlaps((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,579,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,580,"assertEquals(true,  interval37.overlaps((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,581,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,582,"assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,583,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,584,"assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,586,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,587,"assertEquals(true,  interval33.overlaps((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,590,public void testOverlaps_RInterval_zeroDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,591,"assertEquals(true,  interval33.overlaps(interval33));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,592,"assertEquals(true,  interval33.overlaps(interval37));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,593,"assertEquals(true,  interval37.overlaps(interval33));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,594,"assertEquals(false, interval33.overlaps(new Interval(1, 2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,595,"assertEquals(false, interval33.overlaps(new Interval(8, 9)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,596,"assertEquals(true,  interval33.overlaps(new Interval(1, 9)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,302,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,304,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,305,"ew Interval(TEST_TIME1, TEST_TIME1),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,306,"est.overlap(new Interval(TEST_TIME1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,307,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,308,"ew Interval(TEST_TIME1, TEST_TIME1),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,309,"ew Interval(TEST_TIME1, TEST_TIME1).overlap(test));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,311,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,312,"ew Interval(TEST_TIME1, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,313,"est.overlap(new Interval(TEST_TIME1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,314,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,315,"ew Interval(TEST_TIME1, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,316,"est.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,317,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,318,"ew Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,319,"est.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,320,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,321,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,322,"est.overlap(new Interval(TEST_TIME2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,323,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,324,"ew Interval(TEST_TIME2 - 1, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,325,"est.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,327,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,328,"ew Interval(TEST_TIME1, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,329,"est.overlap(new Interval(TEST_TIME1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,330,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,331,"ew Interval(TEST_TIME1, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,332,"est.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,333,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,334,"ew Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,335,"est.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,336,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,337,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,338,"est.overlap(new Interval(TEST_TIME2, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,339,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,340,"ew Interval(TEST_TIME2 - 1, TEST_TIME2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,341,"est.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,343,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,344,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,345,"est.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,346,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,347,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,348,"est.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,349,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,350,"ew Interval(TEST_TIME1, TEST_TIME1 + 1),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,351,"est.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,353,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,354,"ew Interval(TEST_TIME_NOW, TEST_TIME_NOW),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,355,est.overlap((ReadableInterval) null));
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,601,"assertEquals(null, interval37.overlap(new Interval(1, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,602,"assertEquals(null, interval37.overlap(new Interval(2, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,604,"assertEquals(null, interval37.overlap(new Interval(2, 3)));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,605,"assertEquals(new Interval(3, 3), interval37.overlap(new Interval(3, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,607,"assertEquals(new Interval(3, 4), interval37.overlap(new Interval(2, 4)));  // truncated start"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,608,"assertEquals(new Interval(3, 4), interval37.overlap(new Interval(3, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,609,"assertEquals(new Interval(4, 4), interval37.overlap(new Interval(4, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,611,"assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 7)));  // truncated start"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,612,"assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,613,"assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,614,"assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,615,"assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,616,"assertEquals(null, interval37.overlap(new Interval(7, 7)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,618,"assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 8)));  // truncated start and end"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,619,"assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 8)));  // truncated end"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,620,"assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 8)));  // truncated end"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,621,"assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 8)));  // truncated end"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,622,"assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 8)));  // truncated end"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,623,"assertEquals(null, interval37.overlap(new Interval(7, 8)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,624,"assertEquals(null, interval37.overlap(new Interval(8, 8)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,627,public void testOverlap_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,628,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,629,"assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,630,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,631,"assertEquals(new Interval(3, 3), interval37.overlap((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,632,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,633,"assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,634,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,635,"assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,636,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,637,"assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,638,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,639,"assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,641,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,642,"assertEquals(new Interval(3, 3), interval33.overlap((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,359,"nterval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,646,"Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,362,"nterval testB = new Interval(new DateTime(TEST_TIME1 + 1, MOSCOW), new DateTime(TEST_TIME2 + 1, MOSCOW));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,649,"Interval testB = new Interval(new DateTime(4, MOSCOW), new DateTime(8, MOSCOW));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,373,"nterval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,660,"Interval testA = new Interval(new Instant(3), new Instant(7));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,376,"nterval testB = new Interval(new Instant(TEST_TIME1 + 1), new Instant(TEST_TIME2 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,663,"Interval testB = new Interval(new Instant(4), new Instant(8));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,385,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,672,"assertEquals(new Interval(1, 3), interval37.gap(new Interval(0, 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,673,"assertEquals(new Interval(1, 3), interval37.gap(new Interval(1, 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,387,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,388,"ew Interval(TEST_TIME2, TEST_TIME2 + 2),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,389,"est.gap(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,390,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,391,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,392,"est.gap(new Interval(TEST_TIME2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,394,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,395,"ew Interval(TEST_TIME1 - 2, TEST_TIME1),"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,396,"est.gap(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,397,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,398,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,399,"est.gap(new Interval(TEST_TIME1 - 2, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,675,"assertEquals(null, interval37.gap(new Interval(2, 3)));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,676,"assertEquals(null, interval37.gap(new Interval(3, 3)));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,678,"assertEquals(null, interval37.gap(new Interval(4, 6)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,680,"assertEquals(null, interval37.gap(new Interval(3, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,681,"assertEquals(null, interval37.gap(new Interval(6, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,682,"assertEquals(null, interval37.gap(new Interval(7, 7)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,684,"assertEquals(null, interval37.gap(new Interval(6, 8)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,685,"assertEquals(null, interval37.gap(new Interval(7, 8)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,686,"assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,688,"assertEquals(null, interval37.gap(new Interval(6, 9)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,689,"assertEquals(null, interval37.gap(new Interval(7, 9)));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,690,"assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 9)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,691,"assertEquals(new Interval(7, 9), interval37.gap(new Interval(9, 9)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,401,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,402,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,403,"est.gap(new Interval(TEST_TIME1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,404,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,405,"ull,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,406,"est.gap(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,694,public void testGap_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,695,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,696,"assertEquals(new Interval(2, 3),  interval37.gap((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,697,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,698,"assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,699,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,700,"assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,701,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,702,"assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,703,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,704,"assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,705,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,706,"assertEquals(new Interval(7, 8),  interval37.gap((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,410,"nterval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,710,"Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,413,"nterval testB = new Interval(new DateTime(TEST_TIME1 - 100, MOSCOW), new DateTime(TEST_TIME1 - 50, MOSCOW));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,713,"Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,424,"nterval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,724,"Interval testA = new Interval(new Instant(3), new Instant(7));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,427,"nterval testB = new Interval(new Instant(TEST_TIME1 - 100), new Instant(TEST_TIME1 - 50));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,727,"Interval testB = new Interval(new Instant(1), new Instant(2));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,436,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,438,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,439,"alse,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,440,"est.abuts(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,441,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,442,"rue,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,443,"est.abuts(new Interval(TEST_TIME2, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,445,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,446,"alse,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,447,"est.abuts(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,448,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,449,"rue,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,450,"est.abuts(new Interval(TEST_TIME1 - 2, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,452,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,453,"alse,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,454,"est.abuts(new Interval(TEST_TIME1, TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,455,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,456,"alse,"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,457,"est.abuts(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,736,"assertEquals(false, interval37.abuts(new Interval(1, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,737,"assertEquals(false, interval37.abuts(new Interval(2, 2)));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,739,"assertEquals(true,  interval37.abuts(new Interval(2, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,740,"assertEquals(true,  interval37.abuts(new Interval(3, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,742,"assertEquals(false, interval37.abuts(new Interval(2, 4)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,743,"assertEquals(false, interval37.abuts(new Interval(3, 4)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,744,"assertEquals(false, interval37.abuts(new Interval(4, 4)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,746,"assertEquals(false, interval37.abuts(new Interval(2, 6)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,747,"assertEquals(false, interval37.abuts(new Interval(3, 6)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,748,"assertEquals(false, interval37.abuts(new Interval(4, 6)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,749,"assertEquals(false, interval37.abuts(new Interval(5, 6)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,750,"assertEquals(false, interval37.abuts(new Interval(6, 6)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,752,"assertEquals(false, interval37.abuts(new Interval(2, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,753,"assertEquals(false, interval37.abuts(new Interval(3, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,754,"assertEquals(false, interval37.abuts(new Interval(4, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,755,"assertEquals(false, interval37.abuts(new Interval(5, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,756,"assertEquals(false, interval37.abuts(new Interval(6, 7)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,757,"assertEquals(true,  interval37.abuts(new Interval(7, 7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,759,"assertEquals(false, interval37.abuts(new Interval(2, 8)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,760,"assertEquals(false, interval37.abuts(new Interval(3, 8)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,761,"assertEquals(false, interval37.abuts(new Interval(4, 8)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,762,"assertEquals(false, interval37.abuts(new Interval(5, 8)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,763,"assertEquals(false, interval37.abuts(new Interval(6, 8)));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,764,"assertEquals(true,  interval37.abuts(new Interval(7, 8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,765,"assertEquals(false, interval37.abuts(new Interval(8, 8)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,767,"assertEquals(false, interval37.abuts(new Interval(8, 9)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,768,"assertEquals(false, interval37.abuts(new Interval(9, 9)));  // gap after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,771,public void testAbuts_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,772,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,773,"assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,774,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,775,"assertEquals(true,  interval37.abuts((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,776,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,777,"assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,778,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,779,"assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,780,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,781,"assertEquals(true,  interval37.abuts((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,782,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,783,"assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap after"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,462,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,464,"ssertEquals(false, test.isBefore(TEST_TIME1 - 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,465,"ssertEquals(false, test.isBefore(TEST_TIME1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,466,"ssertEquals(false, test.isBefore(TEST_TIME1 + 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,468,"ssertEquals(false, test.isBefore(TEST_TIME2 - 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,469,"ssertEquals(true, test.isBefore(TEST_TIME2));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,470,"ssertEquals(true, test.isBefore(TEST_TIME2 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,788,"assertEquals(false, interval37.isBefore(2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,789,"assertEquals(false, interval37.isBefore(3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,790,"assertEquals(false, interval37.isBefore(4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,791,"assertEquals(false, interval37.isBefore(5));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,792,"assertEquals(false, interval37.isBefore(6));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,793,"assertEquals(true,  interval37.isBefore(7));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,794,"assertEquals(true,  interval37.isBefore(8));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,474,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,476,ateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,477,"ssertEquals(false, test.isBeforeNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,478,ateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,479,"ssertEquals(true, test.isBeforeNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,480,ateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,481,"ssertEquals(true, test.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,798,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,799,"assertEquals(false, interval37.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,800,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,801,"assertEquals(false, interval37.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,802,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,803,"assertEquals(false, interval37.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,804,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,805,"assertEquals(false, interval37.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,806,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,807,"assertEquals(true, interval37.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,808,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,809,"assertEquals(true, interval37.isBeforeNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,485,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,487,"ssertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,488,"ssertEquals(false, test.isBefore(new Instant(TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,489,"ssertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,491,"ssertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,492,"ssertEquals(true, test.isBefore(new Instant(TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,493,"ssertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,495,"ssertEquals(false, test.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,813,"assertEquals(false, interval37.isBefore(new Instant(2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,814,"assertEquals(false, interval37.isBefore(new Instant(3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,815,"assertEquals(false, interval37.isBefore(new Instant(4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,816,"assertEquals(false, interval37.isBefore(new Instant(5)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,817,"assertEquals(false, interval37.isBefore(new Instant(6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,818,"assertEquals(true,  interval37.isBefore(new Instant(7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,819,"assertEquals(true,  interval37.isBefore(new Instant(8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,822,public void testIsBefore_RI_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,823,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,824,"assertEquals(false, interval37.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,825,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,826,"assertEquals(false, interval37.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,827,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,828,"assertEquals(false, interval37.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,829,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,830,"assertEquals(false, interval37.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,831,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,832,"assertEquals(true, interval37.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,833,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,834,"assertEquals(true, interval37.isBefore((ReadableInstant) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,499,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,501,"ssertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,502,"ssertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,503,"ssertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,505,"ssertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,506,"ssertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,507,"ssertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,509,"ssertEquals(false, test.isBefore((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,838,"assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,839,"assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,840,"assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,842,"assertEquals(false, interval37.isBefore(new Interval(6, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,843,"assertEquals(true, interval37.isBefore(new Interval(7, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,844,"assertEquals(true, interval37.isBefore(new Interval(8, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,847,public void testIsBefore_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,848,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,849,"assertEquals(false, interval37.isBefore((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,850,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,851,"assertEquals(false, interval37.isBefore((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,852,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,853,"assertEquals(false, interval37.isBefore((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,854,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,855,"assertEquals(false, interval37.isBefore((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,856,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,857,"assertEquals(true, interval37.isBefore((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,858,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,859,"assertEquals(true, interval37.isBefore((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,514,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,516,"ssertEquals(true, test.isAfter(TEST_TIME1 - 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,517,"ssertEquals(false, test.isAfter(TEST_TIME1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,518,"ssertEquals(false, test.isAfter(TEST_TIME1 + 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,520,"ssertEquals(false, test.isAfter(TEST_TIME2 - 1));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,521,"ssertEquals(false, test.isAfter(TEST_TIME2));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,522,"ssertEquals(false, test.isAfter(TEST_TIME2 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,864,"assertEquals(true,  interval37.isAfter(2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,865,"assertEquals(false, interval37.isAfter(3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,866,"assertEquals(false, interval37.isAfter(4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,867,"assertEquals(false, interval37.isAfter(5));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,868,"assertEquals(false, interval37.isAfter(6));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,869,"assertEquals(false, interval37.isAfter(7));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,870,"assertEquals(false, interval37.isAfter(8));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,526,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,528,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,529,"ssertEquals(true, test.isAfterNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,530,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,531,"ssertEquals(false, test.isAfterNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,532,ateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,533,"ssertEquals(false, test.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,874,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,875,"assertEquals(true, interval37.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,876,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,877,"assertEquals(false, interval37.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,878,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,879,"assertEquals(false, interval37.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,880,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,881,"assertEquals(false, interval37.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,882,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,883,"assertEquals(false, interval37.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,884,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,885,"assertEquals(false, interval37.isAfterNow());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,537,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,539,"ssertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,540,"ssertEquals(false, test.isAfter(new Instant(TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,541,"ssertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,543,"ssertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,544,"ssertEquals(false, test.isAfter(new Instant(TEST_TIME2)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,545,"ssertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,547,"ssertEquals(false, test.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,889,"assertEquals(true,  interval37.isAfter(new Instant(2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,890,"assertEquals(false, interval37.isAfter(new Instant(3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,891,"assertEquals(false, interval37.isAfter(new Instant(4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,892,"assertEquals(false, interval37.isAfter(new Instant(5)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,893,"assertEquals(false, interval37.isAfter(new Instant(6)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,894,"assertEquals(false, interval37.isAfter(new Instant(7)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,895,"assertEquals(false, interval37.isAfter(new Instant(8)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,898,public void testIsAfter_RI_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,899,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,900,"assertEquals(true, interval37.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,901,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,902,"assertEquals(false, interval37.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,903,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,904,"assertEquals(false, interval37.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,905,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,906,"assertEquals(false, interval37.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,907,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,908,"assertEquals(false, interval37.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,909,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,910,"assertEquals(false, interval37.isAfter((ReadableInstant) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,551,"nterval test = new Interval(TEST_TIME1, TEST_TIME2);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,553,"ssertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,554,"ssertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,555,"ssertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,557,"ssertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,558,"ssertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,559,"ssertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,561,"ssertEquals(false, test.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,914,"assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,915,"assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,916,"assertEquals(false, interval37.isAfter(new Interval(Long.MIN_VALUE, 4)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,918,"assertEquals(false, interval37.isAfter(new Interval(6, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,919,"assertEquals(false, interval37.isAfter(new Interval(7, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,920,"assertEquals(false, interval37.isAfter(new Interval(8, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,923,public void testIsAfter_RInterval_null() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,924,DateTimeUtils.setCurrentMillisFixed(2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,925,"assertEquals(true, interval37.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,926,DateTimeUtils.setCurrentMillisFixed(3);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,927,"assertEquals(true, interval37.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,928,DateTimeUtils.setCurrentMillisFixed(4);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,929,"assertEquals(false, interval37.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,930,DateTimeUtils.setCurrentMillisFixed(6);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,931,"assertEquals(false, interval37.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,932,DateTimeUtils.setCurrentMillisFixed(7);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,933,"assertEquals(false, interval37.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,934,DateTimeUtils.setCurrentMillisFixed(8);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,935,"assertEquals(false, interval37.isAfter((ReadableInterval) null));"

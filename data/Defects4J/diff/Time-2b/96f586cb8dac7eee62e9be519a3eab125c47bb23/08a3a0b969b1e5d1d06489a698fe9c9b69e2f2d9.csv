is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,35,mport org.joda.time.format.DateTimeFormat;
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,95,/** Maximum offset. */
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,96,private static final int MAX_MILLIS = (86400 * 1000) - 1;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,232, @param hoursOffset  the offset in hours from UTC
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,233,"* @param hoursOffset  the offset in hours from UTC, from -23 to +23"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,248, @param hoursOffset  the offset in hours from UTC
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,249,"* @param hoursOffset  the offset in hours from UTC, from -23 to +23"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,258,if (hoursOffset < -23 || hoursOffset > 23) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,259,"throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,262,"nt hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,266,int hoursInMinutes = hoursOffset * 60;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,264,"inutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,268,minutesOffset = hoursInMinutes - minutesOffset;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,266,"inutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,270,minutesOffset = hoursInMinutes + minutesOffset;
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,278, @param millisOffset  the offset in millis from UTC
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,282,"* @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,286,if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,287,"throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,2,  Copyright 2001-2011 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,23,mport java.lang.reflect.Method;
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,305,"assertEquals(DateTimeZone.forID(""+23:59""), DateTimeZone.forOffsetHoursMinutes(23, 59));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,309,"assertEquals(DateTimeZone.forID(""-23:59""), DateTimeZone.forOffsetHoursMinutes(-23, 59));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,326,"ateTimeZone.forOffsetHoursMinutes(999999, 0);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,327,"DateTimeZone.forOffsetHoursMinutes(24, 0);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,328,fail();
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,329,} catch (IllegalArgumentException ex) {}
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,330,try {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,331,"DateTimeZone.forOffsetHoursMinutes(-24, 0);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,339,"assertEquals(DateTimeZone.forID(""+23:59:59.999""), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,342,"assertEquals(DateTimeZone.forID(""-23:59:59.999""), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1));"

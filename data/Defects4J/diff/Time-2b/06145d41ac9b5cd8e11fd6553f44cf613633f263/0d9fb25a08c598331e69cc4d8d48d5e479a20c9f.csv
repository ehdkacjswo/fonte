is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,56,mport java.util.Locale;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,57,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,61,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,65,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,103,* Gets the field type being used.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,105,* @return the field type
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,107,public DateTimeFieldType getFieldType() {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,108,return getField().getType();
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,329, The {@link #get()} method is used to obtain the value to compare for
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,330, this instant and the {@link ReadableInstant#get(DateTimeField)} method
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,331, is used for the specified instant.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,342,"* The comparison is based on the value of the same field type, irrespective"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,343,"* of any difference in chronology. Thus, if this property represents the"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,344,"* hourOfDay field, then the hourOfDay field of the other instant will be queried"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,345,* whether in the same chronology or not.
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,342,nt otherValue = instant.get(getField());
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,356,Chronology chrono = DateTimeUtils.getChronology(instant.getChronology());
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,357,int otherValue = getFieldType().getField(chrono).get(instant.getMillis());
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,358,if (thisValue < otherValue) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,359,return -1;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,360,} else if (thisValue > otherValue) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,361,return 1;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,362,} else {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,363,return 0;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,368,* Compare this field to the same field on another partial instant.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,369,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,370,"* The comparison is based on the value of the same field type, irrespective"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,371,"* of any difference in chronology. Thus, if this property represents the"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,372,"* hourOfDay field, then the hourOfDay field of the other partial will be queried"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,373,* whether in the same chronology or not.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,375,* @param partial  the partial to compare to
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,376,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,377,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,378,* @throws IllegalArgumentException if the field of this property cannot be queried
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,379,*  on the specified instant
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,381,public int compareTo(ReadablePartial partial) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,382,if (partial == null) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,383,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,385,int thisValue = get();
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,386,int otherValue = partial.get(getFieldType());
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,332,est1.year().compareTo(null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,332,test1.year().compareTo((ReadableInstant) null);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,333,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,334,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,337,public void testPropertyCompareToYear2() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,338,"DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,339,"YearMonthDay test2 = new YearMonthDay(2004, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,340,"YearMonthDay test3 = new YearMonthDay(2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,341,"assertEquals(true, test1.year().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,342,"assertEquals(true, test2.year().compareTo(test2) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,343,"assertEquals(true, test3.year().compareTo(test3) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,345,"assertEquals(true, test1.year().compareTo(test2) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,346,"assertEquals(true, test2.year().compareTo(test1) == 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,347,"assertEquals(true, test1.year().compareTo(test3) < 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,348,"assertEquals(true, test3.year().compareTo(test1) > 0);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,349,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,350,test1.year().compareTo((ReadablePartial) null);

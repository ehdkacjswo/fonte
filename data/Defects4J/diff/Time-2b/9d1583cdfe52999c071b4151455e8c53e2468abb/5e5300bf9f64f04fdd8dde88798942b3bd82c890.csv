is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,1183,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,1185,* @return the chronology
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,1186,* @since 1.4
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,1188,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/DateMidnight.java,JodaTime/src/java/org/joda/time/DateMidnight.java,1189,return iInstant.getChronology();
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1678,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1680,* @return the chronology
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1681,* @since 1.4
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1683,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,1684,return iInstant.getChronology();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1552,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1554,* @return the chronology
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1555,* @since 1.4
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1557,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,1558,return iInstant.getChronology();
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,1902,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,1904,* @return the chronology
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,1905,* @since 1.4
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,1907,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,1908,return iInstant.getChronology();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1258,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1260,* @return the chronology
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1261,* @since 1.4
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1263,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,1264,return iInstant.getChronology();
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1231,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1233,* @return the chronology
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1234,* @since 1.4
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1236,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,1237,return iInstant.getChronology();
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,30,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,255,f (readableInstant instanceof ReadableInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,256,eadableInstant otherInstant = (ReadableInstant) readableInstant;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,257,f (getMillis() == otherInstant.getMillis()) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,258,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,259,f (chrono == otherInstant.getChronology()) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,260,eturn true;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,262,f (chrono != null && chrono.equals(otherInstant.getChronology())) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,263,eturn true;
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,256,if (readableInstant instanceof ReadableInstant == false) {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,257,return false;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,267,eturn false;
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,259,ReadableInstant otherInstant = (ReadableInstant) readableInstant;
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,260,return
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,261,getMillis() == otherInstant.getMillis() &&
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,262,"FieldUtils.equals(getChronology(), otherInstant.getChronology());"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,456,eturn (getStartMillis() == other.getStartMillis() &&
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,457,etEndMillis() == other.getEndMillis() &&
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,458,etChronology() == other.getChronology());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,456,return
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,457,getStartMillis() == other.getStartMillis() &&
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,458,getEndMillis() == other.getEndMillis() &&
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,459,"FieldUtils.equals(getChronology(), other.getChronology());"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,26,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,269,eturn (getChronology() == other.getChronology());
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,270,"return FieldUtils.equals(getChronology(), other.getChronology());"
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,119,* A lenient chronology is only equal to a lenient chronology with the
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,120,* same base chronology.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,122,* @param obj  the object to compare to
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,123,* @return true if equal
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,124,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,126,public boolean equals(Object obj) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,127,if (this == obj) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,128,return true;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,130,if (obj instanceof LenientChronology == false) {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,131,return false;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,133,LenientChronology chrono = (LenientChronology) obj;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,134,return getBase().equals(chrono.getBase());
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,138,* A suitable hashcode for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,140,* @return the hashcode
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,141,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,143,public int hashCode() {
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,144,return 236548278 + getBase().hashCode() * 7;
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,148,* A debugging string for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,JodaTime/src/java/org/joda/time/chrono/LenientChronology.java,150,* @return the debugging string
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,30,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,282,ublic String toString() {
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,283,eturn getBase().toString();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,295,* A limit chronology is only equal to a limit chronology with the
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,296,* same base chronology and limits.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,298,* @param obj  the object to compare to
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,299,* @return true if equal
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,300,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,302,public boolean equals(Object obj) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,303,if (this == obj) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,304,return true;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,306,if (obj instanceof LimitChronology == false) {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,307,return false;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,309,LimitChronology chrono = (LimitChronology) obj;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,310,return
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,311,getBase().equals(chrono.getBase()) &&
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,312,"FieldUtils.equals(getLowerLimit(), chrono.getLowerLimit()) &&"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,313,"FieldUtils.equals(getUpperLimit(), chrono.getUpperLimit());"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,317,* A suitable hashcode for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,319,* @return the hashcode
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,320,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,322,public int hashCode() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,323,int hash = 317351877;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,324,hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,325,hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,326,hash += getBase().hashCode() * 7;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,327,return hash;
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,331,* A debugging string for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,333,* @return the debugging string
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,335,public String toString() {
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,336,"return ""LimitChronology["" + getBase().toString() + "", "" +"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,337,"(getLowerLimit() == null ? ""NoLimit"" : getLowerLimit().toString()) + "", "" +"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,338,"(getUpperLimit() == null ? ""NoLimit"" : getUpperLimit().toString()) + ']';"
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,119,* A strict chronology is only equal to a strict chronology with the
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,120,* same base chronology.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,122,* @param obj  the object to compare to
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,123,* @return true if equal
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,124,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,126,public boolean equals(Object obj) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,127,if (this == obj) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,128,return true;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,130,if (obj instanceof StrictChronology == false) {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,131,return false;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,133,StrictChronology chrono = (StrictChronology) obj;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,134,return getBase().equals(chrono.getBase());
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,138,* A suitable hashcode for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,140,* @return the hashcode
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,141,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,143,public int hashCode() {
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,144,return 352831696 + getBase().hashCode() * 7;
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,148,* A debugging string for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,JodaTime/src/java/org/joda/time/chrono/StrictChronology.java,150,* @return the debugging string
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,229,* A zoned chronology is only equal to a zoned chronology with the
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,230,* same base chronology and zone.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,232,* @param obj  the object to compare to
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,233,* @return true if equal
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,234,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,236,public boolean equals(Object obj) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,237,if (this == obj) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,238,return true;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,240,if (obj instanceof ZonedChronology == false) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,241,return false;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,243,ZonedChronology chrono = (ZonedChronology) obj;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,244,return
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,245,getBase().equals(chrono.getBase()) &&
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,246,getZone().equals(chrono.getZone());
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,250,* A suitable hashcode for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,252,* @return the hashcode
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,253,* @since 1.4
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,255,public int hashCode() {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,256,return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,260,* A debugging string for the chronology.
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,262,* @return the debugging string
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,325,f (object instanceof AbstractPartialFieldProperty) {
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,326,bstractPartialFieldProperty other = (AbstractPartialFieldProperty) object;
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,327,f (get() == other.get() &&
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,328,etFieldType() == other.getFieldType() &&
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,329,etReadablePartial().getChronology() == other.getReadablePartial().getChronology()) {
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,330,eturn true;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,325,if (object instanceof AbstractPartialFieldProperty == false) {
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,326,return false;
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,333,eturn false;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,328,AbstractPartialFieldProperty other = (AbstractPartialFieldProperty) object;
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,329,return
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,330,get() == other.get() &&
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,331,getFieldType() == other.getFieldType() &&
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,332,"FieldUtils.equals(getReadablePartial().getChronology(), other.getReadablePartial().getChronology());"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,21,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,92,* Gets the chronology of the datetime that this property is linked to.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,93,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,94,"* This implementation throws UnsupportedOperationException, and must be"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,95,* implemented by subclasses to enable the equals() and hashCode() methods.
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,97,* @return the chronology
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,98,* @since 1.4
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,100,protected Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,101,throw new UnsupportedOperationException(
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,102,"""The method getChronology() was added in v1.4 and needs "" +"
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,103,"""to be implemented by subclasses of AbstractReadableInstantFieldProperty"");"
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,429,f (object instanceof AbstractReadableInstantFieldProperty) {
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,430,bstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,431,f (get() == other.get() &&
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,432,etField().equals(other.getField())) {
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,433,eturn true;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,445,if (object instanceof AbstractReadableInstantFieldProperty == false) {
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,446,return false;
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,436,eturn false;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,448,AbstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,449,return
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,450,get() == other.get() &&
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,451,getFieldType().equals(other.getFieldType()) &&
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,452,"FieldUtils.equals(getChronology(), other.getChronology());"
False,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,445,eturn get() * 17 + getField().hashCode();
True,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java,461,return get() * 17 + getFieldType().hashCode() + getChronology().hashCode();
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,310,* Compares two objects as equals handling null.
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,312,* @param object1  the first object
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,313,* @param object2  the second object
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,314,* @return true if equal
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,315,* @since 1.4
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,317,"public static boolean equals(Object object1, Object object2) {"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,318,if (object1 == object2) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,319,return true;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,321,if (object1 == null || object2 == null) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,322,return false;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,324,return object1.equals(object2);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,26,import org.joda.time.chrono.EthiopicChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,30,import org.joda.time.chrono.IslamicChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,32,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,33,import org.joda.time.chrono.LimitChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,34,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,35,import org.joda.time.chrono.ZonedChronology;
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,202,public void testEqualsHashCode_ISO() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,203,Chronology chrono1 = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,204,Chronology chrono2 = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,205,Chronology chrono3 = ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,207,"assertEquals(true, chrono1.equals(chrono2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,208,"assertEquals(false, chrono1.equals(chrono3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,210,"DateTime dt1 = new DateTime(0L, chrono1);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,211,"DateTime dt2 = new DateTime(0L, chrono2);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,212,"DateTime dt3 = new DateTime(0L, chrono3);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,214,"assertEquals(true, dt1.equals(dt2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,215,"assertEquals(false, dt1.equals(dt3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,217,"assertEquals(true, chrono1.hashCode() == chrono2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,218,"assertEquals(false, chrono1.hashCode() == chrono3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,222,public void testEqualsHashCode_Lenient() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,223,Chronology chrono1 = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,224,Chronology chrono2 = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,225,Chronology chrono3 = LenientChronology.getInstance(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,227,"assertEquals(true, chrono1.equals(chrono2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,228,"assertEquals(false, chrono1.equals(chrono3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,230,"DateTime dt1 = new DateTime(0L, chrono1);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,231,"DateTime dt2 = new DateTime(0L, chrono2);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,232,"DateTime dt3 = new DateTime(0L, chrono3);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,234,"assertEquals(true, dt1.equals(dt2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,235,"assertEquals(false, dt1.equals(dt3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,237,"assertEquals(true, chrono1.hashCode() == chrono2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,238,"assertEquals(false, chrono1.hashCode() == chrono3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,242,public void testEqualsHashCode_Strict() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,243,Chronology chrono1 = StrictChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,244,Chronology chrono2 = StrictChronology.getInstance(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,245,Chronology chrono3 = StrictChronology.getInstance(ISOChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,247,"assertEquals(true, chrono1.equals(chrono2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,248,"assertEquals(false, chrono1.equals(chrono3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,250,"DateTime dt1 = new DateTime(0L, chrono1);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,251,"DateTime dt2 = new DateTime(0L, chrono2);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,252,"DateTime dt3 = new DateTime(0L, chrono3);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,254,"assertEquals(true, dt1.equals(dt2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,255,"assertEquals(false, dt1.equals(dt3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,257,"assertEquals(true, chrono1.hashCode() == chrono2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,258,"assertEquals(false, chrono1.hashCode() == chrono3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,262,public void testEqualsHashCode_Limit() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,263,DateTime lower = new DateTime(0L);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,264,DateTime higherA = new DateTime(1000000L);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,265,DateTime higherB = new DateTime(2000000L);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,267,"Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,268,"Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,269,"Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,270,"Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,272,"assertEquals(true, chrono1.equals(chrono2A));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,273,"assertEquals(false, chrono1.equals(chrono2B));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,274,"assertEquals(false, chrono1.equals(chrono3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,276,"DateTime dt1 = new DateTime(0L, chrono1);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,277,"DateTime dt2A = new DateTime(0L, chrono2A);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,278,"DateTime dt2B = new DateTime(0L, chrono2B);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,279,"DateTime dt3 = new DateTime(0L, chrono3);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,281,"assertEquals(true, dt1.equals(dt2A));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,282,"assertEquals(false, dt1.equals(dt2B));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,283,"assertEquals(false, dt1.equals(dt3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,285,"assertEquals(true, chrono1.hashCode() == chrono2A.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,286,"assertEquals(false, chrono1.hashCode() == chrono2B.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,287,"assertEquals(false, chrono1.hashCode() == chrono3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,291,public void testEqualsHashCode_Zoned() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,292,"DateTimeZone zoneA = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,293,"DateTimeZone zoneB = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,295,"Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,296,"Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,297,"Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,299,"assertEquals(true, chrono1.equals(chrono2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,300,"assertEquals(false, chrono1.equals(chrono3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,302,"DateTime dt1 = new DateTime(0L, chrono1);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,303,"DateTime dt2 = new DateTime(0L, chrono2);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,304,"DateTime dt3 = new DateTime(0L, chrono3);"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,306,"assertEquals(true, dt1.equals(dt2));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,307,"assertEquals(false, dt1.equals(dt3));"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,309,"assertEquals(true, chrono1.hashCode() == chrono2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,310,"assertEquals(false, chrono1.hashCode() == chrono3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,314,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,315,"DateTimeZone paris = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,316,ISOChronology isoParis = ISOChronology.getInstance(paris);
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,318,"assertEquals(""ISOChronology[Europe/Paris]"", isoParis.toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,319,"assertEquals(""GJChronology[Europe/Paris]"", GJChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,320,"assertEquals(""GregorianChronology[Europe/Paris]"", GregorianChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,321,"assertEquals(""JulianChronology[Europe/Paris]"", JulianChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,322,"assertEquals(""BuddhistChronology[Europe/Paris]"", BuddhistChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,323,"assertEquals(""CopticChronology[Europe/Paris]"", CopticChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,324,"assertEquals(""EthiopicChronology[Europe/Paris]"", EthiopicChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,325,"assertEquals(""IslamicChronology[Europe/Paris]"", IslamicChronology.getInstance(paris).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,327,"assertEquals(""LenientChronology[ISOChronology[Europe/Paris]]"", LenientChronology.getInstance(isoParis).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,328,"assertEquals(""StrictChronology[ISOChronology[Europe/Paris]]"", StrictChronology.getInstance(isoParis).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,329,"assertEquals(""LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]"", LimitChronology.getInstance(isoParis, null, null).toString());"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,330,"assertEquals(""ZonedChronology[ISOChronology[UTC], Europe/Paris]"", ZonedChronology.getInstance(isoParis, paris).toString());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,23,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,38,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,520,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,521,"DateMidnight test1 = new DateMidnight(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,522,"DateMidnight test2 = new DateMidnight(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,523,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,524,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,525,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,526,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,527,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,528,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,529,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,532,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,533,"DateMidnight test1 = new DateMidnight(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,534,"DateMidnight test2 = new DateMidnight(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,535,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,536,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,537,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,538,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,539,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,540,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,541,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,38,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1358,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1359,"DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1360,"DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1361,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1362,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1363,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1364,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1365,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1366,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1367,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1370,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1371,"DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1372,"DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1373,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1374,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1375,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1376,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1377,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1378,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,1379,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,33,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,202,public void testEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,203,Interval test1 = new Interval(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,204,"new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,205,"new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,206,Interval test2 = new Interval(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,207,"new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,208,"new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,209,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,210,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,211,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,212,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,213,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,214,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,215,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,218,public void testEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,219,Interval test1 = new Interval(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,220,"new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,221,"new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,222,Interval test2 = new Interval(
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,223,"new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,224,"new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,225,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,226,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,227,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,228,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,229,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,230,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,231,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,34,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,35,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,267,public void testEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,268,"LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,269,"LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,270,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,271,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,272,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,273,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,274,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,275,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,276,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,279,public void testEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,280,"LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,281,"LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,282,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,283,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,284,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,285,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,286,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,287,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,288,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,35,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,519,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,520,"LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,521,"LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,522,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,523,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,524,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,525,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,526,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,527,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,528,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,531,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,532,"LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,533,"LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,534,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,535,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,536,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,537,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,538,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,539,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java,540,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,24,import org.joda.time.chrono.LenientChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,25,import org.joda.time.chrono.StrictChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,35,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,522,public void testPropertyEqualsHashCodeLenient() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,523,"YearMonthDay test1 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,524,"YearMonthDay test2 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,525,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,526,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,527,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,528,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,529,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,530,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,531,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,534,public void testPropertyEqualsHashCodeStrict() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,535,"YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,536,"YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,537,"assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,538,"assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,539,"assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,540,"assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,541,"assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,542,"assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,543,"assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());"

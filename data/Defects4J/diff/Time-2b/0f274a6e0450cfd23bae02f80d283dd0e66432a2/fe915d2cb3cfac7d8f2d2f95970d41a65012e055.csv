is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,107,uddhistChronology chrono = cCache.get(zone);
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,108,f (chrono == null) {
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,109,/ First create without a lower limit.
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,110,"hrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);"
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,111,/ Impose lower limit and make another BuddhistChronology.
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,112,"ateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,113,"hrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");"
False,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,114,"Cache.put(zone, chrono);"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,107,BuddhistChronology chrono;
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,108,synchronized (cCache) {
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,109,chrono = cCache.get(zone);
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,110,if (chrono == null) {
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,111,// First create without a lower limit.
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,112,"chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,113,// Impose lower limit and make another BuddhistChronology.
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,114,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,115,"chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");"
True,src/main/java/org/joda/time/chrono/BuddhistChronology.java,src/main/java/org/joda/time/chrono/BuddhistChronology.java,116,"cCache.put(zone, chrono);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,199,rrayList<GJChronology> chronos = cCache.get(zone);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,200,f (chronos == null) {
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,201,hronos = new ArrayList<GJChronology>(2);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,202,"Cache.put(zone, chronos);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,203, else {
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,204,or (int i=chronos.size(); --i>=0; ) {
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,205,hrono = chronos.get(i);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,206,f (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,207,utoverInstant.equals(chrono.getGregorianCutover())) {
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,209,eturn chrono;
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,198,synchronized (cCache) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,199,ArrayList<GJChronology> chronos = cCache.get(zone);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,200,if (chronos == null) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,201,chronos = new ArrayList<GJChronology>(2);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,202,"cCache.put(zone, chronos);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,203,} else {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,204,for (int i = chronos.size(); --i >= 0;) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,205,chrono = chronos.get(i);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,206,if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,207,cutoverInstant.equals(chrono.getGregorianCutover())) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,209,return chrono;
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,213,if (zone == DateTimeZone.UTC) {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,214,chrono = new GJChronology
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,215,"(JulianChronology.getInstance(zone, minDaysInFirstWeek),"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,216,"GregorianChronology.getInstance(zone, minDaysInFirstWeek),"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,217,cutoverInstant);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,218,} else {
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,219,"chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,220,chrono = new GJChronology
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,221,"(ZonedChronology.getInstance(chrono, zone),"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,222,"chrono.iJulianChronology,"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,223,"chrono.iGregorianChronology,"
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,224,chrono.iCutoverInstant);
True,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,226,chronos.add(chrono);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,214,f (zone == DateTimeZone.UTC) {
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,215,hrono = new GJChronology
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,216,"JulianChronology.getInstance(zone, minDaysInFirstWeek),"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,217,"regorianChronology.getInstance(zone, minDaysInFirstWeek),"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,218,utoverInstant);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,219, else {
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,220,"hrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,221,hrono = new GJChronology
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,222,"ZonedChronology.getInstance(chrono, zone),"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,223,"hrono.iJulianChronology,"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,224,"hrono.iGregorianChronology,"
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,225,hrono.iCutoverInstant);
False,src/main/java/org/joda/time/chrono/GJChronology.java,src/main/java/org/joda/time/chrono/GJChronology.java,228,hronos.add(chrono);

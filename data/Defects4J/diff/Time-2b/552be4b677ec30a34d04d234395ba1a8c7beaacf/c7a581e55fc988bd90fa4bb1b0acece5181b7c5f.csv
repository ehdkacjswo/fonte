is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,869," NOTE: The behaviour of this method changed in v1.5, with the emphasis"
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,870, on returning a consistent result later along the time-line (shown above).
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,869,* During a DST overlap (where the local time is ambiguous) this method will return
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,870,* the earlier instant. The combination of these two rules is to always favour
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,871,* daylight (summer) time over standard (winter) time.
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,872,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,873,"* NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere."
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,874,"* Prior to v1.5, the DST gap behaviour was also not defined."
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,872," @param instantLocal  the millisecond instant, relative to this time zone, to"
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,873, get the offset for
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,876,"* @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for"
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,878,nt offsetLocal = getOffset(instantLocal);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,881,final int offsetLocal = getOffset(instantLocal);
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,880,nt offsetAdjusted = getOffset(instantLocal - offsetLocal);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,883,final long instantAdjusted = instantLocal - offsetLocal;
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,884,final int offsetAdjusted = getOffset(instantAdjusted);
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,889,ong nextLocal = nextTransition(instantLocal - offsetLocal);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,893,long nextLocal = nextTransition(instantAdjusted);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,899,} else if (offsetLocal > 0) {
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,900,long prev = previousTransition(instantAdjusted);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,901,if (prev < instantAdjusted) {
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,902,int offsetPrev = getOffset(prev);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,903,int diff = offsetPrev - offsetLocal;
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,904,if (instantAdjusted - prev <= diff) {
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,905,return offsetPrev;
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,662,public void test_DateTime_constructor_NewYork_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,663,"DateTime dt = new DateTime(2007, 11, 4, 1, 30, ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,664,"assertEquals(""2007-11-04T01:30:00.000-04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,884,"/ broken, and getOffsetFromLocal has no obvious way to determine which is correct"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,885,/    public void test_getOffsetFromLocal_Moscow_Autumn() {
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,886,"/        doTest_getOffsetFromLocal(10, 28, 0, 0, ""2007-10-28T00:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,887,"/        doTest_getOffsetFromLocal(10, 28, 0,30, ""2007-10-28T00:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,888,"/        doTest_getOffsetFromLocal(10, 28, 1, 0, ""2007-10-28T01:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,889,"/        doTest_getOffsetFromLocal(10, 28, 1,30, ""2007-10-28T01:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,891,"/        doTest_getOffsetFromLocal(10, 28, 2, 0, ""2007-10-28T02:00:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,892,"/        doTest_getOffsetFromLocal(10, 28, 2,30, ""2007-10-28T02:30:00.000+04:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,894,"/        doTest_getOffsetFromLocal(10, 28, 3, 0, ""2007-10-28T03:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,895,"/        doTest_getOffsetFromLocal(10, 28, 3,30, ""2007-10-28T03:30:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,896,"/        doTest_getOffsetFromLocal(10, 28, 4, 0, ""2007-10-28T04:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,897,"/        doTest_getOffsetFromLocal(10, 28, 5, 0, ""2007-10-28T05:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,898,"/        doTest_getOffsetFromLocal(10, 28, 6, 0, ""2007-10-28T06:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,899,"/        doTest_getOffsetFromLocal(10, 28, 7, 0, ""2007-10-28T07:00:00.000+03:00"", ZONE_MOSCOW);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,900,"/        doTest_getOffsetFromLocal(10, 28, 8, 0, ""2007-10-28T08:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,889,public void test_getOffsetFromLocal_Moscow_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,890,"doTest_getOffsetFromLocal(10, 28, 0, 0, ""2007-10-28T00:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,891,"doTest_getOffsetFromLocal(10, 28, 0,30, ""2007-10-28T00:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,892,"doTest_getOffsetFromLocal(10, 28, 1, 0, ""2007-10-28T01:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,893,"doTest_getOffsetFromLocal(10, 28, 1,30, ""2007-10-28T01:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,895,"doTest_getOffsetFromLocal(10, 28, 2, 0, ""2007-10-28T02:00:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,896,"doTest_getOffsetFromLocal(10, 28, 2,30, ""2007-10-28T02:30:00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,897,"doTest_getOffsetFromLocal(10, 28, 2,30,59,999, ""2007-10-28T02:30:59.999+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,898,"doTest_getOffsetFromLocal(10, 28, 2,59,59,998, ""2007-10-28T02:59:59.998+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,899,"doTest_getOffsetFromLocal(10, 28, 2,59,59,999, ""2007-10-28T02:59:59.999+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,901,"doTest_getOffsetFromLocal(10, 28, 3, 0, ""2007-10-28T03:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,902,"doTest_getOffsetFromLocal(10, 28, 3,30, ""2007-10-28T03:30:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,903,"doTest_getOffsetFromLocal(10, 28, 4, 0, ""2007-10-28T04:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,904,"doTest_getOffsetFromLocal(10, 28, 5, 0, ""2007-10-28T05:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,905,"doTest_getOffsetFromLocal(10, 28, 6, 0, ""2007-10-28T06:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,906,"doTest_getOffsetFromLocal(10, 28, 7, 0, ""2007-10-28T07:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,907,"doTest_getOffsetFromLocal(10, 28, 8, 0, ""2007-10-28T08:00:00.000+03:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,910,public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,911,for (int min = 0; min < 60; min++) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,912,if (min < 10) {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,913,"doTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:0"" + min + "":00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,914,} else {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,915,"doTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:"" + min + "":00.000+04:00"", ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,920,public void test_DateTime_constructor_Moscow_Autumn() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,921,"DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,922,"assertEquals(""2007-10-28T02:30:00.000+04:00"", dt.toString());"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1194,"rivate void doTest_getOffsetFromLocal(int month, int day, int hour, int min,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1195,"tring expected, DateTimeZone zone)"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1197,"oTest_getOffsetFromLocal(2007, month, day, hour, min, expected, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1216,"private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1217,"doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1220,"private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1221,"doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1224,"private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1225,"doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1200,"rivate void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min,"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1201,"tring expected, DateTimeZone zone)"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1203,"ateTime dt = new DateTime(year, month, day, hour, min, 0, 0, DateTimeZone.UTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1228,"private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1229,"DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);"

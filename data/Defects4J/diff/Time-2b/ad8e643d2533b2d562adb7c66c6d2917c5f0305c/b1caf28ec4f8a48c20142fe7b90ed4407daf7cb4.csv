is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,82, Checks whether the field is supported.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,84,"rivate static void checkArgument(DurationField field, String name) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,85,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,86,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,87,"""Duration does not support field \"""" + name + '""');"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,92, Checks whether the field is supported.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,94,"rivate static void checkSupport(DurationField field, String name) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,95,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,96,hrow new UnsupportedOperationException
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,97,"""Duration does not support field \"""" + name + '""');"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,80,/** Millis cache is currently unknown */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,81,private static final int STATE_UNKNOWN = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,82,/** Millis cache is not calculable */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,83,private static final int STATE_NOT_CALCULABLE = 1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,84,/** Millis cache has been calculated and is valid */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,85,private static final int STATE_CALCULATED = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,86,"/** Total millis is the master field, fields always accurate */"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,87,private static final int STATE_TOTAL_MILLIS_MASTER = -1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,91,/** The object state */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,92,private int iState;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,105,"** The milliseoond status, 0=unknown, 1=imprecise, 2=precise */"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,106,rivate int iTotalMillisState;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,95,/** Value for years */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,97,/** Value for months */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,99,/** Value for weeks */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,101,/** Value for days */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,103,/** Value for hours */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,105,/** Value for minutes */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,107,/** Value for seconds */
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,109,/** Value for millis */
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,118, Creates a zero length duration of the specified type.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,113,* Creates a duration from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,120," @param type  which set of fields this duration supports, null means millis type"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,115,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,116,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,117,"* @param totalMillisMaster  true if the total millis is master, false if the fields are"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,118,* @throws IllegalArgumentException if duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,122,ublic AbstractDuration(DurationType type) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,120,"public AbstractDuration(long duration, DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,124,ype = (type == null ? DurationType.getMillisType() : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,122,"type = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,127,"etTotalMillis(type, 0L);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,131, Creates a new duration based on another using the {@link ConverterManager}.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,133, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,134," @param type  which set of fields this duration supports, null means use type from object"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,135, @throws IllegalArgumentException if duration is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,136, @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,138,"ublic AbstractDuration(Object duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,139,uper();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,140,urationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,141,ype = (type == null ? converter.getDurationType(duration) : type);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,142,Type = type;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,143,f (type.isPrecise() && converter.isPrecise(duration)) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,144,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,145,"etTotalMillis(type, converter.getDurationMillis(duration));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,146, else if (this instanceof ReadWritableDuration) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,147,"onverter.setInto((ReadWritableDuration) this, duration);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,148, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,149,/ Only call a private method
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,150,"etDuration(type, new MutableDuration(duration, type));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,125,"setTotalMillis(type, duration);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,165," @param type  which set of fields this duration supports, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,139,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,140,"* @param totalMillisMaster  true if the total millis is master, false if the fields are"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,141,* @throws IllegalArgumentException if duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,170,urationType type) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,146,"DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,172,ype = (type == null ? DurationType.getAllType() : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,148,"type = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,183," @param type  which set of fields this duration supports, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,159,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,160,"* @param totalMillisMaster  true if the total millis is master, false if the fields are"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,161,* @throws IllegalArgumentException if duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,185,"ublic AbstractDuration(long startInstant, long endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,163,"public AbstractDuration(long startInstant, long endInstant, DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,187,ype = (type == null ? DurationType.getAllType() : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,165,"type = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,198," @param type  which set of fields this duration supports, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,176,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,177,"* @param totalMillisMaster  true if the total millis is master, false if the fields are"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,178,* @throws IllegalArgumentException if duration type is invalid
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,201,"eadableInstant startInstant, ReadableInstant  endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,181,"ReadableInstant startInstant, ReadableInstant  endInstant, DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,203,ype = (type == null ? DurationType.getAllType() : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,183,"type = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,216, Creates a duration from the given millisecond duration. If any supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,217," fields are imprecise, an UnsupportedOperationException is thrown. The"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,218, exception to this is when the specified duration is zero.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,196,* Creates a new duration based on another using the {@link ConverterManager}.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,220," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,221," @param type  which set of fields this duration supports, null means MillisType"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,198,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,199,"* @param type  which set of fields this duration supports, null means use type from object"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,200,"* @param totalMillisMaster  true if the total millis is master, false if the fields are"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,201,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,202,* @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,223,"ublic AbstractDuration(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,204,"public AbstractDuration(Object duration, DurationType type, boolean totalMillisMaster) {"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,225,ype = (type == null ? DurationType.getMillisType() : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,206,DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,207,type = (type == null ? converter.getDurationType(duration) : type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,208,"type = init(type, totalMillisMaster);"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,227,"etTotalMillis(type, duration); // Only call a private method"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,210,if (type.isPrecise() && converter.isPrecise(duration)) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,211,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,212,"setTotalMillis(type, converter.getDurationMillis(duration));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,213,} else if (this instanceof ReadWritableDuration) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,214,"converter.setInto((ReadWritableDuration) this, duration);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,215,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,216,// Only call a private method
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,217,"setDuration(type, new MutableDuration(duration, type));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,223,"* Validates a duration type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,224,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,226,* @param type  the type to check
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,227,* @param totalMillisMaster  true if total millis should be master
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,228,"* @return the duration type, not null"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,229,* @throws IllegalArgumentException if the duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,231,"private DurationType init(DurationType type, boolean totalMillisMaster) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,232,if (totalMillisMaster) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,233,iState = STATE_TOTAL_MILLIS_MASTER;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,235,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,236,if (type == null) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,237,"throw new IllegalArgumentException(""The duration type must not be null"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,239,if (totalMillisMaster && type.isPrecise() == false) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,240,"throw new IllegalArgumentException(""The duration type must be precise: "" + type);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,242,return type;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,246,"* Validates a duration type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,247,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,249,"* @param type  the type to check, may be null"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,250,"* @return the validated type to use, not null"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,251,* @throws IllegalArgumentException if the duration type is invalid
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,253,protected abstract DurationType checkDurationType(DurationType type);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,264,* Is this duration based on a millisecond duration and thus performs
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,265,* all calculations using the total millisecond value.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,266,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,267,* Durations operate either using the total milliseconds as the master and the
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,268,"* field values as derived, or vice versa. This method returns true if the"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,269,* total millis field is the master.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,270,* <p>
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,271,"* If true, {@link #isPrecise()} will always return true, {@link #getTotalMillis()}"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,272,* and {@link #compareTo(Object)} methods will never throw an exception and the
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,273,* add methods will add using the total milliseconds value.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,274,* See {@link MillisDuration} for details.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,276,* @return true if the duration is based on total milliseconds
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,278,public final boolean isTotalMillisBased() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,279,return (iState == STATE_TOTAL_MILLIS_MASTER);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,288,* @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,246,nt state = iTotalMillisState;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,247,f (state == 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,291,int state = iState;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,292,if (state == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,293,return iTotalMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,295,if (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,250,f (state != 2) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,298,if (state != STATE_CALCULATED) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,269,nt state = iTotalMillisState;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,270,f (state == 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,271,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,273,eturn state == 2;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,277," Walks through the field values, determining total millis and whether"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,278, this duration is precise.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,280, @return new state
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,282,rivate int updateTotalMillis() {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,283,inal DurationType type = iType;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,285,oolean isPrecise = true;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,286,ong totalMillis = 0;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,288,urationField field;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,289,nt value; // used to lock fields against threading issues
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,290,alue = iYears;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,291,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,292,ield = type.years();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,293,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,294,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,297,alue = iMonths;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,298,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,299,ield = type.months();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,300,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,301,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,304,alue = iWeeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,305,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,306,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,307,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,308,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,311,alue = iDays;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,312,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,313,ield = type.days();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,314,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,315,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,318,alue = iHours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,319,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,320,ield = type.hours();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,321,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,322,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,325,alue = iMinutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,326,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,327,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,328,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,329,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,332,alue = iSeconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,333,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,334,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,335,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,336,otalMillis += field.getMillis(value);
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,339,alue = iMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,340,f (value != 0) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,341,ield = type.millis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,342,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,343,otalMillis += field.getMillis(value);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,317,int state = iState;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,318,if (state == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,319,return true;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,347,f (isPrecise) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,348,TotalMillis = totalMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,349,eturn iTotalMillisState = 2;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,350, else {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,351,TotalMillis = totalMillis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,352,eturn iTotalMillisState = 1;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,321,if (state == STATE_UNKNOWN) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,322,state = updateTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,324,return (state == STATE_CALCULATED);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,710,* Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,712,"private static void checkArgument(DurationField field, String name) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,713,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,714,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,715,"(""Duration does not support field \"""" + name + '""');"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,720,* Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,722,"private static void checkSupport(DurationField field, String name) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,723,if (!field.isSupported()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,724,throw new UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,725,"(""Duration does not support field \"""" + name + '""');"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,759,"etDuration(type,"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,760,"uration.getYears(), duration.getMonths(),"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,761,"uration.getWeeks(), duration.getDays(),"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,762,"uration.getHours(), duration.getMinutes(),"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,763,"uration.getSeconds(), duration.getMillis());"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,764,f (type.equals(duration.getDurationType()) && duration.isPrecise()) {
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,765,TotalMillis = duration.getTotalMillis();
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,766,TotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,751,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,752,if (duration.isPrecise() == false) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,753,"throw new IllegalArgumentException(""The duration to copy from must be precise"");"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,755,"setTotalMillis(type, duration.getTotalMillis());"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,756,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,757,"setDuration(type,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,758,"duration.getYears(), duration.getMonths(),"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,759,"duration.getWeeks(), duration.getDays(),"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,760,"duration.getHours(), duration.getMinutes(),"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,761,"duration.getSeconds(), duration.getMillis());"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,762,if (type.equals(duration.getDurationType()) && duration.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,763,iTotalMillis = duration.getTotalMillis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,764,iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,822,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,823,"updateTotalMillis(years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,824,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,825,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,833,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,860,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,861,"setTotalMillis(type, baseTotalMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,862,return;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,913,TotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,919,iState = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,939,TotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,945,if (iState != STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,946,iState = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1010,TotalMillisState = 2;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1018,if (iState != STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1019,iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1025,"* Walks through the field values, determining total millis and whether"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1026,* this duration is precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1028,* @return new state
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1029,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1031,private int updateTotalMillis() {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1032,"return updateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1036,"* Walks through the field values, determining total millis and whether"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1037,* this duration is precise.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1039,* @return new state
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1040,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1042,"private int updateTotalMillis(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1043,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1044,final DurationType type = iType;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1046,boolean isPrecise = true;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1047,long totalMillis = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1049,DurationField field;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1050,if (years != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1051,field = type.years();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1052,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1053,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1056,if (months != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1057,field = type.months();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1058,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1059,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1062,if (weeks != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1063,field = type.weeks();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1064,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1065,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1068,if (days != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1069,field = type.days();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1070,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1071,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1074,if (hours != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1075,field = type.hours();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1076,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1077,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1080,if (minutes != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1081,field = type.minutes();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1082,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1083,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1086,if (seconds != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1087,field = type.seconds();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1088,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1089,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1092,if (millis != 0) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1093,field = type.millis();
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1094,if (isPrecise &= field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1095,"totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1099,iTotalMillis = totalMillis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1100,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1101,return STATE_TOTAL_MILLIS_MASTER;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1102,} else if (isPrecise) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1103,return iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1104,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1105,return iState = STATE_NOT_CALCULABLE;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1116,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1022,etTotalMillis(getTotalMillis() + duration);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1119,"setTotalMillis(FieldUtils.safeAdd(getTotalMillis(), duration));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1039, <p>
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1040, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1041, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1042, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1066,Years = years;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1067,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1159,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1160,"updateTotalMillis(years, iMonths, iWeeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1161,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1162,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1163,iYears = years;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1164,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1075, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1173,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1174,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1078,etYears(getYears() + years);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1177,"setYears(FieldUtils.safeAdd(getYears(), years));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1090, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1189,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1097,Months = months;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1098,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1196,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1197,"updateTotalMillis(iYears, months, iWeeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1198,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1199,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1200,iMonths = months;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1201,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1106, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1210,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1211,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1109,etMonths(getMonths() + months);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1214,"setMonths(FieldUtils.safeAdd(getMonths(), months));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1121, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1226,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1128,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1129,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1233,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1234,"updateTotalMillis(iYears, iMonths, weeks, iDays, iHours, iMinutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1235,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1236,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1237,iWeeks = weeks;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1238,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1137, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1247,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1248,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1140,etWeeks(getWeeks() + weeks);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1251,"setWeeks(FieldUtils.safeAdd(getWeeks(), weeks));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1152, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1263,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1159,Days = days;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1160,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1270,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1271,"updateTotalMillis(iYears, iMonths, iWeeks, days, iHours, iMinutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1272,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1273,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1274,iDays = days;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1275,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1168, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1284,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1285,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1171,etDays(getDays() + days);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1288,"setDays(FieldUtils.safeAdd(getDays(), days));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1183, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1300,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1190,Hours = hours;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1191,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1307,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1308,"updateTotalMillis(iYears, iMonths, iWeeks, iDays, hours, iMinutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1309,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1310,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1311,iHours = hours;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1312,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1199, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1321,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1322,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1202,etHours(getHours() + hours);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1325,"setHours(FieldUtils.safeAdd(getHours(), hours));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1214, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1337,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1221,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1222,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1344,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1345,"updateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, minutes, iSeconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1346,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1347,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1348,iMinutes = minutes;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1349,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1230, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1358,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1359,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1233,etMinutes(getMinutes() + minutes);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1362,"setMinutes(FieldUtils.safeAdd(getMinutes(), minutes));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1245, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1374,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1252,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1253,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1381,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1382,"updateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, iMinutes, seconds, iMillis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1383,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1384,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1385,iSeconds = seconds;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1386,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1261, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1395,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1396,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1264,etSeconds(getSeconds() + seconds);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1399,"setSeconds(FieldUtils.safeAdd(getSeconds(), seconds));"
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1276, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1411,* @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1283,Millis = millis;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1284,TotalMillisState = 0;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1418,if (iState == STATE_TOTAL_MILLIS_MASTER) {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1419,"updateTotalMillis(iYears, iMonths, iWeeks, iDays, iHours, iMinutes, iSeconds, millis);"
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1420,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1421,} else {
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1422,iMillis = millis;
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1423,iState = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1292, @throws UnsupportedOperationException if field is not supported.
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1432,* @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1433,* @throws ArithmeticException if the addition exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1295,etMillis(getMillis() + millis);
True,JodaTime/src/java/org/joda/time/AbstractDuration.java,JodaTime/src/java/org/joda/time/AbstractDuration.java,1436,"setMillis(FieldUtils.safeAdd(getMillis(), millis));"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,322,uration = duration.withDurationType(type);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,322,duration = duration.withDurationTypeUsingTotalMillis(type);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,59, Standard immutable duration implementation split on any set of fields.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,59,* An immutable duration that defines and adds durations based on individual field values.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,63," Commonly use types are MillisType, which assigns all values to the millis field,"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,64," and AllType, which spreads values across all fields."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,66, A duration has a concept of being <i>precise</i>.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,67, A precise duration is a fixed number of milliseconds long.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,68, Whether a particular duration instance is precise depends on the constructor
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,69, used and the duration type specified.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,64,* <code>Duration</code> can uses any duration type to split the milliseconds into fields.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,65,* The {@link DurationType#getAllType() All} type is used by default.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,66,"* <code>All</code> uses the ISO chronology and divide the duration into years, months,"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,67,"* weeks, days, hours, minutes, seconds and milliseconds as best it can."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,68,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,69,* This class performs calculations using the individual fields.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,70,* The {@link ReadableDuration#isTotalMillisBased} method will always return false.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,71,* The total milliseconds may be calculated so long as the value of all imprecise
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,72,* fields in the duration type are set to zero.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,73,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,74,"* When this duration is added to an instant, the effect is of adding each field in turn."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,75,"* As a result, this duration takes into account daylight savings time."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,76,* Adding a duration of 1 day to the day before daylight savings starts will only add
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,77,* 23 hours rather than 24 to ensure that the time remains the same.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,78,"* If this is not the behaviour you want, then see {@link MillisDuration}."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,79,"ublic class Duration extends AbstractDuration implements ReadableDuration, Serializable {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,88,public class Duration
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,89,extends AbstractDuration
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,90,"implements ReadableDuration, Serializable {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,82,ublic static final Duration ZERO = new Duration();
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,93,public static final Duration ZERO = new Duration(0L);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,88, Creates a zero length millisecond duration using MillisType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,89, This constructor creates a precise duration because
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,90, MillisType in ISOChronology UTC is precise.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,92,ublic Duration() {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,93,uper((DurationType) null);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,97, Creates a zero length duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,98, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,99,* Creates a duration from the given millisecond duration using AllType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,100," @param type  which set of fields this duration supports, null means millis type"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,102,ublic Duration(DurationType type) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,103,uper(type);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,107, Creates a duration from the specified object using the
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,108, {@link org.joda.time.convert.ConverterManager ConverterManager}.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,110, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,111, @throws IllegalArgumentException if duration is invalid
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,112, @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,101,"* @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,114,ublic Duration(Object duration) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,115,"uper(duration, null);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,103,public Duration(long duration) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,104,"super(duration, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,119, Creates a duration from the specified object using the
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,120, {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,108,* Creates a duration from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,122, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,123," @param type  which set of fields this duration supports, null means use converter"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,124, @throws IllegalArgumentException if duration is invalid
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,125, @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,110,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,111,* @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,127,"ublic Duration(Object duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,128,"uper(duration, type);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,113,"public Duration(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,114,"super(duration, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,132, Create a duration from a set of field values using DayHourType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,133, This constructor creates a precise duration because
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,134, DayHourType in ISOChronology UTC is precise.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,118,* Create a duration from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,119,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,136, @param days  amount of days in this duration
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,142,"ublic Duration(int days, int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,143,"uper(0, 0, 0, days, hours, minutes, seconds, millis, DurationType.getDayHourType());"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,126,"public Duration(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,127,"super(0, 0, 0, 0, hours, minutes, seconds, millis, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,148, AllType using ISOChronology in UTC is an imprecise duration type
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,149," unless the year, month and week fields are zero."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,162,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,144,"super(years, months, weeks, days, hours, minutes, seconds, millis, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,177, @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,159,* @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,181,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,163,"super(years, months, weeks, days, hours, minutes, seconds, millis, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,192,"uper(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,174,"super(startInstant, endInstant, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,204,"uper(startInstant, endInstant, type);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,186,"super(startInstant, endInstant, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,215,"uper(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,197,"super(startInstant, endInstant, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,227,"uper(startInstant, endInstant, type);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,209,"super(startInstant, endInstant, type, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,231, Creates a duration from the given millisecond duration using MillisType.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,232, This constructor creates a precise duration because
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,233, MillisType in ISOChronology UTC is precise.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,213,* Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,214,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,235," @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,216,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,217,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,218,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,237,ublic Duration(long duration) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,238,"uper(duration, null);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,220,public Duration(Object duration) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,221,"super(duration, null, false);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,242, Creates a duration from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,243, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,225,* Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,226,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,245," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,246, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,247, @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,228,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,229,"* @param type  which set of fields this duration supports, null means use converter"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,230,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,231,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,249,"ublic Duration(long duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,250,"uper(duration, type);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,233,"public Duration(Object duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,234,"super(duration, type, false);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,239,"* Validates a duration type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,240,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,242,"* @param type  the type to check, may be null"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,243,"* @return the validated type to use, not null"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,244,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,246,protected final DurationType checkDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,247,if (type == null) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,248,return DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,250,return type;
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,262,ublic Duration withDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,262,public Duration withDurationTypeUsingTotalMillis(DurationType type) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,273,* Creates a new Duration instance with the same field values but
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,274,* different DurationType.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,276,"* @param type  the duration type to use, null means AllType"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,277,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,278,* @throws IllegalArgumentException if the new duration won't accept all of the current fields
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,280,public Duration withDurationTypeUsingFields(DurationType type) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,281,if (type == null) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,282,type = DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,284,if (type.equals(getDurationType())) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,285,return this;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,287,"return new Duration(getYears(), getMonths(), getWeeks(), getDays(),"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,288,"getHours(), getMinutes(), getSeconds(), getMillis(), type);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,292,* Creates a new Duration instance with the same total milliseconds but
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,293,* all the fields normalized to be within their standard ranges.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,295,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,296,* @throws IllegalStateException if this duration is imprecise
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,298,public Duration withFieldsNormalized() {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,299,"return new Duration(getTotalMillis(), getDurationType());"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,299," Overridden to do nothing, ensuring this class and all subclasses are immutable."
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,301,rotected final void normalize() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,76," <li>PreciseAll - as All, but years are fixed at 365 days"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,77,  and months are fixed at 30 days
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,78," <li>PreciseYearMonth - as YearMonth, but years are fixed at 365 days"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,79,  and months are fixed at 30 days
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,80," <li>PreciseYearWeek - as YearWeek, but years are fixed at 365 days"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,76,"* <li>PreciseAll - defines years as 365 days, months as 30 days, weeks as 7 days,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,77,* days as 24 hours and all the time fields
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,78,* <li>PreciseDayHour - defines days as 24 hours and all the time fields
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,79,"* <li>PreciseYearDay - defines years as 365 days, days as 24 hours and all the time fields"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,80,"* <li>PreciseYearWeek - defines years as 365 days, weeks as 7 days,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,81,* days as 24 hours and all the time fields
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,82,"* <li>PreciseYearMonth - defines years as 365 days, months as 30 days,"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,83,* days as 24 hours and all the time fields
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,99,rivate static final DurationType PRECISE_ALL_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,100,rivate static final DurationType PRECISE_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,102,private static final DurationType PRECISE_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,103,private static final DurationType PRECISE_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,105,private static final DurationType PRECISE_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,106,private static final DurationType PRECISE_ALL_TYPE;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,106,LL_TYPE = new AllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,110,RECISE_ALL_TYPE = new PreciseAllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,111,RECISE_YEAR_MONTH_TYPE = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,114,ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,115,PRECISE_DAY_HOUR_TYPE = new PreciseDayHourType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,116,PRECISE_YEAR_DAY_TYPE = new PreciseYearDayType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,118,PRECISE_YEAR_MONTH_TYPE = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,119,PRECISE_ALL_TYPE = new PreciseAllType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,124,"* When using this type, the maximum millisecond value that can be stored is"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,125,* typically limited by a 32 bit int.
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,336, Returns a precise DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,345,* Returns a precise DurationType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,347,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,348,* <li>days (fixed at 24 hours)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,349,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,350,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,351,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,352,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,353,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,355,public static DurationType getPreciseDayHourType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,356,return PRECISE_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,360,* Returns a precise DurationType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,362,* <ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,363,* <li>years (fixed at 365 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,364,* <li>days (fixed at 24 hours)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,365,* <li>hours
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,366,* <li>minutes
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,367,* <li>seconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,368,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,369,* </ul>
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,371,public static DurationType getPreciseYearDayType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,372,return PRECISE_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,376,* Returns a precise DurationType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,341, <li>weeks
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,342, <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,381,* <li>weeks (fixed at 7 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,382,* <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,354, Returns a precise DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,394,* Returns a precise DurationType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,359, <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,399,* <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,371, Returns a precise DurationType using the ISOChronology of:
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,411,* Returns a precise DurationType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,375, <li>weeks
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,376, <li>days
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,415,* <li>weeks (fixed at 7 days)
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,416,* <li>days (fixed at 24 hours)
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,657,rivate static final class MillisType extends DurationType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,697,private static class MillisType extends DurationType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,660,ublic MillisType() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,700,MillisType() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,693,ublic DayHourType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,733,DayHourType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,745,rivate static final class AllType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,785,private static class AllType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,748,ublic AllType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,788,AllType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,787,rivate static final class YearMonthType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,827,private static class YearMonthType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,790,ublic YearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,830,YearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,824,rivate static final class YearWeekType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,864,private static class YearWeekType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,827,ublic YearWeekType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,867,YearWeekType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,861,rivate static final class AverageYearMonthType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,901,private static class AverageYearMonthType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,867,ublic AverageYearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,907,AverageYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,897,rivate static final class PreciseAllType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,898,rivate static final long serialVersionUID = 43967269280186L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,938,private static class PreciseDayHourType extends DurationType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,939,private static final long serialVersionUID = 216528691637527857L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,941,protected final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,943,PreciseDayHourType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,944,iChronology = chrono;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,947,public final Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,948,return iChronology;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,951,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,952,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,955,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,956,return true;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,959,public final DurationField days() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,960,return iChronology.days();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,963,public final DurationField hours() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,964,return iChronology.hours();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,967,public final DurationField minutes() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,968,return iChronology.minutes();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,971,public final DurationField seconds() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,972,return iChronology.seconds();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,975,public final DurationField millis() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,976,return iChronology.millis();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,979,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,980,return getPreciseDayHourType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,983,public String getName() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,984,"return ""PreciseDayHourType"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,988,private static class PreciseYearDayType extends PreciseDayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,989,private static final long serialVersionUID = -2553285612358L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,901,rivate final DurationField iMonths;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,903,ublic PreciseAllType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,993,PreciseYearDayType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,906,"Months = new ScaledDurationField(chrono.days(), ""PreciseMonths"", 30);"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,996,// rely on days/weeks to be precise because only ISO UTC used
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,915,& months().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,916,& weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,924,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,925,eturn iMonths;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1012,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1013,return getPreciseYearDayType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1016,public String getName() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1017,"return ""PreciseYearDayType"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1021,private static class PreciseYearWeekType extends PreciseYearDayType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1022,private static final long serialVersionUID = -2040324323318740267L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1024,PreciseYearWeekType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1025,super(chrono);
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1028,public DurationType withChronology(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1029,return this;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1032,public boolean isPrecise() {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1033,return weeks().isPrecise()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1034,&& super.isPrecise();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,933,eturn getPreciseAllType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1042,return getPreciseYearWeekType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,937,"eturn ""PreciseAllType"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1046,"return ""PreciseYearWeekType"";"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,941,rivate static final class PreciseYearMonthType extends DayHourType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1050,private static class PreciseYearMonthType extends PreciseYearDayType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,944,rivate final DurationField iYears;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,947,ublic PreciseYearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1055,PreciseYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,949,"Years = new ScaledDurationField(chrono.days(), ""PreciseYears"", 365);"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,958,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,959,& months().isPrecise()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1065,return months().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,963,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,964,eturn iYears;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,980,rivate static final class PreciseYearWeekType extends DayHourType {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,981,rivate static final long serialVersionUID = -2040324323318740267L;
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1082,private static class PreciseAllType extends PreciseYearMonthType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1083,private static final long serialVersionUID = 43967269280186L;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,983,rivate final DurationField iYears;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,985,ublic PreciseYearWeekType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1085,PreciseAllType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,987,"Years = new ScaledDurationField(chrono.days(), ""PreciseYears"", 365);"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,995,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,996,& weeks().isPrecise()
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1094,return weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1000,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1001,eturn iYears;
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1009,eturn getPreciseYearWeekType();
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1103,return getPreciseAllType();
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1013,"eturn ""PreciseYearWeekType"";"
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1107,"return ""PreciseAllType"";"
False,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1017,rivate static final class MaskedType extends DurationType {
True,JodaTime/src/java/org/joda/time/DurationType.java,JodaTime/src/java/org/joda/time/DurationType.java,1112,private static class MaskedType extends DurationType {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,10,* are met:
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,54,package org.joda.time;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,59,* A precise immutable duration that defines and adds durations based on milliseconds.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,60,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,61,* A precise duration is one that is defined primarily by a fixed number of milliseconds.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,62,"* The fields, such as hours and seconds, are provided for convenience."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,63,* The {@link ReadableDuration#isTotalMillisBased} method will always return true.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,64,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,65,* <code>MillisDuration</code> uses any precise duration type to split the milliseconds
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,66,* into fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,67,* The {@link DurationType#getPreciseAllType() PreciseAll} type is used by default.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,68,* <code>PreciseAll</code> uses the ISO chronology and fixes
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,69,"* days at 24 hours, weeks at 7 days, months at 30 days and years at 365 days."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,70,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,71,* When a precise duration is added to an instant the millisecond value of the instant
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,72,* is added. The field values are not used. If the addition to the instant crosses a
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,73,* daylight savings boundary the effect may be unexpected.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,74,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,75,"* For example, consider a <code>MillisDuration</code> of 1 day."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,76,* This actually represents <code>24 * 60 * 60 * 1000</code> milliseconds.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,77,* When you add this to a <code>DateTime</code> just before daylight savings changes
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,78,* the result will be to add the milliseconds. Thus the result will be one hour
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,79,* different on the following day.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,80,* <pre>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,81,"* MillisDuration dur = new MillisDuration(0, 0, 0, 1, 0, 0, 0, 0); // 1 'day'"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,82,"* DateTime dt = new DateTime(2004, 3, 27, 12, 0, 0, 0); // before DST"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,83,"* DateTime result = new DateTime(dur.addTo(dt, 1)); // after DST"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,84,* // result:  2004-03-27T12:00:00 -> 2004-03-28T13:00:00
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,85,"* // note: result time is 13:00, as 1 day is always 24 hours in MillisDuration"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,86,* </pre>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,87,* If this behaviour is not what you want then you should use {@link Duration}.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,88,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,89,"* MillisDuration is thread-safe and immutable, provided that the DurationType is as well."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,90,* All standard DurationType classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,92,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,93,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,94,* @since 1.0
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,95,* @see Duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,96,* @see MutableDuration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,98,public class MillisDuration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,99,extends AbstractDuration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,100,"implements ReadableDuration, Serializable {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,102,/** Constant representing zero millisecond duration */
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,103,public static final MillisDuration ZERO = new MillisDuration(0L);
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,105,/** Serialization version */
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,106,private static final long serialVersionUID = 5727916780257544L;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,109,* Creates a duration from the given millisecond duration using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,110,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,111,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,113,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,115,public MillisDuration(long duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,116,"super(duration, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,120,* Creates a duration from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,121,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,122,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,124,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,125,"* @param type  which set of fields this duration supports, null means PreciseAllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,126,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,128,"public MillisDuration(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,129,"super(duration, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,133,* Create a duration from a set of field values using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,135,* @param hours  amount of hours in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,136,* @param minutes  amount of minutes in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,137,* @param seconds  amount of seconds in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,138,* @param millis  amount of milliseconds in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,140,"public MillisDuration(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,141,"super(0, 0, 0, 0, hours, minutes, seconds, millis, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,145,* Create a duration from a set of field values using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,147,* @param years  amount of years in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,148,* @param months  amount of months in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,149,* @param weeks  amount of weeks in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,150,* @param days  amount of days in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,151,* @param hours  amount of hours in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,152,* @param minutes  amount of minutes in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,153,* @param seconds  amount of seconds in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,154,* @param millis  amount of milliseconds in this duration
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,155,* @throws ArithmeticException if the total millis is too large for a <code>long</code>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,157,"public MillisDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,158,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,159,"super(years, months, weeks, days, hours, minutes, seconds, millis, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,163,* Create a duration from a set of field values.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,165,"* @param years  amount of years in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,166,"* @param months  amount of months in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,167,"* @param weeks  amount of weeks in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,168,"* @param days  amount of days in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,169,"* @param hours  amount of hours in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,170,"* @param minutes  amount of minutes in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,171,"* @param seconds  amount of seconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,172,"* @param millis  amount of milliseconds in this duration, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,173,"* @param type  which set of fields this duration supports, null means PreciseAllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,174,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,175,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,176,* @throws ArithmeticException if the total millis is too large for a <code>long</code>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,178,"public MillisDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,179,"int hours, int minutes, int seconds, int millis, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,180,"super(years, months, weeks, days, hours, minutes, seconds, millis, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,184,* Creates a duration from the given interval endpoints using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,185,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,186,* This constructor is a convenience for the single <code>long</code> constructor.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,187,* The start and end instant play non role in determining the field values.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,188,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,190,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,191,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,193,"public MillisDuration(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,194,"super(startInstant, endInstant, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,198,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,199,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,200,* This constructor is a convenience for the single <code>long</code> constructor.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,201,* The start and end instant play non role in determining the field values.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,202,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,204,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,205,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,206,"* @param type  which set of fields this duration supports, null means PreciseAllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,207,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,209,"public MillisDuration(long startInstant, long endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,210,"super(startInstant, endInstant, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,214,* Creates a duration from the given interval endpoints using PreciseAllType.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,215,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,216,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,218,"* @param startInstant  interval start, null means now"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,219,"* @param endInstant  interval end, null means now"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,221,"public MillisDuration(ReadableInstant startInstant, ReadableInstant endInstant) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,222,"super(startInstant, endInstant, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,226,* Creates a duration from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,227,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,228,* This constructor is a convenience for the single <code>long</code> constructor.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,229,* The start and end instant play non role in determining the field values.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,230,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,232,"* @param startInstant  interval start, null means now"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,233,"* @param endInstant  interval end, null means now"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,234,"* @param type  which set of fields this duration supports, null means PreciseAllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,235,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,237,"public MillisDuration(ReadableInstant startInstant, ReadableInstant endInstant, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,238,"super(startInstant, endInstant, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,242,* Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,243,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,244,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,245,* This constructor is a convenience for the single <code>long</code> constructor.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,246,* The start and end instant play non role in determining the field values.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,247,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,249,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,250,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,251,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,253,public MillisDuration(Object duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,254,"super(duration, null, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,258,* Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,259,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,260,* <p>
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,261,* The duration created using this constructor will always have normalized fields.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,263,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,264,"* @param type  which set of fields this duration supports, null means use converter"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,265,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,266,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,267,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,269,"public MillisDuration(Object duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,270,"super(duration, type, true);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,275,"* Validates a duration type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,276,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,278,"* @param type  the type to check, may be null"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,279,"* @return the validated type to use, not null"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,280,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,282,protected final DurationType checkDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,283,if (type == null) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,284,return DurationType.getPreciseAllType();
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,286,if (type.isPrecise() == false) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,287,"throw new IllegalArgumentException(""The duration type must be precise: "" + type);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,289,return type;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,294,* Creates a new MillisDuration instance with the same total milliseconds but
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,295,"* different DurationType, which must be precise."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,297,"* @param type  the duration type to use, null means PreciseAllType"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,298,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,299,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,301,public MillisDuration withDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,302,type = checkDurationType(type);
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,303,if (type.equals(getDurationType())) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,304,return this;
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,306,"return new MillisDuration(getTotalMillis(), type);"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,311,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,313,protected final void setDuration(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,317,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,319,"protected final void setDuration(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,320,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,324,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,326,"protected final void setTotalMillis(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,330,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,332,protected final void setTotalMillis(long duration) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,336,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,338,protected final void setYears(int years) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,342,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,344,protected final void setMonths(int months) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,348,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,350,protected final void setWeeks(int weeks) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,354,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,356,protected final void setDays(int days) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,360,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,362,protected final void setHours(int hours) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,366,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,368,protected final void setMinutes(int minutes) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,372,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,374,protected final void setSeconds(int seconds) {
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,378,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/MillisDuration.java,JodaTime/src/java/org/joda/time/MillisDuration.java,380,protected final void setMillis(int millis) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,69,ublic class MutableDuration extends AbstractDuration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,70,"mplements ReadWritableDuration, Cloneable, Serializable {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,69,public class MutableDuration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,70,extends AbstractDuration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,71,"implements ReadWritableDuration, Cloneable, Serializable {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,72,tatic final long serialVersionUID = 3436451121567212165L;
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,73,/** Serialization version */
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,74,private static final long serialVersionUID = 3436451121567212165L;
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,75, Creates a zero length millisecond duration using MillisType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,76, This constructor creates a precise duration because
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,77, MillisType in ISOChronology UTC is precise.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,77,* Creates a zero-length duration using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,80,uper((DurationType) null);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,80,"super(0L, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,84, Creates a zero length duration.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,85, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,84,* Creates a zero-length duration using the specified duration type.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,87," @param type  which set of fields this duration supports, null means millis type"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,86,* @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,90,uper(type);
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,89,"super(0L, type, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,94, Creates a duration from the specified object using the
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,95, {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,93,* Creates a zero-length duration using the specified duration type.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,94,* <p>
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,95,* This constructor enables the created object to be based on total miliseconds
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,96,* rather than the more normal fields. A total millisecond based duration
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,97,* performs all calculations using the total millis and is always precise.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,97, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,98, @throws IllegalArgumentException if duration is invalid
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,99, @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,99,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,100,* @param totalMillisBased  true if duration treats the total millis as the master field
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,101,* @throws IllegalArgumentException if the duration type is imprecise and totalMillisBased is true
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,101,ublic MutableDuration(Object duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,102,"uper(duration, null);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,103,"public MutableDuration(DurationType type, boolean totalMillisBased) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,104,"super(0L, type, totalMillisBased);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,106, Creates a duration from the specified object using the
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,107, {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,108,* Creates a duration from the given millisecond duration using AllType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,109, @param duration  duration to convert
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,110," @param type  which set of fields this duration supports, null means use converter"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,111, @throws IllegalArgumentException if duration is invalid
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,112, @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,110,"* @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,114,"ublic MutableDuration(Object duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,115,"uper(duration, type);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,112,public MutableDuration(long duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,113,"super(duration, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,119, Create a duration from a set of field values using DayHourType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,120, This constructor creates a precise duration because
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,121, DayHourType in ISOChronology UTC is precise.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,117,* Creates a duration from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,119,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,120,* @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,122,"public MutableDuration(long duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,123,"super(duration, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,127,* Create a duration from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,128,* This constructor creates a precise duration.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,123, @param days  amount of days in this duration
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,129,"ublic MutableDuration(int days, int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,130,"uper(0, 0, 0, days, hours, minutes, seconds, millis, DurationType.getDayHourType());"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,135,"public MutableDuration(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,136,"super(0, 0, 0, 0, hours, minutes, seconds, millis, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,135, AllType using ISOChronology in UTC is an imprecise duration type
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,136," unless the year, month and week fields are zero."
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,149,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,153,"super(years, months, weeks, days, hours, minutes, seconds, millis, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,164, @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,168,* @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,168,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,172,"super(years, months, weeks, days, hours, minutes, seconds, millis, type, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,179,"uper(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,183,"super(startInstant, endInstant, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,191,"uper(startInstant, endInstant, type);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,195,"super(startInstant, endInstant, type, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,202,"uper(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,206,"super(startInstant, endInstant, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,214,"uper(startInstant, endInstant, type);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,218,"super(startInstant, endInstant, type, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,218, Creates a duration from the given millisecond duration using MillisType.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,219, This constructor creates a precise duration because
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,220, MillisType in ISOChronology UTC is precise.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,222,* Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,223,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,222," @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,225,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,226,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,227,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,224,ublic MutableDuration(long duration) {
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,225,"uper(duration, null);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,229,public MutableDuration(Object duration) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,230,"super(duration, null, false);"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,229, Creates a duration from the given millisecond duration.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,230, This constructor creates a precise duration.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,234,* Creates a duration from the specified object using the
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,235,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,232," @param duration  the duration, in milliseconds"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,233, @param type  which set of fields this duration supports
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,234, @throws UnsupportedOperationException if any fields are imprecise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,237,* @param duration  duration to convert
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,238,"* @param type  which set of fields this duration supports, null means use converter"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,239,* @throws IllegalArgumentException if duration is invalid
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,240,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,236,"ublic MutableDuration(long duration, DurationType type) {"
False,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,237,"uper(duration, type);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,242,"public MutableDuration(Object duration, DurationType type) {"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,243,"super(duration, type, false);"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,248,"* Validates a duration type, converting nulls to a default value and"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,249,* checking the type is suitable for this instance.
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,251,"* @param type  the type to check, may be null"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,252,"* @return the validated type to use, not null"
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,253,* @throws IllegalArgumentException if the duration type is not precise
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,255,protected DurationType checkDurationType(DurationType type) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,256,if (type == null) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,257,if (isTotalMillisBased()) {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,258,return DurationType.getPreciseAllType();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,259,} else {
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,260,return DurationType.getAllType();
True,JodaTime/src/java/org/joda/time/MutableDuration.java,JodaTime/src/java/org/joda/time/MutableDuration.java,263,return type;
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,83,* Is this duration based on a millisecond duration and thus performs
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,84,* all calculations using the total millisecond value.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,85,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,86,* Durations operate either using the total milliseconds as the master and the
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,87,"* field values as derived, or vice versa. This method returns true if the"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,88,* total millis field is the master. The effect is to control how the duration
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,89,* manages addition over the daylight savings boundary.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,90,* <p>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,91,"* If true, {@link #isPrecise()} will always return true, {@link #getTotalMillis()}"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92,* and {@link #compareTo(Object)} methods will never throw an exception and the
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93,* add methods will add using the total milliseconds value.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94,* See {@link MillisDuration} for details.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96,* @return true if the duration is based on total milliseconds
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,98,boolean isTotalMillisBased();
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,220, Get this object as an immutable Duration. This can be useful if you
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,238,* Gets this object as an immutable Duration. This can be useful if you
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,122, Returns the millis duration type.
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,122,* Returns null to allow the caller to determine the best type.
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,125, @return the millis duration type
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,125,* @return null
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,128,eturn DurationType.getMillisType();
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,128,return null;
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,494,public void testPreciseDayHourType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,495,DurationType type = DurationType.getPreciseDayHourType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,496,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,497,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,498,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,499,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,500,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,501,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,502,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,503,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,504,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,505,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,506,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,507,"assertEquals(true, type == DurationType.getPreciseDayHourType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,508,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,509,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,510,"assertEquals(true, type.hashCode() == DurationType.getPreciseDayHourType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,511,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,512,"assertEquals(""PreciseDayHourType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,513,"assertEquals(""DurationType[PreciseDayHourType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,514,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,515,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,516,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,517,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,521,public void testPreciseYearDayType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,522,DurationType type = DurationType.getPreciseYearDayType();
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,523,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,524,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,525,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,526,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,527,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,528,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,529,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,530,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,531,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,532,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,533,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,534,"assertEquals(true, type == DurationType.getPreciseYearDayType());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,535,"assertEquals(false, type.equals(DurationType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,536,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,537,"assertEquals(true, type.hashCode() == DurationType.getPreciseYearDayType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,538,"assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,539,"assertEquals(""PreciseYearDayType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,540,"assertEquals(""DurationType[PreciseYearDayType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,541,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,542,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,543,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationType.java,JodaTime/src/test/org/joda/time/TestDurationType.java,544,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,150,uration test = new Duration();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,151,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,150,Duration test = new Duration(0L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,151,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,154,public void testGetIsTotalMillisBased() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,155,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,156,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,157,"test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,158,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,167,uration test = new Duration();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,174,Duration test = new Duration(0L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,170,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,205,"uper(value, null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,211,"super(value, null, false);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,213,protected DurationType checkDurationType(DurationType type) {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,214,return DurationType.getAllType();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,564,"ssertEquals(DurationType.getMillisType(), Duration.ZERO.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,573,"assertEquals(DurationType.getAllType(), Duration.ZERO.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,568,ublic void testWithDurationType1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,577,public void testWithDurationTypeUsingTotalMillis1() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,570,uration result = test.withDurationType(DurationType.getMillisType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,579,Duration result = test.withDurationTypeUsingTotalMillis(DurationType.getAllType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,574,ublic void testWithDurationType2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,583,public void testWithDurationTypeUsingTotalMillis2() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,576,uration result = test.withDurationType(DurationType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,585,Duration result = test.withDurationTypeUsingTotalMillis(DurationType.getDayHourType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,583,ublic void testWithDurationType3() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,592,public void testWithDurationTypeUsingTotalMillis3() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,586,est.withDurationType(DurationType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,595,test.withDurationTypeUsingTotalMillis(DurationType.getDayHourType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,591,ublic void testWithDurationType4() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,600,public void testWithDurationTypeUsingTotalMillis4() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,593,uration result = test.withDurationType(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,602,Duration result = test.withDurationTypeUsingTotalMillis(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,610,public void testWithDurationTypeUsingFields1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,611,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,612,Duration result = test.withDurationTypeUsingFields(DurationType.getAllType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,613,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,616,public void testWithDurationTypeUsingFields2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,617,Duration test = new Duration(3123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,618,Duration result = test.withDurationTypeUsingFields(DurationType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,619,"assertEquals(3, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,620,"assertEquals(123, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,621,"assertEquals(3123L, result.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,622,"assertEquals(DurationType.getDayHourType(), result.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,625,public void testWithDurationTypeUsingFields3() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,626,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,627,try {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,628,test.withDurationTypeUsingFields(DurationType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,629,fail();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,630,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,633,public void testWithDurationTypeUsingFields4() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,634,Duration test = new Duration(3123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,635,Duration result = test.withDurationTypeUsingFields(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,636,"assertEquals(3, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,637,"assertEquals(123, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,638,"assertEquals(3123L, result.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,639,"assertEquals(DurationType.getAllType(), result.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,642,public void testWithDurationTypeUsingFields5() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,643,"Duration test = new Duration(1, 2, 0, 4, 5, 6, 7, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,644,Duration result = test.withDurationTypeUsingFields(DurationType.getYearMonthType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,645,"assertEquals(DurationType.getYearMonthType(), result.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,646,"assertEquals(1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,647,"assertEquals(2, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,648,"assertEquals(0, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,649,"assertEquals(4, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,650,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,651,"assertEquals(6, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,652,"assertEquals(7, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,653,"assertEquals(8, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,657,public void testWithFieldsNormalized1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,658,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getPreciseAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,659,Duration result = test.withFieldsNormalized();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,660,"assertEquals(1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,661,"assertEquals(2, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,662,"assertEquals(3, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,663,"assertEquals(4, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,664,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,665,"assertEquals(7, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,666,"assertEquals(1, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,667,"assertEquals(8, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,670,public void testWithFieldsNormalized2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,671,"Duration test = new Duration(1, 2, 3, 4, 5, 6, 61, 8, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,672,try {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,673,test.withFieldsNormalized();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,674,fail();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,675,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,139,ublic void testConstructor1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,140,uration test = new Duration();
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,141,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,139,public void testZERO() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,140,Duration test = Duration.ZERO;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,141,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,156, Test constructor (DurationType)
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,158,ublic void testConstructor_DurationType1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,159,uration test = new Duration(DurationType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,160,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,155,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,156,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,157,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,158,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,159,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,160,Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,161,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,164,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,165,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,166,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,167,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,168,"ssertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,165,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,166,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,167,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,168,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,169,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,170,"ssertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,171,"assertEquals(length, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,173,ublic void testConstructor_DurationType2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,174,uration test = new Duration((DurationType) null);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,175,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,175,public void testConstructor_long_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,176,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,177,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,178,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,179,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,180,"Duration test = new Duration(length, null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,181,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,179,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,180,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,181,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,182,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,183,"ssertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,185,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,186,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,187,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,188,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,189,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,185,"ssertEquals(0, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,190, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,192,ublic void testConstructor_Object1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,193,"uration test = new Duration(""P1Y2M3D"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,194,"ssertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,195,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,196,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,197,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,198,"ssertEquals(3, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,199,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,200,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,201,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,202,"ssertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,203,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,204,ry {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,205,est.getTotalMillis();
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,206,ail();
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,207, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,191,"assertEquals(length, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,210,ublic void testConstructor_Object2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,211,uration test = new Duration((Object) null);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,194,public void testConstructor_long_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,195,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,196,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,197,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,198,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,199,"Duration test = new Duration(length, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,220,"ssertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,208,"assertEquals(length, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,222,"ssertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,210,"assertEquals(length, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,225,ublic void testConstructor_Object3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,226,"uration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,213,public void testConstructor_long_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,214,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,215,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,216,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,217,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,218,"Duration test = new Duration(length, DurationType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,231,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,232,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,233,"ssertEquals(2, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,234,"ssertEquals(3, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,235,"ssertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,236,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,237,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,238," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,241,ublic void testConstructor_Object4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,242,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,243,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,244,"uration base = new Duration(dt1, dt2);  // AllType and precise"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,245,uration test = new Duration(base);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,246,"ssertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,247,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,248,"ssertEquals(1, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,249,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,250,"ssertEquals(1, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,251,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,252,"ssertEquals(1, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,253,"ssertEquals(1, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,254,"ssertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,223,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,224,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,225,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,226,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,227,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,256,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,261, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,263,ublic void testConstructor_Object_DurationType1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,264,"uration test = new Duration(""P1Y2M3D"", DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,265,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,266,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,267,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,268,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,269,"ssertEquals(3, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,270,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,271,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,272,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,273,"ssertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,274,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,275,ry {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,276,est.getTotalMillis();
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,277,ail();
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,278, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,229,"assertEquals(length, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,281,ublic void testConstructor_Object_DurationType2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,282,"uration test = new Duration((Object) null, DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,283,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,232,public void testConstructor_long_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,233,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,234,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,235,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,236,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,237,"Duration test = new Duration(length, DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,238,"assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,287,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,288,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,289,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,290,"ssertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,242,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,243,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,244,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,245,"assertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,293,"ssertEquals(0, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,296,ublic void testConstructor_Object_DurationType3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,297,"uration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,298,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,299,"ssertEquals(0, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,300,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,301,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,302,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,303,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,304,"ssertEquals(2, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,305,"ssertEquals(3, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,306,"ssertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,307,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,308,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,309," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,312,ublic void testConstructor_Object_DurationType4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,313,"uration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,314,"ssertEquals(DurationType.getDayHourType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,315,"ssertEquals(0, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,316,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,317,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,318,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,319,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,320,"ssertEquals(2, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,321,"ssertEquals(3, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,322,"ssertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,323,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,324,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,325," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,248,"assertEquals(length - 8, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,330, Test constructor (5ints)
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,253,* Test constructor (4ints)
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,332,ublic void testConstructor_5int1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,333,"uration test = new Duration(4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,334,"ssertEquals(DurationType.getDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,255,public void testConstructor_4int1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,256,"Duration test = new Duration(5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,257,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,338,"ssertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,261,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,344,ssertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,267,assertEquals(
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,677,ublic void testConstructor_long1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,678,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,679, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,680, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,681, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,682,uration test = new Duration(length);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,683,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,601,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,603,public void testConstructor_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,604,"Duration test = new Duration(""P1Y2M3D"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,605,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,606,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,607,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,608,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,609,"assertEquals(3, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,610,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,611,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,612,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,613,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,614,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,615,try {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,616,test.getTotalMillis();
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,617,fail();
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,618,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,621,public void testConstructor_Object2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,622,Duration test = new Duration((Object) null);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,623,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,691,"ssertEquals(length, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,631,"assertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,693,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,633,"assertEquals(0, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,697,ublic void testConstructor_long_DurationType1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,698,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,699, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,700, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,701, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,702,"uration test = new Duration(length, null);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,703,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,636,public void testConstructor_Object3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,637,"Duration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,638,"assertEquals(DurationType.getDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,643,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,644,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,645,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,646,"assertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,647,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,648,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,649,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,652,public void testConstructor_Object4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,653,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,654,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,655,"Duration base = new Duration(dt1, dt2);  // AllType and precise"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,656,Duration test = new Duration(base);
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,657,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,658,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,659,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,660,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,661,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,662,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,663,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,664,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,665,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,666,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,667,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,672,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,674,public void testConstructor_Object_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,675,"Duration test = new Duration(""P1Y2M3D"", DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,676,"assertEquals(DurationType.getYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,677,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,678,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,679,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,680,"assertEquals(3, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,711,"ssertEquals(length, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,712,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,713,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,684,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,685,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,686,try {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,687,test.getTotalMillis();
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,688,fail();
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,689,} catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,716,ublic void testConstructor_long_DurationType2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,717,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,718, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,719, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,720, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,721,"uration test = new Duration(length, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,722,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,692,public void testConstructor_Object_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,693,"Duration test = new Duration((Object) null, DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,694,"assertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,730,"ssertEquals(length, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,702,"assertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,732,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,704,"assertEquals(0, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,735,ublic void testConstructor_long_DurationType3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,736,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,737, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,738, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,739, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,740,"uration test = new Duration(length, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,741,"ssertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,707,public void testConstructor_Object_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,708,"Duration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,709,"assertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,745,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,746,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,747,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,748,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,749,"ssertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,713,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,714,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,715,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,716,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,717,"assertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,751,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,719,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,720,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,754,ublic void testConstructor_long_DurationType4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,755,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,756, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,757, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,758, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,759,"uration test = new Duration(length, DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,760,"ssertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,723,public void testConstructor_Object_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,724,"Duration test = new Duration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,725,"assertEquals(DurationType.getDayHourType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,764,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,765,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,766,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,767,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,768,"ssertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,729,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,730,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,731,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,732,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,733,"assertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,770,"ssertEquals(length - 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,735,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,736,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,151,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,151,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,154,public void testGetIsTotalMillisBased() {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,155,MutableDuration test = new MutableDuration(123L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,156,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,157,"test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,158,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,205,"uper(value, null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,212,"super(value, null, false);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,214,protected DurationType checkDurationType(DurationType type) {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java,215,return DurationType.getAllType();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,141,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,141,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,152,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,172,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,175,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,177,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,190, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,192,ublic void testConstructor_Object1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,193,"utableDuration test = new MutableDuration(""P1Y2M3D"");"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,194,"ssertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,195,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,196,"ssertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,191,public void testConstructor_DurationType_boolean1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,192,"MutableDuration test = new MutableDuration(null, true);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,193,"assertEquals(DurationType.getPreciseAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,194,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,195,"assertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,198,"ssertEquals(3, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,197,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,203,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,204,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,205,est.getTotalMillis();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,206,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,207, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,202,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,203,"assertEquals(0L, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,204,"assertEquals(true, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,210,ublic void testConstructor_Object2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,211,utableDuration test = new MutableDuration((Object) null);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,212,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,207,public void testConstructor_DurationType_boolean2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,208,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,209,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,210,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,211,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,212,"MutableDuration test = new MutableDuration(null, false);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,213,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,222,"ssertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,223,"assertEquals(0L, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,224,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,225,ublic void testConstructor_Object3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,226,"utableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,227,"ssertEquals(DurationType.getDayHourType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,228,"ssertEquals(0, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,229,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,230,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,231,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,232,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,233,"ssertEquals(2, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,234,"ssertEquals(3, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,235,"ssertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,236,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,237,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,238," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,227,public void testConstructor_DurationType_boolean3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,228,try {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,229,"new MutableDuration(DurationType.getAllType(), true);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,230,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,231,} catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,241,ublic void testConstructor_Object4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,242,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,243,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,244,"uration base = new Duration(dt1, dt2);  // AllType and precise"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,245,utableDuration test = new MutableDuration(base);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,235,public void testConstructor_long1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,236,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,237,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,238,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,239,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,240,MutableDuration test = new MutableDuration(length);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,247,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,248,"ssertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,242,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,243,"assertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,250,"ssertEquals(1, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,251,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,252,"ssertEquals(1, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,253,"ssertEquals(1, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,254,"ssertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,245,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,246,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,247,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,248,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,249,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,256,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,251,"assertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,252,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,261, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,263,ublic void testConstructor_Object_DurationType1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,264,"utableDuration test = new MutableDuration(""P1Y2M3D"", DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,265,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,266,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,267,"ssertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,256,public void testConstructor_long_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,257,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,258,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,259,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,260,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,261,"MutableDuration test = new MutableDuration(length, null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,262,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,263,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,264,"assertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,269,"ssertEquals(3, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,270,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,271,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,272,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,273,"ssertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,274,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,275,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,276,est.getTotalMillis();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,277,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,278, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,266,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,267,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,268,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,269,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,270,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,271,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,272,"assertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,273,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,281,ublic void testConstructor_Object_DurationType2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,282,"utableDuration test = new MutableDuration((Object) null, DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,283,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,276,public void testConstructor_long_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,277,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,278,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,279,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,280,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,281,"MutableDuration test = new MutableDuration(length, DurationType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,282,"assertEquals(DurationType.getMillisType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,291,"ssertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,290,"assertEquals(length, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,293,"ssertEquals(0, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,292,"assertEquals(length, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,296,ublic void testConstructor_Object_DurationType3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,297,"utableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,298,"ssertEquals(DurationType.getYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,295,public void testConstructor_long_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,296,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,297,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,298,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,299,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,300,"MutableDuration test = new MutableDuration(length, DurationType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,301,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,302,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,303,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,304,"ssertEquals(2, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,305,"ssertEquals(3, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,306,"ssertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,305,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,306,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,307,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,308,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,309,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,308,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,309," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,311,"assertEquals(length, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,312,ublic void testConstructor_Object_DurationType4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,313,"utableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,314,"ssertEquals(DurationType.getDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,314,public void testConstructor_long_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,315,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,316,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,317,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,318,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,319,"MutableDuration test = new MutableDuration(length, DurationType.getAllType().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,320,"assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,318,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,319,"ssertEquals(1, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,320,"ssertEquals(2, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,321,"ssertEquals(3, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,322,"ssertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,324,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,325,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,326,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,327,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,328,"assertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,324,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,325," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,330,"assertEquals(length - 8, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,330, Test constructor (5ints)
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,335,* Test constructor (4ints)
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,332,ublic void testConstructor_5int1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,333,"utableDuration test = new MutableDuration(4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,334,"ssertEquals(DurationType.getDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,337,public void testConstructor_4int1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,338,"MutableDuration test = new MutableDuration(5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,339,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,338,"ssertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,343,"assertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,344,ssertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,349,assertEquals(
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,352,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,375,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,398,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,441,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,477,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,530,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,600,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,660,ublic void testConstructor_long1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,661,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,662, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,663, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,664, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,665,utableDuration test = new MutableDuration(length);
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,666,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,673,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,675,public void testConstructor_Object1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,676,"MutableDuration test = new MutableDuration(""P1Y2M3D"");"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,677,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,678,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,679,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,680,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,681,"assertEquals(3, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,682,"assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,683,"assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,684,"assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,685,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,686,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,687,try {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,688,test.getTotalMillis();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,689,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,690,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,691,"assertEquals(false, test.isTotalMillisBased());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,694,public void testConstructor_Object2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,695,MutableDuration test = new MutableDuration((Object) null);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,696,"assertEquals(DurationType.getAllType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,674,"ssertEquals(length, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,704,"assertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,676,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,706,"assertEquals(0, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,680,ublic void testConstructor_long_DurationType1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,681,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,682, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,683, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,684, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,685,"utableDuration test = new MutableDuration(length, null);"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,686,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,709,public void testConstructor_Object3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,710,"MutableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,711,"assertEquals(DurationType.getDayHourType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,716,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,717,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,718,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,719,"assertEquals(4, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,720,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,721,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,722,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,725,public void testConstructor_Object4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,726,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,727,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,728,"Duration base = new Duration(dt1, dt2);  // AllType and precise"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,729,MutableDuration test = new MutableDuration(base);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,730,"assertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,731,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,732,"assertEquals(1, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,733,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,734,"assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,735,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,736,"assertEquals(1, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,737,"assertEquals(1, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,738,"assertEquals(1, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,739,"assertEquals(true, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,740,"assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,745,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,747,public void testConstructor_Object_DurationType1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,748,"MutableDuration test = new MutableDuration(""P1Y2M3D"", DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,749,"assertEquals(DurationType.getYearMonthType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,750,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,751,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,752,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,753,"assertEquals(3, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,694,"ssertEquals(length, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,695,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,696,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,757,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,758,"assertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,759,try {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,760,test.getTotalMillis();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,761,fail();
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,762,} catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,763,"assertEquals(false, test.isTotalMillisBased());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,699,ublic void testConstructor_long_DurationType2() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,700,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,701, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,702, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,703, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,704,"utableDuration test = new MutableDuration(length, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,705,"ssertEquals(DurationType.getMillisType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,766,public void testConstructor_Object_DurationType2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,767,"MutableDuration test = new MutableDuration((Object) null, DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,768,"assertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,713,"ssertEquals(length, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,776,"assertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,715,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,778,"assertEquals(0, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,718,ublic void testConstructor_long_DurationType3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,719,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,720, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,721, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,722, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,723,"utableDuration test = new MutableDuration(length, DurationType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,724,"ssertEquals(DurationType.getAllType(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,781,public void testConstructor_Object_DurationType3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,782,"MutableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,783,"assertEquals(DurationType.getYearMonthType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,728,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,729,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,730,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,731,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,732,"ssertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,787,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,788,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,789,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,790,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,791,"assertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,734,"ssertEquals(length, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,793,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,794,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,737,ublic void testConstructor_long_DurationType4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,738,ong length = 4 * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,739, * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,740, * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,741, * DateTimeConstants.MILLIS_PER_SECOND + 8;
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,742,"utableDuration test = new MutableDuration(length, DurationType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,743,"ssertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,797,public void testConstructor_Object_DurationType4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,798,"MutableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,799,"assertEquals(DurationType.getDayHourType(), test.getDurationType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,747,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,748,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,749,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,750,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,751,"ssertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,803,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,804,"assertEquals(1, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,805,"assertEquals(2, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,806,"assertEquals(3, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,807,"assertEquals(4, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,753,"ssertEquals(length - 8, test.getTotalMillis());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,809,assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java,810,"3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,397,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,397,"MutableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,414,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,414,"MutableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,457,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,457,"MutableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,474,utableDuration test = new MutableDuration(100L);
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,474,"MutableDuration test = new MutableDuration(100L, DurationType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1018,"utableDuration test = new MutableDuration(1, 14, 0, 34, 29, 66, 67, 1008, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1018,"MutableDuration test = new MutableDuration(1, 14, 0, 36, 29, 66, 67, 1008, DurationType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1019,//   365 + 14*30 + 6 days
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1020,// extra year created from 12 months of 30 days plus 5 extra days
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1021,// 2*365 +  2*30 + 1 day
False,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1023,"ssertEquals(5, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java,1026,"assertEquals(2, test.getDays());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,172,"ssertEquals(DurationType.getMillisType(), NullConverter.INSTANCE.getDurationType(null));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,172,"assertEquals(null, NullConverter.INSTANCE.getDurationType(null));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,131,"ssertEquals(DurationType.getMillisType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(123L)));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,131,"assertEquals(DurationType.getMillisType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(123L, DurationType.getMillisType())));"

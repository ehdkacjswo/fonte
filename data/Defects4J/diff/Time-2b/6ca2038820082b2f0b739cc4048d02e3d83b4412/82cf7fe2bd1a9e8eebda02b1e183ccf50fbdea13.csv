is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,18,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,19,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,20,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,22,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,23,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,24,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,25,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,26,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,29,"* Implements the Islamic, or Hijri, calendar system using arithmetic rules."
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,30,* <p>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,31,* This calendar is a lunar calendar with a shorter year than ISO.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,32,"* Year 1 in the Islamic calendar began on July 16, 622 CE (Julian), thus"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,33,* Islamic years do not begin at the same time as Julian years. This chronology
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,34,"* is not proleptic, as it does not allow dates before the first Islamic year."
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,35,* <p>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,36,"* There are two basic forms of the Islamic calendar, the tabular and the"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,37,* observed. The observed form cannot easily be used by computers as it
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,38,* relies on human observation of the new moon.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,39,"* The tabular calendar, implemented here, is an arithmetical approximation"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,40,* of the observed form that follows relatively simple rules.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,41,* <p>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,42,* The tabular form of the calendar defines 12 months of alternately
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,43,* 30 and 29 days. The last month is extended to 30 days in a leap year.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,44,* Leap years occur according to a 30 year cycle. There are four recognised
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,45,* patterns of leap years in the 30 year cycle:
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,46,* <pre>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,47,"* Years 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 & 29 - 15-based, used by Microsoft"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,48,"* Years 2, 5, 7, 10, 13, 16, 18, 21, 24, 26 & 29 - 16-based, most commonly used"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,49,"* Years 2, 5, 8, 10, 13, 16, 19, 21, 24, 27 & 29 - Indian"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,50,"* Years 2, 5, 8, 11, 13, 16, 19, 21, 24, 27 & 30 - Habash al-Hasib"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,51,* </pre>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,52,"* You can select which pattern to use via the factory methods, or use the"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,53,* default (16-based).
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,54,* <p>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,55,* This implementation defines a day as midnight to midnight exactly as per
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,56,* the ISO chronology. This correct start of day is at sunset on the previous
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,57,"* day, however this cannot readily be modelled and has been ignored."
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,58,* <p>
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,59,* IslamicChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,61,"* @see <a href=""http://en.wikipedia.org/wiki/Islamic_calendar"">Wikipedia</a>"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,63,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,64,* @since 1.2
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,66,public final class IslamicChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,68,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,69,private static final long serialVersionUID = -3663823829888L;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,72,"* Constant value for 'Anno Hegirae', equivalent"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,73,* to the value returned for AD/CE.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,75,public static final int AH = DateTimeConstants.CE;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,77,/** A singleton era field. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,78,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AH"");"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,80,/** Leap year 15-based pattern. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,81,"public static final LeapYearPatternType LEAP_YEAR_15_BASED = new LeapYearPatternType(0, 623158436);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,82,/** Leap year 16-based pattern. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,83,"public static final LeapYearPatternType LEAP_YEAR_16_BASED = new LeapYearPatternType(1, 623191204);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,84,/** Leap year Indian pattern. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,85,"public static final LeapYearPatternType LEAP_YEAR_INDIAN = new LeapYearPatternType(2, 690562340);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,86,/** Leap year Habash al-Hasib pattern. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,87,"public static final LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB = new LeapYearPatternType(3, 153692453);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,89,/** The lowest year that can be fully supported. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,90,private static final int MIN_YEAR = -292269337;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,93,* The highest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,94,* Although calculateFirstDayOfYearMillis can go higher without
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,95,"* overflowing, the getYear method overflows when it adds the"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,96,* approximate millis at the epoch.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,98,private static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,100,/** The days in a pair of months. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,101,private static final int MONTH_PAIR_LENGTH = 59;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,103,/** The length of the long month. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,104,private static final int LONG_MONTH_LENGTH = 30;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,106,/** The length of the short month. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,107,private static final int SHORT_MONTH_LENGTH = 29;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,109,/** The length of the long month in millis. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,110,private static final long MILLIS_PER_MONTH_PAIR = 59L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,112,/** The length of the long month in millis. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,113,private static final long MILLIS_PER_MONTH = (long) (29.53056 * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,115,/** The length of the long month in millis. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,116,private static final long MILLIS_PER_LONG_MONTH = 30L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,118,/** The typical millis per year. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,119,private static final long MILLIS_PER_YEAR = (long) (354.36667 * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,121,/** The typical millis per year. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,122,private static final long MILLIS_PER_SHORT_YEAR = 354L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,124,/** The typical millis per year. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,125,private static final long MILLIS_PER_LONG_YEAR = 355L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,127,/** The millis of 0001-01-01. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,128,private static final long MILLIS_YEAR_1 = -42521587200000L;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,129,//        -42520809600000L;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,130,//    long start = 0L - 278L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,131,//    long cy = 46L * MILLIS_PER_CYCLE;  // 1381-01-01
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,132,//    long rem = 5L * MILLIS_PER_SHORT_YEAR +
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,133,//            3L * MILLIS_PER_LONG_YEAR;  // 1389-01-01
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,135,/** The length of the cycle of leap years. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,136,private static final int CYCLE = 30;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,138,/** The millis of a 30 year cycle. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,139,private static final long MILLIS_PER_CYCLE = ((19L * 354L + 11L * 355L) * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,141,/** Cache of zone to chronology arrays */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,142,private static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,144,/** Singleton instance of a UTC CopticChronology */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,145,private static final IslamicChronology INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,146,static {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,147,// init after static fields
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,148,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,151,/** The leap years to use. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,152,private final LeapYearPatternType iLeapYears;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,156,* Gets an instance of the CopticChronology.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,157,* The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,159,* @return a singleton UTC instance of the chronology
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,161,public static IslamicChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,162,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,166,* Gets an instance of the CopticChronology in the default time zone.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,168,* @return a chronology in the default time zone
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,170,public static IslamicChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,171,"return getInstance(DateTimeZone.getDefault(), LEAP_YEAR_16_BASED);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,175,* Gets an instance of the CopticChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,177,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,178,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,180,public static IslamicChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,181,"return getInstance(zone, LEAP_YEAR_16_BASED);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,185,* Gets an instance of the CopticChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,187,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,188,* @param leapYears  the type defining the leap year pattern
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,189,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,191,"public static IslamicChronology getInstance(DateTimeZone zone, LeapYearPatternType leapYears) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,192,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,193,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,195,IslamicChronology chrono;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,196,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,197,IslamicChronology[] chronos = (IslamicChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,198,if (chronos == null) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,199,chronos = new IslamicChronology[4];
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,200,"cCache.put(zone, chronos);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,202,chrono = chronos[leapYears.index];
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,203,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,204,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,205,// First create without a lower limit.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,206,"chrono = new IslamicChronology(null, null, leapYears);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,207,// Impose lower limit and make another IslamicChronology.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,208,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,209,chrono = new IslamicChronology(
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,210,"LimitChronology.getInstance(chrono, lowerLimit, null),"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,211,"null, leapYears);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,212,} else {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,213,"chrono = getInstance(DateTimeZone.UTC, leapYears);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,214,chrono = new IslamicChronology
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,215,"(ZonedChronology.getInstance(chrono, zone), null, leapYears);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,217,chronos[leapYears.index] = chrono;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,220,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,223,// Constructors and instance variables
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,226,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,228,"IslamicChronology(Chronology base, Object param, LeapYearPatternType leapYears) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,229,"super(base, param, 4);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,230,this.iLeapYears = leapYears;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,234,* Serialization singleton.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,236,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,237,Chronology base = getBase();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,238,return base == null ? getInstanceUTC() : getInstance(base.getZone());
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,243,* Gets the leap year pattern type.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,245,* @return the pattern type
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,247,public LeapYearPatternType getLeapYearPatternType() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,248,return iLeapYears;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,251,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,254,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,256,* @return the chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,258,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,259,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,263,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,265,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,266,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,268,public Chronology withZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,269,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,270,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,272,if (zone == getZone()) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,273,return this;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,275,return getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,279,int getYear(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,280,long millisIslamic = instant - MILLIS_YEAR_1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,281,long cycles = millisIslamic / MILLIS_PER_CYCLE;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,282,long cycleRemainder = millisIslamic % MILLIS_PER_CYCLE;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,284,int year = (int) ((cycles * CYCLE) + 1L);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,285,long yearMillis = (isLeapYear(year) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,286,while (cycleRemainder >= yearMillis) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,287,cycleRemainder -= yearMillis;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,288,yearMillis = (isLeapYear(++year) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,290,return year;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,293,"long setYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,294,"// optimsed implementation of set, due to fixed months"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,295,int thisYear = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,296,"int dayOfYear = getDayOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,297,int millisOfDay = getMillisOfDay(instant);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,299,if (dayOfYear > 354) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,300,"// Current year is leap, and day is leap."
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,301,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,302,"// Moving to a non-leap year, leap day doesn't exist."
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,303,dayOfYear--;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,307,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,308,instant += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,309,return instant;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,313,"long getYearDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,314,"// optimsed implementation of getDifference, due to fixed months"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,315,int minuendYear = getYear(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,316,int subtrahendYear = getYear(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,318,// Inlined remainder method to avoid duplicate calls to get.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,319,long minuendRem = minuendInstant - getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,320,long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,322,int difference = minuendYear - subtrahendYear;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,323,if (minuendRem < subtrahendRem) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,324,difference--;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,326,return difference;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,330,"long getTotalMillisByYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,331,if (--month % 2 == 1) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,332,month /= 2;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,333,return month * MILLIS_PER_MONTH_PAIR + MILLIS_PER_LONG_MONTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,334,} else {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,335,month /= 2;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,336,return month * MILLIS_PER_MONTH_PAIR;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,341,int getDayOfMonth(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,342,// optimised for simple months
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,343,int doy = getDayOfYear(millis) - 1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,344,if (doy == 354) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,345,return 30;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,347,return (doy % MONTH_PAIR_LENGTH) % LONG_MONTH_LENGTH + 1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,351,boolean isLeapYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,352,return iLeapYears.isLeapYear(year);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,356,int getDaysInYearMax() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,357,return 355;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,361,int getDaysInYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,362,return isLeapYear(year) ? 355 : 354;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,366,"int getDaysInYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,367,if (month == 12 && isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,368,return LONG_MONTH_LENGTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,370,return (--month % 2 == 0 ? LONG_MONTH_LENGTH : SHORT_MONTH_LENGTH);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,374,int getDaysInMonthMax() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,375,return LONG_MONTH_LENGTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,379,int getDaysInMonthMax(int month) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,380,if (month == 12) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,381,return LONG_MONTH_LENGTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,383,return (--month % 2 == 0 ? LONG_MONTH_LENGTH : SHORT_MONTH_LENGTH);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,387,"int getMonthOfYear(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,388,int doyZeroBased = (int) ((millis - getYearMillis(year)) / DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,389,if (doyZeroBased == 354) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,390,return 12;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,392,return ((doyZeroBased * 2) / MONTH_PAIR_LENGTH) + 1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,393,//        return (int) (doyZeroBased / 29.9f) + 1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,395,//        int monthPairZeroBased = doyZeroBased / MONTH_PAIR_LENGTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,396,//        int monthPairRemainder = doyZeroBased % MONTH_PAIR_LENGTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,397,//        return (monthPairZeroBased * 2) + 1 + (monthPairRemainder >= LONG_MONTH_LENGTH ? 1 : 0);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,401,long getAverageMillisPerYear() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,402,return MILLIS_PER_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,406,long getAverageMillisPerMonth() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,407,return MILLIS_PER_MONTH;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,411,long calculateFirstDayOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,412,if (year > MAX_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,413,"throw new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,415,if (year < MIN_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,416,"throw new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,419,// Java epoch is 1970-01-01 Gregorian which is 0622-07-16 Islamic.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,420,// 0001-01-01 Islamic is -42520809600000L
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,421,"// would prefer to calculate against year zero, but leap year"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,422,// can be in that year so it doesn't work
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,423,year--;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,424,long cycle = year / CYCLE;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,425,long millis = MILLIS_YEAR_1 + cycle * MILLIS_PER_CYCLE;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,426,int cycleRemainder = (year % CYCLE) + 1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,428,for (int i = 1; i < cycleRemainder; i++) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,429,millis += (isLeapYear(i) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,432,return millis;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,436,int getMinYear() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,437,return 1; //MIN_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,441,int getMaxYear() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,442,return MAX_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,446,long getApproxMillisAtEpoch() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,447,// Epoch 1970-01-01 ISO = 1389-10-22 Islamic
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,448,return -MILLIS_YEAR_1;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,452,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,453,if (getBase() == null) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,454,super.assemble(fields);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,456,fields.era = ERA_FIELD;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,457,"fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12);"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,458,fields.months = fields.monthOfYear.getDurationField();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,464,* Leap year patterns for the Islamic Chronology.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,466,public static class LeapYearPatternType implements Serializable {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,467,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,468,private static final long serialVersionUID = 26581275372698L;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,469,//        /** Leap year raw data encoded into bits. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,470,//        private static final int[][] LEAP_YEARS = {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,471,"//            {2, 5, 7, 10, 13, 15, 18, 21, 24, 26, 29},  // 623158436"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,472,"//            {2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29},  // 623191204"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,473,"//            {2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29},  // 690562340"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,474,"//            {0, 2, 5, 8, 11, 13, 16, 19, 21, 24, 27},   // 153692453"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,477,/** The index. */
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,478,final byte index;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,479,"/** The leap year pattern, a bit-based 1=true pattern. */"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,480,final int pattern;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,483,* Constructor.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,484,* This constructor takes a bit pattern where bits 0-29 correspond
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,485,* to years 0-29 in the 30 year Islamic cycle of years. This allows
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,486,* a highly efficient lookup by bit-matching.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,488,* @param index  the index
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,489,* @param pattern  the bit pattern
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,491,"protected LeapYearPatternType(int index, int pattern) {"
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,492,super();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,493,this.index = (byte) index;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,494,this.pattern = pattern;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,498,* Is the year a leap year.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,499,* @param year  the year to query
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,500,* @return true if leap
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,502,public boolean isLeapYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,503,int key = 1 << (year % 30);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,504,return ((pattern & key) > 0);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,508,* Ensure a singleton is returned if possible.
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,509,* @return the singleton instance
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,511,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,512,switch (index) {
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,513,case 0:
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,514,return LEAP_YEAR_15_BASED;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,515,case 1:
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,516,return LEAP_YEAR_16_BASED;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,517,case 2:
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,518,return LEAP_YEAR_INDIAN;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,519,case 3:
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,520,return LEAP_YEAR_HABASH_AL_HASIB;
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,521,default:
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,522,return this;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,46,suite.addTest(TestIslamicChronology.suite());
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,19,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,21,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,22,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,24,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,25,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,26,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,27,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,28,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,29,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,30,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,31,import org.joda.time.DateTime.Property;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,34,* This class is a Junit unit test for IslamicChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,36,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,38,public class TestIslamicChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,40,private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,42,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,43,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,44,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,45,private static final Chronology ISLAMIC_UTC = IslamicChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,46,private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,47,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,49,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,50,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,51,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,52,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,53,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,54,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,55,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,57,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,58,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,59,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,61,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,62,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,65,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,66,SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,67,return new TestSuite(TestIslamicChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,70,public TestIslamicChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,71,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,74,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,75,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,76,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,77,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,78,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,79,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,80,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,81,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,84,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,85,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,86,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,87,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,88,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,89,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,90,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,91,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,95,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,96,"assertEquals(DateTimeZone.UTC, IslamicChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,97,"assertSame(IslamicChronology.class, IslamicChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,100,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,101,"assertEquals(LONDON, IslamicChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,102,"assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,105,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,106,"assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,107,"assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,108,"assertEquals(LONDON, IslamicChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,109,"assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,113,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,114,"assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,115,"assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,116,"assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,117,"assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,118,"assertSame(IslamicChronology.getInstance(), IslamicChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,121,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,122,"assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,123,"assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,124,"assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,125,"assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,128,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,129,"assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,130,"assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,131,"assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,132,"assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,133,"assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,134,"assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,137,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,138,"assertEquals(""IslamicChronology[Europe/London]"", IslamicChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,139,"assertEquals(""IslamicChronology[Asia/Tokyo]"", IslamicChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,140,"assertEquals(""IslamicChronology[Europe/London]"", IslamicChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,141,"assertEquals(""IslamicChronology[UTC]"", IslamicChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,145,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,146,"assertEquals(""eras"", IslamicChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,147,"assertEquals(""centuries"", IslamicChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,148,"assertEquals(""years"", IslamicChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,149,"assertEquals(""weekyears"", IslamicChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,150,"assertEquals(""months"", IslamicChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,151,"assertEquals(""weeks"", IslamicChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,152,"assertEquals(""days"", IslamicChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,153,"assertEquals(""halfdays"", IslamicChronology.getInstance().halfdays().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,154,"assertEquals(""hours"", IslamicChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,155,"assertEquals(""minutes"", IslamicChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,156,"assertEquals(""seconds"", IslamicChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,157,"assertEquals(""millis"", IslamicChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,159,"assertEquals(false, IslamicChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,160,"assertEquals(true, IslamicChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,161,"assertEquals(true, IslamicChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,162,"assertEquals(true, IslamicChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,163,"assertEquals(true, IslamicChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,164,"assertEquals(true, IslamicChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,165,"assertEquals(true, IslamicChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,166,"assertEquals(true, IslamicChronology.getInstance().halfdays().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,167,"assertEquals(true, IslamicChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,168,"assertEquals(true, IslamicChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,169,"assertEquals(true, IslamicChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,170,"assertEquals(true, IslamicChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,172,"assertEquals(false, IslamicChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,173,"assertEquals(false, IslamicChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,174,"assertEquals(false, IslamicChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,175,"assertEquals(false, IslamicChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,176,"assertEquals(false, IslamicChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,177,"assertEquals(false, IslamicChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,178,"assertEquals(false, IslamicChronology.getInstance().halfdays().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,179,"assertEquals(true, IslamicChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,180,"assertEquals(true, IslamicChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,181,"assertEquals(true, IslamicChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,182,"assertEquals(true, IslamicChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,184,"assertEquals(false, IslamicChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,185,"assertEquals(false, IslamicChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,186,"assertEquals(false, IslamicChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,187,"assertEquals(false, IslamicChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,188,"assertEquals(true, IslamicChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,189,"assertEquals(true, IslamicChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,190,"assertEquals(true, IslamicChronology.getInstanceUTC().halfdays().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,191,"assertEquals(true, IslamicChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,192,"assertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,193,"assertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,194,"assertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,197,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,198,"assertEquals(""era"", IslamicChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,199,"assertEquals(""centuryOfEra"", IslamicChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,200,"assertEquals(""yearOfCentury"", IslamicChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,201,"assertEquals(""yearOfEra"", IslamicChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,202,"assertEquals(""year"", IslamicChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,203,"assertEquals(""monthOfYear"", IslamicChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,204,"assertEquals(""weekyearOfCentury"", IslamicChronology.getInstance().weekyearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,205,"assertEquals(""weekyear"", IslamicChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,206,"assertEquals(""weekOfWeekyear"", IslamicChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,207,"assertEquals(""dayOfYear"", IslamicChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,208,"assertEquals(""dayOfMonth"", IslamicChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,209,"assertEquals(""dayOfWeek"", IslamicChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,211,"assertEquals(true, IslamicChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,212,"assertEquals(true, IslamicChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,213,"assertEquals(true, IslamicChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,214,"assertEquals(true, IslamicChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,215,"assertEquals(true, IslamicChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,216,"assertEquals(true, IslamicChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,217,"assertEquals(true, IslamicChronology.getInstance().weekyearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,218,"assertEquals(true, IslamicChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,219,"assertEquals(true, IslamicChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,220,"assertEquals(true, IslamicChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,221,"assertEquals(true, IslamicChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,222,"assertEquals(true, IslamicChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,225,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,226,"assertEquals(""halfdayOfDay"", IslamicChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,227,"assertEquals(""clockhourOfHalfday"", IslamicChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,228,"assertEquals(""hourOfHalfday"", IslamicChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,229,"assertEquals(""clockhourOfDay"", IslamicChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,230,"assertEquals(""hourOfDay"", IslamicChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,231,"assertEquals(""minuteOfDay"", IslamicChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,232,"assertEquals(""minuteOfHour"", IslamicChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,233,"assertEquals(""secondOfDay"", IslamicChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,234,"assertEquals(""secondOfMinute"", IslamicChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,235,"assertEquals(""millisOfDay"", IslamicChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,236,"assertEquals(""millisOfSecond"", IslamicChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,238,"assertEquals(true, IslamicChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,239,"assertEquals(true, IslamicChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,240,"assertEquals(true, IslamicChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,241,"assertEquals(true, IslamicChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,242,"assertEquals(true, IslamicChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,243,"assertEquals(true, IslamicChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,244,"assertEquals(true, IslamicChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,245,"assertEquals(true, IslamicChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,246,"assertEquals(true, IslamicChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,247,"assertEquals(true, IslamicChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,248,"assertEquals(true, IslamicChronology.getInstance().millisOfSecond().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,252,public void testEpoch() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,253,"DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,254,"DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,255,"assertEquals(expectedEpoch.getMillis(), epoch.getMillis());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,258,public void testEra() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,259,"assertEquals(1, IslamicChronology.AH);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,260,try {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,261,"new DateTime(-1, 13, 5, 0, 0, 0, 0, ISLAMIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,262,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,263,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,267,public void testFieldConstructor() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,268,"DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,269,"DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,270,"assertEquals(expectedDate.getMillis(), date.getMillis());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,275,"* Tests era, year, monthOfYear, dayOfMonth and dayOfWeek."
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,277,public void testCalendar() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,278,if (TestAll.FAST) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,279,return;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,281,"System.out.println(""\nTestIslamicChronology.testCalendar"");"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,282,"DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,283,long millis = epoch.getMillis();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,284,"long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,285,DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,286,DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,287,DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,288,DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,289,DateTimeField year = ISLAMIC_UTC.year();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,290,DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,291,DateTimeField era = ISLAMIC_UTC.era();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,292,"int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,293,int expectedDOY = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,294,int expectedDay = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,295,int expectedMonth = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,296,int expectedYear = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,297,while (millis < end) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,298,int dowValue = dayOfWeek.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,299,int doyValue = dayOfYear.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,300,int dayValue = dayOfMonth.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,301,int monthValue = monthOfYear.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,302,int yearValue = year.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,303,int yearOfEraValue = yearOfEra.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,304,int dayOfYearLen = dayOfYear.getMaximumValue(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,305,int monthLen = dayOfMonth.getMaximumValue(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,306,if (monthValue < 1 || monthValue > 12) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,307,"fail(""Bad month: "" + millis);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,310,// test era
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,311,"assertEquals(1, era.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,312,"assertEquals(""AH"", era.getAsText(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,313,"assertEquals(""AH"", era.getAsShortText(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,315,// test date
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,316,"assertEquals(expectedDOY, doyValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,317,"assertEquals(expectedMonth, monthValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,318,"assertEquals(expectedDay, dayValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,319,"assertEquals(expectedDOW, dowValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,320,"assertEquals(expectedYear, yearValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,321,"assertEquals(expectedYear, yearOfEraValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,323,// test leap year
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,324,boolean leap = ((11 * yearValue + 14) % 30) < 11;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,325,"assertEquals(leap, year.isLeap(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,327,// test month length
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,328,switch (monthValue) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,329,case 1:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,330,case 3:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,331,case 5:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,332,case 7:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,333,case 9:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,334,case 11:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,335,"assertEquals(30, monthLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,336,break;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,337,case 2:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,338,case 4:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,339,case 6:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,340,case 8:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,341,case 10:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,342,"assertEquals(29, monthLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,343,break;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,344,case 12:
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,345,"assertEquals((leap ? 30 : 29), monthLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,346,break;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,349,// test year length
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,350,"assertEquals((leap ? 355 : 354), dayOfYearLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,352,// recalculate date
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,353,expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,354,expectedDay++;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,355,expectedDOY++;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,356,if (expectedDay > monthLen) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,357,expectedDay = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,358,expectedMonth++;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,359,if (expectedMonth == 13) {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,360,expectedMonth = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,361,expectedDOY = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,362,expectedYear++;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,365,millis += SKIP;
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,369,public void testSampleDate1() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,370,"DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,371,dt = dt.withChronology(ISLAMIC_UTC);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,372,"assertEquals(IslamicChronology.AH, dt.getEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,373,"assertEquals(14, dt.getCenturyOfEra());  // TODO confirm"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,374,"assertEquals(64, dt.getYearOfCentury());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,375,"assertEquals(1364, dt.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,377,"assertEquals(1364, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,378,Property fld = dt.year();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,379,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,380,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,381,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,382,"assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,384,"assertEquals(12, dt.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,385,fld = dt.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,386,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,387,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,388,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,389,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,390,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,391,"assertEquals(12, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,392,"assertEquals(12, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,393,"assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,394,"assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,396,"assertEquals(6, dt.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,397,fld = dt.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,398,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,399,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,400,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,401,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,402,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,403,"assertEquals(29, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,404,"assertEquals(30, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,405,"assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,407,"assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,408,fld = dt.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,409,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,410,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,411,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,412,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,413,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,414,"assertEquals(7, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,415,"assertEquals(7, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,416,"assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,418,"assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,419,fld = dt.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,420,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,421,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,422,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,423,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,424,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,425,"assertEquals(354, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,426,"assertEquals(355, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,427,"assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,429,"assertEquals(0, dt.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,430,"assertEquals(0, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,431,"assertEquals(0, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,432,"assertEquals(0, dt.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,435,public void testSampleDate2() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,436,"DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,437,dt = dt.withChronology(ISLAMIC_UTC);
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,438,"assertEquals(IslamicChronology.AH, dt.getEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,439,"assertEquals(15, dt.getCenturyOfEra());  // TODO confirm"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,440,"assertEquals(26, dt.getYearOfCentury());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,441,"assertEquals(1426, dt.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,443,"assertEquals(1426, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,444,Property fld = dt.year();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,445,"assertEquals(true, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,446,"assertEquals(1, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,447,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,449,"assertEquals(10, dt.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,450,fld = dt.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,451,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,452,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,453,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,454,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,455,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,456,"assertEquals(12, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,457,"assertEquals(12, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,459,"assertEquals(24, dt.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,460,fld = dt.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,461,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,462,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,463,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,464,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,465,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,466,"assertEquals(29, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,467,"assertEquals(30, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,469,"assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,470,fld = dt.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,471,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,472,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,473,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,474,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,475,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,476,"assertEquals(7, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,477,"assertEquals(7, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,479,"assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,480,fld = dt.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,481,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,482,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,483,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,484,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,485,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,486,"assertEquals(355, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,487,"assertEquals(355, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,489,"assertEquals(0, dt.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,490,"assertEquals(0, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,491,"assertEquals(0, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,492,"assertEquals(0, dt.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,495,public void testSampleDate3() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,496,"DateTime dt = new DateTime(1426, 12, 24, 0, 0, 0, 0, ISLAMIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,497,"assertEquals(IslamicChronology.AH, dt.getEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,499,"assertEquals(1426, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,500,Property fld = dt.year();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,501,"assertEquals(true, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,502,"assertEquals(1, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,503,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,505,"assertEquals(12, dt.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,506,fld = dt.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,507,"assertEquals(true, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,508,"assertEquals(1, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,509,"assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,510,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,511,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,512,"assertEquals(12, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,513,"assertEquals(12, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,515,"assertEquals(24, dt.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,516,fld = dt.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,517,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,518,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,519,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,520,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,521,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,522,"assertEquals(30, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,523,"assertEquals(30, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,525,"assertEquals(DateTimeConstants.TUESDAY, dt.getDayOfWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,526,fld = dt.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,527,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,528,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,529,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,530,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,531,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,532,"assertEquals(7, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,533,"assertEquals(7, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,535,"assertEquals(6 * 30 + 5 * 29 + 24, dt.getDayOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,536,fld = dt.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,537,"assertEquals(false, fld.isLeap());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,538,"assertEquals(0, fld.getLeapAmount());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,539,"assertEquals(null, fld.getLeapDurationField());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,540,"assertEquals(1, fld.getMinimumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,541,"assertEquals(1, fld.getMinimumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,542,"assertEquals(355, fld.getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,543,"assertEquals(355, fld.getMaximumValueOverall());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,545,"assertEquals(0, dt.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,546,"assertEquals(0, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,547,"assertEquals(0, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,548,"assertEquals(0, dt.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,551,public void testSampleDateWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,552,"DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,553,"assertEquals(IslamicChronology.AH, dt.getEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,554,"assertEquals(1426, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,555,"assertEquals(10, dt.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,556,"assertEquals(24, dt.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,557,"assertEquals(11, dt.getHourOfDay());  // PARIS is UTC+1 in summer (12-1=11)"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,558,"assertEquals(0, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,559,"assertEquals(0, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,560,"assertEquals(0, dt.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,563,public void test15BasedLeapYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,564,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,565,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,566,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(3));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,567,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,568,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(5));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,569,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(6));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,570,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(7));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,571,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(8));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,572,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(9));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,573,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(10));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,574,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(11));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,575,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(12));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,576,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(13));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,577,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(14));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,578,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(15));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,579,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(16));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,580,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(17));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,581,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(18));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,582,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(19));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,583,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(20));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,584,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(21));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,585,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,586,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(23));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,587,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(24));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,588,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(25));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,589,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(26));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,590,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(27));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,591,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(28));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,592,"assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(29));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,593,"assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(30));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,596,public void test16BasedLeapYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,597,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,598,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,599,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(3));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,600,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,601,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(5));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,602,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(6));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,603,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(7));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,604,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(8));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,605,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(9));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,606,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(10));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,607,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(11));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,608,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(12));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,609,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(13));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,610,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(14));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,611,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(15));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,612,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(16));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,613,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(17));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,614,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(18));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,615,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(19));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,616,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(20));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,617,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(21));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,618,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,619,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(23));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,620,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(24));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,621,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(25));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,622,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(26));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,623,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(27));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,624,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(28));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,625,"assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(29));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,626,"assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(30));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,629,public void testIndianBasedLeapYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,630,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,631,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,632,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(3));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,633,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,634,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(5));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,635,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(6));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,636,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(7));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,637,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(8));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,638,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(9));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,639,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(10));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,640,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(11));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,641,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(12));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,642,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(13));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,643,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(14));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,644,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(15));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,645,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(16));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,646,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(17));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,647,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(18));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,648,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(19));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,649,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(20));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,650,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(21));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,651,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,652,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(23));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,653,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(24));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,654,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(25));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,655,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(26));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,656,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(27));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,657,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(28));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,658,"assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(29));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,659,"assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(30));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,662,public void testHabashAlHasibBasedLeapYear() {
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,663,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(1));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,664,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(2));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,665,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(3));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,666,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(4));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,667,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(5));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,668,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(6));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,669,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(7));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,670,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(8));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,671,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(9));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,672,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(10));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,673,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(11));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,674,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(12));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,675,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(13));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,676,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(14));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,677,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(15));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,678,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(16));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,679,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(17));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,680,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(18));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,681,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(19));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,682,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(20));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,683,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(21));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,684,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,685,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(23));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,686,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(24));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,687,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(25));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,688,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(26));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,689,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(27));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,690,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(28));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,691,"assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(29));"
True,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java,692,"assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(30));"

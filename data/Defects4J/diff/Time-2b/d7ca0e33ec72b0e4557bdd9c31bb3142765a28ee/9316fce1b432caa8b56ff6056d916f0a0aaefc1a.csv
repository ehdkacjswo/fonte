is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/JodaTimePermission.java,JodaTime/src/java/org/joda/time/JodaTimePermission.java,71,*   .alterPartialConverters     Allows a partial converter to be added or removed
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,216,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,217,"* The chronology used will be derived from the object, defaulting to ISO."
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,221,uper(instant);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,223,"super(instant, null);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,237,* The specified chronology overrides that of the object.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,237," @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,240,"* @param chronology  the chronology, null means ISO default"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,241,"uper(instant, chronology);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,244,"super(instant, DateTimeUtils.getChronology(chronology));"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,175,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,176,"* The chronology used will be derived from the object, defaulting to ISO."
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,180,uper(instant);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,182,"super(instant, null);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,196,* The specified chronology overrides that of the object.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,196," @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,199,"* @param chronology  the chronology, null means ISO default"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,200,"uper(instant, chronology);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,203,"super(instant, DateTimeUtils.getChronology(chronology));"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,65,mport org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,65,import org.joda.time.convert.PartialConverter;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,152, Constructs a partial from an Object that represents a time.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,153, <p>
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,154, The recognised object types are defined in
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,155, {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,156," include ReadableInstant, String, Calendar and Date."
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,158," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,159, @throws IllegalArgumentException if the date is null
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,161,rotected BasePartial(Object instant) {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,162,uper();
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,163,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,164,ong millis = converter.getInstantMillis(instant);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,165,hronology chronology = converter.getChronology(instant);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,166,hronology = DateTimeUtils.getChronology(chronology);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,167,Chronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,168,"Values = chronology.get(this, millis);"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,183," @param instant  the datetime object, must not be null"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,184," @param chronology  the chronology, null means ISOChronology"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,185, @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,163,"* @param instant  the datetime object, null means use converter"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,164,"* @param chronology  the chronology, null means use converter"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,165,* @throws IllegalArgumentException if the date is invalid
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,189,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,190,"ong millis = converter.getInstantMillis(instant, chronology);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,169,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,194,"Values = chronology.get(this, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,173,"iValues = converter.getPartialValues(this, instant, chronology);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,187,* @throws IllegalArgumentException if the values are invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,59,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,169,* Extracts the values of the partial from an object of this converter's type.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,170,"* The chrono parameter is a hint to the converter, should it require a"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,171,* chronology to aid in conversion.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,173,* @param fieldSource  a partial that provides access to the fields.
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,174,*  This partial may be incomplete and only getFieldType(int) should be used
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,175,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,176,"* @param chrono  the chronology to use, which is the non-null result of getChronology()"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,177,* @return the array of field values that match the
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,178,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,180,"public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,181,"long instant = getInstantMillis(object, chrono);"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,182,"return chrono.get(fieldSource, instant);"
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,68, CalendarConverter converts a java util Calendar to milliseconds in the
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,69, chronology that best matches the calendar.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,68,* CalendarConverter converts a java util Calendar to an instant or partial.
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,69,* The Calendar is converted to milliseconds and the chronology that best
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,70,* matches the calendar.
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,74,inal class CalendarConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,75,final class CalendarConverter extends AbstractConverter
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,76,"implements InstantConverter, PartialConverter {"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,80,* The default partial converters are:
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,81,* <ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,82,* <li>ReadablePartial
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,83,* <li>ReadableInstant
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,84,* <li>String
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,85,* <li>Calendar
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,86,* <li>Date
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,87,* <li>Long (milliseconds)
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,88,* <li>null (now)
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,89,* </ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,134,private ConverterSet iPartialConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,154,iPartialConverters = new ConverterSet(new Converter[] {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,155,"ReadableInstantConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,156,"StringConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,157,"CalendarConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,158,"DateConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,159,"LongConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,160,"NullConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,275,* Gets the best converter for the object specified.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,277,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,278,* @return the converter to use
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,279,* @throws IllegalArgumentException if no suitable converter
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,280,* @throws IllegalStateException if multiple converters match the type
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,281,* equally well
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,283,public PartialConverter getPartialConverter(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,284,PartialConverter converter =
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,285,(PartialConverter)iPartialConverters.select(object == null ? null : object.getClass());
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,286,if (converter != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,287,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,289,"throw new IllegalArgumentException(""No partial converter found for type: "" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,290,"(object == null ? ""null"" : object.getClass().getName()));"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,295,* Gets a copy of the set of converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,297,"* @return the converters, a copy of the real data, never null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,299,public PartialConverter[] getPartialConverters() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,300,ConverterSet set = iPartialConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,301,PartialConverter[] converters = new PartialConverter[set.size()];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,302,set.copyInto(converters);
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,303,return converters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,307,* Adds a converter to the set of converters. If a matching converter is
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,308,"* already in the set, the given converter replaces it. If the converter is"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,309,"* exactly the same as one already in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,310,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,311,* The order in which converters are added is not relevent. The best
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,312,* converter is selected by examining the object hierarchy.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,314,"* @param converter  the converter to add, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,315,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,317,public PartialConverter addPartialConverter(PartialConverter converter)
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,318,throws SecurityException {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,320,checkAlterPartialConverters();
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,321,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,322,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,324,PartialConverter[] removed = new PartialConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,325,"iPartialConverters = iPartialConverters.add(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,326,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,330,* Removes a converter from the set of converters. If the converter was
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,331,"* not in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,333,"* @param converter  the converter to remove, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,334,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,336,public PartialConverter removePartialConverter(PartialConverter converter)
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,337,throws SecurityException {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,339,checkAlterPartialConverters();
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,340,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,341,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,343,PartialConverter[] removed = new PartialConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,344,"iPartialConverters = iPartialConverters.remove(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,345,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,349,* Checks whether the user has permission 'ConverterManager.alterPartialConverters'.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,351,* @throws SecurityException if the user does not have the permission
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,353,private void checkAlterPartialConverters() throws SecurityException {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,354,SecurityManager sm = System.getSecurityManager();
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,355,if (sm != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,356,"sm.checkPermission(new JodaTimePermission(""ConverterManager.alterPartialConverters""));"
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,328, Checks whether the user has permission 'ConverterManager.alterInstantConverters'.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,436,* Checks whether the user has permission 'ConverterManager.alterDurationConverters'.
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,415, Checks whether the user has permission 'ConverterManager.alterInstantConverters'.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,523,* Checks whether the user has permission 'ConverterManager.alterPeriodConverters'.
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,502, Checks whether the user has permission 'ConverterManager.alterInstantConverters'.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,610,* Checks whether the user has permission 'ConverterManager.alterIntervalConverters'.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,628,"iPartialConverters.size() + "" partial,"" +"
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,59, DateConverter converts a java util Date to milliseconds in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,59,* DateConverter converts a java util Date to an instant or partial.
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,60,* The Date is converted to milliseconds in the ISO chronology.
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,64,inal class DateConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,65,final class DateConverter extends AbstractConverter
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,66,"implements InstantConverter, PartialConverter {"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,70," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,70,* @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,81," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,81,* @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,93," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,94," @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,93,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,94,"* @param chrono  the chronology to use, null usually means ISO"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,104," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,104,* @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,114," @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,114,* @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,125," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,126," @param chrono  the chronology to use, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,125,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,126,"* @param chrono  the chronology to use, null usually means ISO"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,57, LongConverter converts a Long to milliseconds in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,57,"* LongConverter converts a Long to an instant, partial or duration."
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,58,* The Long value represents milliseconds in the ISO chronology.
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,63,"lass LongConverter extends AbstractConverter implements InstantConverter, DurationConverter {"
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,64,class LongConverter extends AbstractConverter
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,65,"implements InstantConverter, PartialConverter, DurationConverter {"
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,63, NullConverter converts null to milliseconds (now) in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,63,"* NullConverter converts null to an instant, partial, duration, period"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,64,"* or interval. Null means now for instant/partial, zero for duration/period"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,65,* and from now to now for interval.
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,70,"mplements InstantConverter, DurationConverter, PeriodConverter, IntervalConverter {"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,72,"implements InstantConverter, PartialConverter, DurationConverter, PeriodConverter, IntervalConverter {"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,57,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,60,* PartialConverter defines how an object is converted to a ReadablePartial.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,61,* <p>
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,62,"* The two methods in this interface must be called in order, as the"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,63,* <code>getPartialValues</code> method relies on the result of the
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,64,* <code>getChronology</code> method being passed in.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,66,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,67,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,69,public interface PartialConverter extends Converter {
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,72,* Extracts the chronology from an object of this converter's type
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,73,* where the chronology is specified.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,75,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,76,"* @param chrono  the chronology to use, null usually means ISO"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,77,"* @return the chronology, not converted to UTC/local time zone, must be non-null valid"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,78,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,80,"Chronology getChronology(Object object, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,83,* Extracts the values of the partial from an object of this converter's type.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,84,"* The chrono parameter is a hint to the converter, should it require a"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,85,* chronology to aid in conversion.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,87,* @param fieldSource  a partial that provides access to the fields.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,88,*  This partial may be incomplete and only getFieldType(int) should be used
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,89,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,90,"* @param chrono  the chronology to use, which is the non-null result of getChronology()"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,91,"* @return the array of field values that match the fieldSource, must be non-null valid"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,92,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,94,"int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,67,lass ReadableInstantConverter extends AbstractConverter implements InstantConverter {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,67,class ReadableInstantConverter extends AbstractConverter
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,68,"implements InstantConverter, PartialConverter {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71, StringConverter converts a String to milliseconds in the ISOChronology.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71,"* StringConverter converts from a String to an instant, partial,"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,72,"* duration, period or interval.."
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,78,"mplements InstantConverter, DurationConverter, PeriodConverter, IntervalConverter {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,79,"implements InstantConverter, PartialConverter, DurationConverter, PeriodConverter, IntervalConverter {"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,63,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,64,mport org.joda.time.convert.MockZeroNullIntegerConverter;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,297, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,299,ublic void testConstructor_badconverterObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,300,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,301,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,302,imeOfDay test = new TimeOfDay(new Integer(0));
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,303,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,304,"ssertEquals(0 + OFFSET, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,305,"ssertEquals(0, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,306,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,307,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,308, finally {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,309,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,365, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,367,ublic void testConstructor_badconverterObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,368,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,369,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,370,"imeOfDay test = new TimeOfDay(new Integer(0), JulianChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,371,"ssertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,372,"ssertEquals(0 + OFFSET, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,373,"ssertEquals(0, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,374,"ssertEquals(0, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,375,"ssertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,376, finally {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,377,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,61,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,62,mport org.joda.time.convert.MockZeroNullIntegerConverter;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,233, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,235,ublic void testConstructor_badconverterObject() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,236,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,237,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,238,earMonthDay test = new YearMonthDay(new Integer(0));
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,239,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,240,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,241,"ssertEquals(1, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,242,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,243, finally {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,244,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,295, Test constructor (Object=null)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,297,ublic void testConstructor_badconverterObject_Chronology() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,298,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,299,onverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,300,"earMonthDay test = new YearMonthDay(new Integer(0), GREGORIAN_PARIS);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,301,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,302,"ssertEquals(1970, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,303,"ssertEquals(1, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,304,"ssertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,305, finally {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,306,onverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,792,"ssertEquals(""ConverterManager[6 instant,5 duration,5 period,3 interval]"", ConverterManager.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,792,"assertEquals(""ConverterManager[6 instant,6 partial,5 duration,5 period,3 interval]"", ConverterManager.getInstance().toString());"

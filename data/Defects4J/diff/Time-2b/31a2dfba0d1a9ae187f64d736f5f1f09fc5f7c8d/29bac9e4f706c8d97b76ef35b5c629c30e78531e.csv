is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,159,eturn value * getUnitMillis();
True,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,159,return value * getUnitMillis();  // safe
False,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,171,eturn value * getUnitMillis();
True,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,171,"return FieldUtils.safeMultiply(value, getUnitMillis());"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,110,* Subtracts two values throwing an exception if overflow occurs.
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,112,"* @param val1  the first value, to be taken away from"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,113,"* @param val2  the second value, the amount to take away"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,114,* @return the new total
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,116,"public static long safeSubtract(long val1, long val2) {"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,117,if (val2 == Long.MIN_VALUE) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,118,if (val1 <= 0L) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,119,return (val1 - val2);
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,121,"throw new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" - "" + val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,123,"return safeAdd(val1, -val2);"
False,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,162,"eturn FieldUtils.safeToInt(FieldUtils.safeAdd(minuendInstant, -subtrahendInstant));"
True,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,162,"return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));"
False,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,166,"eturn FieldUtils.safeAdd(minuendInstant, -subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,166,"return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,114,eturn duration / iUnitMillis;
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,114,return duration / iUnitMillis;  // safe
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,126,eturn value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,126,return value * iUnitMillis;  // safe
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,138,eturn value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,138,"return FieldUtils.safeMultiply(value, iUnitMillis);"
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,142,eturn instant + value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,142,long addition = value * iUnitMillis;  // safe
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,143,"return FieldUtils.safeAdd(instant, addition);"
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,146,eturn instant + value * iUnitMillis;
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,147,"long addition = FieldUtils.safeMultiply(value, iUnitMillis);"
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,148,"return FieldUtils.safeAdd(instant, addition);"
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,150,eturn (minuendInstant - subtrahendInstant) / iUnitMillis;
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,152,"long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,153,return difference / iUnitMillis;
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,166,eturn (iUnitMillis == other.iUnitMillis);
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,169,return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);
False,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,178,eturn (int) (millis ^ (millis >>> 32));
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,181,int hash = (int) (millis ^ (millis >>> 32));
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,182,hash += getType().hashCode();
True,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,JodaTime/src/java/org/joda/time/field/PreciseDurationField.java,183,return hash;
False,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,108,eturn getWrappedField().getMillis(value * iScalar);
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,108,long scaled = ((long) value) * ((long) iScalar);
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,109,return getWrappedField().getMillis(scaled);
False,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,112,eturn getWrappedField().getMillis(value * iScalar);
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,113,"long scaled = FieldUtils.safeMultiply(value, iScalar);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,114,return getWrappedField().getMillis(scaled);
False,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,116,"eturn getWrappedField().getMillis(value * iScalar, instant);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,118,long scaled = ((long) value) * ((long) iScalar);
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,119,"return getWrappedField().getMillis(scaled, instant);"
False,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,120,"eturn getWrappedField().getMillis(value * iScalar, instant);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,123,"long scaled = FieldUtils.safeMultiply(value, iScalar);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,124,"return getWrappedField().getMillis(scaled, instant);"
False,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,124,"eturn getWrappedField().add(instant, value * iScalar);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,128,long scaled = ((long) value) * ((long) iScalar);
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,129,"return getWrappedField().add(instant, scaled);"
False,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,128,"eturn getWrappedField().add(instant, value * iScalar);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,133,"long scaled = FieldUtils.safeMultiply(value, iScalar);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,134,"return getWrappedField().add(instant, scaled);"
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,160,* Compares this duration field to another.
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,161,* Two fields are equal if of the same type and duration.
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,163,* @param obj  the object to compare to
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,164,* @return if equal
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,166,public boolean equals(Object obj) {
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,167,if (this == obj) {
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,168,return true;
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,169,} else if (obj instanceof ScaledDurationField) {
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,170,ScaledDurationField other = (ScaledDurationField) obj;
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,171,return (getWrappedField().equals(other.getWrappedField())) &&
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,172,(getType() == other.getType()) &&
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,173,(iScalar == other.iScalar);
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,175,return false;
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,179,* Gets a hash code for this instance.
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,181,* @return a suitable hashcode
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,183,public int hashCode() {
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,184,long scalar = iScalar;
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,185,int hash = (int) (scalar ^ (scalar >>> 32));
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,186,hash += getType().hashCode();
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,187,hash += getWrappedField().hashCode();
True,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,JodaTime/src/java/org/joda/time/field/ScaledDurationField.java,188,return hash;
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,73,public static void main(String args[]) {
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,74,String[] testCaseName = {
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,75,TestAll.class.getName()
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,77,junit.textui.TestRunner.main(testCaseName);
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,84,suite.addTest(TestPreciseDurationField.suite());
True,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,85,suite.addTest(TestScaledDurationField.suite());
False,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,81,ublic static void main(String args[]) {
False,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,82,tring[] testCaseName = {
False,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,83,estAll.class.getName()
False,JodaTime/src/test/org/joda/time/field/TestAll.java,JodaTime/src/test/org/joda/time/field/TestAll.java,85,unit.textui.TestRunner.main(testCaseName);
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,215,"illisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, 1L);"
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,215,"MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,10,* are met:
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,54,package org.joda.time.field;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,61,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,62,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,64,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,65,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,66,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,69,* This class is a Junit unit test for PreciseDurationField.
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,71,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,73,public class TestPreciseDurationField extends TestCase {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,75,private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,76,private static final int INTEGER_MAX = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,77,private static final long LONG_MAX = Long.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,79,private PreciseDurationField iField;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,81,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,82,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,85,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,86,return new TestSuite(TestPreciseDurationField.class);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,89,public TestPreciseDurationField(String name) {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,90,super(name);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,93,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,94,"iField = new PreciseDurationField(DurationFieldType.seconds(), 1000);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,97,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,98,iField = null;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,102,public void test_constructor() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,103,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,104,"new PreciseDurationField(null, 10);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,105,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,106,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,110,public void test_getType() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,111,"assertEquals(DurationFieldType.seconds(), iField.getType());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,114,public void test_getName() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,115,"assertEquals(""seconds"", iField.getName());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,118,public void test_isSupported() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,119,"assertEquals(true, iField.isSupported());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,122,public void test_isPrecise() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,123,"assertEquals(true, iField.isPrecise());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,126,public void test_getUnitMillis() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,127,"assertEquals(1000, iField.getUnitMillis());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,130,public void test_toString() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,131,"assertEquals(""DurationField[seconds]"", iField.toString());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,135,public void test_getValue_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,136,"assertEquals(0, iField.getValue(0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,137,"assertEquals(12345, iField.getValue(12345678L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,138,"assertEquals(-1, iField.getValue(-1234L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,139,"assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,140,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,141,iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,142,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,143,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,146,public void test_getValueAsLong_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,147,"assertEquals(0L, iField.getValueAsLong(0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,148,"assertEquals(12345L, iField.getValueAsLong(12345678L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,149,"assertEquals(-1L, iField.getValueAsLong(-1234L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,150,"assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,153,public void test_getValue_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,154,"assertEquals(0, iField.getValue(0L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,155,"assertEquals(12345, iField.getValue(12345678L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,156,"assertEquals(-1, iField.getValue(-1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,157,"assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,158,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,159,"iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L, 567L);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,160,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,161,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,164,public void test_getValueAsLong_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,165,"assertEquals(0L, iField.getValueAsLong(0L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,166,"assertEquals(12345L, iField.getValueAsLong(12345678L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,167,"assertEquals(-1L, iField.getValueAsLong(-1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,168,"assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,172,public void test_getMillis_int() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,173,"assertEquals(0, iField.getMillis(0));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,174,"assertEquals(1234000L, iField.getMillis(1234));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,175,"assertEquals(-1234000L, iField.getMillis(-1234));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,176,"assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,179,public void test_getMillis_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,180,"assertEquals(0L, iField.getMillis(0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,181,"assertEquals(1234000L, iField.getMillis(1234L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,182,"assertEquals(-1234000L, iField.getMillis(-1234L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,183,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,184,iField.getMillis(LONG_MAX);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,185,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,186,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,189,public void test_getMillis_int_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,190,"assertEquals(0L, iField.getMillis(0, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,191,"assertEquals(1234000L, iField.getMillis(1234, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,192,"assertEquals(-1234000L, iField.getMillis(-1234, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,193,"assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,196,public void test_getMillis_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,197,"assertEquals(0L, iField.getMillis(0L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,198,"assertEquals(1234000L, iField.getMillis(1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,199,"assertEquals(-1234000L, iField.getMillis(-1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,200,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,201,"iField.getMillis(LONG_MAX, 567L);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,202,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,203,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,207,public void test_add_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,208,"assertEquals(567L, iField.add(567L, 0));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,209,"assertEquals(567L + 1234000L, iField.add(567L, 1234));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,210,"assertEquals(567L - 1234000L, iField.add(567L, -1234));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,211,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,212,"iField.add(LONG_MAX, 1);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,213,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,214,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,217,public void test_add_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,218,"assertEquals(567L, iField.add(567L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,219,"assertEquals(567L + 1234000L, iField.add(567L, 1234L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,220,"assertEquals(567L - 1234000L, iField.add(567L, -1234L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,221,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,222,"iField.add(LONG_MAX, 1L);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,223,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,224,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,225,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,226,"iField.add(1L, LONG_MAX);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,227,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,228,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,232,public void test_getDifference_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,233,"assertEquals(0, iField.getDifference(1L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,234,"assertEquals(567, iField.getDifference(567000L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,235,"assertEquals(567 - 1234, iField.getDifference(567000L, 1234000L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,236,"assertEquals(567 + 1234, iField.getDifference(567000L, -1234000L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,237,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,238,"iField.getDifference(LONG_MAX, -1L);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,239,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,240,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,243,public void test_getDifferenceAsLong_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,244,"assertEquals(0L, iField.getDifferenceAsLong(1L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,245,"assertEquals(567L, iField.getDifferenceAsLong(567000L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,246,"assertEquals(567L - 1234L, iField.getDifferenceAsLong(567000L, 1234000L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,247,"assertEquals(567L + 1234L, iField.getDifferenceAsLong(567000L, -1234000L));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,248,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,249,"iField.getDifferenceAsLong(LONG_MAX, -1L);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,250,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,251,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,255,public void test_equals() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,256,"assertEquals(true, iField.equals(iField));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,257,"assertEquals(false, iField.equals(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,258,"DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,259,"assertEquals(false, iField.equals(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,260,"dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,261,"assertEquals(true, iField.equals(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,262,"dummy = new PreciseDurationField(DurationFieldType.millis(), 1000);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,263,"assertEquals(false, iField.equals(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,264,"assertEquals(false, iField.equals(""""));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,265,"assertEquals(false, iField.equals(null));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,268,public void test_hashCode() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,269,"assertEquals(true, iField.hashCode() == iField.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,270,"assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,271,"DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,272,"assertEquals(false, iField.hashCode() == dummy.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,273,"dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,274,"assertEquals(true, iField.hashCode() == dummy.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,275,"dummy = new PreciseDurationField(DurationFieldType.millis(), 1000);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,276,"assertEquals(false, iField.hashCode() == dummy.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,280,public void test_compareTo() {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,281,"assertEquals(0, iField.compareTo(iField));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,282,"assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,283,"DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,284,"assertEquals(1, iField.compareTo(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,285,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,286,"iField.compareTo("""");"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,287,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,288,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,289,try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,290,iField.compareTo(null);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,291,fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,292,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,296,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,297,DurationField test = iField;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,299,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,300,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,301,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,302,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,303,oos.close();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,305,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,306,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,307,DurationField result = (DurationField) ois.readObject();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,308,ois.close();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,310,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,10,* are met:
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,54,package org.joda.time.field;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,56,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,57,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,58,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,59,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,61,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,62,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,64,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,65,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,66,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,69,* This class is a Junit unit test for PreciseDurationField.
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,71,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,73,public class TestScaledDurationField extends TestCase {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,75,private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,76,private static final int INTEGER_MAX = Integer.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,77,private static final long LONG_MAX = Long.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,79,private ScaledDurationField iField;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,81,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,82,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,85,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,86,return new TestSuite(TestScaledDurationField.class);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,89,public TestScaledDurationField(String name) {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,90,super(name);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,93,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,94,DurationField base = MillisDurationField.INSTANCE;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,95,"iField = new ScaledDurationField(base, DurationFieldType.minutes(), 90);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,98,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,99,iField = null;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,103,public void test_constructor() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,104,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,105,"new ScaledDurationField(null, DurationFieldType.minutes(), 10);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,106,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,107,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,108,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,109,"new ScaledDurationField(MillisDurationField.INSTANCE, null, 10);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,110,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,111,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,112,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,113,"new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,114,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,115,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,116,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,117,"new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,118,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,119,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,122,public void test_getScalar() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,123,"assertEquals(90, iField.getScalar());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,127,public void test_getType() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,128,"assertEquals(DurationFieldType.minutes(), iField.getType());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,131,public void test_getName() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,132,"assertEquals(""minutes"", iField.getName());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,135,public void test_isSupported() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,136,"assertEquals(true, iField.isSupported());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,139,public void test_isPrecise() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,140,"assertEquals(true, iField.isPrecise());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,143,public void test_getUnitMillis() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,144,"assertEquals(90, iField.getUnitMillis());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,147,public void test_toString() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,148,"assertEquals(""DurationField[minutes]"", iField.toString());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,152,public void test_getValue_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,153,"assertEquals(0, iField.getValue(0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,154,"assertEquals(12345678 / 90, iField.getValue(12345678L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,155,"assertEquals(-1234 / 90, iField.getValue(-1234L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,156,"assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,157,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,158,iField.getValue(LONG_INTEGER_MAX + 1L);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,159,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,160,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,163,public void test_getValueAsLong_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,164,"assertEquals(0L, iField.getValueAsLong(0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,165,"assertEquals(12345678L / 90, iField.getValueAsLong(12345678L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,166,"assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,167,"assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,170,public void test_getValue_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,171,"assertEquals(0, iField.getValue(0L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,172,"assertEquals(12345678 / 90, iField.getValue(12345678L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,173,"assertEquals(-1234 / 90, iField.getValue(-1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,174,"assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,175,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,176,"iField.getValue(LONG_INTEGER_MAX + 1L, 567L);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,177,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,178,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,181,public void test_getValueAsLong_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,182,"assertEquals(0L, iField.getValueAsLong(0L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,183,"assertEquals(12345678 / 90L, iField.getValueAsLong(12345678L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,184,"assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,185,"assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,189,public void test_getMillis_int() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,190,"assertEquals(0, iField.getMillis(0));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,191,"assertEquals(1234L * 90L, iField.getMillis(1234));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,192,"assertEquals(-1234L * 90L, iField.getMillis(-1234));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,193,"assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,196,public void test_getMillis_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,197,"assertEquals(0L, iField.getMillis(0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,198,"assertEquals(1234L * 90L, iField.getMillis(1234L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,199,"assertEquals(-1234L * 90L, iField.getMillis(-1234L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,200,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,201,iField.getMillis(LONG_MAX);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,202,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,203,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,206,public void test_getMillis_int_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,207,"assertEquals(0L, iField.getMillis(0, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,208,"assertEquals(1234L * 90L, iField.getMillis(1234, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,209,"assertEquals(-1234L * 90L, iField.getMillis(-1234, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,210,"assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,213,public void test_getMillis_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,214,"assertEquals(0L, iField.getMillis(0L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,215,"assertEquals(1234L * 90L, iField.getMillis(1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,216,"assertEquals(-1234L * 90L, iField.getMillis(-1234L, 567L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,217,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,218,"iField.getMillis(LONG_MAX, 567L);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,219,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,220,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,224,public void test_add_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,225,"assertEquals(567L, iField.add(567L, 0));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,226,"assertEquals(567L + 1234L * 90L, iField.add(567L, 1234));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,227,"assertEquals(567L - 1234L * 90L, iField.add(567L, -1234));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,228,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,229,"iField.add(LONG_MAX, 1);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,230,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,231,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,234,public void test_add_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,235,"assertEquals(567L, iField.add(567L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,236,"assertEquals(567L + 1234L * 90L, iField.add(567L, 1234L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,237,"assertEquals(567L - 1234L * 90L, iField.add(567L, -1234L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,238,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,239,"iField.add(LONG_MAX, 1L);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,240,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,241,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,242,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,243,"iField.add(1L, LONG_MAX);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,244,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,245,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,249,public void test_getDifference_long_int() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,250,"assertEquals(0, iField.getDifference(1L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,251,"assertEquals(567, iField.getDifference(567L * 90L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,252,"assertEquals(567 - 1234, iField.getDifference(567L * 90L, 1234L * 90L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,253,"assertEquals(567 + 1234, iField.getDifference(567L * 90L, -1234L * 90L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,254,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,255,"iField.getDifference(LONG_MAX, -1L);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,256,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,257,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,260,public void test_getDifferenceAsLong_long_long() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,261,"assertEquals(0L, iField.getDifferenceAsLong(1L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,262,"assertEquals(567L, iField.getDifferenceAsLong(567L * 90L, 0L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,263,"assertEquals(567L - 1234L, iField.getDifferenceAsLong(567L * 90L, 1234L * 90L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,264,"assertEquals(567L + 1234L, iField.getDifferenceAsLong(567L * 90L, -1234L * 90L));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,265,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,266,"iField.getDifferenceAsLong(LONG_MAX, -1L);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,267,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,268,} catch (ArithmeticException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,272,public void test_equals() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,273,"assertEquals(true, iField.equals(iField));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,274,"assertEquals(false, iField.equals(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,275,"DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,276,"assertEquals(false, iField.equals(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,277,"dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,278,"assertEquals(true, iField.equals(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,279,"dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,280,"assertEquals(false, iField.equals(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,281,"assertEquals(false, iField.equals(""""));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,282,"assertEquals(false, iField.equals(null));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,285,public void test_hashCode() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,286,"assertEquals(iField.hashCode(), iField.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,287,"assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,288,"DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,289,"assertEquals(false, iField.hashCode() == dummy.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,290,"dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,291,"assertEquals(true, iField.hashCode() == dummy.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,292,"dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,293,"assertEquals(false, iField.hashCode() == dummy.hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,297,public void test_compareTo() {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,298,"assertEquals(0, iField.compareTo(iField));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,299,"assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,300,"DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,301,"assertEquals(1, iField.compareTo(dummy));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,302,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,303,"iField.compareTo("""");"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,304,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,305,} catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,306,try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,307,iField.compareTo(null);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,308,fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,309,} catch (NullPointerException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,313,public void testSerialization() throws Exception {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,314,DurationField test = iField;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,316,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,317,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,318,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,319,byte[] bytes = baos.toByteArray();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,320,oos.close();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,322,ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,323,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,324,DurationField result = (DurationField) ois.readObject();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,325,ois.close();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,327,"assertEquals(test, result);"

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,10,* are met:
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,54,package org.joda.time.partial;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,57,import java.util.Arrays;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,59,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,60,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,61,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,62,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,63,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,64,import org.joda.time.ReadWritableInstant;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,65,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,66,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,67,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,68,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,71,* AbstractPartialInstant provides a standard base implementation of most methods
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,72,* in the PartialInstant interface.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,73,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,74,* Calculations on are performed using a {@link Chronology}.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,75,* This chronology is set to be in the UTC time zone for all calculations.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,76,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,77,* AbstractPartialInstant allows subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,79,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,80,* @since 1.0
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,82,"public abstract class AbstractPartialInstant implements PartialInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,84,/** Serialization version */
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,85,private static final long serialVersionUID = 2353678632973660L;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,87,/** The chronology in use */
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,88,protected Chronology iChronology;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,89,/** The values of each field in this partial instant */
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,90,protected int[] iValues;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,91,/** The values of each field in this partial instant */
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,92,protected transient DateTimeField[] iFields;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,94,// Constructors
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,97,"* Constructs a AbstractPartialInstant with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,98,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,99,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,100,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,101,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,102,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,104,public AbstractPartialInstant() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,105,"this(DateTimeUtils.currentTimeMillis(), null);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,109,"* Constructs a AbstractPartialInstant with the current time, using the specified chronology"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,110,* and zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,111,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,112,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,113,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,114,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,116,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,118,public AbstractPartialInstant(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,119,"this(DateTimeUtils.currentTimeMillis(), chronology);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,123,* Constructs a AbstractPartialInstant extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,124,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,125,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,126,"* The constructor uses the default time zone, resulting in the local time"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,127,"* being initialised. Once the constructor is complete, all further calculations"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,128,* are performed without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,130,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,132,public AbstractPartialInstant(long instant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,133,"this(instant, null);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,137,* Constructs a AbstractPartialInstant extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,138,* milliseconds using the chronology provided.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,139,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,140,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,141,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,142,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,144,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,145,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,147,"public AbstractPartialInstant(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,148,super();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,149,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,150,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,152,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,153,iFields = initFields(iChronology);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,154,"iValues = initValues(instant, chronology);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,158,* Constructs a AbstractPartialInstant from an Object that represents a time.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,159,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,160,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,161,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,162,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,164,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,165,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,167,public AbstractPartialInstant(Object instant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,168,super();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,169,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,170,Chronology chronology = converter.getChronology(instant);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,171,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,172,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,174,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,175,iFields = initFields(iChronology);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,176,"iValues = initValues(converter.getInstantMillis(instant), chronology);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,180,"* Constructs a AbstractPartialInstant from an Object that represents a time, using the"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,181,* specified chronology.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,182,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,183,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,184,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,185,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,186,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,187,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,188,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,189,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,191,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,192,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,193,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,195,"public AbstractPartialInstant(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,196,super();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,197,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,198,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,199,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,201,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,202,iFields = initFields(iChronology);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,203,"iValues = initValues(converter.getInstantMillis(instant, chronology), chronology);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,207,* Constructs a AbstractPartialInstant with specified time field values and chronology.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,208,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,209,* The constructor uses the time zone of the chronology specified.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,210,"* Once the constructor is complete, all further calculations are performed"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,211,* without reference to a timezone (by switching to UTC).
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,213,* @param values  the new set of values
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,214,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,216,"public AbstractPartialInstant(int[] values, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,217,super();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,218,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,219,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,221,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,222,iFields = initFields(iChronology);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,223,iValues = values;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,224,chronology.validate(this);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,229,* Initialize the array of fields.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,230,* The field and value arrays must match.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,232,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,234,protected abstract DateTimeField[] initFields(Chronology chrono);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,237,* Initialize the array of values.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,238,* The field and value arrays must match.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,240,* @param instant  the instant to use
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,241,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,243,"protected abstract int[] initValues(long instant, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,247,* Gets the number of fields in this instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,249,* @return the field count
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,251,public int getFieldSize() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,252,return iFields.length;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,256,* Gets the field at the specifed index.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,258,* @param index  the index
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,259,* @return the field
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,260,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,262,public DateTimeField getField(int index) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,263,if (index < 0 || index >= iFields.length) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,264,throw new IllegalArgumentException(Integer.toString(index));
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,266,return iFields[index];
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,270,* Gets the value of the field at the specifed index.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,272,* @param index  the index
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,273,* @return the value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,274,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,276,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,277,if (index < 0 || index >= iValues.length) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,278,throw new IllegalArgumentException(Integer.toString(index));
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,280,return iValues[index];
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,285,* Gets an array of the fields that this partial instant supports.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,286,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,287,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,289,"* @return the fields supported (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,291,public DateTimeField[] getFields() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,292,return (DateTimeField[]) iFields.clone();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,296,* Gets an array of the value of each of the fields that this partial instant supports.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,297,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,298,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,299,* Each value corresponds to the same array index as <code>getFields()</code>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,301,"* @return the current values of each field (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,303,public int[] getValues() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,304,return (int[]) iValues.clone();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,308,* Gets the chronology of the partial which is never null.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,309,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,310,* The {@link Chronology} is the calculation engine behind the partial and
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,311,* provides conversion and validation of the fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,313,* @return the chronology
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,315,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,316,return iChronology;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,321,* Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,322,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,323,* The field specified must be one of those that is supported by the partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,325,* @param field  a DateTimeField instance that is supported by this partial
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,326,* @return the value of that field
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,327,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,329,public int get(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,330,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,331,if (iFields[i] == field) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,332,return iValues[i];
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,335,"throw new IllegalArgumentException(""Field '"" + field + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,339,* Checks whether the field specified is supported by this partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,341,"* @param field  the field to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,342,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,344,public boolean isSupported(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,345,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,346,if (iFields[i] == field) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,347,return true;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,350,return false;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,355,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,356,* full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,357,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,358,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,359,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,361,* @param baseMillis  source of missing fields
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,362,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,363,* @return the combined instant in milliseconds
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,365,"public long resolve(long baseMillis, DateTimeZone zone) {"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,366,Chronology chrono = iChronology.withZone(zone);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,367,"return resolve(baseMillis, chrono);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,371,* Resolves this partial into another complete instant setting the relevant fields
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,372,* on the writable instant. The combination is performed using the chronology of the
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,373,* specified instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,374,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,375,"* For example, if this partial represents a time, then the input writable instant"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,376,* will be updated with the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,378,"* @param base  the instant to set into, must not be null"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,379,* @throws IllegalArgumentException if the base instant is null
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,381,public void resolveInto(ReadWritableInstant base) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,382,if (base == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,383,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,385,Chronology chrono = base.getChronology();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,386,"long resolved = resolve(base.getMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,387,base.setMillis(resolved);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,391,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,392,* full instant. The combination is performed using the chronology of the
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,393,* specified instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,394,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,395,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,396,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,398,"* @param base  the instant that provides the missing fields, null means now"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,399,* @return the combined datetime
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,401,public DateTime resolveDateTime(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,402,long resolved;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,403,Chronology chrono;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,404,if (base == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,405,chrono = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,406,"resolved = resolve(DateTimeUtils.currentTimeMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,407,} else {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,408,chrono = base.getChronology();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,409,"resolved = resolve(base.getMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,411,"return new DateTime(resolved, chrono);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,415,* Resolve this partial instant into the base millis using the specified chronology.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,417,* @param baseMillis  the base millis
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,418,* @param chrono  the chronology
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,419,* @return the new resolved millis
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,421,"protected long resolve(long baseMillis, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,422,long millis = baseMillis;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,423,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,424,"millis = iFields[i].set(millis, iValues[i]);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,426,return millis;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,431,"* Compares this PartialInstant with another returning true if the chronology,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,432,* fields and values are equal.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,434,* @param AbstractPartialInstant  an object to check against
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,435,* @return true if fields and values are equal
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,437,public boolean equals(Object instant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,438,if (instant instanceof AbstractPartialInstant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,439,AbstractPartialInstant other = (AbstractPartialInstant) instant;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,440,"return Arrays.equals(iValues, other.iValues) &&"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,441,"Arrays.equals(iFields, other.iFields) &&"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,442,iChronology == other.iChronology;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,443,} else if (instant instanceof PartialInstant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,444,PartialInstant other = (PartialInstant) instant;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,445,"return Arrays.equals(iValues, other.getValues()) &&"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,446,"Arrays.equals(iFields, other.getFields()) &&"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,447,iChronology == other.getChronology();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,449,return false;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,453,* Gets a hash code for the PartialInstant that is compatible with the
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,454,* equals method.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,456,* @return a suitable hash code
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,458,public int hashCode() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,459,int total = 157;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,460,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,461,total = 23 * total + iValues[i];
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,462,total = 23 * total + iFields[i].hashCode();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,464,total += iChronology.hashCode();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,465,return total;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,469,* Output the time in an ISO8601 format.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,471,* @return ISO8601 formatted string
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,473,public String toString() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,474,// TODO
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java,475,"return """";"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,57,mport java.util.Arrays;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,61,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,63,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,64,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,65,mport org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,66,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,67,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,68,mport org.joda.time.convert.InstantConverter;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,88, <li>maximum value
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,89, <li>minimum value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,80,* <li>maximum/minimum values
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,81,* <li>add/subtract
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,82,* <li>set
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,83,* <li>rounding
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,99,"ublic final class TimeOfDay implements PartialInstant, Serializable {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,93,"public final class TimeOfDay extends AbstractPartialInstant implements PartialInstant, Serializable {"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,113,** The chronology in use */
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,114,rivate final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,115,** The values of each field in this partial instant */
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,116,rivate final int[] iValues;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,129,"his(DateTimeUtils.currentTimeMillis(), null);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,118,super();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,143,"his(DateTimeUtils.currentTimeMillis(), chronology);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,132,super(chronology);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,157,"his(instant, null);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,146,super(instant);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,172,uper();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,173,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,174,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,176,"Values = initValues(instant, chronology);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,177,Chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,161,"super(instant, chronology);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,191,uper();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,192,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,193,hronology chronology = converter.getChronology(instant);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,194,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,195,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,197,"Values = initValues(converter.getInstantMillis(instant), chronology);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,198,Chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,175,super(instant);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,218,uper();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,219,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,220,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,221,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,223,"Values = initValues(converter.getInstantMillis(instant, chronology), chronology);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,224,Chronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,195,"super(instant, chronology);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,321,uper();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,322,f (chronology == null) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,323,hronology = ISOChronology.getInstance();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,325,"Values = new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond};"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,326,Chronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,327,hronology.validate(this);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,292,"super(new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond}, chronology);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,309,* Initialize the array of fields.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,311,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,313,protected DateTimeField[] initFields(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,314,return new DateTimeField[] {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,315,"chrono.hourOfDay(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,316,"chrono.minuteOfHour(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,317,"chrono.secondOfMinute(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,318,"chrono.millisOfSecond(),"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,348,"rivate int[] initValues(long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,328,"protected int[] initValues(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,359, Gets the number of fields in TimeOfDay.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,361, @return the field count
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,363,ublic int getFieldSize() {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,364,eturn 4;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,368, Gets the field at the specifed index.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,370, @param index  the index
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,371, @return the field
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,372, @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,374,ublic DateTimeField getField(int index) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,375,witch (index) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,376,ase HOUR_OF_DAY:
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,377,eturn iChronology.hourOfDay();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,378,ase MINUTE_OF_HOUR:
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,379,eturn iChronology.minuteOfHour();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,380,ase SECOND_OF_MINUTE:
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,381,eturn iChronology.secondOfMinute();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,382,ase MILLIS_OF_SECOND:
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,383,eturn iChronology.millisOfSecond();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,384,efault:
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,385,hrow new IllegalArgumentException(Integer.toString(index));
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,390, Gets the value of the field at the specifed index.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,392, @param index  the index
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,393, @return the value
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,394, @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,396,ublic int getValue(int index) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,397,f (index < 0 || index > 4) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,398,hrow new IllegalArgumentException(Integer.toString(index));
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,400,eturn iValues[index];
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,405, Gets an array of the fields that this partial instant supports.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,406, <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,407," The fields are returned largest to smallest, for example Hour, Minute, Second."
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,409," @return the fields supported (cloned), largest to smallest"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,411,ublic DateTimeField[] getFields() {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,412,eturn new DateTimeField[] {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,413,"Chronology.hourOfDay(),"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,414,"Chronology.minuteOfHour(),"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,415,"Chronology.secondOfMinute(),"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,416,"Chronology.millisOfSecond(),"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,421, Gets an array of the value of each of the fields that this partial instant supports.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,422, <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,423," The fields are returned largest to smallest, for example Hour, Minute, Second."
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,424, Each value corresponds to the same array index as <code>getFields()</code>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,426," @return the current values of each field (cloned), largest to smallest"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,428,ublic int[] getValues() {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,429,eturn (int[]) iValues.clone();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,433, Gets the chronology of the partial which is never null.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,434, <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,435, The {@link Chronology} is the calculation engine behind the partial and
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,436, provides conversion and validation of the fields in a particular calendar system.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,438, @return the chronology
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,440,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,441,eturn iChronology;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,445, Get the value of one of the fields of a datetime.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,446, <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,447, The field specified must be one of those that is supported by the partial instant.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,449, @param field  a DateTimeField instance that is supported by this partial
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,450, @return the value of that field
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,451, @throws IllegalArgumentException if the field is null or not supported
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,453,ublic int get(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,454,f (iChronology.hourOfDay() == field) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,455,eturn getValue(HOUR_OF_DAY);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,457,f (iChronology.minuteOfHour() == field) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,458,eturn getValue(MINUTE_OF_HOUR);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,460,f (iChronology.secondOfMinute() == field) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,461,eturn getValue(SECOND_OF_MINUTE);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,463,f (iChronology.millisOfSecond() == field) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,464,eturn getValue(MILLIS_OF_SECOND);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,466,"hrow new IllegalArgumentException(""Field '"" + field + ""' is not supported by TimeOfDay"");"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,470, Checks whether the field specified is supported by this partial instant.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,472," @param field  the field to check, may be null which returns false"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,473, @return true if the field is supported
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,475,ublic boolean isSupported(DateTimeField field) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,476,eturn
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,477,Chronology.hourOfDay() == field ||
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,478,Chronology.minuteOfHour() == field ||
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,479,Chronology.secondOfMinute() == field ||
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,480,Chronology.millisOfSecond() == field;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,485, Resolves this partial against another complete instant to create a new
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,486, full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,487, <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,488," For example, if this partial represents a time, then the result of this method"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,489, will be the date from the specified base plus the time from this instant.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,491, @param baseMillis  source of missing fields
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,492," @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,493, @return the combined instant in milliseconds
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,495,"ublic long resolve(long baseMillis, DateTimeZone zone) {"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,496,hronology chrono = iChronology.withZone(zone);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,497,ong millis = baseMillis;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,498,"illis = chrono.hourOfDay().set(millis, getValue(HOUR_OF_DAY));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,499,"illis = chrono.minuteOfHour().set(millis, getValue(MINUTE_OF_HOUR));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,500,"illis = chrono.secondOfMinute().set(millis, getValue(SECOND_OF_MINUTE));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,501,"illis = chrono.millisOfSecond().set(millis, getValue(MILLIS_OF_SECOND));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,502,eturn millis;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,506, Resolves this partial against another complete instant to create a new
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,507, full instant. The combination is performed using the chronology of the
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,508, specified instant.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,509, <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,510," For example, if this partial represents a time, then the result of this method"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,511, will be the date from the specified base plus the time from this instant.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,513," @param base  the instant that provides the missing fields, null means now"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,514, @return the combined datetime
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,516,ublic DateTime resolveDateTime(ReadableInstant base) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,517,f (base == null) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,518,ase = new DateTime();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,520,hronology chrono = base.getChronology();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,521,ong millis = base.getMillis();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,522,"illis = chrono.hourOfDay().set(millis, getValue(HOUR_OF_DAY));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,523,"illis = chrono.minuteOfHour().set(millis, getValue(MINUTE_OF_HOUR));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,524,"illis = chrono.secondOfMinute().set(millis, getValue(SECOND_OF_MINUTE));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,525,"illis = chrono.millisOfSecond().set(millis, getValue(MILLIS_OF_SECOND));"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,526,"eturn new DateTime(millis, chrono);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,605, Compares this TimeOfDay with another returning true if the fields and
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,606, values are equal.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,608, @param timeOfDay  an object to check against
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,609, @return true if fields and values are equal
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,611,ublic boolean equals(Object timeOfDay) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,612,f (timeOfDay instanceof TimeOfDay == false) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,613,eturn false;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,615,imeOfDay other = (TimeOfDay) timeOfDay;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,616,"eturn Arrays.equals(iValues, other.iValues) &&"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,617,Chronology == other.iChronology;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,621, Gets a hash code for the TimeOfDay that is compatible with the
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,622, equals method.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,624, @return a suitable hash code
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,626,ublic int hashCode() {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,627,nt total = 157;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,628,or (int i = 0; i < iValues.length; i++) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,629,otal = 23 * total + getValue(i);
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,631,otal += iChronology.hashCode();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,632,eturn total;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,636, Output the time in ISO8601 time only format (hh:mm:ss.SSS).
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,638, @return ISO8601 time formatted string
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,640,ublic String toString() {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,641,/ TODO
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,642,"eturn """";"

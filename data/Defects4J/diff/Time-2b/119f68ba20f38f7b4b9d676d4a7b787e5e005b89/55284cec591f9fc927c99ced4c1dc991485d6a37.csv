is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,153, Adds to this duration returning a new Duration instance.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,153,* Returns a new duration with this length plus that specified multiplied by the scalar.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,154,* This instance is immutable and is not altered.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,159,"* @param scalar  the amount of times to add, such as -1 to subtract once"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,160,ublic Duration withDurationAdded(long durationToAdd) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,161,"eturn withDurationAdded(durationToAdd, 1);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,162,"public Duration withDurationAdded(long durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,163,if (durationToAdd == 0 || scalar == 0) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,164,return this;
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,166,"long add = FieldUtils.safeMultiply(durationToAdd, scalar);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,167,"long duration = FieldUtils.safeAdd(getMillis(), add);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,168,return new Duration(duration);
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,165, Adds to this duration returning a new Duration instance.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,172,* Returns a new duration with this length plus that specified multiplied by the scalar.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,173,* This instance is immutable and is not altered.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,169, @param durationToAdd  the duration to add to this one
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,177,"* @param durationToAdd  the duration to add to this one, null means zero"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,173,"ublic Duration withDurationAdded(long durationToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,174,f (durationToAdd == 0 || scalar == 0) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,181,"public Duration withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,182,if (durationToAdd == null || scalar == 0) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,177,"ong add = FieldUtils.safeMultiply(durationToAdd, scalar);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,178,"ong duration = FieldUtils.safeAdd(getMillis(), add);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,179,eturn new Duration(duration);
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,185,"return withDurationAdded(durationToAdd.getMillis(), scalar);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,183, Adds to this duration returning a new Duration instance.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,190,* Returns a new duration with this length plus that specified.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,191,* This instance is immutable and is not altered.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,187," @param durationToAdd  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,195,* @param amount  the duration to add to this one
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,190,ublic Duration withDurationAdded(ReadableDuration durationToAdd) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,191,f (durationToAdd == null) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,198,public Duration plus(long amount) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,199,"return withDurationAdded(amount, 1);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,203,* Returns a new duration with this length plus that specified.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,204,* This instance is immutable and is not altered.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,205,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,206,"* If the amount is zero, this instance is returned."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,208,"* @param amount  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,209,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,211,public Duration plus(ReadableDuration amount) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,212,if (amount == null) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,194,"eturn withDurationAdded(durationToAdd.getMillis(), 1);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,215,"return withDurationAdded(amount.getMillis(), 1);"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,198, Adds to this duration returning a new Duration instance.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,219,* Returns a new duration with this length minus that specified.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,220,* This instance is immutable and is not altered.
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,202," @param durationToAdd  the duration to add to this one, null means zero"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,203," @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,224,* @param amount  the duration to take away from this one
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,206,"ublic Duration withDurationAdded(ReadableDuration durationToAdd, int scalar) {"
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,207,f (durationToAdd == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,227,public Duration minus(long amount) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,228,"return withDurationAdded(amount, -1);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,232,* Returns a new duration with this length minus that specified.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,233,* This instance is immutable and is not altered.
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,234,* <p>
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,235,"* If the amount is zero, this instance is returned."
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,237,"* @param amount  the duration to take away from this one, null means zero"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,238,* @return the new duration instance
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,240,public Duration minus(ReadableDuration amount) {
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,241,if (amount == null) {
False,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,210,"eturn withDurationAdded(durationToAdd.getMillis(), scalar);"
True,JodaTime/src/java/org/joda/time/Duration.java,JodaTime/src/java/org/joda/time/Duration.java,244,"return withDurationAdded(amount.getMillis(), -1);"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92, Converts this duration to a Period instance using the All type.
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,92,* Converts this duration to a Period instance using the standard period type
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,93,* and the ISO chronology.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,94, Only precise fields in the period type will be used.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95," For AllType, this is the time fields only."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,95,"* Only precise fields in the period type will be used. Thus, only the hour,"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,96,"* minute, second and millisecond fields on the period will be used."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,97, The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,101, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,103," be stored in the largest available precise field, hours in this case."
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,102,"* be stored in the largest available field, hours in this case."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,108," For more control over the conversion process, you have two options:"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,109, <ul>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,110," <li>convert the duration to an {@link Interval}, and from there obtain the period"
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,111, <li>specify a period type that contains precise definitions of the day and larger
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,112," fields, such as the UTC or precise types."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,113, </ul>
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,107,"* For more control over the conversion process, you must pair the duration with"
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,108,"* an instant, see {@link Period#Period(ReadableInstant,ReadableDuration)}."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,120, Converts this duration to a Period instance specifying a period type
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,121, to control how the duration is split into fields.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,122, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,123, Only precise fields in the period type will be used.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,124, Imprecise fields will not be populated.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,125, The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,126, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,127, If the duration is small then this method will perform
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,128, as you might expect and split the fields evenly.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,129, <p>
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,130, If the duration is large then all the remaining duration will
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,131, be stored in the largest available precise field.
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,132," For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,134, @param type  the period type determining how to split the duration into fields
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,135, @return a Period created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,137,eriod toPeriod(PeriodType type);
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,58,mport org.joda.time.PeriodType;
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,96, Converts this duration to a Period instance using the All type.
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,95,* Converts this duration to a Period instance using the standard period type
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,96,* and the ISO chronology.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,98, Only precise fields in the period type will be used.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,99," For AllType, this is the time fields only."
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,98,"* Only precise fields in the period type will be used. Thus, only the hour,"
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,99,"* minute, second and millisecond fields on the period will be used."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,101, The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,105, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,107," be stored in the largest available precise field, hours in this case."
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,105,"* be stored in the largest available field, hours in this case."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,112," For more control over the conversion process, you have two options:"
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,113, <ul>
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,114," <li>convert the duration to an {@link org.joda.time.Interval}, and from"
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,115, there obtain the period
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,116, <li>specify a period type that contains precise definitions of the day
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,117," and larger fields, such as the UTC or precise types."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,118, </ul>
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,110,"* For more control over the conversion process, you must pair the duration with"
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,111,"* an instant, see {@link Period#Period(ReadableInstant,ReadableDuration)}."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,127, Converts this duration to a Period instance specifying a period type
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,128, to control how the duration is split into fields.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,129, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,130, Only precise fields in the period type will be used.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,131, Imprecise fields will not be populated.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,132, The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,133, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,134, If the duration is small then this method will perform
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,135, as you might expect and split the fields evenly.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,136, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,137, If the duration is large then all the remaining duration will
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,138, be stored in the largest available precise field.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,139," For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,141," @param type  the period type determining how to split the duration into fields, null means All type"
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,142, @return a Period created using the millisecond duration from this instance
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,144,ublic Period toPeriod(PeriodType type) {
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,145,"eturn new Period(getMillis(), type);"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,60,import org.joda.time.Interval;
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,61,import org.joda.time.Period;
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,62,import org.joda.time.PeriodType;
False,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,79,ublic class BaseDuration
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,83,public abstract class BaseDuration
False,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,94,ublic BaseDuration(long duration) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,98,protected BaseDuration(long duration) {
False,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,106,"ublic BaseDuration(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,110,"protected BaseDuration(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,118,"ublic BaseDuration(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,122,"protected BaseDuration(ReadableInstant start, ReadableInstant end) {"
False,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,136,ublic BaseDuration(Object duration) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,140,protected BaseDuration(Object duration) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,168,* Converts this duration to a Period instance using the specified period type
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,169,* and the ISO chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,170,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,171,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,172,"* At most these are hours, minutes, seconds and millis - the period"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,173,* type may restrict the selection further.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,174,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,175,"* For more control over the conversion process, you must pair the duration with"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,176,"* an instant, see {@link #toPeriodFrom(ReadableInstant, PeriodType)}."
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,178,"* @param type  the period type to use, null means standard"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,179,* @return a Period created using the millisecond duration from this instance
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,181,public Period toPeriod(PeriodType type) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,182,"return new Period(getMillis(), type);"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,186,* Converts this duration to a Period instance using the standard period type
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,187,* and the specified chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,188,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,189,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,190,* Exactly which fields are precise depends on the chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,191,* Only the time fields are precise for ISO chronology with a time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,192,"* However, ISO UTC also has precise days and weeks."
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,193,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,194,"* For more control over the conversion process, you must pair the duration with"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,195,"* an instant, see {@link #toPeriodFrom(ReadableInstant)}."
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,197,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,198,* @return a Period created using the millisecond duration from this instance
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,200,public Period toPeriod(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,201,"return new Period(getMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,205,* Converts this duration to a Period instance using the specified period type
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,206,* and chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,207,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,208,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,209,* Exactly which fields are precise depends on the chronology.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,210,* Only the time fields are precise for ISO chronology with a time zone.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,211,"* However, ISO UTC also has precise days and weeks."
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,212,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,213,"* For more control over the conversion process, you must pair the duration with"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,214,"* an instant, see {@link #toPeriodFrom(ReadableInstant, PeriodType)}."
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,216,"* @param type  the period type to use, null means standard"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,217,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,218,* @return a Period created using the millisecond duration from this instance
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,220,"public Period toPeriod(PeriodType type, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,221,"return new Period(getMillis(), type, chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,225,* Converts this duration to a Period instance by adding the duration to a start
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,226,* instant to obtain an interval using the standard period type.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,227,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,228,* This conversion will determine the fields of a period accurately.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,229,"* The results are based on the instant millis, the chronology of the instant,"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,230,* the standard period type and the length of this duration.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,232,"* @param startInstant  the instant to calculate the period from, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,233,* @return a Period created using the millisecond duration from this instance
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,235,public Period toPeriodFrom(ReadableInstant startInstant) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,236,"return new Period(startInstant, this);"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,240,* Converts this duration to a Period instance by adding the duration to a start
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,241,* instant to obtain an interval.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,242,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,243,* This conversion will determine the fields of a period accurately.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,244,"* The results are based on the instant millis, the chronology of the instant,"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,245,* the period type and the length of this duration.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,247,"* @param startInstant  the instant to calculate the period from, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,248,"* @param type  the period type determining how to split the duration into fields, null means All type"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,249,* @return a Period created using the millisecond duration from this instance
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,251,"public Period toPeriodFrom(ReadableInstant startInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,252,"return new Period(startInstant, this, type);"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,256,* Converts this duration to an Interval starting at the specified instant.
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,258,"* @param startInstant  the instant to start the instant from, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,259,* @return an Interval starting at the specified instant
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,261,public Interval toIntervalFrom(ReadableInstant startInstant) {
True,JodaTime/src/java/org/joda/time/base/BaseDuration.java,JodaTime/src/java/org/joda/time/base/BaseDuration.java,262,"return new Interval(startInstant, this);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,323,ublic void testToPeriod1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,323,public void testToPeriod() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,331,"ssertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,332,/ only time fields are precise in AllType
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,333,"ssertEquals(0, result.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,334,"ssertEquals(0, result.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,335,"ssertEquals(0, result.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,336,"ssertEquals(0, result.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,337,"ssertEquals((450 * 24) + 5, result.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,338,"ssertEquals(6, result.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,339,"ssertEquals(7, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,340,"ssertEquals(8, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,343,ublic void testToPeriod_PeriodType1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,331,"assertEquals(new Period(test), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,332,"assertEquals(new Period(test.getMillis()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,336,public void testToPeriod_PeriodType() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,337,long length =
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,338,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,339,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,340,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,341,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,342,Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,343,Period result = test.toPeriod(PeriodType.standard().withMillisRemoved());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,344,"assertEquals(new Period(test, PeriodType.standard().withMillisRemoved()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,345,"assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,349,public void testToPeriod_Chronology() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,350,long length =
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,351,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,352,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,353,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,354,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,355,Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,356,Period result = test.toPeriod(Chronology.getISOUTC());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,357,"assertEquals(new Period(test, Chronology.getISOUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,358,"assertEquals(new Period(test.getMillis(), Chronology.getISOUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,362,public void testToPeriod_PeriodType_Chronology() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,363,long length =
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,364,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,365,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,366,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,368,Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,369,"Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,370,"assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,371,"assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,375,public void testToPeriodFrom() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,376,long length =
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,377,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,378,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,379,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,380,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,381,Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,382,"DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,383,Period result = test.toPeriodFrom(dt);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,384,"assertEquals(new Period(dt, test), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,388,public void testToPeriodFrom_PeriodType() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,350,eriod result = test.toPeriod(null);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,351,"ssertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,352,/ only time fields are precise in AllType
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,353,"ssertEquals(0, result.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,354,"ssertEquals(0, result.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,355,"ssertEquals(0, result.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,356,"ssertEquals(0, result.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,357,"ssertEquals((450 * 24) + 5, result.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,358,"ssertEquals(6, result.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,359,"ssertEquals(7, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,360,"ssertEquals(8, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,363,/    public void testToPeriod_PeriodType2() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,364,/        long length =
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,365,/            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,366,/            5L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,/            6L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,368,/            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,369,/        Duration test = new Duration(length);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,370,/        Period result = test.toPeriod(PeriodType.getPreciseAllType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,371,"/        assertEquals(PeriodType.getPreciseAllType(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,372,/        // only time fields are precise in AllType
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,373,"/        assertEquals(1, result.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,374,"/        assertEquals(2, result.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,375,"/        assertEquals(3, result.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,376,"/        assertEquals(4, result.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,377,"/        assertEquals(5, result.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,378,"/        assertEquals(6, result.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,379,"/        assertEquals(7, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,380,"/        assertEquals(8, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,381,"/        assertEquals(true, result.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,382,"/        assertEquals(length, result.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,395,"DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,396,"Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,397,"assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,401,public void testToIntervalFrom() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,402,long length =
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,403,(4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,404,5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,405,6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,406,7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,407,Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,408,"DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,409,Interval result = test.toIntervalFrom(dt);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,410,"assertEquals(new Interval(dt, test), result);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,399,ublic void testWithDurationAdded_long1() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,400,uration test = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,401,uration result = test.withDurationAdded(8000L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,402,"ssertEquals(8123L, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,405,ublic void testWithDurationAdded_long2() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,406,uration test = new Duration(123L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,407,uration result = test.withDurationAdded(0L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,408,"ssertSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,443,ublic void testWithDurationAdded_RD1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,458,public void testPlus_long1() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,445,uration result = test.withDurationAdded(new Duration(8000L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,460,Duration result = test.plus(8000L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,449,ublic void testWithDurationAdded_RD2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,464,public void testPlus_long2() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,451,uration result = test.withDurationAdded(new Duration(0L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,466,Duration result = test.plus(0L);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,455,ublic void testWithDurationAdded_RD3() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,471,public void testMinus_long1() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,457,uration result = test.withDurationAdded(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,473,Duration result = test.minus(8000L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,474,"assertEquals(123L - 8000L, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,477,public void testMinus_long2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,478,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,479,Duration result = test.minus(0L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,521,public void testPlus_RD1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,522,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,523,Duration result = test.plus(new Duration(8000L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,524,"assertEquals(8123L, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,527,public void testPlus_RD2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,528,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,529,Duration result = test.plus(new Duration(0L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,530,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,533,public void testPlus_RD3() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,534,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,535,Duration result = test.plus(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,536,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,540,public void testMinus_RD1() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,541,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,542,Duration result = test.minus(new Duration(8000L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,543,"assertEquals(123L - 8000L, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,546,public void testMinus_RD2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,547,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,548,Duration result = test.minus(new Duration(0L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,549,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,552,public void testMinus_RD3() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,553,Duration test = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,554,Duration result = test.minus(null);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,555,"assertSame(test, result);"

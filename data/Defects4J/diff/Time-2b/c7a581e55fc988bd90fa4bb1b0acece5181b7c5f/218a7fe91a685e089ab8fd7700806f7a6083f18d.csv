is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,920,* Converts a local instant to a standard UTC instant with the same
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,921,* local time attempting to use the same offset as the original.
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,922,* <p>
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,923,* This conversion is used after performing a calculation
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,924,* where the calculation was done using a simple local zone.
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,925,"* Whenever possible, the same offset as the original offset will be used."
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,926,* This is most significant during a daylight savings overlap.
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,928,* @param instantLocal  the local instant to convert to UTC
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,929,* @param strict  whether the conversion should reject non-existent local times
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,930,* @param originalInstantUTC  the original instant that the calculation is based on
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,931,"* @return the UTC instant with the same local time,"
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,932,* @throws ArithmeticException if the result overflows a long
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,933,* @throws IllegalArgumentException if the zone has no equivalent local time
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,934,* @since 2.0
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,936,"public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {"
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,937,int offsetOriginal = getOffset(originalInstantUTC);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,938,long instantUTC = instantLocal - offsetOriginal;
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,939,int offsetLocalFromOriginal = getOffset(instantUTC);
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,940,if (offsetLocalFromOriginal == offsetOriginal) {
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,941,return instantUTC;
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,943,"return convertLocalToUTC(instantLocal, strict);"
False,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,928, @throws IllegalArgumentException if the zone has no eqivalent local time
True,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,JodaTime/src/main/java/org/joda/time/DateTimeZone.java,955,* @throws IllegalArgumentException if the zone has no equivalent local time
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,436,"eturn iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,436,"return iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,448,"eturn iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,448,"return iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,460,"eturn iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,460,"return iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,467,"ong result = iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,467,"long result = iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,481,"eturn iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,481,"return iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,528,"eturn iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,528,"return iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,540,"eturn iZone.convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/main/java/org/joda/time/chrono/ZonedChronology.java,540,"return iZone.convertLocalToUTC(localInstant, false, instant);"
False,JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,75,"eturn iBase.getZone().convertLocalToUTC(localInstant, false);"
True,JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,75,"return iBase.getZone().convertLocalToUTC(localInstant, false, instant);"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,JodaTime/src/test/java/org/joda/time/MockZone.java,22,int sizeMillis;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,JodaTime/src/test/java/org/joda/time/MockZone.java,23,"ublic MockZone(long transition, int winterOffset) {"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,JodaTime/src/test/java/org/joda/time/MockZone.java,24,"public MockZone(long transition, int winterOffset, int sizeSecs) {"
True,JodaTime/src/test/java/org/joda/time/MockZone.java,JodaTime/src/test/java/org/joda/time/MockZone.java,28,this.sizeMillis = sizeSecs * 1000;
False,JodaTime/src/test/java/org/joda/time/MockZone.java,JodaTime/src/test/java/org/joda/time/MockZone.java,30,eturn (instant < transition ? winterOffset : winterOffset + 3600000);
True,JodaTime/src/test/java/org/joda/time/MockZone.java,JodaTime/src/test/java/org/joda/time/MockZone.java,32,return (instant < transition ? winterOffset : winterOffset + sizeMillis);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,21,import org.joda.time.chrono.GregorianChronology;
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,57,"rivate static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,58,"private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA, 3600);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,266,"rivate static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,267,"private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK, 3600);"
False,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1046,ystem.out.println(dt);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1061,"private static final DateTimeZone ZONE_PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1063,public void testWithMinuteOfHourInDstChange_mockZone() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1064,"DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1065,"assertEquals(""2010-10-31T01:15:00.000+00:30"", cutover.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1066,"DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1067,"DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1068,"assertEquals(""2010-10-31T01:00:00.000+01:00"", pre.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1069,"DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1070,"assertEquals(""2010-10-31T01:59:00.000+00:30"", post.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1072,DateTime testPre1 = pre.withMinuteOfHour(30);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1073,"assertEquals(""2010-10-31T01:30:00.000+01:00"", testPre1.toString());  // retain offset"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1074,DateTime testPre2 = pre.withMinuteOfHour(50);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1075,"assertEquals(""2010-10-31T01:50:00.000+00:30"", testPre2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1077,DateTime testPost1 = post.withMinuteOfHour(30);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1078,"assertEquals(""2010-10-31T01:30:00.000+00:30"", testPost1.toString());  // retain offset"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1079,DateTime testPost2 = post.withMinuteOfHour(10);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1080,"assertEquals(""2010-10-31T01:10:00.000+01:00"", testPost2.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1083,public void testWithHourOfDayInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1084,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1085,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1086,DateTime test = dateTime.withHourOfDay(2);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1087,"assertEquals(""2010-10-31T02:30:10.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1090,public void testWithMinuteOfHourInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1091,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1092,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1093,DateTime test = dateTime.withMinuteOfHour(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1094,"assertEquals(""2010-10-31T02:00:10.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1097,public void testWithSecondOfMinuteInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1098,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1099,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1100,DateTime test = dateTime.withSecondOfMinute(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1101,"assertEquals(""2010-10-31T02:30:00.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1104,public void testWithMillisOfSecondInDstChange_Paris_summer() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1105,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1106,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1107,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1108,"assertEquals(""2010-10-31T02:30:10.000+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1111,public void testWithMillisOfSecondInDstChange_Paris_winter() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1112,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+01:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1113,"assertEquals(""2010-10-31T02:30:10.123+01:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1114,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1115,"assertEquals(""2010-10-31T02:30:10.000+01:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1118,public void testWithMillisOfSecondInDstChange_NewYork_summer() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1119,"DateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-04:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1120,"assertEquals(""2007-11-04T01:30:00.123-04:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1121,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1122,"assertEquals(""2007-11-04T01:30:00.000-04:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1125,public void testWithMillisOfSecondInDstChange_NewYork_winter() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1126,"DateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-05:00"", ZONE_NEW_YORK);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1127,"assertEquals(""2007-11-04T01:30:00.123-05:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1128,DateTime test = dateTime.withMillisOfSecond(0);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1129,"assertEquals(""2007-11-04T01:30:00.000-05:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1132,public void testPlusMinutesInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1133,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1134,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1135,DateTime test = dateTime.plusMinutes(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1136,"assertEquals(""2010-10-31T02:31:10.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1139,public void testPlusSecondsInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1140,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1141,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1142,DateTime test = dateTime.plusSeconds(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1143,"assertEquals(""2010-10-31T02:30:11.123+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1146,public void testPlusMillisInDstChange() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1147,"DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1148,"assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1149,DateTime test = dateTime.plusMillis(1);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1150,"assertEquals(""2010-10-31T02:30:10.124+02:00"", test.toString());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1153,public void testBug2182444_usCentral() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1154,"Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(""US/Central""));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1155,Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1156,"DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1157,"DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1158,"assertTrue(""Should be standard time"", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1159,"assertFalse(""Should be daylight time"", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1161,DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1162,DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1163,"assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1164,"assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1165,assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1166,"assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1167,"assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1168,"assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1169,"assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1172,public void testBug2182444_ausNSW() {
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1173,"Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(""Australia/NSW""));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1174,Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1175,"DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1176,"DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1177,"assertTrue(""Should be standard time"", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1178,"assertFalse(""Should be daylight time"", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1180,DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1181,DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1182,"assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1183,"assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1184,assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1185,"assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1186,"assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1187,"assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));"
True,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,1188,"assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());"
False,JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java,71,"rivate static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);"
True,JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java,71,"private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA, 3600);"
False,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,123,"rivate static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);"
True,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java,123,"private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK, 3600);"

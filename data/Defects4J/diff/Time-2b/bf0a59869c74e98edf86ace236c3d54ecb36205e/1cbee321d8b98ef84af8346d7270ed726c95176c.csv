is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,27,import java.util.TimeZone;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,828,* Get the date time as a <code>java.util.Date</code>.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,829,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,830,"* The <code>Date</code> object created has exactly the same year, month and day"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,831,* as this date. The time will be set to the earliest valid time for that date.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,832,* <p>
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,833,* Converting to a JDK Date is full of complications as the JDK Date constructor
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,834,* doesn't behave as you might expect around DST transitions. This method works
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,835,* by taking a first guess and then adjusting the JDK date until it has the
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,836,* earliest valid instant. This also handles the situation where the JDK time
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,837,* zone data differs from the Joda-Time time zone data.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,839,"* @return a Date initialised with this date, never null"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,841,public Date toDate() {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,842,int dom = getDayOfMonth();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,843,"Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,844,LocalDate check = LocalDate.fromDateFields(date);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,845,if (check.isBefore(this)) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,846,// DST gap (no midnight)
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,847,// move forward in units of one hour until date correct
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,848,while (check.equals(this) == false) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,849,date.setTime(date.getTime() + 3600000);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,850,check = LocalDate.fromDateFields(date);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,852,// move back in units of one second until date wrong
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,853,while (date.getDate() == dom) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,854,date.setTime(date.getTime() - 1000);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,856,// fix result
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,857,date.setTime(date.getTime() + 1000);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,858,} else if (check.equals(this)) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,859,// check for DST overlap (two midnights)
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,860,Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,861,if (earlier.getDate() == dom) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,862,date = earlier;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,865,return date;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,23,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,24,import java.util.Date;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,25,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,27,import java.util.SimpleTimeZone;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,28,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,922,public void testToDate_summer() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,923,"LocalDate base = new LocalDate(2005, 7, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,925,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,926,"check(base, 2005, 7, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,928,GregorianCalendar gcal = new GregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,929,gcal.clear();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,930,"gcal.set(Calendar.YEAR, 2005);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,931,"gcal.set(Calendar.MONTH, Calendar.JULY);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,932,"gcal.set(Calendar.DAY_OF_MONTH, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,933,"assertEquals(gcal.getTime(), test);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,936,public void testToDate_winter() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,937,"LocalDate base = new LocalDate(2005, 1, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,939,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,940,"check(base, 2005, 1, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,942,GregorianCalendar gcal = new GregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,943,gcal.clear();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,944,"gcal.set(Calendar.YEAR, 2005);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,945,"gcal.set(Calendar.MONTH, Calendar.JANUARY);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,946,"gcal.set(Calendar.DAY_OF_MONTH, 9);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,947,"assertEquals(gcal.getTime(), test);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,950,public void testToDate_springDST() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,951,"LocalDate base = new LocalDate(2007, 4, 2);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,953,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,954,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,955,TimeZone currentZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,956,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,957,TimeZone.setDefault(testZone);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,958,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,959,"check(base, 2007, 4, 2);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,960,"assertEquals(""Mon Apr 02 01:00:00 GMT+02:00 2007"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,961,} finally {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,962,TimeZone.setDefault(currentZone);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,966,public void testToDate_springDST_2Hour40Savings() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,967,"LocalDate base = new LocalDate(2007, 4, 2);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,969,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,970,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,971,TimeZone currentZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,972,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,973,TimeZone.setDefault(testZone);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,974,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,975,"check(base, 2007, 4, 2);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,976,"assertEquals(""Mon Apr 02 02:40:00 GMT+03:40 2007"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,977,} finally {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,978,TimeZone.setDefault(currentZone);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,982,public void testToDate_autumnDST() {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,983,"LocalDate base = new LocalDate(2007, 10, 2);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,985,"SimpleTimeZone testZone = new SimpleTimeZone(3600000, ""NoMidnight"","
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,986,"Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,987,TimeZone currentZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,988,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,989,TimeZone.setDefault(testZone);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,990,Date test = base.toDate();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,991,"check(base, 2007, 10, 2);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,992,"assertEquals(""Tue Oct 02 00:00:00 GMT+02:00 2007"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,993,} finally {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,994,TimeZone.setDefault(currentZone);

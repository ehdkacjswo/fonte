is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2,  Copyright 2001-2011 Stephen Colebourne
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2221,"* From v2.2, this method handles a daylight svaings time gap, setting the"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2222,* time to the last instant before the gap.
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2223,* <p>
False,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2227,eturn setCopy(getMaximumValue());
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2230,try {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2231,return setCopy(getMaximumValue());
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2232,} catch (RuntimeException ex) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2233,if (IllegalInstantException.isIllegalInstant(ex)) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2234,"// adding MILLIS_PER_DAY is not perfect, but will work in almost all situations"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2235,long beforeGap = getChronology().getZone().previousTransition(getMillis() + DateTimeConstants.MILLIS_PER_DAY);
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2236,"return new DateTime(beforeGap, getChronology());"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2238,throw ex;
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2250,"* From v2.2, this method handles a daylight svaings time gap, setting the"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2251,* time to the first instant after the gap.
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2252,* <p>
False,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2244,eturn setCopy(getMinimumValue());
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2259,try {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2260,return setCopy(getMinimumValue());
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2261,} catch (RuntimeException ex) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2262,if (IllegalInstantException.isIllegalInstant(ex)) {
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2263,"// subtracting MILLIS_PER_DAY is not perfect, but will work in almost all situations"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2264,long afterGap = getChronology().getZone().nextTransition(getMillis() - DateTimeConstants.MILLIS_PER_DAY);
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2265,"return new DateTime(afterGap, getChronology());"
True,src/main/java/org/joda/time/DateTime.java,src/main/java/org/joda/time/DateTime.java,2267,throw ex;
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,74,"* Checks if the exception is, or has a cause, of {@code IllegalInstantException}."
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,76,* @param ex  the exception to check
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,77,* @return true if an {@code IllegalInstantException}
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,79,public static boolean isIllegalInstant(Throwable ex) {
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,80,if (ex instanceof IllegalInstantException) {
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,81,return true;
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,83,while (ex.getCause() != null && ex.getCause() != ex) {
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,84,return isIllegalInstant(ex.getCause());
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,86,return false;
False,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,2,  Copyright 2001-2005 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,646,public void testPropertyWithMaximumValueMillisOfDayDSTGap() {
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,647,"DateTimeZone paris = DateTimeZone.forID(""Europe/Paris"");"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,648,"DateTime dt = new DateTime(1926, 4, 17, 18, 0, 0, 0, paris);  // DST gap 23:00 to 00:00"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,649,DateTime test = dt.millisOfDay().withMaximumValue();
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,650,"assertEquals(""1926-04-17T22:59:59.999Z"", test.toString());"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,660,public void testPropertyWithMinimumValueMillisOfDayDSTGap() {
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,661,"DateTimeZone gaza = DateTimeZone.forID(""Asia/Gaza"");"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,662,"DateTime dt = new DateTime(2001, 4, 20, 18, 0, 0, 0, gaza);  // DST gap 00:00 to 01:00"
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,663,DateTime test = dt.millisOfDay().withMinimumValue();
True,src/test/java/org/joda/time/TestDateTime_Properties.java,src/test/java/org/joda/time/TestDateTime_Properties.java,664,"assertEquals(""2001-04-20T01:00:00.000+03:00"", test.toString());"

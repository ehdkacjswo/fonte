is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,65,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,66,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,67,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,278,public void testGetInstantMillis_RI() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,279,Instant i = new Instant(123L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,280,"assertEquals(123L, DateTimeUtils.getInstantMillis(i));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,281,try {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,282,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,283,"assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,284,} finally {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,285,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,290,public void testGetInstantChronology_RI() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,291,"DateTime dt = new DateTime(123L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,292,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,294,Instant i = new Instant(123L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,295,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(i));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,297,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,300,public void testGetInstantChronology_RI_long() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,301,"DateTime dt = new DateTime(123L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,302,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, CopticChronology.getInstance()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,303,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,305,Instant i = new Instant(123L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,306,"assertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(i, CopticChronology.getInstance()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,307,"assertEquals(null, DateTimeUtils.getInstantChronology(i, null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,309,"assertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(null, CopticChronology.getInstance()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,310,"assertEquals(null, DateTimeUtils.getInstantChronology(null, null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,314,public void testGetChronology_Chronology() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,315,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getChronology(BuddhistChronology.getInstance()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,316,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,320,public void testGetDurationMillis_RI() {
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,321,Duration dur = new Duration(123L);
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,322,"assertEquals(123L, DateTimeUtils.getDurationMillis(dur));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,323,"assertEquals(0L, DateTimeUtils.getDurationMillis(null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,157,ublic void testGetDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,157,public void testGetDuration1() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,163,public void testGetDuration2() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,164,"Interval test = new Interval(TEST_TIME1, TEST_TIME1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,165,"assertSame(Duration.ZERO, test.getDuration());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,506,public void testWithStartMillis_long3() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,507,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,508,Interval result = test.withStartMillis(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,509,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,551,public void testWithEndMillis_long3() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,552,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,553,Interval result = test.withEndMillis(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,554,"assertSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,157,ublic void testGetDuration() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,157,public void testGetDuration1() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,163,public void testGetDuration2() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,164,"MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,165,"assertSame(Duration.ZERO, test.getDuration());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,492,public void testCopy() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,493,"MutableInterval test = new MutableInterval(123L, 456L);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,494,MutableInterval cloned = test.copy();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,495,"assertEquals(test, cloned);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,496,"assertNotSame(test, cloned);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,498,public void testClone() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,499,"MutableInterval test = new MutableInterval(123L, 456L);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,500,MutableInterval cloned = (MutableInterval) test.clone();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,501,"assertEquals(test, cloned);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,502,"assertNotSame(test, cloned);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,280,"test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,281,try {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,282,test.setYears(1);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,283,fail();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,284,} catch (UnsupportedOperationException ex) {}

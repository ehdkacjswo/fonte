is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,59,mport org.joda.time.base.*;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,59,import org.joda.time.base.BasePartial;
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,309, Initialize the array of fields.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,309,* Gets the number of fields in this partial.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,311, @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,311,* @return the field count
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,313,rotected DateTimeField[] initFields(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,314,eturn new DateTimeField[] {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,315,"hrono.hourOfDay(),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,316,"hrono.minuteOfHour(),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,317,"hrono.secondOfMinute(),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,318,"hrono.millisOfSecond(),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,313,public int getFieldSize() {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,314,return 4;
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,323, Initialize the array of values.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,318,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,319,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,320,* This method must not use any instance variables.
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,325, @param instant  the instant to use
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,322,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,324,* @return the field
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,328,"rotected int[] initValues(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,329,eturn new int[] {
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,330,"hrono.hourOfDay().get(instant),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,331,"hrono.minuteOfHour().get(instant),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,332,"hrono.secondOfMinute().get(instant),"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,333,"hrono.millisOfSecond().get(instant),"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,326,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,327,switch (index) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,328,case HOUR_OF_DAY:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,329,return chrono.hourOfDay();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,330,case MINUTE_OF_HOUR:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,331,return chrono.minuteOfHour();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,332,case SECOND_OF_MINUTE:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,333,return chrono.secondOfMinute();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,334,case MILLIS_OF_SECOND:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,335,return chrono.millisOfSecond();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,336,default:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,337,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,241, Initialize the array of fields.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,241,* Gets the number of fields in this partial.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,243, @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,243,* @return the field count
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,245,rotected DateTimeField[] initFields(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,246,eturn new DateTimeField[] {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,247,"hrono.year(),"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,248,"hrono.monthOfYear(),"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,249,"hrono.dayOfMonth(),"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,245,public int getFieldSize() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,246,return 3;
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,254, Initialize the array of values.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,250,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,251,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,252,* This method must not use any instance variables.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,256, @param instant  the instant to use
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,254,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,256,* @return the field
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,259,"rotected int[] initValues(long instant, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,260,eturn new int[] {
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,261,"hrono.year().get(instant),"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,262,"hrono.monthOfYear().get(instant),"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,263,"hrono.dayOfMonth().get(instant),"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,258,"protected DateTimeField getField(int index, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,259,switch (index) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,260,case YEAR:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,261,return chrono.year();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,262,case MONTH_OF_YEAR:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,263,return chrono.monthOfYear();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,264,case DAY_OF_MONTH:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,265,return chrono.dayOfMonth();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,266,default:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,267,"throw new IndexOutOfBoundsException(""Invalid index: "" + index);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,93,* Gets the field for a specific index in the chronology specified.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,94,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,95,* This method must not use any instance variables.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,97,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,98,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,99,* @return the field
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,100,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,102,"protected abstract DateTimeField getField(int index, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,106,* Gets the field at the specifed index.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,108,* @param index  the index
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,109,* @return the field
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,110,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,112,public DateTimeField getField(int index) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,113,"return getField(index, getChronology());"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,224,"illis = getField(i).set(millis, getValue(i));"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,248,"millis = getField(i, chrono).set(millis, getValue(i));"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,56,mport java.io.IOException;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,57,mport java.io.ObjectInputStream;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,91,** The values of each field in this partial */
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,89,/** A cached array of fields. */
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,150,Fields = initFields(iChronology);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,171,Fields = initFields(iChronology);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,198,Fields = initFields(iChronology);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,216,Fields = initFields(iChronology);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,232,Fields = other.iFields;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,233,Values = values;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,227,iValues = values;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,228,iFields = other.iFields;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,239, Recreates the state of this object after deserialization.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,241, @param in  the input stream
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,243,"rivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,244,n.defaultReadObject();
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,245,Fields = initFields(iChronology);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,249, Initialize the array of fields.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,250, The field and value arrays must match.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,252, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,254,rotected abstract DateTimeField[] initFields(Chronology chrono);
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,263,"rotected abstract int[] initValues(long instant, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,267, Gets the number of fields in this partial.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,269, @return the field count
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,271,ublic int getFieldSize() {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,272,eturn iFields.length;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,239,"protected int[] initValues(long instant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,240,int[] values = new int[getFieldSize()];
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,241,for (int i = 0; i < values.length; i++) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,242,"values[i] = getField(i, chrono).get(instant);"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,244,return values;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,283,eturn iFields[index];
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,256,DateTimeField[] fields = iFields;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,257,if (fields != null) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,258,return fields[index];
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,259,} else {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,260,"return getField(index, getChronology());"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,265,* Gets an array of the fields that this partial supports.
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,266,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,267,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,269,"* @return the fields supported in an array that may be altered, largest to smallest"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,271,public DateTimeField[] getFields() {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,272,DateTimeField[] fields = iFields;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,273,if (fields == null) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,274,fields = super.getFields();
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,275,iFields = fields;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,277,return (DateTimeField[]) fields.clone();
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,299, Gets an array of the fields that this partial supports.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,300, <p>
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,301," The fields are returned largest to smallest, for example Hour, Minute, Second."
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,303," @return the fields supported (cloned), largest to smallest"
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,305,ublic DateTimeField[] getFields() {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,306,eturn (DateTimeField[]) iFields.clone();

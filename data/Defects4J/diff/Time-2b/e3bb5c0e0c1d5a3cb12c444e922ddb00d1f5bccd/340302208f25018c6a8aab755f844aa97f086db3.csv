is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,31,mport org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,31,import org.joda.time.convert.PartialConverter;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,259," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,259,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,260,* The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,278," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,279,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,280,* The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,285,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,287,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,287,ong millis = converter.getInstantMillis
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,288,"instant, chronology, ISODateTimeFormat.dateParser());"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,290,"ong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,291,hronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,292,hronology.dayOfMonth().roundFloor(localMillis);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,293,LocalMillis = localMillis;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,294,Chronology = chronology;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,289,chronology = DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,290,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,291,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,292,"iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,306," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,304,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,305,* The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,313,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,314,hronology chrono = DateTimeUtils.getChronology
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,315,"converter.getChronology(instant, chronology));"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,316,ong millis = converter.getInstantMillis
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,317,"instant, chronology, ISODateTimeFormat.dateParser());"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,319,"ong localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,320,hrono = chrono.withUTC();
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,321,hrono.dayOfMonth().roundFloor(localMillis);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,322,LocalMillis = localMillis;
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,323,Chronology = chrono;
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,312,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,313,"chronology = converter.getChronology(instant, chronology);"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,314,chronology = DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,315,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,316,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,317,"iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,29,mport org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,29,import org.joda.time.convert.PartialConverter;
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,253," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,253,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,254,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,272," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,273,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,274,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,279,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,281,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,281,"ong millis = converter.getInstantMillis(instant, chronology);"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,284,"ong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,285,LocalMillis = localMillis;
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,285,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,286,"iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,298," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,298,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,299,* The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,305,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,306,"hronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,307,"ong millis = converter.getInstantMillis(instant, chrono);"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,309,"ong localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,310,LocalMillis = localMillis;
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,311,Chronology = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,306,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,307,"chronology = converter.getChronology(instant, chronology);"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,308,chronology = DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,309,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,310,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,311,"iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,31,mport org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,31,import org.joda.time.convert.PartialConverter;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,288," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,288,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,289,* The String formats are described by {@link ISODateTimeFormat#timeParser()}.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,307," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,308,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,309,* The String formats are described by {@link ISODateTimeFormat#timeParser()}.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,314,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,316,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,316,ong millis = converter.getInstantMillis
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,317,"instant, chronology, ISODateTimeFormat.timeParser());"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,320,"ong localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,321,hronology = chronology.withUTC();
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,322,hronology.millisOfDay().get(localMillis);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,323,LocalMillis = localMillis;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,324,Chronology = chronology;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,319,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,320,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,321,"iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,336," include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,333,"* include ReadablePartial, ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,334,* The String formats are described by {@link ISODateTimeFormat#timeParser()}.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,343,nstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,344,hronology chrono = DateTimeUtils.getChronology
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,345,"converter.getChronology(instant, chronology));"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,346,ong millis = converter.getInstantMillis
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,347,"instant, chronology, ISODateTimeFormat.timeParser());"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,349,"ong localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,350,hrono = chrono.withUTC();
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,351,hrono.millisOfDay().get(localMillis);
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,352,LocalMillis = localMillis;
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,353,Chronology = chrono;
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,341,PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,342,"chronology = converter.getChronology(instant, chronology);"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,343,chronology = DateTimeUtils.getChronology(chronology);
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,344,iChronology = chronology.withUTC();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,345,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,346,"iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,56, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,57, <p>
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,58, This implementation returns the current time.
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,60, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,61," @param chrono  the chronology to use, which is always non-null"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,62," @param parser  if converting from a String, the given parser is preferred"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,63, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,64, @since 1.3
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,66,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,67,"eturn getInstantMillis(object, chrono);"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,90,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,91,"* This implementation calls {@link #getInstantMillis(Object, Chronology)}."
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,109,* <p>
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,110,"* This implementation calls {@link #getPartialValues(ReadablePartial, Object, Chronology)}."
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,132,"ublic int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono,"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,133,ateTimeFormatter parser)
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,135,"ong instant = getInstantMillis(object, chrono, parser);"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,136,"eturn chrono.get(fieldSource, instant);"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,121,"public int[] getPartialValues(ReadablePartial fieldSource,"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,122,"Object object, Chronology chrono, DateTimeFormatter parser) {"
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,123,"return getPartialValues(fieldSource, object, chrono);"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,20,mport org.joda.time.format.DateTimeFormatter;
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,74, Extracts the millis from an object of this converter's type.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,75, <p>
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,76, The chronology passed in is the result of the call to <code>getChronology</code>.
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,78, @param object  the object to convert
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,79," @param chrono  the chronology to use, which is the non-null result of getChronology()"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,80," @param parser  if converting from a String, the given parser is preferred"
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,81, @return the millisecond instant
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,82, @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,83, @throws IllegalArgumentException if object conversion fails
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,84, @since 1.3
False,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,JodaTime/src/java/org/joda/time/convert/InstantConverter.java,86,"ong getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser);"
False,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,19,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,36,* Extracts the chronology from an object of this converter's type
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,37,* where the time zone is specified.
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,39,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,40,"* @param zone  the specified zone to use, null means default zone"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,41,"* @return the chronology, never null"
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,42,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,43,* @since 1.3
True,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,JodaTime/src/java/org/joda/time/convert/PartialConverter.java,45,"Chronology getChronology(Object object, DateTimeZone zone);"
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,89,f (input.size() != size) {
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,90,"hrow new IllegalArgumentException(""Partial field type lists are different"");"
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,94,f (fieldSource.getFieldType(i) != input.getFieldType(i)) {
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,95,"hrow new IllegalArgumentException(""Partial field type lists are different"");"
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,97,alues[i] = input.getValue(i);
True,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,91,values[i] = input.get(fieldSource.getFieldType(i));
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,23,import org.joda.time.ReadablePartial;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,68," Gets the millis, which is the ISO parsed string value."
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,69,* Extracts the values of the partial from an object of this converter's type.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,70,"* The chrono parameter is a hint to the converter, should it require a"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71,* chronology to aid in conversion.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,70," @param object  the String to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,71," @param chrono  the chronology to use, non-null result of getChronology"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,72, @param parser  the given parser is preferred
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,73, @return the millisecond value
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,73,* @param fieldSource  a partial that provides access to the fields.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,74,*  This partial may be incomplete and only getFieldType(int) should be used
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,75,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,76,"* @param chrono  the chronology to use, which is the non-null result of getChronology()"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,77,"* @return the array of field values that match the fieldSource, must be non-null valid"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,78,* @throws ClassCastException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,77,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,78,eturn parser.withChronology(chrono).parseMillis((String) object);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,82,"public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono, DateTimeFormatter parser) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,83,long millis = parser.withChronology(chrono).parseMillis((String) object);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,84,int size = fieldSource.size();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,85,int[] values = new int[size];
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,86,for (int i = 0; i < size; i++) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,87,values[i] = fieldSource.getFieldType(i).getField(chrono).get(millis);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,89,"chrono.validate(fieldSource, values);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,90,return values;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,132,tp; // date time parser
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,132,"dtp, // date time parser"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,133,dotp; // date optional time parser
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,684, Returns a generic ISO datetime parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,685, the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,685,* Returns a generic ISO datetime parser which parses either a date or
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,686,* a time or both. It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,732,* Returns a generic ISO datetime parser where the date is mandatory and
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,733,* the time is optional. It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,734,* <pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,735,* datetime          = date-element ['T' time-element [offset]])
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,736,* date-element      = std-date-element | ord-date-element | week-date-element
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,737,* std-date-element  = yyyy ['-' MM ['-' dd]]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,738,* ord-date-element  = yyyy ['-' DDD]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,739,* week-date-element = xxxx '-W' ww ['-' e]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,740,* time-element      = HH [minute-element] | [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,741,* minute-element    = ':' mm [second-element] | [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,742,* second-element    = ':' ss [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,743,"* fraction          = ('.' | ',') digit+"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,744,"* offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,745,* </pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,747,public static DateTimeFormatter dateOptionalTimeParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,748,if (dotp == null) {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,749,dotp = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,750,.append(dateElementParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,751,.appendOptional(
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,752,new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,753,.appendLiteral('T')
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,754,.append(timeElementParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,755,.appendOptional(offsetElement().getParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,756,.toParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,757,.toFormatter();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,759,return dotp;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,25,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,42,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,316,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,317,"LocalDateTime test = new LocalDateTime(""1972-04-06"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,318,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,319,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,320,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,321,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,322,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,323,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,324,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,325,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,328,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,329,"LocalDateTime test = new LocalDateTime(""1972-037"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,330,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,331,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,332,"assertEquals(2, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,333,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,334,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,335,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,336,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,337,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,340,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,341,"LocalDateTime test = new LocalDateTime(""1972-04-06T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,342,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,343,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,344,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,345,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,346,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,347,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,348,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,349,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,352,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,353,"LocalDateTime test = new LocalDateTime(""1972-04-06T10:20"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,354,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,355,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,356,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,357,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,358,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,359,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,360,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,361,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,364,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,365,"LocalDateTime test = new LocalDateTime(""1972-04-06T10:20:30.040+06:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,366,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,367,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,368,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,369,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,370,"assertEquals(10 + OFFSET_MOSCOW - 6, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,371,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,372,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,373,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,376,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,377,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,378,"new LocalDateTime(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,379,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,380,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,383,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,384,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,385,"new LocalDateTime(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,386,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,387,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,390,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,391,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,392,"new LocalDateTime(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,393,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,394,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,397,public void testConstructor_ObjectLocalDateTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,398,"LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,399,LocalDateTime test = new LocalDateTime(dt);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,400,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,401,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,402,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,403,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,404,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,405,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,406,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,407,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,410,public void testConstructor_ObjectLocalDate() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,411,"LocalDate date = new LocalDate(1970, 5, 6);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,412,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,413,new LocalDateTime(date);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,414,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,415,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,418,public void testConstructor_ObjectLocalTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,419,"LocalTime time = new LocalTime(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,420,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,421,new LocalDateTime(time);
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,422,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,423,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,246,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,247,"LocalDate test = new LocalDate(""1972-04-06"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,248,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,249,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,250,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,251,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,254,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,255,"LocalDate test = new LocalDate(""1972-037"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,256,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,257,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,258,"assertEquals(2, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,259,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,262,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,263,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,264,"new LocalDate(""1970-04-06T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,265,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,266,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,269,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,270,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,271,"new LocalDate(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,272,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,273,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,276,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,277,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,278,"new LocalDate(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,279,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,280,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,283,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,284,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,285,"new LocalDate(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,286,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,287,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,290,public void testConstructor_ObjectLocalDate() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,291,"LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,292,LocalDate test = new LocalDate(date);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,293,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,294,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,295,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,296,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,299,public void testConstructor_ObjectLocalTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,300,"LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,301,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,302,new LocalDate(time);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,303,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,304,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,307,public void testConstructor_ObjectLocalDateTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,308,"LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,309,LocalDate test = new LocalDate(dt);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,310,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,311,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,312,"assertEquals(5, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,313,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,316,public void testConstructor_ObjectYearMonthDay() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,317,"YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,318,LocalDate test = new LocalDate(date);
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,319,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,320,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,321,"assertEquals(4, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,322,"assertEquals(6, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,25,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,43,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,320,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,321,"LocalTime test = new LocalTime(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,322,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,323,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,324,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,325,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,326,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,329,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,330,"LocalTime test = new LocalTime(""10:20:30.040+04:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,331,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,332,"assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,333,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,334,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,335,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,338,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,339,"LocalTime test = new LocalTime(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,340,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,341,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,342,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,343,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,344,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,347,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,348,"LocalTime test = new LocalTime(""T10:20:30.040+04:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,349,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,350,"assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,351,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,352,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,353,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,356,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,357,"LocalTime test = new LocalTime(""10:20"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,358,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,359,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,360,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,361,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,362,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,365,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,366,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,367,"new LocalTime(""1970-04-06"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,368,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,369,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,372,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,373,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,374,"new LocalTime(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,375,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,376,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,379,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,380,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,381,"new LocalTime(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,382,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,383,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,386,public void testConstructor_ObjectLocalTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,387,"LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,388,LocalTime test = new LocalTime(time);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,389,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,390,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,391,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,392,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,393,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,396,public void testConstructor_ObjectLocalDate() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,397,"LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,398,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,399,new LocalTime(date);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,400,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,401,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,404,public void testConstructor_ObjectLocalDateTime() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,405,"LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,406,LocalTime test = new LocalTime(dt);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,407,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,408,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,409,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,410,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,411,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,414,public void testConstructor_ObjectTimeOfDay() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,415,"TimeOfDay time = new TimeOfDay(10, 20, 30, 40, BUDDHIST_UTC);"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,416,LocalTime test = new LocalTime(time);
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,417,"assertEquals(BUDDHIST_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,418,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,419,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,420,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,421,"assertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,172,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,191,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,220,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,239,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,300,"ublic long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,378,"public Chronology getChronology(Object object, DateTimeZone zone) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,397,"public Chronology getChronology(Object object, DateTimeZone zone) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,426,"public Chronology getChronology(Object object, DateTimeZone zone) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,445,"public Chronology getChronology(Object object, DateTimeZone zone) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,506,"public Chronology getChronology(Object object, DateTimeZone zone) {return null;}"

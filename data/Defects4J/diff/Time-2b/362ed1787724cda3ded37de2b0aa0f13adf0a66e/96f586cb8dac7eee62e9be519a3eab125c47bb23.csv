is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,246, The minutes value is always positive and in the range 0 to 59.
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,247," If constructed with the values (-2, 30), the resulting zone is '-02:30'."
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,246,* The hours value must be in the range -23 to +23.
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,247,* The minutes value must be in the range -59 to +59.
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,248,* The following combinations of sign for the hour and minute are possible:
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,249,* <pre>
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,250,*  Hour    Minute    Example    Result
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,252,"*  +ve     +ve       (2, 15)    +02:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,253,"*  +ve     zero      (2, 0)     +02:00"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,254,"*  +ve     -ve       (2, -15)   IllegalArgumentException"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,256,"*  zero    +ve       (0, 15)    +00:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,257,"*  zero    zero      (0, 0)     +00:00"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,258,"*  zero    -ve       (0, -15)   -00:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,260,"*  -ve     +ve       (-2, 15)   -02:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,261,"*  -ve     zero      (-2, 0)    -02:00"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,262,"*  -ve     -ve       (-2, -15)  -02:15"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,263,* </pre>
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,264,"* Note that in versions before 2.3, the minutes had to be zero or positive."
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,250," @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,267,"* @param minutesOffset  the offset in minutes from UTC, from -59 to +59"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,252, @throws IllegalArgumentException if the offset or minute is too large or too small
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,269,"* @throws IllegalArgumentException if any value is out of range, the minutes are negative"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,270,"*  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,261,f (minutesOffset < 0 || minutesOffset > 59) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,279,if (minutesOffset < -59 || minutesOffset > 59) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,282,if (hoursOffset > 0 && minutesOffset < 0) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,283,"throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,268,inutesOffset = hoursInMinutes - minutesOffset;
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,289,minutesOffset = hoursInMinutes - Math.abs(minutesOffset);
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,306,"ssertEquals(DateTimeZone.forID(""+03:15""), DateTimeZone.forOffsetHoursMinutes(3, 15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,307,"assertEquals(DateTimeZone.forID(""+02:15""), DateTimeZone.forOffsetHoursMinutes(2, 15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,308,"assertEquals(DateTimeZone.forID(""+02:00""), DateTimeZone.forOffsetHoursMinutes(2, 0));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,309,try {
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,310,"DateTimeZone.forOffsetHoursMinutes(2, -15);"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,311,fail();
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,312,} catch (IllegalArgumentException ex) {}
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,314,"assertEquals(DateTimeZone.forID(""+00:15""), DateTimeZone.forOffsetHoursMinutes(0, 15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,315,"assertEquals(DateTimeZone.forID(""+00:00""), DateTimeZone.forOffsetHoursMinutes(0, 0));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,316,"assertEquals(DateTimeZone.forID(""-00:15""), DateTimeZone.forOffsetHoursMinutes(0, -15));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,308,"ssertEquals(DateTimeZone.forID(""-02:30""), DateTimeZone.forOffsetHoursMinutes(-2, 30));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,319,"assertEquals(DateTimeZone.forID(""-02:15""), DateTimeZone.forOffsetHoursMinutes(-2, -15));"
True,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,320,"assertEquals(DateTimeZone.forID(""-02:15""), DateTimeZone.forOffsetHoursMinutes(-2, 15));"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,318,ry {
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,319,"ateTimeZone.forOffsetHoursMinutes(2, -1);"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,320,ail();
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,321, catch (IllegalArgumentException ex) {}
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,322,ry {
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,323,"ateTimeZone.forOffsetHoursMinutes(-2, -1);"
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,324,ail();
False,src/test/java/org/joda/time/TestDateTimeZone.java,src/test/java/org/joda/time/TestDateTimeZone.java,325, catch (IllegalArgumentException ex) {}

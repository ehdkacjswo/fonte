is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,22,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,23,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,98,"ssertEquals(Chronology.getBuddhistUTC().year(), mock.getField(0));"
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,99,"ssertEquals(Chronology.getBuddhistUTC().monthOfYear(), mock.getField(1));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,100,"assertEquals(BuddhistChronology.getInstanceUTC().year(), mock.getField(0));"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,101,"assertEquals(BuddhistChronology.getInstanceUTC().monthOfYear(), mock.getField(1));"
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,136,"earMonthDay ymd = new YearMonthDay(1970, 2, 1, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,138,"YearMonthDay ymd = new YearMonthDay(1970, 2, 1, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,182,eturn Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,184,return BuddhistChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,212,eturn Chronology.getBuddhistUTC().hourOfDay();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,214,return BuddhistChronology.getInstanceUTC().hourOfDay();
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,224,eturn Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,226,return ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,33,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,602,"ateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,603,"DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,604,"ssertEquals(new YearMonthDay(TEST_TIME1_UTC, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,605,"assertEquals(new YearMonthDay(TEST_TIME1_UTC, CopticChronology.getInstance()), test);"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,608,"ateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,609,"DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,27,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,58,"ssertEquals(Chronology.getCopticUTC().era(), DateTimeFieldType.era().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,59,"ssertEquals(Chronology.getCopticUTC().era().isSupported(), DateTimeFieldType.era().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,60,"assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,61,"assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,68,"ssertEquals(Chronology.getCopticUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,69,"ssertEquals(Chronology.getCopticUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,70,"assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,71,"assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,78,"ssertEquals(Chronology.getCopticUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,79,"ssertEquals(Chronology.getCopticUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,80,"assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,81,"assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,88,"ssertEquals(Chronology.getCopticUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,89,"ssertEquals(Chronology.getCopticUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,90,"assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,91,"assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,98,"ssertEquals(Chronology.getCopticUTC().year(), DateTimeFieldType.year().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,99,"ssertEquals(Chronology.getCopticUTC().year().isSupported(), DateTimeFieldType.year().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,100,"assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,101,"assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,108,"ssertEquals(Chronology.getCopticUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,109,"ssertEquals(Chronology.getCopticUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,110,"assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,111,"assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,118,"ssertEquals(Chronology.getCopticUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,119,"ssertEquals(Chronology.getCopticUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,120,"assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,121,"assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,128,"ssertEquals(Chronology.getCopticUTC().weekyear(), DateTimeFieldType.weekyear().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,129,"ssertEquals(Chronology.getCopticUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,130,"assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,131,"assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,138,"ssertEquals(Chronology.getCopticUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,139,"ssertEquals(Chronology.getCopticUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,140,"assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,141,"assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,148,"ssertEquals(Chronology.getCopticUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,149,"ssertEquals(Chronology.getCopticUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,150,"assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,151,"assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,158,"ssertEquals(Chronology.getCopticUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,159,"ssertEquals(Chronology.getCopticUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,160,"assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,161,"assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,168,"ssertEquals(Chronology.getCopticUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,169,"ssertEquals(Chronology.getCopticUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,170,"assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,171,"assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,178,"ssertEquals(Chronology.getCopticUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,179,"ssertEquals(Chronology.getCopticUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,180,"assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,181,"assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,188,"ssertEquals(Chronology.getCopticUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,189,"ssertEquals(Chronology.getCopticUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,190,"assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,191,"assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,198,"ssertEquals(Chronology.getCopticUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,199,"ssertEquals(Chronology.getCopticUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,200,"assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,201,"assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,208,"ssertEquals(Chronology.getCopticUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,209,"ssertEquals(Chronology.getCopticUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,210,"assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,211,"assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,218,"ssertEquals(Chronology.getCopticUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,219,"ssertEquals(Chronology.getCopticUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,220,"assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,221,"assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,228,"ssertEquals(Chronology.getCopticUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,229,"ssertEquals(Chronology.getCopticUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,230,"assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,231,"assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,238,"ssertEquals(Chronology.getCopticUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,239,"ssertEquals(Chronology.getCopticUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,240,"assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,241,"assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,248,"ssertEquals(Chronology.getCopticUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,249,"ssertEquals(Chronology.getCopticUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,250,"assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,251,"assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,258,"ssertEquals(Chronology.getCopticUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,259,"ssertEquals(Chronology.getCopticUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,260,"assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,261,"assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,268,"ssertEquals(Chronology.getCopticUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,269,"ssertEquals(Chronology.getCopticUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,270,"assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,271,"assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,278,"ssertEquals(Chronology.getCopticUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,279,"ssertEquals(Chronology.getCopticUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,280,"assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,281,"assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,296,ype.getField(Chronology.getCopticUTC());
True,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java,298,type.getField(CopticChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,32,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,311,"nterval dt = new Interval(123L, 456L, Chronology.getBuddhist());"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,312,"ssertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,312,"Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,313,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,314,"ssertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,315,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,321,"ssertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(ai));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,322,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,326,"ateTime dt1 = new DateTime(123L, Chronology.getBuddhist());"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,327,"ateTime dt2 = new DateTime(123L, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,328,"ssertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, dt2));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,329,"ssertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,330,"ssertEquals(Chronology.getCoptic(), DateTimeUtils.getIntervalChronology(null, dt2));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,331,"ssertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null, null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,327,"DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,328,"DateTime dt2 = new DateTime(123L, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,329,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,330,"assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,331,"assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,332,"assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,34,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,664,"ateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,665,"DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,666,"ssertEquals(new DateMidnight(base, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,667,"assertEquals(new DateMidnight(base, CopticChronology.getInstance()), test);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,670,"ateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,671,"DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,672,"ssertEquals(new YearMonthDay(TEST_TIME1, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,673,"assertEquals(new YearMonthDay(TEST_TIME1, CopticChronology.getInstance()), test);"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,676,"ateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,677,"DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,678,"ssertEquals(new TimeOfDay(TEST_TIME1, Chronology.getCoptic()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,679,"assertEquals(new TimeOfDay(TEST_TIME1, CopticChronology.getInstance()), test);"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,23,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,319,"ssertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic()).year()));"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,321,"assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year()));"
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,324,"ssertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic()).year().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,326,"assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year().hashCode());"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,27,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,56,"ssertEquals(Chronology.getCopticUTC().eras(), DurationFieldType.eras().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,57,"ssertEquals(Chronology.getCopticUTC().eras().isSupported(), DurationFieldType.eras().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,58,"assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,59,"assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,64,"ssertEquals(Chronology.getCopticUTC().centuries(), DurationFieldType.centuries().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,65,"ssertEquals(Chronology.getCopticUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,66,"assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,67,"assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,72,"ssertEquals(Chronology.getCopticUTC().years(), DurationFieldType.years().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,73,"ssertEquals(Chronology.getCopticUTC().years().isSupported(), DurationFieldType.years().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,74,"assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,75,"assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,80,"ssertEquals(Chronology.getCopticUTC().months(), DurationFieldType.months().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,81,"ssertEquals(Chronology.getCopticUTC().months().isSupported(), DurationFieldType.months().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,82,"assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,83,"assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,88,"ssertEquals(Chronology.getCopticUTC().weekyears(), DurationFieldType.weekyears().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,89,"ssertEquals(Chronology.getCopticUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,90,"assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,91,"assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,96,"ssertEquals(Chronology.getCopticUTC().weeks(), DurationFieldType.weeks().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,97,"ssertEquals(Chronology.getCopticUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,98,"assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,99,"assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,104,"ssertEquals(Chronology.getCopticUTC().days(), DurationFieldType.days().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,105,"ssertEquals(Chronology.getCopticUTC().days().isSupported(), DurationFieldType.days().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,106,"assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,107,"assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,112,"ssertEquals(Chronology.getCopticUTC().halfdays(), DurationFieldType.halfdays().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,113,"ssertEquals(Chronology.getCopticUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,114,"assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,115,"assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,120,"ssertEquals(Chronology.getCopticUTC().hours(), DurationFieldType.hours().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,121,"ssertEquals(Chronology.getCopticUTC().hours().isSupported(), DurationFieldType.hours().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,122,"assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,123,"assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,128,"ssertEquals(Chronology.getCopticUTC().minutes(), DurationFieldType.minutes().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,129,"ssertEquals(Chronology.getCopticUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,130,"assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,131,"assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,136,"ssertEquals(Chronology.getCopticUTC().seconds(), DurationFieldType.seconds().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,137,"ssertEquals(Chronology.getCopticUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,138,"assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,139,"assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,144,"ssertEquals(Chronology.getCopticUTC().millis(), DurationFieldType.millis().getField(Chronology.getCopticUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,145,"ssertEquals(Chronology.getCopticUTC().millis().isSupported(), DurationFieldType.millis().isSupported(Chronology.getCopticUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,146,"assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,147,"assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,159,ype.getField(Chronology.getCopticUTC());
True,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,JodaTime/src/test/org/joda/time/TestDurationFieldType.java,161,type.getField(CopticChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,30,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,318,eriod result = test.toPeriod(Chronology.getISOUTC());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,319,"ssertEquals(new Period(test, Chronology.getISOUTC()), result);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,320,"ssertEquals(new Period(test.getMillis(), Chronology.getISOUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,319,Period result = test.toPeriod(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,320,"assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,321,"assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,331,"eriod result = test.toPeriod(PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,332,"ssertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,333,"ssertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,332,"Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,333,"assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,334,"assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,21,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,22,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,23,import org.joda.time.chrono.JulianChronology;
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,44,"ieldUtils.verifyValueBounds(Chronology.getISO().monthOfYear(), -5, 1, 31);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,47,"FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,88,"Chronology.getISOUTC(), Chronology.getISOUTC().year(), 1970);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,91,"(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,106,"hronology.getISOUTC().year().set(0, null, java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,109,"ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,120,"hronology.getISOUTC().year().set(0, ""nineteen seventy"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,123,"ISOChronology.getInstanceUTC().year().set(0, ""nineteen seventy"", java.util.Locale.US);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,134,"hronology.getISOUTC().era().set(0, ""long ago"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,137,"ISOChronology.getInstanceUTC().era().set(0, ""long ago"", java.util.Locale.US);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,148,"hronology.getISOUTC().monthOfYear().set(0, ""spring"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,151,"ISOChronology.getInstanceUTC().monthOfYear().set(0, ""spring"", java.util.Locale.US);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,162,"hronology.getISOUTC().dayOfWeek().set(0, ""yesterday"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,165,"ISOChronology.getInstanceUTC().dayOfWeek().set(0, ""yesterday"", java.util.Locale.US);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,176,"hronology.getISOUTC().halfdayOfDay().set(0, ""morning"", java.util.Locale.US);"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,179,"ISOChronology.getInstanceUTC().halfdayOfDay().set(0, ""morning"", java.util.Locale.US);"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,209,ateTime dt = new DateTime(Chronology.getJulianUTC());
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,212,DateTime dt = new DateTime(JulianChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,226,"ateTime dt = new DateTime(""1582-10-04"", Chronology.getGJUTC());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,229,"DateTime dt = new DateTime(""1582-10-04"", GJChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,241,"t = new DateTime(""1582-10-15"", Chronology.getGJUTC());"
True,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java,244,"dt = new DateTime(""1582-10-15"", GJChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,178,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,178,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,215,eturn Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,215,return ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,24,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,89,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,90,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,99,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,100,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,108,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,109,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,119,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,120,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,138,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,139,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,149,"ssertEquals(Chronology.getISOUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,150,"assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,29,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,30,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,31,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,32,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,41,rivate static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,45,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,152,"nterval test4 = new Interval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,156,"Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,182,eturn Chronology.getISO();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,186,return ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,557,nterval test = base.withChronology(Chronology.getBuddhist());
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,558,"ssertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getBuddhist()), test);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,561,Interval test = base.withChronology(BuddhistChronology.getInstance());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,562,"assertEquals(new Interval(TEST_TIME1, TEST_TIME2, BuddhistChronology.getInstance()), test);"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,564,"ssertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getISO()), test);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,568,"assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,21,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,22,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,24,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,25,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,26,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,25,mport junit.framework.TestCase;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,26,mport junit.framework.TestSuite;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,108,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,111,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,116,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,119,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,132,"nterval test = new Interval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,135,"Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,135,"ssertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,138,"assertEquals(GJChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,144,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,147,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,201,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,204,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,206,"ssertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,209,"assertEquals(GJChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,211,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,214,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,215,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,218,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,245,"ateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,248,"DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,248,"esult = Chronology.getCopticUTC().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,249,"esult = Chronology.getCopticUTC().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,250,"esult = Chronology.getCopticUTC().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,251,"result = CopticChronology.getInstanceUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,252,"result = CopticChronology.getInstanceUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,253,"result = CopticChronology.getInstanceUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,319,"esult = Chronology.getISOUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,320,"esult = Chronology.getISOUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,321,"esult = Chronology.getISOUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,322,"result = ISOChronology.getInstanceUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,323,"result = ISOChronology.getInstanceUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,324,"result = ISOChronology.getInstanceUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,329,"ateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,332,"DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,332,"esult = Chronology.getCopticUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,333,"esult = Chronology.getCopticUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,334,"esult = Chronology.getCopticUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,335,"result = CopticChronology.getInstanceUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,336,"result = CopticChronology.getInstanceUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,337,"result = CopticChronology.getInstanceUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,571,eturn Chronology.getISO();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,574,return ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,638,"nterval test = new Interval(base, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,641,"Interval test = new Interval(base, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,641,"ssertEquals(Chronology.getBuddhist(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,644,"assertEquals(BuddhistChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,652,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,655,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,29,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,30,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,31,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,41,rivate static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,44,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,152,"utableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,155,"MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,182,eturn Chronology.getISO();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,185,return ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,21,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,22,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,24,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,25,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,25,mport junit.framework.TestCase;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,26,mport junit.framework.TestSuite;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,122,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,124,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,130,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,132,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,146,"utableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,148,"MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,149,"ssertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,151,"assertEquals(GJChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,158,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,160,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,215,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,217,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,220,"ssertEquals(Chronology.getGJ(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,222,"assertEquals(GJChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,225,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,227,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,229,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,231,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,237,"esult = Chronology.getISO().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,238,"esult = Chronology.getISO().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,239,"result = ISOChronology.getInstance().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,240,"result = ISOChronology.getInstance().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,249,"esult = Chronology.getISOUTC().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,250,"esult = Chronology.getISOUTC().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,251,"esult = Chronology.getISOUTC().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,251,"result = ISOChronology.getInstanceUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,252,"result = ISOChronology.getInstanceUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,253,"result = ISOChronology.getInstanceUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,259,"ateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,261,"DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,262,"esult = Chronology.getISOUTC().months().add(result, 6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,263,"esult = Chronology.getISOUTC().days().add(result, 3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,264,"esult = Chronology.getISOUTC().hours().add(result, 1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,264,"result = ISOChronology.getInstanceUTC().months().add(result, 6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,265,"result = ISOChronology.getInstanceUTC().days().add(result, 3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,266,"result = ISOChronology.getInstanceUTC().hours().add(result, 1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,321,"esult = Chronology.getISO().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,322,"esult = Chronology.getISO().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,323,"result = ISOChronology.getInstance().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,324,"result = ISOChronology.getInstance().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,333,"esult = Chronology.getISOUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,334,"esult = Chronology.getISOUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,335,"esult = Chronology.getISOUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,335,"result = ISOChronology.getInstanceUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,336,"result = ISOChronology.getInstanceUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,337,"result = ISOChronology.getInstanceUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,343,"ateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,345,"DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,346,"esult = Chronology.getISOUTC().months().add(result, -6);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,347,"esult = Chronology.getISOUTC().days().add(result, -3);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,348,"esult = Chronology.getISOUTC().hours().add(result, -1);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,348,"result = ISOChronology.getInstanceUTC().months().add(result, -6);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,349,"result = ISOChronology.getInstanceUTC().days().add(result, -3);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,350,"result = ISOChronology.getInstanceUTC().hours().add(result, -1);"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,585,eturn Chronology.getISO();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,587,return ISOChronology.getInstance();
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,652,"utableInterval test = new MutableInterval(base, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,654,"MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,655,"ssertEquals(Chronology.getBuddhist(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,657,"assertEquals(BuddhistChronology.getInstance(), test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,666,"ssertEquals(Chronology.getISO(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,668,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,25,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,177,eturn Chronology.getISO();
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,178,return ISOChronology.getInstance();
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,24,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,25,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,273,"utablePeriod test = new MutablePeriod(length, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,276,"MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,290,"utablePeriod test = new MutablePeriod(length, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,293,"MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,325,"utablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,328,"MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,342,"utablePeriod test = new MutablePeriod(length, PeriodType.standard(), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,345,"MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,538,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,539,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,540,"utablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,541,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,542,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,543,"MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,569,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,570,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,571,"utablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,572,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,573,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,574,"MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,934,"utablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,937,"MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,952,"utablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,955,"MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,24,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1137,"est.add(100L, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1139,"test.add(100L, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1155,"est.add(ms, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1157,"test.add(ms, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1174,"est.add(ms, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1176,"test.add(ms, ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,29,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,30,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,31,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,43,rivate static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,44,rivate static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,45,rivate static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,46,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,47,rivate static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,48,rivate static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,49,rivate static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,50,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,51,rivate static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,52,rivate static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,53,rivate static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,54,rivate static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,46,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,47,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,48,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,49,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,50,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,51,private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,52,private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,53,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,54,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,55,private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,56,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,57,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,144,"ssertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));"
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,145,"ssertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,147,"assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,148,"assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));"
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,158,"ssertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);"
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,159,"ssertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,161,"assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,162,"assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,21,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,22,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,23,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,32,rivate static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,33,rivate static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,34,rivate static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,35,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,36,rivate static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,37,rivate static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,38,rivate static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,39,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,40,rivate static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,41,rivate static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,42,rivate static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
False,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,43,rivate static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,36,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,37,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,38,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,39,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,40,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,41,private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,42,private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,43,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,44,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,45,private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,46,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestPartial_Match.java,JodaTime/src/test/org/joda/time/TestPartial_Match.java,47,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,24,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,25,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,240,"eriod test = new Period(length, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,243,"Period test = new Period(length, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,257,"eriod test = new Period(length, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,260,"Period test = new Period(length, ISOChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,292,"eriod test = new Period(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,295,"Period test = new Period(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,309,"eriod test = new Period(length, PeriodType.standard(), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,312,"Period test = new Period(length, PeriodType.standard(), ISOChronology.getInstanceUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,521,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,522,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,523,"eriod test = new Period(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,524,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,525,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,526,"Period test = new Period(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,552,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,553,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,554,"eriod test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,555,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,556,"DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,557,"Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,30,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,32,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,45,rivate static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,46,rivate static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,47,rivate static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,48,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,49,rivate static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,50,rivate static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,51,rivate static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,52,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,53,rivate static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,54,rivate static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,55,rivate static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,56,rivate static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,47,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,48,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,49,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,50,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,51,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,52,private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,53,private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,54,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,55,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,56,private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,57,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,58,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,151,"ssertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,152,"ssertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,153,"ssertSame(Chronology.getCopticUTC().secondOfMinute(), test.getField(2));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,154,"ssertSame(Chronology.getCopticUTC().millisOfSecond(), test.getField(3));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,153,"assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,154,"assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,155,"assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,156,"assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,166,"ssertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,167,"ssertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,168,"ssertSame(Chronology.getCopticUTC().secondOfMinute(), fields[2]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,169,"ssertSame(Chronology.getCopticUTC().millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,168,"assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,169,"assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,170,"assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,171,"assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), fields[3]);"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,232,eturn Chronology.getCopticUTC();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,234,return CopticChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,236,"hronology.getCopticUTC().hourOfDay(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,237,"hronology.getCopticUTC().minuteOfHour(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,238,"hronology.getCopticUTC().secondOfMinute(),"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,239,"hronology.getCopticUTC().millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,238,"CopticChronology.getInstanceUTC().hourOfDay(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,239,"CopticChronology.getInstanceUTC().minuteOfHour(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,240,"CopticChronology.getInstanceUTC().secondOfMinute(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,241,"CopticChronology.getInstanceUTC().millisOfSecond(),"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,23,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,300,"imeOfDay base = new TimeOfDay(10, 20, 30, 40, Chronology.getCoptic(PARIS));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,301,"TimeOfDay base = new TimeOfDay(10, 20, 30, 40, CopticChronology.getInstance(PARIS));"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,302,"ssertEquals(Chronology.getCopticUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,303,"assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,30,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,32,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,45,rivate static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,46,rivate static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,47,rivate static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,48,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,49,rivate static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,50,rivate static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,51,rivate static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,52,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,53,rivate static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,54,rivate static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,55,rivate static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,56,rivate static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,47,private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,48,private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,49,private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,50,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,51,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,52,private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,53,private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,54,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,55,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,56,private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,57,private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,58,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,23,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,24,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,25,import org.joda.time.chrono.GregorianChronology;
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,26,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,32,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,33,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,34,rivate static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,35,rivate static final Chronology GREGORIAN_UTC = Chronology.getGregorianUTC();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,36,rivate static final Chronology GREGORIAN_PARIS = Chronology.getGregorian(PARIS);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,37,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,38,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,39,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,40,private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,41,private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,44,rivate static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,45,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,46,rivate static final Chronology JULIAN_UTC = Chronology.getJulianUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,47,rivate static final Chronology GJ_UTC = Chronology.getGJUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,48,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,44,private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,45,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,46,private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,47,private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,48,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,43,rivate static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,44,rivate static final Chronology JULIAN_UTC = Chronology.getJulianUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,45,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,43,private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,44,private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,45,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
False,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,262,hronology chrono = Chronology.getGregorian();
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,262,Chronology chrono = GregorianChronology.getInstance();
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,174,"nt[] expected = Chronology.getISO().get(tod, 12345678L);"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,175,"nt[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,174,"int[] expected = ISOChronology.getInstance().get(tod, 12345678L);"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,175,"int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISOChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,30,import org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,107,"nt[] expected = Chronology.getCoptic().get(tod, 12345678L);"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,108,"nt[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,108,"int[] expected = CopticChronology.getInstance().get(tod, 12345678L);"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,109,"int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,106,"nt[] expected = Chronology.getISO().get(tod, 12345678L);"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,107,"nt[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,106,"int[] expected = ISOChronology.getInstance().get(tod, 12345678L);"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,107,"int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,36,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,37,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,142,"nt[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,144,"int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,169,"utableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,171,"MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,173,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,175,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,177,"utableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,178,"ullConverter.INSTANCE.setInto(m, null, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,179,"MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,180,"NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,181,"ssertEquals(Chronology.getCoptic(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,183,"assertEquals(CopticChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,137,"nt[] expected = Chronology.getISO().get(tod, 12345678L);"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,138,"nt[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,137,"int[] expected = ISOChronology.getInstance().get(tod, 12345678L);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,138,"int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,27,mport org.joda.time.PeriodType;
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,29,mport org.joda.time.MutablePeriod;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,29,import org.joda.time.MutablePeriod;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,30,import org.joda.time.PeriodType;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,32,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,33,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,34,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,119,"eadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,122,"ReadableIntervalConverter.INSTANCE.setInto(m, i, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,137,"nterval i = new Interval(0L, 123L, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,138,"utableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,140,"Interval i = new Interval(0L, 123L, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,141,"MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,142,"ssertEquals(Chronology.getCoptic(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,145,"assertEquals(CopticChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,146,"nterval i = new Interval(0L, 123L, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,147,"utableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,148,"eadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,149,"Interval i = new Interval(0L, 123L, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,150,"MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,151,"ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,151,"ssertEquals(Chronology.getGJ(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,154,"assertEquals(GJChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,160,"utableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,161,"eadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,163,"MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,164,"ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,164,"ssertEquals(Chronology.getGJ(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,167,"assertEquals(GJChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,173,"utableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,176,"MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,177,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,180,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,110,"nt[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), Chronology.getISO(PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,110,"int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,34,import org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,204,"nt[] actual = StringConverter.INSTANCE.getPartialValues(tod, ""T03:04:05.006"", Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,205,"int[] actual = StringConverter.INSTANCE.getPartialValues(tod, ""T03:04:05.006"", ISOChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,465,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,466,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,473,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,474,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,481,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,482,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,489,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,490,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,497,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,498,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,505,"ssertEquals(Chronology.getISO(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,506,"assertEquals(ISOChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,510,"tringConverter.INSTANCE.setInto(m, ""2003-08-09/2004-06-09"", Chronology.getBuddhist());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,511,"ssertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getStart());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,512,"ssertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getEnd());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,513,"ssertEquals(Chronology.getBuddhist(), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,511,"StringConverter.INSTANCE.setInto(m, ""2003-08-09/2004-06-09"", BuddhistChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,512,"assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,513,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,514,"assertEquals(BuddhistChronology.getInstance(), m.getChronology());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,518,"tringConverter.INSTANCE.setInto(m, ""2003-08-09T+06:00/2004-06-09T+07:00"", Chronology.getBuddhist(EIGHT));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,519,"ssertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist(SIX)).withZone(EIGHT), m.getStart());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,520,"ssertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist(SEVEN)).withZone(EIGHT), m.getEnd());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,521,"ssertEquals(Chronology.getBuddhist(EIGHT), m.getChronology());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,519,"StringConverter.INSTANCE.setInto(m, ""2003-08-09T+06:00/2004-06-09T+07:00"", BuddhistChronology.getInstance(EIGHT));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,520,"assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SIX)).withZone(EIGHT), m.getStart());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,521,"assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SEVEN)).withZone(EIGHT), m.getEnd());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,522,"assertEquals(BuddhistChronology.getInstance(EIGHT), m.getChronology());"
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,31,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,555,eturn Chronology.getISOUTC().seconds();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,556,return ISOChronology.getInstanceUTC().seconds();
False,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,558,eturn Chronology.getISOUTC().minutes();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,559,return ISOChronology.getInstanceUTC().minutes();
False,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,603,eturn Chronology.getISOUTC().minuteOfHour();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,604,return ISOChronology.getInstanceUTC().minuteOfHour();
False,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,606,eturn Chronology.getISOUTC().millisOfSecond();
True,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java,607,return ISOChronology.getInstanceUTC().millisOfSecond();
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,26,mport org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,185,"ssertEquals(-1, MillisDurationField.INSTANCE.compareTo(Chronology.getISO().seconds()));"
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,185,"assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds()));"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,24,mport org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,58,"hronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,58,"ISOChronology.getInstance().secondOfMinute(), 3"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,69,"ield = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,69,"field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 0);"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,82,"hronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,82,"ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,93,"ield = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), null, 3);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,93,"field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3);"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,98,"ield = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,98,"field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,105,"hronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,105,"ISOChronology.getInstance().secondOfMinute(), 3"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,112,"hronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,112,"ISOChronology.getInstance().secondOfMinute(), 3"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,119,"hronology.getISO().secondOfMinute(), 3"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,119,"ISOChronology.getInstance().secondOfMinute(), 3"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,136,"hronology.getISO().secondOfMinute(), 5"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,136,"ISOChronology.getInstance().secondOfMinute(), 5"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,535,"uper(Chronology.getISO().secondOfMinute(), 3);"
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,535,"super(ISOChronology.getInstance().secondOfMinute(), 3);"
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,544,eturn Chronology.getISOUTC().seconds();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,544,return ISOChronology.getInstanceUTC().seconds();
False,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,547,eturn Chronology.getISOUTC().minutes();
True,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java,547,return ISOChronology.getInstanceUTC().minutes();
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,24,mport org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,59,"hronology.getISOUTC().millis(),"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,60,hronology.getISOUTC().hours()
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,59,"ISOChronology.getInstanceUTC().millis(),"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,60,ISOChronology.getInstanceUTC().hours()
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,71,hronology.getISOUTC().hours());
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,71,ISOChronology.getInstanceUTC().hours());
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,77,"hronology.getISOUTC().hours(),"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,77,"ISOChronology.getInstanceUTC().hours(),"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,84,"hronology.getISOUTC().hours(),"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,85,hronology.getISOUTC().hours());
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,84,"ISOChronology.getInstanceUTC().hours(),"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,85,ISOChronology.getInstanceUTC().hours());
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,92,hronology.getISOUTC().hours());
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,92,ISOChronology.getInstanceUTC().hours());
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,100,"hronology.getISOUTC().millis(),"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,101,hronology.getISOUTC().hours()
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,100,"ISOChronology.getInstanceUTC().millis(),"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,101,ISOChronology.getInstanceUTC().hours()
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,109,"hronology.getISOUTC().millis(),"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,110,hronology.getISOUTC().hours()
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,109,"ISOChronology.getInstanceUTC().millis(),"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,110,ISOChronology.getInstanceUTC().hours()
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,118,"hronology.getISOUTC().millis(),"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,119,hronology.getISOUTC().hours()
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,118,"ISOChronology.getInstanceUTC().millis(),"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,119,ISOChronology.getInstanceUTC().hours()
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,551,eturn Chronology.getISOUTC().seconds();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,551,return ISOChronology.getInstanceUTC().seconds();
False,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,554,eturn Chronology.getISOUTC().minutes();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java,554,return ISOChronology.getInstanceUTC().minutes();
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,24,mport org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,557,eturn Chronology.getISOUTC().seconds();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,557,return ISOChronology.getInstanceUTC().seconds();
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,560,eturn Chronology.getISOUTC().minutes();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java,560,return ISOChronology.getInstanceUTC().minutes();
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,26,mport org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,219,"ssertEquals(false, iField.equals(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,219,"assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,232,"ssertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,232,"assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,244,"ssertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,244,"assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));"
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,26,mport org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,28,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,236,"ssertEquals(false, iField.equals(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,236,"assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));"
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,249,"ssertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,249,"assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());"
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,261,"ssertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,261,"assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,29,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,190,hronology chrono = Chronology.getGJUTC();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,191,Chronology chrono = GJChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,32,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,33,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,45,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,46,rivate static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,47,rivate static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,47,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,48,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java,49,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,165,"/        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,165,"//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,168,"/        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,169,"/        assertEquals(""2004-06-09T10:20:30.040Z"", ISODateTimeFormat.getInstance(Chronology.getCoptic()).dateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,168,"//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,169,"//        assertEquals(""2004-06-09T10:20:30.040Z"", ISODateTimeFormat.getInstance(CopticChronology.getInstance()).dateTime().print(dt));"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,32,import org.joda.time.chrono.BuddhistChronology;
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,33,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,45,rivate static final Chronology ISO_UTC = Chronology.getISOUTC();
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,46,rivate static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,47,rivate static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,47,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,48,private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java,49,private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,27,import org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,113,hronology chrono = Chronology.getISO(ZONES[i]);
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,114,Chronology chrono = ISOChronology.getInstance(ZONES[i]);
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,140,hronology chrono = Chronology.getISO(ZONES[i]);
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,141,Chronology chrono = ISOChronology.getInstance(ZONES[i]);

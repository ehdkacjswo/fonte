is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,26,import org.joda.time.chrono.EthiopicChronology;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,52,* <li>Ethiopic - The Ethiopic calendar system which defines 30 day months
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,58, @see org.joda.time.chrono.CopticChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,61,* @see org.joda.time.chrono.CopticChronology
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,62,* @see org.joda.time.chrono.EthiopicChronology
False,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,79,OPTIC = 6;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,82,"COPTIC = 6,"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,83,ETHIOPIC = 7;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,97,/** The iso chronology type. */
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,98,"private static final ChronologyType ETHIOPIC_TYPE = new StandardChronologyType(""Ethiopic"", ETHIOPIC);"
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,242,* Get the Ethiopic chronology type.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,243,* <p>
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,244,* {@link EthiopicChronology} defines fields sensibly for the Ethiopic calendar system.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,245,* The Ethiopic calendar system defines every fourth year as leap.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,246,"* The year is broken down into 12 months, each 30 days in length."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,247,* An extra period at the end of the year is either 5 or 6 days in length
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,248,* and is returned as a 13th month.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,249,"* Year 1 in the Coptic calendar began on August 29, 8 CE (Julian)."
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,250,* The chronology cannot be used before the first Ethiopic year.
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,252,* @return the ChronologyType constant
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,254,public static ChronologyType ethiopic() {
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,255,return ETHIOPIC_TYPE;
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,333,case ETHIOPIC:
True,JodaTime/src/java/org/joda/time/ChronologyType.java,JodaTime/src/java/org/joda/time/ChronologyType.java,334,return EthiopicChronology.getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,24,* Month of year implementation where the month length is fixed.
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,27, @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,27,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,28,"* @since 1.2, refactored from CopticMonthOfYearDateTimeField"
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,29,inal class CopticMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,30,final class BasicFixedMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,32,/** Serialization version. */
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,35,/** The base chronology. */
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,38,/** The fixed month length. */
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,39,private static final int MONTH_LENGTH = 30;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,44,* @param chronology  the base chronology
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,45,* @param months  the months duration field
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,38,"opticMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,47,"BasicFixedMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,44,eturn (iChronology.getDayOfYear(instant) - 1) / 30 + 1;
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,53,return (iChronology.getDayOfYear(instant) - 1) / MONTH_LENGTH + 1;
False,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,51,f (day < 30) {
True,JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java,60,if (day < MONTH_LENGTH) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,18,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,19,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,20,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,21,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,22,import org.joda.time.DurationFieldType;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,23,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,24,import org.joda.time.field.PreciseDurationField;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,27,* Abstract implementation of a calendar system based around fixed length months.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,28,* <p>
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,29,* As the month length is fixed various calculations can be optimised.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,30,* This implementation assumes any additional days after twelve
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,31,* months fall into a thirteenth month.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,32,* <p>
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,33,"* CommonFixedMonthChronology is thread-safe and immutable, and all"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,34,* subclasses must be as well.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,36,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,37,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,38,"* @since 1.2, refactored from CopticChronology"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,40,public abstract class CommonFixedMonthChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,42,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,43,private static final long serialVersionUID = 261387371998L;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,45,/** The length of the month. */
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,46,static final int MONTH_LENGTH = 30;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,48,/** The typical millis per year. */
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,49,static final long MILLIS_PER_YEAR =
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,50,(long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,52,/** The length of the month in millis. */
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,53,static final long MILLIS_PER_MONTH = ((long) MONTH_LENGTH) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,55,/** Singleton fixed length month field used to build the monthOfYear field. */
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,56,static final DurationField MONTH_DURATION_FIELD;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,57,static {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,58,// init after other static fields
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,59,MONTH_DURATION_FIELD =  new PreciseDurationField
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,60,"(DurationFieldType.months(), MILLIS_PER_MONTH);"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,65,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,67,* @param base  the base chronology
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,68,* @param param  the init parameter
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,69,* @param minDaysInFirstWeek  the minimum days in the first week
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,71,"CommonFixedMonthChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,72,"super(base, param, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,76,"long setYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,77,"// optimsed implementation of set, due to fixed months"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,78,int thisYear = getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,79,"int dayOfYear = getDayOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,80,int millisOfDay = getMillisOfDay(instant);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,82,if (dayOfYear > 365) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,83,"// Current year is leap, and day is leap."
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,84,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,85,"// Moving to a non-leap year, leap day doesn't exist."
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,86,dayOfYear--;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,90,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,91,instant += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,92,return instant;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,96,"long getYearDifference(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,97,"// optimsed implementation of getDifference, due to fixed months"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,98,int minuendYear = getYear(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,99,int subtrahendYear = getYear(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,101,// Inlined remainder method to avoid duplicate calls to get.
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,102,long minuendRem = minuendInstant - getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,103,long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,105,int difference = minuendYear - subtrahendYear;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,106,if (minuendRem < subtrahendRem) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,107,difference--;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,109,return difference;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,113,"long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,114,"FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,115,"FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,116,"FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,117,"return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,121,"long getTotalMillisByYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,122,return (month * MILLIS_PER_MONTH);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,126,int getDayOfMonth(long millis) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,127,// optimised for fixed months
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,128,return (getDayOfYear(millis) - 1) % MONTH_LENGTH + 1;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,132,boolean isLeapYear(int year) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,133,return (year & 3) == 3;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,137,"int getDaysInYearMonth(int year, int month) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,138,return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,142,int getDaysInMonthMax() {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,143,return MONTH_LENGTH;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,147,int getDaysInMonthMax(int month) {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,148,return (month != 13 ? MONTH_LENGTH : 6);
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,152,"int getMonthOfYear(long millis, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,153,long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,154,return ((int) monthZeroBased) + 1;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,158,long getAverageMillisPerYear() {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,159,return MILLIS_PER_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,163,long getAverageMillisPerMonth() {
True,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java,164,return MILLIS_PER_MONTH;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,26,mport org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,28,mport org.joda.time.DurationField;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,29,mport org.joda.time.DurationFieldType;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,30,mport org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,31,mport org.joda.time.field.PreciseDurationField;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,57,ublic final class CopticChronology extends BaseGJChronology {
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,52,public final class CopticChronology extends CommonFixedMonthChronology {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,71,rivate static final long MILLIS_PER_YEAR =
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,72,long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,74,rivate static final long MILLIS_PER_MONTH =
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,75,long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,88,** Singleton 30 day month field used to build the monthOfYear field. */
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,89,rivate static final DurationField cMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,91,** Singleton instance of a UTC CopticChronology */
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,92,rivate static final CopticChronology INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,80,/** Singleton instance of a UTC CopticChronology */
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,81,private static final CopticChronology INSTANCE_UTC;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,98,MonthsField =  new PreciseDurationField
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,99,"DurationFieldType.months(), 30L * DateTimeConstants.MILLIS_PER_DAY);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,83,// init after static fields
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,180, Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,164,* Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,187, Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,171,* Serialization singleton.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,233,"ong setYear(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,234,"/ optimsed implementation of set, due to 30 day months"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,235,nt thisYear = getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,236,"nt dayOfYear = getDayOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,237,nt millisOfDay = getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,239,f (dayOfYear > 365) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,240,"/ Current year is leap, and day is leap."
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,241,f (!isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,242,"/ Moving to a non-leap year, leap day doesn't exist."
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,243,ayOfYear--;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,247,"nstant = getYearMonthDayMillis(year, 1, dayOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,248,nstant += millisOfDay;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,249,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,253,"ong getYearDifference(long minuendInstant, long subtrahendInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,254,"/ optimsed implementation of getDifference, due to 30 day months"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,255,nt minuendYear = getYear(minuendInstant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,256,nt subtrahendYear = getYear(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,258,/ Inlined remainder method to avoid duplicate calls to get.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,259,ong minuendRem = minuendInstant - getYearMillis(minuendYear);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,260,ong subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,262,nt difference = minuendYear - subtrahendYear;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,263,f (minuendRem < subtrahendRem) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,264,ifference--;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,266,eturn difference;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,270,"ong getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,271,"ieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,272,"ieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,273,"ieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,274,"eturn getYearMonthDayMillis(year, monthOfYear, dayOfMonth);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,278,"ong getTotalMillisByYearMonth(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,279,eturn (month * 30L * DateTimeConstants.MILLIS_PER_DAY);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,283,nt getDayOfMonth(long millis) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,284,/ optimised for 30 day months
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,285,eturn (getDayOfYear(millis) - 1) % 30 + 1;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,289,oolean isLeapYear(int year) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,290,eturn (year & 3) == 3;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,294,"nt getDaysInYearMonth(int year, int month) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,295,eturn (month != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,299,nt getDaysInMonthMax() {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,300,eturn 30;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,304,nt getDaysInMonthMax(int month) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,305,eturn (month != 13 ? 30 : 6);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,309,"nt getMonthOfYear(long millis, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,310,eturn ((int) ((millis - getYearMillis(year))
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,311, (30L * DateTimeConstants.MILLIS_PER_DAY))) + 1;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,360,ong getAverageMillisPerYear() {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,361,eturn MILLIS_PER_YEAR;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,365,ong getAverageMillisPerMonth() {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,366,eturn MILLIS_PER_MONTH;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,384,ields.months = cMonthsField;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,385,"ields.monthOfYear = new CopticMonthOfYearDateTimeField(this, cMonthsField);"
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,276,fields.months = MONTH_DURATION_FIELD;
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,277,"fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,18,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,19,import java.util.Map;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,21,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,22,import org.joda.time.ChronologyType;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,23,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,24,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,25,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,26,import org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,27,import org.joda.time.field.SkipDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,30,"* Implements the Ethiopic calendar system, which defines every fourth year as"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,31,"* leap, much like the Julian calendar. The year is broken down into 12 months,"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,32,* each 30 days in length. An extra period at the end of the year is either 5
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,33,"* or 6 days in length. In this implementation, it is considered a 13th month."
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,34,* <p>
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,35,"* Year 1 in the Ethiopic calendar began on August 29, 8 CE (Julian), thus"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,36,* Ethiopic years do not begin at the same time as Julian years. This chronology
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,37,"* is not proleptic, as it does not allow dates before the first Ethiopic year."
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,38,* <p>
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,39,* This implementation defines a day as midnight to midnight exactly as per
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,40,* the ISO chronology. Some references indicate that a coptic day starts at
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,41,"* sunset on the previous ISO day, but this has not been confirmed and is not"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,42,* implemented.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,43,* <p>
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,44,* EthiopicChronology is thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,46,"* @see <a href=""http://en.wikipedia.org/wiki/Ethiopian_calendar"">Wikipedia</a>"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,48,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,49,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,50,* @since 1.2
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,52,public final class EthiopicChronology extends CommonFixedMonthChronology {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,54,/** Serialization lock */
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,55,private static final long serialVersionUID = -5972804258688333942L;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,58,"* Constant value for 'Ethiopean Era', equivalent"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,59,* to the value returned for AD/CE.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,61,public static final int EE = DateTimeConstants.CE;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,63,/** A singleton era field. */
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,64,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""EE"");"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,66,/** The lowest year that can be fully supported. */
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,67,private static final int MIN_YEAR = -292269337;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,70,* The highest year that can be fully supported.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,71,* Although calculateFirstDayOfYearMillis can go higher without
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,72,"* overflowing, the getYear method overflows when it adds the"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,73,* approximate millis at the epoch.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,75,private static final int MAX_YEAR = 292271022;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,77,/** Cache of zone to chronology arrays */
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,78,private static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,80,/** Singleton instance of a UTC EthiopicChronology */
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,81,private static final EthiopicChronology INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,82,static {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,83,// init after static fields
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,84,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,89,* Gets an instance of the EthiopicChronology.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,90,* The time zone of the returned instance is UTC.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,92,* @return a singleton UTC instance of the chronology
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,94,public static EthiopicChronology getInstanceUTC() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,95,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,99,* Gets an instance of the EthiopicChronology in the default time zone.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,101,* @return a chronology in the default time zone
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,103,public static EthiopicChronology getInstance() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,104,"return getInstance(DateTimeZone.getDefault(), 4);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,108,* Gets an instance of the EthiopicChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,110,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,111,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,113,public static EthiopicChronology getInstance(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,114,"return getInstance(zone, 4);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,118,* Gets an instance of the EthiopicChronology in the given time zone.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,120,"* @param zone  the time zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,121,* @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,122,* @return a chronology in the specified time zone
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,124,"public static EthiopicChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,125,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,126,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,128,EthiopicChronology chrono;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,129,synchronized (cCache) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,130,EthiopicChronology[] chronos = (EthiopicChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,131,if (chronos == null) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,132,chronos = new EthiopicChronology[7];
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,133,"cCache.put(zone, chronos);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,135,try {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,136,chrono = chronos[minDaysInFirstWeek - 1];
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,137,} catch (ArrayIndexOutOfBoundsException e) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,138,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,139,"(""Invalid min days in first week: "" + minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,141,if (chrono == null) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,142,if (zone == DateTimeZone.UTC) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,143,// First create without a lower limit.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,144,"chrono = new EthiopicChronology(null, null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,145,// Impose lower limit and make another EthiopicChronology.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,146,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,147,chrono = new EthiopicChronology
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,148,"(LimitChronology.getInstance(chrono, lowerLimit, null),"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,149,"null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,150,} else {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,151,"chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,152,chrono = new EthiopicChronology
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,153,"(ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,155,chronos[minDaysInFirstWeek - 1] = chrono;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,158,return chrono;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,161,// Constructors and instance variables
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,164,* Restricted constructor.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,166,"EthiopicChronology(Chronology base, Object param, int minDaysInFirstWeek) {"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,167,"super(base, param, minDaysInFirstWeek);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,171,* Serialization singleton.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,173,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,174,Chronology base = getBase();
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,175,return base == null ? getInstanceUTC() : getInstance(base.getZone());
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,180,* Returns the ChronologyType constant for this Chronology.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,182,* @return the chronology type
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,184,public ChronologyType getType() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,185,return ChronologyType.ethiopic();
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,188,// Conversion
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,191,* Gets the Chronology in the UTC time zone.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,193,* @return the chronology in UTC
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,195,public Chronology withUTC() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,196,return INSTANCE_UTC;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,200,* Gets the Chronology in a specific time zone.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,202,"* @param zone  the zone to get the chronology in, null is default"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,203,* @return the chronology
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,205,public Chronology withZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,206,if (zone == null) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,207,zone = DateTimeZone.getDefault();
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,209,if (zone == getZone()) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,210,return this;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,212,return getInstance(zone);
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,216,long calculateFirstDayOfYearMillis(int year) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,217,if (year > MAX_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,218,"throw new ArithmeticException(""Year is too large: "" + year + "" > "" + MAX_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,220,if (year < MIN_YEAR) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,221,"throw new ArithmeticException(""Year is too small: "" + year + "" < "" + MIN_YEAR);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,224,// Java epoch is 1970-01-01 Gregorian which is 1962-04-23 Ethiopic.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,225,// Calculate relative to the nearest leap year and account for the
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,226,// difference later.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,228,int relativeYear = year - 1963;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,229,int leapYears;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,230,if (relativeYear <= 0) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,231,// Add 3 before shifting right since /4 and >>2 behave differently
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,232,// on negative numbers.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,233,leapYears = (relativeYear + 3) >> 2;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,234,} else {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,235,leapYears = relativeYear >> 2;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,236,// For post 1963 an adjustment is needed as jan1st is before leap day
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,237,if (!isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,238,leapYears++;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,242,long millis = (relativeYear * 365L + leapYears)
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,243,* (long)DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,245,// Adjust to account for difference between 1963-01-01 and 1962-04-23.
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,247,return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,251,int getMinYear() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,252,return MIN_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,256,int getMaxYear() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,257,return MAX_YEAR;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,261,long getApproxMillisAtEpoch() {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,262,return 1962L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,266,protected void assemble(Fields fields) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,267,if (getBase() == null) {
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,268,super.assemble(fields);
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,270,"// Ethiopic, like Julian, has no year zero."
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,271,"fields.year = new SkipDateTimeField(this, fields.year);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,272,"fields.weekyear = new SkipDateTimeField(this, fields.weekyear);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,274,fields.era = ERA_FIELD;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,275,fields.months = MONTH_DURATION_FIELD;
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,276,"fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);"
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,277,"fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,30,import org.joda.time.chrono.EthiopicChronology;
False,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,73,"ssertEquals(6, set.size());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,74,"assertEquals(7, set.size());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,81,"assertEquals(true, set.contains(""Ethiopic""));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,145,public void test_ethiopic() throws Exception {
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,146,"assertEquals(ChronologyType.ethiopic(), ChronologyType.ethiopic());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,147,"assertEquals(""Ethiopic"", ChronologyType.ethiopic().getID());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,148,"assertEquals(EthiopicChronology.getInstance(), ChronologyType.ethiopic().getChronology());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,149,"assertEquals(EthiopicChronology.getInstanceUTC(), ChronologyType.ethiopic().getChronologyUTC());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,150,"assertEquals(EthiopicChronology.getInstance(PARIS), ChronologyType.ethiopic().getChronology(PARIS));"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,151,"assertEquals(""Ethiopic"", ChronologyType.ethiopic().toString());"
True,JodaTime/src/test/org/joda/time/TestChronologyType.java,JodaTime/src/test/org/joda/time/TestChronologyType.java,152,assertSerialization(ChronologyType.ethiopic());
False,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,32,ublic static boolean FAST = true;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,32,public static boolean FAST = false;
True,JodaTime/src/test/org/joda/time/chrono/TestAll.java,JodaTime/src/test/org/joda/time/chrono/TestAll.java,43,suite.addTest(TestEthiopicChronology.suite());
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,38,rivate static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,38,private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,282,nt expectedDOW = 5;
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,282,"int expectedDOW = new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();"
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,294,nt eraValue = era.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,16,package org.joda.time.chrono;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,19,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,21,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,22,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,24,import org.joda.time.Chronology;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,25,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,26,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,27,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,28,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,29,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,32,* This class is a Junit unit test for EthiopicChronology.
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,34,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,36,public class TestEthiopicChronology extends TestCase {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,38,private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,42,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,43,private static final Chronology ETHIOPIC_UTC = EthiopicChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,44,private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,45,private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,47,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,48,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,49,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,50,366 + 365;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,51,// 2002-06-09
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,52,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,53,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,55,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,56,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,57,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,59,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,60,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,63,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,64,SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,65,return new TestSuite(TestEthiopicChronology.class);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,68,public TestEthiopicChronology(String name) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,69,super(name);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,72,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,73,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,74,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,75,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,76,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,77,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,78,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,79,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,82,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,83,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,84,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,85,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,86,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,87,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,88,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,89,originalLocale = null;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,93,public void testFactoryUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,94,"assertEquals(DateTimeZone.UTC, EthiopicChronology.getInstanceUTC().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,95,"assertSame(EthiopicChronology.class, EthiopicChronology.getInstanceUTC().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,98,public void testFactory() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,99,"assertEquals(LONDON, EthiopicChronology.getInstance().getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,100,"assertSame(EthiopicChronology.class, EthiopicChronology.getInstance().getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,103,public void testFactory_Zone() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,104,"assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,105,"assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,106,"assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,107,"assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,111,public void testEquality() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,112,"assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,113,"assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,114,"assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,115,"assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,116,"assertSame(EthiopicChronology.getInstance(), EthiopicChronology.getInstance(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,119,public void testWithUTC() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,120,"assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,121,"assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,122,"assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,123,"assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,126,public void testWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,127,"assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO).withZone(TOKYO));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,128,"assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(LONDON));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,129,"assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(TOKYO).withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,130,"assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(null));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,131,"assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,132,"assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstanceUTC().withZone(PARIS));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,135,public void testToString() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,136,"assertEquals(""EthiopicChronology[Europe/London]"", EthiopicChronology.getInstance(LONDON).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,137,"assertEquals(""EthiopicChronology[Asia/Tokyo]"", EthiopicChronology.getInstance(TOKYO).toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,138,"assertEquals(""EthiopicChronology[Europe/London]"", EthiopicChronology.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,139,"assertEquals(""EthiopicChronology[UTC]"", EthiopicChronology.getInstanceUTC().toString());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,143,public void testDurationFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,144,"assertEquals(""eras"", EthiopicChronology.getInstance().eras().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,145,"assertEquals(""centuries"", EthiopicChronology.getInstance().centuries().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,146,"assertEquals(""years"", EthiopicChronology.getInstance().years().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,147,"assertEquals(""weekyears"", EthiopicChronology.getInstance().weekyears().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,148,"assertEquals(""months"", EthiopicChronology.getInstance().months().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,149,"assertEquals(""weeks"", EthiopicChronology.getInstance().weeks().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,150,"assertEquals(""days"", EthiopicChronology.getInstance().days().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,151,"assertEquals(""halfdays"", EthiopicChronology.getInstance().halfdays().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,152,"assertEquals(""hours"", EthiopicChronology.getInstance().hours().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,153,"assertEquals(""minutes"", EthiopicChronology.getInstance().minutes().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,154,"assertEquals(""seconds"", EthiopicChronology.getInstance().seconds().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,155,"assertEquals(""millis"", EthiopicChronology.getInstance().millis().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,157,"assertEquals(false, EthiopicChronology.getInstance().eras().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,158,"assertEquals(true, EthiopicChronology.getInstance().centuries().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,159,"assertEquals(true, EthiopicChronology.getInstance().years().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,160,"assertEquals(true, EthiopicChronology.getInstance().weekyears().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,161,"assertEquals(true, EthiopicChronology.getInstance().months().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,162,"assertEquals(true, EthiopicChronology.getInstance().weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,163,"assertEquals(true, EthiopicChronology.getInstance().days().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,164,"assertEquals(true, EthiopicChronology.getInstance().halfdays().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,165,"assertEquals(true, EthiopicChronology.getInstance().hours().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,166,"assertEquals(true, EthiopicChronology.getInstance().minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,167,"assertEquals(true, EthiopicChronology.getInstance().seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,168,"assertEquals(true, EthiopicChronology.getInstance().millis().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,170,"assertEquals(false, EthiopicChronology.getInstance().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,171,"assertEquals(false, EthiopicChronology.getInstance().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,172,"assertEquals(false, EthiopicChronology.getInstance().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,173,"assertEquals(false, EthiopicChronology.getInstance().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,174,"assertEquals(false, EthiopicChronology.getInstance().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,175,"assertEquals(false, EthiopicChronology.getInstance().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,176,"assertEquals(false, EthiopicChronology.getInstance().halfdays().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,177,"assertEquals(true, EthiopicChronology.getInstance().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,178,"assertEquals(true, EthiopicChronology.getInstance().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,179,"assertEquals(true, EthiopicChronology.getInstance().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,180,"assertEquals(true, EthiopicChronology.getInstance().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,182,"assertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,183,"assertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,184,"assertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,185,"assertEquals(true, EthiopicChronology.getInstanceUTC().months().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,186,"assertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,187,"assertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,188,"assertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,189,"assertEquals(true, EthiopicChronology.getInstanceUTC().hours().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,190,"assertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,191,"assertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,192,"assertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,195,public void testDateFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,196,"assertEquals(""era"", EthiopicChronology.getInstance().era().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,197,"assertEquals(""centuryOfEra"", EthiopicChronology.getInstance().centuryOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,198,"assertEquals(""yearOfCentury"", EthiopicChronology.getInstance().yearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,199,"assertEquals(""yearOfEra"", EthiopicChronology.getInstance().yearOfEra().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,200,"assertEquals(""year"", EthiopicChronology.getInstance().year().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,201,"assertEquals(""monthOfYear"", EthiopicChronology.getInstance().monthOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,202,"assertEquals(""weekyearOfCentury"", EthiopicChronology.getInstance().weekyearOfCentury().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,203,"assertEquals(""weekyear"", EthiopicChronology.getInstance().weekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,204,"assertEquals(""weekOfWeekyear"", EthiopicChronology.getInstance().weekOfWeekyear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,205,"assertEquals(""dayOfYear"", EthiopicChronology.getInstance().dayOfYear().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,206,"assertEquals(""dayOfMonth"", EthiopicChronology.getInstance().dayOfMonth().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,207,"assertEquals(""dayOfWeek"", EthiopicChronology.getInstance().dayOfWeek().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,209,"assertEquals(true, EthiopicChronology.getInstance().era().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,210,"assertEquals(true, EthiopicChronology.getInstance().centuryOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,211,"assertEquals(true, EthiopicChronology.getInstance().yearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,212,"assertEquals(true, EthiopicChronology.getInstance().yearOfEra().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,213,"assertEquals(true, EthiopicChronology.getInstance().year().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,214,"assertEquals(true, EthiopicChronology.getInstance().monthOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,215,"assertEquals(true, EthiopicChronology.getInstance().weekyearOfCentury().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,216,"assertEquals(true, EthiopicChronology.getInstance().weekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,217,"assertEquals(true, EthiopicChronology.getInstance().weekOfWeekyear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,218,"assertEquals(true, EthiopicChronology.getInstance().dayOfYear().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,219,"assertEquals(true, EthiopicChronology.getInstance().dayOfMonth().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,220,"assertEquals(true, EthiopicChronology.getInstance().dayOfWeek().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,223,public void testTimeFields() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,224,"assertEquals(""halfdayOfDay"", EthiopicChronology.getInstance().halfdayOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,225,"assertEquals(""clockhourOfHalfday"", EthiopicChronology.getInstance().clockhourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,226,"assertEquals(""hourOfHalfday"", EthiopicChronology.getInstance().hourOfHalfday().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,227,"assertEquals(""clockhourOfDay"", EthiopicChronology.getInstance().clockhourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,228,"assertEquals(""hourOfDay"", EthiopicChronology.getInstance().hourOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,229,"assertEquals(""minuteOfDay"", EthiopicChronology.getInstance().minuteOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,230,"assertEquals(""minuteOfHour"", EthiopicChronology.getInstance().minuteOfHour().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,231,"assertEquals(""secondOfDay"", EthiopicChronology.getInstance().secondOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,232,"assertEquals(""secondOfMinute"", EthiopicChronology.getInstance().secondOfMinute().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,233,"assertEquals(""millisOfDay"", EthiopicChronology.getInstance().millisOfDay().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,234,"assertEquals(""millisOfSecond"", EthiopicChronology.getInstance().millisOfSecond().getName());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,236,"assertEquals(true, EthiopicChronology.getInstance().halfdayOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,237,"assertEquals(true, EthiopicChronology.getInstance().clockhourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,238,"assertEquals(true, EthiopicChronology.getInstance().hourOfHalfday().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,239,"assertEquals(true, EthiopicChronology.getInstance().clockhourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,240,"assertEquals(true, EthiopicChronology.getInstance().hourOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,241,"assertEquals(true, EthiopicChronology.getInstance().minuteOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,242,"assertEquals(true, EthiopicChronology.getInstance().minuteOfHour().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,243,"assertEquals(true, EthiopicChronology.getInstance().secondOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,244,"assertEquals(true, EthiopicChronology.getInstance().secondOfMinute().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,245,"assertEquals(true, EthiopicChronology.getInstance().millisOfDay().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,246,"assertEquals(true, EthiopicChronology.getInstance().millisOfSecond().isSupported());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,250,public void testEpoch() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,251,"DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,252,"assertEquals(new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,255,public void testEra() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,256,"assertEquals(1, EthiopicChronology.EE);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,257,try {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,258,"new DateTime(-1, 13, 5, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,259,fail();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,260,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,265,"* Tests era, year, monthOfYear, dayOfMonth and dayOfWeek."
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,267,public void testCalendar() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,268,if (TestAll.FAST) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,269,return;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,271,"System.out.println(""\nTestEthiopicChronology.testCalendar"");"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,272,"DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,273,long millis = epoch.getMillis();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,274,"long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,275,DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,276,DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,277,DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,278,DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,279,DateTimeField year = ETHIOPIC_UTC.year();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,280,DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,281,DateTimeField era = ETHIOPIC_UTC.era();
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,282,"int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,283,int expectedDOY = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,284,int expectedDay = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,285,int expectedMonth = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,286,int expectedYear = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,287,while (millis < end) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,288,int dowValue = dayOfWeek.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,289,int doyValue = dayOfYear.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,290,int dayValue = dayOfMonth.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,291,int monthValue = monthOfYear.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,292,int yearValue = year.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,293,int yearOfEraValue = yearOfEra.get(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,294,int monthLen = dayOfMonth.getMaximumValue(millis);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,295,if (monthValue < 1 || monthValue > 13) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,296,"fail(""Bad month: "" + millis);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,299,// test era
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,300,"assertEquals(1, era.get(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,301,"assertEquals(""EE"", era.getAsText(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,302,"assertEquals(""EE"", era.getAsShortText(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,304,// test date
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,305,"assertEquals(expectedYear, yearValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,306,"assertEquals(expectedYear, yearOfEraValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,307,"assertEquals(expectedMonth, monthValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,308,"assertEquals(expectedDay, dayValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,309,"assertEquals(expectedDOW, dowValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,310,"assertEquals(expectedDOY, doyValue);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,312,// test leap year
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,313,"assertEquals(yearValue % 4 == 3, year.isLeap(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,315,// test month length
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,316,if (monthValue == 13) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,317,"assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis));"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,318,if (yearValue % 4 == 3) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,319,"assertEquals(6, monthLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,320,} else {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,321,"assertEquals(5, monthLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,323,} else {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,324,"assertEquals(30, monthLen);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,327,// recalculate date
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,328,expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,329,expectedDay++;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,330,expectedDOY++;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,331,if (expectedDay == 31 && expectedMonth < 13) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,332,expectedDay = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,333,expectedMonth++;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,334,} else if (expectedMonth == 13) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,335,if (expectedYear % 4 == 3 && expectedDay == 7) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,336,expectedDay = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,337,expectedMonth = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,338,expectedYear++;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,339,expectedDOY = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,340,} else if (expectedYear % 4 != 3 && expectedDay == 6) {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,341,expectedDay = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,342,expectedMonth = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,343,expectedYear++;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,344,expectedDOY = 1;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,347,millis += SKIP;
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,351,public void testSampleDate() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,352,"DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,353,System.out.println(dt);
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,354,"assertEquals(EthiopicChronology.EE, dt.getEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,355,"assertEquals(20, dt.getCenturyOfEra());  // TODO confirm"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,356,"assertEquals(96, dt.getYearOfCentury());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,357,"assertEquals(1996, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,358,"assertEquals(1996, dt.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,359,"assertEquals(10, dt.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,360,"assertEquals(2, dt.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,361,"assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,362,"assertEquals(9 * 30 + 2, dt.getDayOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,363,"assertEquals(0, dt.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,364,"assertEquals(0, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,365,"assertEquals(0, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,366,"assertEquals(0, dt.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,369,public void testSampleDateWithZone() {
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,370,"DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(ETHIOPIC_UTC);"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,371,"assertEquals(EthiopicChronology.EE, dt.getEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,372,"assertEquals(1996, dt.getYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,373,"assertEquals(1996, dt.getYearOfEra());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,374,"assertEquals(10, dt.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,375,"assertEquals(2, dt.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,376,"assertEquals(10, dt.getHourOfDay());  // PARIS is UTC+2 in summer (12-2=10)"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,377,"assertEquals(0, dt.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,378,"assertEquals(0, dt.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java,379,"assertEquals(0, dt.getMillisOfSecond());"

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,58,import java.util.Arrays;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,59,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,63,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,64,import org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,210,"ateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,214,"ParseBucket bucket = new ParseBucket(instantLocal, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,221,"ateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,225,"ParseBucket bucket = new ParseBucket(0, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,242,"ateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,246,"ParseBucket bucket = new ParseBucket(instantLocal, chrono);"
False,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,289,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,293,"protected int parseInto(ParseBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,299,* Internal class used to build the state during parsing.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,300,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,301,"* Allows fields to be saved in any order, but be physically set in a"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,302,* consistent order. This is useful for parsing against formats that allow
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,303,* field values to contradict each other.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,304,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,305,"* Field values are applied in an order where the ""larger"" fields are set"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,306,"* first, making their value less likely to stick.  A field is larger than"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,307,"* another when it's range duration is longer. If both ranges are the same,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,308,* then the larger field has the longer duration. If it cannot be determined
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,309,"* which field is larger, then the fields are set in the order they were saved."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,310,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,311,"* For example, these fields were saved in this order: dayOfWeek, monthOfYear,"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,312,"* dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,313,"* this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,314,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,315,* ParseBucket is mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,317,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,318,* @since 1.0
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,320,public static class ParseBucket {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,322,private final Chronology iChrono;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,323,private final long iMillis;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,325,"// TimeZone to switch to in computeMillis. If null, use offset."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,326,DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,327,int iOffset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,329,SavedField[] iSavedFields = new SavedField[8];
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,330,int iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,331,boolean iSavedFieldsShared;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,333,private Object iSavedState;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,336,* Constucts a bucket.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,338,"* @param instantLocal the initial millis from 1970-01-01T00:00:00, local time"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,339,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,341,"public ParseBucket(long instantLocal, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,342,super();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,343,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,344,iMillis = instantLocal;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,345,iChrono = chrono.withUTC();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,346,setZone(chrono.getZone());
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,351,"* Gets the chronology of the bucket, which will be a local (UTC) chronology."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,353,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,354,return iChrono;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,359,"* Returns the time zone used by computeMillis, or null if an offset is"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,360,* used instead.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,362,public DateTimeZone getZone() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,363,return iZone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,367,"* Set a time zone to be used when computeMillis is called, which"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,368,* overrides any set time zone offset.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,370,"* @param zone the date time zone to operate in, or null if UTC"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,372,public void setZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,373,iSavedState = null;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,374,iZone = zone == DateTimeZone.UTC ? null : zone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,375,iOffset = 0;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,380,"* Returns the time zone offset used by computeMillis, unless"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,381,* getZone doesn't return null.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,383,public int getOffset() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,384,return iOffset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,388,"* Set a time zone offset to be used when computeMillis is called, which"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,389,* overrides the time zone.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,391,public void setOffset(int offset) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,392,iSavedState = null;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,393,iOffset = offset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,394,iZone = null;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,399,* Saves a datetime field value.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,401,"* @param field  the field, whose chronology must match that of this bucket"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,402,* @param value  the value
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,404,"public void saveField(DateTimeField field, int value) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,405,"saveField(new SavedField(field, value));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,409,* Saves a datetime field value.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,411,* @param fieldType  the field type
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,412,* @param value  the value
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,414,"public void saveField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,415,"saveField(new SavedField(fieldType.getField(iChrono), value));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,419,* Saves a datetime field text value.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,421,* @param fieldType  the field type
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,422,* @param text  the text value
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,423,* @param locale  the locale to use
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,425,"public void saveField(DateTimeFieldType fieldType, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,426,"saveField(new SavedField(fieldType.getField(iChrono), text, locale));"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,429,private void saveField(SavedField field) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,430,SavedField[] savedFields = iSavedFields;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,431,int savedFieldsCount = iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,433,if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,434,// Expand capacity or merely copy if saved fields are shared.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,435,SavedField[] newArray = new SavedField
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,436,[savedFieldsCount == savedFields.length ? savedFieldsCount * 2 : savedFields.length];
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,437,"System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,438,iSavedFields = savedFields = newArray;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,439,iSavedFieldsShared = false;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,442,iSavedState = null;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,443,savedFields[savedFieldsCount] = field;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,444,iSavedFieldsCount = savedFieldsCount + 1;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,448,"* Saves the state of this bucket, returning it in an opaque object. Call"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,449,* restoreState to undo any changes that were made since the state was
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,450,* saved. Calls to saveState may be nested.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,452,"* @return opaque saved state, which may be passed to restoreState"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,454,public Object saveState() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,455,if (iSavedState == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,456,iSavedState = new SavedState();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,458,return iSavedState;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,462,* Restores the state of this bucket from a previously saved state. The
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,463,"* state object passed into this method is not consumed, and it can be used"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,464,* later to restore to that state again.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,466,"* @param savedState opaque saved state, returned from saveState"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,467,* @return true state object is valid and state restored
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,469,public boolean restoreState(Object savedState) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,470,if (savedState instanceof SavedState) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,471,if (((SavedState) savedState).restoreState(this)) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,472,iSavedState = savedState;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,473,return true;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,476,return false;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,480,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,481,"* This method is idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,483,* @return milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,484,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,486,public long computeMillis() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,487,return computeMillis(false);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,491,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,492,"* This method is idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,494,"* @param resetFields false by default, but when true, unsaved field values are cleared"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,495,* @return milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,496,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,498,public long computeMillis(boolean resetFields) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,499,SavedField[] savedFields = iSavedFields;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,500,int count = iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,501,if (iSavedFieldsShared) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,502,iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,503,iSavedFieldsShared = false;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,505,"sort(savedFields, count);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,507,long millis = iMillis;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,508,for (int i=0; i<count; i++) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,509,"millis = savedFields[i].set(millis, resetFields);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,512,if (iZone == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,513,millis -= iOffset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,514,} else {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,515,int offset = iZone.getOffsetFromLocal(millis);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,516,millis -= offset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,517,if (offset != iZone.getOffset(millis)) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,518,throw new IllegalArgumentException
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,519,"(""Illegal instant due to time zone offset transition"");"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,523,return millis;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,527,"* Sorts elements [0,high). Calling java.util.Arrays isn't always the right"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,528,"* choice since it always creates an internal copy of the array, even if it"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,529,"* doesn't need to. If the array slice is small enough, an insertion sort"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,530,"* is chosen instead, but it doesn't need a copy!"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,531,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,532,"* This method has a modified version of that insertion sort, except it"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,533,"* doesn't create an unnecessary array copy. If high is over 10, then"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,534,"* java.util.Arrays is called, which will perform a merge sort, which is"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,535,* faster than insertion sort on large lists.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,536,* <p>
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,537,* The end result is much greater performace when computeMillis is called.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,538,"* Since the amount of saved fields is small, the insertion sort is a"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,539,* better choice. Additional performance is gained since there is no extra
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,540,"* array allocation and copying. Also, the insertion sort here does not"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,541,* perform any casting operations. The version in java.util.Arrays performs
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,542,* casts within the insertion sort loop.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,544,"private static void sort(Comparable[] array, int high) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,545,if (high > 10) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,546,"Arrays.sort(array, 0, high);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,547,} else {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,548,for (int i=0; i<high; i++) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,549,for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,550,Comparable t = array[j];
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,551,array[j] = array[j-1];
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,552,array[j-1] = t;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,558,class SavedState {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,559,final DateTimeZone iZone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,560,final int iOffset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,561,final SavedField[] iSavedFields;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,562,final int iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,564,SavedState() {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,565,this.iZone = ParseBucket.this.iZone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,566,this.iOffset = ParseBucket.this.iOffset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,567,this.iSavedFields = ParseBucket.this.iSavedFields;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,568,this.iSavedFieldsCount = ParseBucket.this.iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,571,boolean restoreState(ParseBucket enclosing) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,572,if (enclosing != ParseBucket.this) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,573,return false;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,575,enclosing.iZone = this.iZone;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,576,enclosing.iOffset = this.iOffset;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,577,enclosing.iSavedFields = this.iSavedFields;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,578,if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,579,"// Since count is being restored to a lower count, the"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,580,// potential exists for new saved fields to destroy data being
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,581,// shared by another state. Set this flag such that the array
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,582,// of saved fields is cloned prior to modification.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,583,enclosing.iSavedFieldsShared = true;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,585,enclosing.iSavedFieldsCount = this.iSavedFieldsCount;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,586,return true;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,590,static class SavedField implements Comparable {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,591,final DateTimeField iField;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,592,final int iValue;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,593,final String iText;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,594,final Locale iLocale;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,596,"SavedField(DateTimeField field, int value) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,597,iField = field;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,598,iValue = value;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,599,iText = null;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,600,iLocale = null;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,603,"SavedField(DateTimeField field, String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,604,iField = field;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,605,iValue = 0;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,606,iText = text;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,607,iLocale = locale;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,610,"long set(long millis, boolean reset) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,611,if (iText == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,612,"millis = iField.set(millis, iValue);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,613,} else {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,614,"millis = iField.set(millis, iText, iLocale);"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,616,if (reset) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,617,millis = iField.roundFloor(millis);
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,619,return millis;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,623,"* The field with the longer range duration is ordered first, where"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,624,"* null is considered infinite. If the ranges match, then the field"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,625,* with the longer duration is ordered first.
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,627,public int compareTo(Object obj) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,628,DateTimeField other = ((SavedField)obj).iField;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,629,int result = compareReverse
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,630,"(iField.getRangeDurationField(), other.getRangeDurationField());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,631,if (result != 0) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,632,return result;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,634,return compareReverse
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,635,"(iField.getDurationField(), other.getDurationField());"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,638,"private int compareReverse(Comparable a, Comparable b) {"
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,639,if (a == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,640,if (b == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,641,return 0;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,643,return -1;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,645,if (b == null) {
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,646,return 1;
True,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/BaseDateTimeFormatter.java,648,return -a.compareTo(b);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1050,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1050,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1123,"ublic int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1123,"public int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1151,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1151,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1425,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1425,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1615,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1615,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1831,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1831,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2171,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2171,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2542,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2542,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2627,"rotected int parseInto(DateTimeParserBucket bucket, String text, int position) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2627,"protected int parseInto(ParseBucket bucket, String text, int position) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,2," Joda Software License, Version 1.0"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,5, Copyright (c) 2001-2004 Stephen Colebourne.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,6, All rights reserved.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,8," Redistribution and use in source and binary forms, with or without"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,9," modification, are permitted provided that the following conditions"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,10, are met:
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,12, 1. Redistributions of source code must retain the above copyright
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,13,"    notice, this list of conditions and the following disclaimer."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,15, 2. Redistributions in binary form must reproduce the above copyright
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,16,"    notice, this list of conditions and the following disclaimer in"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,17,    the documentation and/or other materials provided with the
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,18,    distribution.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,20," 3. The end-user documentation included with the redistribution,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,21,"    if any, must include the following acknowledgment:"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,22,"       ""This product includes software developed by the"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,23,"        Joda project (http://www.joda.org/)."""
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,24,"    Alternately, this acknowledgment may appear in the software itself,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,25,    if and wherever such third-party acknowledgments normally appear.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,27," 4. The name ""Joda"" must not be used to endorse or promote products"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,28,    derived from this software without prior written permission. For
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,29,"    written permission, please contact licence@joda.org."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,31," 5. Products derived from this software may not be called ""Joda"","
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,32,"    nor may ""Joda"" appear in their name, without prior written"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,33,    permission of the Joda project.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,38, DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,39," CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,46, SUCH DAMAGE.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,49, This software consists of voluntary contributions made by many
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,50, individuals on behalf of the Joda project and was originally
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,51, created by Stephen Colebourne <scolebourne@joda.org>. For more
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,52," information on the Joda project, please see <http://www.joda.org/>."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,54,ackage org.joda.time.format;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,56,mport java.util.Arrays;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,57,mport java.util.Locale;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,59,mport org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,60,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,61,mport org.joda.time.DateTimeFieldType;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,62,mport org.joda.time.DateTimeUtils;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,63,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,66, Internal class used to build the state during parsing.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,67, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,68," Allows fields to be saved in any order, but be physically set in a"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,69, consistent order. This is useful for parsing against formats that allow
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,70, field values to contradict each other.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,71, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,72," Field values are applied in an order where the ""larger"" fields are set"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,73," first, making their value less likely to stick.  A field is larger than"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,74," another when it's range duration is longer. If both ranges are the same,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,75, then the larger field has the longer duration. If it cannot be determined
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,76," which field is larger, then the fields are set in the order they were saved."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,77, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,78," For example, these fields were saved in this order: dayOfWeek, monthOfYear,"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,79," dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,80," this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,81, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,82, DateTimeParserBucket is mutable and not thread-safe.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,84, @author Brian S O'Neill
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,85, @since 1.0
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,87,ublic class DateTimeParserBucket {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,89,rivate final Chronology iChrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,90,rivate final long iMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,92,"/ TimeZone to switch to in computeMillis. If null, use offset."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,93,ateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,94,nt iOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,96,avedField[] iSavedFields = new SavedField[8];
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,97,nt iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,98,oolean iSavedFieldsShared;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,100,rivate Object iSavedState;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,103, Constucts a bucket.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,105," @param instantLocal the initial millis from 1970-01-01T00:00:00, local time"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,106, @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,108,"ublic DateTimeParserBucket(long instantLocal, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,109,uper();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,110,hrono = DateTimeUtils.getChronology(chrono);
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,111,Millis = instantLocal;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,112,Chrono = chrono.withUTC();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,113,etZone(chrono.getZone());
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,118," Gets the chronology of the bucket, which will be a local (UTC) chronology."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,120,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,121,eturn iChrono;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,126," Returns the time zone used by computeMillis, or null if an offset is"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,127, used instead.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,129,ublic DateTimeZone getZone() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,130,eturn iZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,134," Set a time zone to be used when computeMillis is called, which"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,135, overrides any set time zone offset.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,137," @param zone the date time zone to operate in, or null if UTC"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,139,ublic void setZone(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,140,SavedState = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,141,Zone = zone == DateTimeZone.UTC ? null : zone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,142,Offset = 0;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,147," Returns the time zone offset used by computeMillis, unless"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,148, getZone doesn't return null.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,150,ublic int getOffset() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,151,eturn iOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,155," Set a time zone offset to be used when computeMillis is called, which"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,156, overrides the time zone.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,158,ublic void setOffset(int offset) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,159,SavedState = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,160,Offset = offset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,161,Zone = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,166, Saves a datetime field value.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,168," @param field  the field, whose chronology must match that of this bucket"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,169, @param value  the value
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,171,"ublic void saveField(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,172,"aveField(new SavedField(field, value));"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,176, Saves a datetime field value.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,178, @param fieldType  the field type
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,179, @param value  the value
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,181,"ublic void saveField(DateTimeFieldType fieldType, int value) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,182,"aveField(new SavedField(fieldType.getField(iChrono), value));"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,186, Saves a datetime field text value.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,188, @param fieldType  the field type
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,189, @param text  the text value
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,190, @param locale  the locale to use
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,192,"ublic void saveField(DateTimeFieldType fieldType, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,193,"aveField(new SavedField(fieldType.getField(iChrono), text, locale));"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,196,rivate void saveField(SavedField field) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,197,avedField[] savedFields = iSavedFields;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,198,nt savedFieldsCount = iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,200,f (savedFieldsCount == savedFields.length || iSavedFieldsShared) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,201,/ Expand capacity or merely copy if saved fields are shared.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,202,avedField[] newArray = new SavedField
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,203,savedFieldsCount == savedFields.length ? savedFieldsCount * 2 : savedFields.length];
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,204,"ystem.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,205,SavedFields = savedFields = newArray;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,206,SavedFieldsShared = false;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,209,SavedState = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,210,avedFields[savedFieldsCount] = field;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,211,SavedFieldsCount = savedFieldsCount + 1;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,215," Saves the state of this bucket, returning it in an opaque object. Call"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,216, restoreState to undo any changes that were made since the state was
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,217, saved. Calls to saveState may be nested.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,219," @return opaque saved state, which may be passed to restoreState"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,221,ublic Object saveState() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,222,f (iSavedState == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,223,SavedState = new SavedState();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,225,eturn iSavedState;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,229, Restores the state of this bucket from a previously saved state. The
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,230," state object passed into this method is not consumed, and it can be used"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,231, later to restore to that state again.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,233," @param savedState opaque saved state, returned from saveState"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,234, @return true state object is valid and state restored
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,236,ublic boolean restoreState(Object savedState) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,237,f (savedState instanceof SavedState) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,238,f (((SavedState)savedState).restoreState(this)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,239,SavedState = savedState;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,240,eturn true;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,243,eturn false;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,247, Computes the parsed datetime by setting the saved fields.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,248," This method is idempotent, but it is not thread-safe."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,250, @return milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,251, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,253,ublic long computeMillis() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,254,eturn computeMillis(false);
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,258, Computes the parsed datetime by setting the saved fields.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,259," This method is idempotent, but it is not thread-safe."
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,261," @param resetFields false by default, but when true, unsaved field values are cleared"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,262, @return milliseconds since 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,263, @throws IllegalArgumentException if any field is out of range
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,265,ublic long computeMillis(boolean resetFields) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,266,avedField[] savedFields = iSavedFields;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,267,nt count = iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,268,f (iSavedFieldsShared) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,269,SavedFields = savedFields = (SavedField[])iSavedFields.clone();
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,270,SavedFieldsShared = false;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,272,"ort(savedFields, count);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,274,ong millis = iMillis;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,275,or (int i=0; i<count; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,276,"illis = savedFields[i].set(millis, resetFields);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,279,f (iZone == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,280,illis -= iOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,281, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,282,nt offset = iZone.getOffsetFromLocal(millis);
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,283,illis -= offset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,284,f (offset != iZone.getOffset(millis)) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,285,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,286,"""Illegal instant due to time zone offset transition"");"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,290,eturn millis;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,294," Sorts elements [0,high). Calling java.util.Arrays isn't always the right"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,295," choice since it always creates an internal copy of the array, even if it"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,296," doesn't need to. If the array slice is small enough, an insertion sort"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,297," is chosen instead, but it doesn't need a copy!"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,298, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,299," This method has a modified version of that insertion sort, except it"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,300," doesn't create an unnecessary array copy. If high is over 10, then"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,301," java.util.Arrays is called, which will perform a merge sort, which is"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,302, faster than insertion sort on large lists.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,303, <p>
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,304, The end result is much greater performace when computeMillis is called.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,305," Since the amount of saved fields is small, the insertion sort is a"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,306, better choice. Additional performance is gained since there is no extra
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,307," array allocation and copying. Also, the insertion sort here does not"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,308, perform any casting operations. The version in java.util.Arrays performs
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,309, casts within the insertion sort loop.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,311,"rivate static void sort(Comparable[] array, int high) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,312,f (high > 10) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,313,"rrays.sort(array, 0, high);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,314, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,315,or (int i=0; i<high; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,316,or (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,317,omparable t = array[j];
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,318,rray[j] = array[j-1];
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,319,rray[j-1] = t;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,325,rivate static class SavedField implements Comparable {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,326,inal DateTimeField iField;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,327,inal int iValue;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,328,inal String iText;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,329,inal Locale iLocale;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,331,"avedField(DateTimeField field, int value) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,332,Field = field;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,333,Value = value;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,334,Text = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,335,Locale = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,338,"avedField(DateTimeField field, String text, Locale locale) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,339,Field = field;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,340,Value = 0;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,341,Text = text;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,342,Locale = locale;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,345,"ong set(long millis, boolean reset) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,346,f (iText == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,347,"illis = iField.set(millis, iValue);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,348, else {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,349,"illis = iField.set(millis, iText, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,351,f (reset) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,352,illis = iField.roundFloor(millis);
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,354,eturn millis;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,358," The field with the longer range duration is ordered first, where"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,359," null is considered infinite. If the ranges match, then the field"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,360, with the longer duration is ordered first.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,362,ublic int compareTo(Object obj) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,363,ateTimeField other = ((SavedField)obj).iField;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,364,nt result = compareReverse
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,365,"iField.getRangeDurationField(), other.getRangeDurationField());"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,366,f (result != 0) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,367,eturn result;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,369,eturn compareReverse
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,370,"iField.getDurationField(), other.getDurationField());"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,373,"rivate int compareReverse(Comparable a, Comparable b) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,374,f (a == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,375,f (b == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,376,eturn 0;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,378,eturn -1;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,380,f (b == null) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,381,eturn 1;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,383,eturn -a.compareTo(b);
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,387,rivate class SavedState {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,388,inal DateTimeZone iZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,389,inal int iOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,390,inal SavedField[] iSavedFields;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,391,inal int iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,393,avedState() {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,394,his.iZone = DateTimeParserBucket.this.iZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,395,his.iOffset = DateTimeParserBucket.this.iOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,396,his.iSavedFields = DateTimeParserBucket.this.iSavedFields;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,397,his.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,400,oolean restoreState(DateTimeParserBucket enclosing) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,401,f (enclosing != DateTimeParserBucket.this) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,402,eturn false;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,404,nclosing.iZone = this.iZone;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,405,nclosing.iOffset = this.iOffset;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,406,nclosing.iSavedFields = this.iSavedFields;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,407,f (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,408,"/ Since count is being restored to a lower count, the"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,409,/ potential exists for new saved fields to destroy data being
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,410,/ shared by another state. Set this flag such that the array
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,411,/ of saved fields is cloned prior to modification.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,412,nclosing.iSavedFieldsShared = true;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,414,nclosing.iSavedFieldsCount = this.iSavedFieldsCount;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,415,eturn true;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,20,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,37,"   <li>a {@link #decompose(RealMatrix, int) decompose(RealMatrix), int)} method"
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,38,"   has been added,</li>"
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,58, Decompose a matrix to find its largest singular values.
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,59, @param matrix matrix to decompose
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,60, @param maxSingularValues maximal number of singular values to compute
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,61, @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,62, if algorithm fails to converge
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,64,"oid decompose(RealMatrix matrix, int maxSingularValues)"
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,65,hrows InvalidMatrixException;
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,71, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,72, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,73," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,58,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,59,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,60,* @see #getUT()
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,65,* Returns the transpose of the matrix U of the decomposition.
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,66,"* <p>U is an orthogonal matrix, i.e. its transpose is also its inverse.</p>"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,67,* @return the U matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,68,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,69,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,70,* @see #getU()
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,72,RealMatrix getUT() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,79, <p>&Sigma; is a diagonal matrix.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,76,* <p>&Sigma; is a diagonal matrix. The singular values are provided in
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,77,"* non-increasing order, for compatibility with Jama.</p>"
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,81, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,82, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,83," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,79,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,80,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,88, Returns the diagonal elements of the matrix &Sigma; of the decomposition.
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,85,* Returns the diagonal elements of the matrix &Sigma; of the decomposition.
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,86,"* <p>The singular values are provided in non-increasing order, for"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,87,* compatibility with Jama.</p>
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,90, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,91, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,92," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,89,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,90,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,100, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,101, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,102," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,98,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,99,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,100,* @see #getVT()
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,105,* Returns the transpose of the matrix V of the decomposition.
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,106,"* <p>V is an orthogonal matrix, i.e. its transpose is also its inverse.</p>"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,107,* @return the V matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,108,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,109,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,110,* @see #getV()
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,112,RealMatrix getVT() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,112, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,113, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,114," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,120,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,121,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,121, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,122, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,123," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,128,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,129,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,134, @exception IllegalStateException if neither {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,135, DecompositionSolver#decompose(RealMatrix) decompose} nor {@link
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,136," #decompose(RealMatrix, int)} have not been called"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,140,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,141,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,21,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,24,* Calculates the Singular Value Decomposition of a matrix.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,25,* <p>The Singular Value Decomposition of matrix A is a set of three matrices:
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,26,"* U, &Sigma; and V such that A = U &times; &Sigma; &times; V<sup>T</sup>."
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,27,"* Let A be an m &times; n matrix, then U is an m &times; m orthogonal matrix,"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,28,"* &Sigma; is a m &times; n diagonal matrix with positive diagonal elements,"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,29,* and V is an n &times; n orthogonal matrix.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,32,* @since 2.0
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,34,public class SingularValueDecompositionImpl implements SingularValueDecomposition {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,37,private static final long serialVersionUID = -2357152028714378552L;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,39,/** Number of rows of the initial matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,40,private int m;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,42,/** Number of columns of the initial matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,43,private int n;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,45,/** Transformer to bidiagonal. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,46,private BiDiagonalTransformer transformer;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,48,/** Main diagonal of the bidiagonal matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,49,private double[] mainBidiagonal;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,51,/** Secondary diagonal of the bidiagonal matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,52,private double[] secondaryBidiagonal;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,54,/** Main diagonal of the tridiagonal matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,55,double[] mainTridiagonal;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,57,/** Secondary diagonal of the tridiagonal matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,58,double[] secondaryTridiagonal;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,60,/** Eigen decomposition of the tridiagonal matrix. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,61,private EigenDecomposition eigenDecomposition;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,63,/** Singular values. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,64,private double[] singularValues;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,66,/** Cached value of U. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,67,private RealMatrix cachedU;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,69,/** Cached value of U<sup>T</sup>. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,70,private RealMatrix cachedUt;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,72,/** Cached value of S. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,73,private RealMatrix cachedS;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,75,/** Cached value of V. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,76,private RealMatrix cachedV;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,78,/** Cached value of V<sup>T</sup>. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,79,private RealMatrix cachedVt;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,82,* Build a new instance.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,83,* <p>Note that {@link #decompose(RealMatrix)} <strong>must</strong> be called
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,84,"* before any of the {@link #getU()}, {@link #getS()}, {@link #getV()},"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,85,"* {@link #getSingularValues()}, {@link #getNorm()}, {@link #getConditionNumber()},"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,86,"* {@link #getRank()}, {@link #solve(double[])}, {@link #solve(RealMatrix)},"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,87,* {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)} methods can be
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,88,* called.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,89,* @see #decompose(RealMatrix)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,91,public SingularValueDecompositionImpl() {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,95,* Calculates the Singular Value Decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,96,* <p>Calling this constructor is equivalent to first call the no-arguments
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,97,* constructor and then call {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,98,* @param matrix The matrix to decompose.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,99,* @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,100,* if algorithm fails to converge
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,102,public SingularValueDecompositionImpl(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,103,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,104,decompose(matrix);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,107,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,108,public void decompose(final RealMatrix matrix) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,110,m = matrix.getRowDimension();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,111,n = matrix.getColumnDimension();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,113,cachedU  = null;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,114,cachedS  = null;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,115,cachedV  = null;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,116,cachedVt = null;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,118,// transform the matrix to bidiagonal
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,119,transformer         = new BiDiagonalTransformer(matrix);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,120,mainBidiagonal      = transformer.getMainDiagonalRef();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,121,secondaryBidiagonal = transformer.getSecondaryDiagonalRef();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,123,// compute Bt.B (if upper diagonal) or B.Bt (if lower diagonal)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,124,mainTridiagonal      = new double[mainBidiagonal.length];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,125,secondaryTridiagonal = new double[mainBidiagonal.length - 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,126,double a = mainBidiagonal[0];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,127,mainTridiagonal[0] = a * a;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,128,for (int i = 1; i < mainBidiagonal.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,129,final double b  = secondaryBidiagonal[i - 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,130,secondaryTridiagonal[i - 1] = a * b;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,131,a = mainBidiagonal[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,132,mainTridiagonal[i] = a * a + b * b;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,135,// compute singular values
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,136,"eigenDecomposition = new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,137,singularValues = eigenDecomposition.getEigenvalues();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,138,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,139,singularValues[i] = Math.sqrt(singularValues[i]);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,144,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,145,public RealMatrix getU()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,146,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,148,if (cachedU == null) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,150,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,152,if (m >= n) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,153,"// the tridiagonal matrix is Bt.B, where B is upper bidiagonal"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,154,final double[][] eData = eigenDecomposition.getV().getData();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,155,final double[][] iData = new double[m][];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,156,double[] ei1 = eData[0];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,157,iData[0] = ei1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,158,for (int i = 0; i < n - 1; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,159,// compute Bt.E.S^(-1) where E is the eigenvectors matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,160,// we reuse the array from matrix E to store the result
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,161,final double[] ei0 = ei1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,162,ei1 = eData[i + 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,163,iData[i + 1] = ei1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,164,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,165,ei0[j] = (mainBidiagonal[i] * ei0[j] +
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,166,secondaryBidiagonal[i] * ei1[j]) / singularValues[j];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,169,// last row
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,170,final double lastMain = mainBidiagonal[n - 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,171,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,172,ei1[j] *= lastMain / singularValues[j];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,174,for (int i = n; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,175,iData[i] = new double[n];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,177,cachedU =
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,178,"transformer.getU().multiply(new RealMatrixImpl(iData, false));"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,179,} else {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,180,"// the tridiagonal matrix is B.Bt, where B is lower bidiagonal"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,181,cachedU = transformer.getU().multiply(eigenDecomposition.getV());
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,186,// return the cached matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,187,return cachedU;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,191,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,192,public RealMatrix getUT()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,193,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,195,if (cachedUt == null) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,196,cachedUt = getU().transpose();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,199,// return the cached matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,200,return cachedUt;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,204,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,205,public RealMatrix getS()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,206,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,208,if (cachedS == null) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,210,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,212,final int p = singularValues.length;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,213,final double[][] sData = new double[p][p];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,214,for (int i = 0; i < p; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,215,sData[i][i] = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,218,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,219,"cachedS = new RealMatrixImpl(sData, false);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,222,return cachedS;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,225,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,226,public double[] getSingularValues()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,227,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,228,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,229,return singularValues.clone();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,232,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,233,public RealMatrix getV()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,234,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,236,if (cachedV == null) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,238,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,240,if (m >= n) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,241,"// the tridiagonal matrix is Bt.B, where B is upper bidiagonal"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,242,cachedV = transformer.getV().multiply(eigenDecomposition.getV());
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,243,} else {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,244,"// the tridiagonal matrix is B.Bt, where B is lower bidiagonal"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,245,final double[][] eData = eigenDecomposition.getV().getData();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,246,final double[][] iData = new double[n][];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,247,double[] ei1 = eData[0];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,248,iData[0] = ei1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,249,for (int i = 0; i < m - 1; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,250,// compute Bt.E.S^(-1) where E is the eigenvectors matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,251,// we reuse the array from matrix E to store the result
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,252,final double[] ei0 = ei1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,253,ei1 = eData[i + 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,254,iData[i + 1] = ei1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,255,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,256,ei0[j] = (mainBidiagonal[i] * ei0[j] +
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,257,secondaryBidiagonal[i] * ei1[j]) / singularValues[j];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,260,// last row
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,261,final double lastMain = mainBidiagonal[m - 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,262,for (int j = 0; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,263,ei1[j] *= lastMain / singularValues[j];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,265,for (int i = m; i < n; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,266,iData[i] = new double[m];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,268,cachedV =
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,269,"transformer.getV().multiply(new RealMatrixImpl(iData, false));"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,274,// return the cached matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,275,return cachedV;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,279,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,280,public RealMatrix getVT()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,281,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,283,if (cachedVt == null) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,284,cachedVt = getV().transpose();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,287,// return the cached matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,288,return cachedVt;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,292,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,293,public double getNorm()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,294,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,295,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,296,return singularValues[0];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,299,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,300,public double getConditionNumber()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,301,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,302,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,303,return singularValues[0] / singularValues[singularValues.length - 1];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,306,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,307,public int getRank()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,308,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,310,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,312,"final double threshold = Math.max(m, n) * Math.ulp(singularValues[0]);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,314,for (int i = singularValues.length - 1; i >= 0; --i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,315,if (singularValues[i] > threshold) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,316,return i + 1;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,319,return 0;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,323,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,324,public boolean isNonSingular()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,325,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,326,return getRank() == singularValues.length;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,329,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,330,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,331,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,333,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,335,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,336,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,339,final double[] w = getUT().operate(b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,340,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,341,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,342,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,343,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,345,w[i] /= si;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,347,return getV().operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,351,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,352,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,353,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,354,try {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,355,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,356,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,358,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,360,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,361,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,364,final RealVector w = getUT().operate(b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,365,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,366,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,367,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,368,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,370,"w.set(i, w.getEntry(i) / si);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,372,return getV().operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,377,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,378,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,379,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,380,* @return a vector X such that A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,381,* @throws IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,382,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,384,public RealVectorImpl solve(final RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,385,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,386,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,389,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,390,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,391,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,393,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,395,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,396,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,399,final RealMatrixImpl w = (RealMatrixImpl) getUT().multiply(b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,400,final double[][] wData = w.getDataRef();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,401,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,402,final double si  = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,403,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,404,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,406,final double inv = 1.0 / si;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,407,final double[] wi = wData[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,408,for (int j = 0; j < b.getColumnDimension(); ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,409,wi[j] *= inv;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,412,return getV().multiply(w);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,416,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,417,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,418,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,419,checkDecomposed();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,420,return solve(MatrixUtils.createRealIdentityMatrix(singularValues.length));
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,424,* Check if {@link #decompose(RealMatrix)} has been called.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,425,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,426,* has not been called
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,428,private void checkDecomposed()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,429,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,430,if (singularValues == null) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,431,"throw MathRuntimeException.createIllegalStateException(""no matrix have been decomposed yet"", null);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,20,import java.util.Random;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,26,public class SingularValueDecompositionImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,28,private double[][] testSquare = {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,29,"{ 24.0 / 25.0, 43.0 / 25.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,30,"{ 57.0 / 25.0, 24.0 / 25.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,33,private double[][] testNonSquare = {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,34,"{  -540.0 / 625.0,  963.0 / 625.0, -216.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,35,"{ -1730.0 / 625.0, -744.0 / 625.0, 1008.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,36,"{  -720.0 / 625.0, 1284.0 / 625.0, -288.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,37,"{  -360.0 / 625.0,  192.0 / 625.0, 1756.0 / 625.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,40,private static final double normTolerance = 10e-14;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,42,public SingularValueDecompositionImplTest(String name) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,43,super(name);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,46,public static Test suite() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,47,TestSuite suite = new TestSuite(SingularValueDecompositionImplTest.class);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,48,"suite.setName(""SingularValueDecompositionImpl Tests"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,49,return suite;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,52,public void testMoreRows() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,53,"final double[] singularValues = { 123.456, 2.3, 1.001, 0.999 };"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,54,final int rows    = singularValues.length + 2;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,55,final int columns = singularValues.length;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,56,Random r = new Random(15338437322523l);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,57,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,58,"new SingularValueDecompositionImpl(createTestMatrix(r, rows, columns, singularValues));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,59,double[] computedSV = svd.getSingularValues();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,60,"assertEquals(singularValues.length, computedSV.length);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,61,for (int i = 0; i < singularValues.length; ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,62,"assertEquals(singularValues[i], computedSV[i], 1.0e-10);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,66,public void testMoreColumns() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,67,"final double[] singularValues = { 123.456, 2.3, 1.001, 0.999 };"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,68,final int rows    = singularValues.length;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,69,final int columns = singularValues.length + 2;
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,70,Random r = new Random(732763225836210l);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,71,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,72,"new SingularValueDecompositionImpl(createTestMatrix(r, rows, columns, singularValues));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,73,double[] computedSV = svd.getSingularValues();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,74,"assertEquals(singularValues.length, computedSV.length);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,75,for (int i = 0; i < singularValues.length; ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,76,"assertEquals(singularValues[i], computedSV[i], 1.0e-10);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,80,/** test dimensions */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,81,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,82,"RealMatrixImpl matrix = new RealMatrixImpl(testSquare, false);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,83,final int m = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,84,final int n = matrix.getColumnDimension();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,85,SingularValueDecomposition svd = new SingularValueDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,86,"assertEquals(m, svd.getU().getRowDimension());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,87,"assertEquals(m, svd.getU().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,88,"assertEquals(m, svd.getS().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,89,"assertEquals(n, svd.getS().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,90,"assertEquals(n, svd.getV().getRowDimension());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,91,"assertEquals(n, svd.getV().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,95,/** test A = USVt */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,96,public void testAEqualUSVt() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,97,"checkAEqualUSVt(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,98,"checkAEqualUSVt(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,99,"checkAEqualUSVt(new RealMatrixImpl(testNonSquare, false).transpose());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,102,public void checkAEqualUSVt(final RealMatrix matrix) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,103,SingularValueDecomposition svd = new SingularValueDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,104,RealMatrix u = svd.getU();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,105,RealMatrix s = svd.getS();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,106,RealMatrix v = svd.getV();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,107,double norm = u.multiply(s).multiply(v.transpose()).subtract(matrix).getNorm();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,108,"assertEquals(0, norm, normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,112,/** test that U is orthogonal */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,113,public void testUOrthogonal() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,114,"checkOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)).getU());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,115,"checkOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false)).getU());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,116,"checkOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false).transpose()).getU());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,119,/** test that V is orthogonal */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,120,public void testVOrthogonal() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,121,"checkOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false)).getV());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,122,"checkOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false)).getV());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,123,"checkOrthogonal(new SingularValueDecompositionImpl(new RealMatrixImpl(testNonSquare, false).transpose()).getV());"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,126,public void checkOrthogonal(final RealMatrix m) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,127,RealMatrix mTm = m.transpose().multiply(m);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,128,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,129,"assertEquals(0, mTm.subtract(id).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,132,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,133,public void testSolveDimensionErrors() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,134,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,135,"new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,136,RealMatrix b = new RealMatrixImpl(new double[3][2]);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,137,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,138,svd.solve(b);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,139,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,140,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,141,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,142,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,143,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,145,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,146,svd.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,147,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,148,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,149,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,150,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,151,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,153,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,154,svd.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,155,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,156,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,157,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,158,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,159,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,163,/** test solve singularity errors */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,164,public void testSolveSingularityErrors() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,165,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,166,new SingularValueDecompositionImpl(new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,167,"{ 1.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,168,"{ 0.0, 0.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,169,"}, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,170,RealMatrix b = new RealMatrixImpl(new double[2][2]);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,171,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,172,svd.solve(b);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,173,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,174,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,175,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,176,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,177,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,179,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,180,svd.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,181,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,182,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,183,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,184,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,185,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,187,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,188,svd.solve(b.getColumnVector(0));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,189,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,190,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,191,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,192,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,193,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,195,try {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,196,svd.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,197,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,198,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,199,// expected behavior
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,200,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,201,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,205,/** test solve */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,206,public void testSolve() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,207,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,208,"new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,209,RealMatrix b = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,210,"{ 1, 2, 3 }, { 0, -5, 1 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,212,RealMatrix xRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,213,"{ -8.0 / 25.0, -263.0 / 75.0, -29.0 / 75.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,214,"{ 19.0 / 25.0,   78.0 / 25.0,  49.0 / 25.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,217,// using RealMatrix
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,218,"assertEquals(0, svd.solve(b).subtract(xRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,220,// using double[]
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,221,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,222,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,223,"new RealVectorImpl(svd.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,224,1.0e-13);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,227,// using RealMatrixImpl
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,228,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,229,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,230,"svd.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,231,1.0e-13);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,234,// using RealMatrix with an alternate implementation
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,235,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,236,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,237,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,238,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,239,"svd.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,240,1.0e-13);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,245,/** test matrices values */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,246,public void testMatricesValues1() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,247,SingularValueDecomposition svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,248,"new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,249,RealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,250,"{ 3.0 / 5.0, -4.0 / 5.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,251,"{ 4.0 / 5.0,  3.0 / 5.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,253,RealMatrix sRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,254,"{ 3.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,255,"{ 0.0, 1.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,257,RealMatrix vRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,258,"{ 4.0 / 5.0,  3.0 / 5.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,259,"{ 3.0 / 5.0, -4.0 / 5.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,262,// check values against known references
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,263,RealMatrix u = svd.getU();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,264,"assertEquals(0, u.subtract(uRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,265,RealMatrix s = svd.getS();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,266,"assertEquals(0, s.subtract(sRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,267,RealMatrix v = svd.getV();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,268,"assertEquals(0, v.subtract(vRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,270,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,271,assertTrue(u == svd.getU());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,272,assertTrue(s == svd.getS());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,273,assertTrue(v == svd.getV());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,277,/** test matrices values */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,278,public void testMatricesValues2() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,280,RealMatrix uRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,281,"{  0.0 / 5.0,  3.0 / 5.0,  0.0 / 5.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,282,"{ -4.0 / 5.0,  0.0 / 5.0, -3.0 / 5.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,283,"{  0.0 / 5.0,  4.0 / 5.0,  0.0 / 5.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,284,"{ -3.0 / 5.0,  0.0 / 5.0,  4.0 / 5.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,286,RealMatrix sRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,287,"{ 4.0, 0.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,288,"{ 0.0, 3.0, 0.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,289,"{ 0.0, 0.0, 2.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,291,RealMatrix vRef = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,292,"{  80.0 / 125.0,  -60.0 / 125.0, 75.0 / 125.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,293,"{  24.0 / 125.0,  107.0 / 125.0, 60.0 / 125.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,294,"{ -93.0 / 125.0,  -24.0 / 125.0, 80.0 / 125.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,297,// check values against known references
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,298,SingularValueDecomposition svd = new SingularValueDecompositionImpl();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,299,"svd.decompose(new RealMatrixImpl(testNonSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,300,RealMatrix u = svd.getU();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,301,"assertEquals(0, u.subtract(uRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,302,RealMatrix s = svd.getS();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,303,"assertEquals(0, s.subtract(sRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,304,RealMatrix v = svd.getV();
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,305,"assertEquals(0, v.subtract(vRef).getNorm(), normTolerance);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,307,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,308,assertTrue(u == svd.getU());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,309,assertTrue(s == svd.getS());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,310,assertTrue(v == svd.getV());
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,314,/** test condition number */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,315,public void testConditionNumber() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,316,SingularValueDecompositionImpl svd =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,317,"new SingularValueDecompositionImpl(new RealMatrixImpl(testSquare, false));"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,318,"assertEquals(3.0, svd.getConditionNumber(), 1.0e-15);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,321,"private RealMatrix createTestMatrix(final Random r, final int rows, final int columns,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,322,final double[] singularValues) {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,323,final RealMatrix u =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,324,"EigenDecompositionImplTest.createOrthogonalMatrix(r, rows);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,325,final RealMatrix d =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,326,"EigenDecompositionImplTest.createDiagonalMatrix(singularValues, rows, columns);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,327,final RealMatrix v =
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,328,"EigenDecompositionImplTest.createOrthogonalMatrix(r, columns);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,329,return u.multiply(d).multiply(v);

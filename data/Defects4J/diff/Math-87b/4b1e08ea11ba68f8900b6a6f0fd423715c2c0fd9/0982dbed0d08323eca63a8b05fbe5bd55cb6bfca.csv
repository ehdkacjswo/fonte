is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,71,/ org.apache.commons.math.random.NotPositiveDefiniteMatrixException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,71,// org.apache.commons.math.linear.NotPositiveDefiniteMatrixException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,75,// org.apache.commons.math.linear.NotSymmetricMatrixException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,76,"{ ""not symmetric matrix"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,77,"""matrice non symm\u00e9trique"" },"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,23,* An interface to classes that implement an algorithm to calculate the
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,24,* Cholesky decomposition of a real symmetric positive-definite matrix.
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,25,* <p>This interface is based on the class with similar name from the now defunct
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,26,"* <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library, with the"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,27,* following changes:</p>
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,28,* <ul>
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,29,"*   <li>a {@link #getLT() getLT} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,30,"*   <li>the <code>isspd</code> method has been removed, the constructors of"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,31,*   implementation classes being expected to throw {@link
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,32,"*   NotPositiveDefiniteMatrixException} when a matrix cannot be decomposed,</li>"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,33,"*   <li>a {@link #getDeterminant() getDeterminant} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,34,*   <li>the <code>solve</code> method has been replaced by a {@link
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,35,*   #getSolver() getSolver} method and the equivalent method provided by
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,36,*   the returned {@link DecompositionSolver}.</li>
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,37,* </ul>
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,39,"* @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,40,"* @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,41,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,42,* @since 2.0
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,44,public interface CholeskyDecomposition extends Serializable {
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,47,* Returns the matrix L of the decomposition.
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,48,* <p>L is an lower-triangular matrix</p>
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,49,* @return the L matrix
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,51,RealMatrix getL();
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,54,* Returns the transpose of the matrix L of the decomposition.
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,55,* <p>L<sup>T</sup> is an upper-triangular matrix</p>
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,56,* @return the transpose of the matrix L of the decomposition
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,58,RealMatrix getLT();
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,61,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,62,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,64,double getDeterminant();
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,67,* Get a solver for finding the A &times; X = B solution in least square sense.
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,68,* @return a solver
True,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/java/org/apache/commons/math/linear/CholeskyDecomposition.java,70,DecompositionSolver getSolver();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,24,* Calculates the Cholesky decomposition of a matrix.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,25,* <p>The Cholesky decomposition of a real symmetric positive-definite
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,26,* matrix A consists of a lower triangular matrix L with same size that
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,27,"* satisfy: A = LL<sup>T</sup>Q = I). In a sense, this is the square root of A.</p>"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,29,"* @see <a href=""http://mathworld.wolfram.com/CholeskyDecomposition.html"">MathWorld</a>"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,30,"* @see <a href=""http://en.wikipedia.org/wiki/Cholesky_decomposition"">Wikipedia</a>"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,32,* @since 2.0
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,34,public class CholeskyDecompositionImpl implements CholeskyDecomposition {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,37,private static final long serialVersionUID = -2036131698031167221L;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,39,/** Default threshold above which off-diagonal elements are considered too different
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,40,* and matrix not symmetric. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,41,public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,43,/** Default threshold below which diagonal elements are considered null
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,44,* and matrix not positive definite. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,45,public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,47,/** Row-oriented storage for L<sup>T</sup> matrix data. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,48,private double[][] lTData;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,50,/** Cached value of L. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,51,private RealMatrix cachedL;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,53,/** Cached value of LT. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,54,private RealMatrix cachedLT;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,57,* Calculates the Cholesky decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,58,* <p>
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,59,* Calling this constructor is equivalent to call {@link
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,60,"* #CholeskyDecompositionImpl(RealMatrix, double, double)} with the"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,61,* thresholds set to the default values {@link
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,62,* #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,63,* #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,64,* </p>
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,65,* @param matrix the matrix to decompose
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,66,* @exception NonSquareMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,67,* @exception NotSymmetricMatrixException if matrix is not symmetric
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,68,* @exception NotPositiveDefiniteMatrixException if the matrix is not
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,69,* strictly positive definite
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,70,"* @see #CholeskyDecompositionImpl(RealMatrix, double, double)"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,71,* @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,72,* @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,74,public CholeskyDecompositionImpl(final RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,75,"throws NonSquareMatrixException,"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,76,"NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,77,"this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,78,DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,82,* Calculates the Cholesky decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,83,* @param matrix the matrix to decompose
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,84,* @param relativeSymmetryThreshold threshold above which off-diagonal
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,85,* elements are considered too different and matrix not symmetric
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,86,* @param absolutePositivityThreshold threshold below which diagonal
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,87,* elements are considered null and matrix not positive definite
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,88,* @exception NonSquareMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,89,* @exception NotSymmetricMatrixException if matrix is not symmetric
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,90,* @exception NotPositiveDefiniteMatrixException if the matrix is not
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,91,* strictly positive definite
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,92,* @see #CholeskyDecompositionImpl(RealMatrix)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,93,* @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,94,* @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,96,"public CholeskyDecompositionImpl(final RealMatrix matrix,"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,97,"final double relativeSymmetryThreshold,"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,98,final double absolutePositivityThreshold)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,99,"throws NonSquareMatrixException,"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,100,"NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,102,if (!matrix.isSquare()) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,103,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,104,matrix.getColumnDimension());
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,107,final int order = matrix.getRowDimension();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,108,lTData   = matrix.getData();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,109,cachedL  = null;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,110,cachedLT = null;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,112,// check the matrix before transformation
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,113,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,115,final double[] lI = lTData[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,117,// check diagonal element
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,118,if (lTData[i][i] < absolutePositivityThreshold) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,119,throw new NotPositiveDefiniteMatrixException();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,122,// check off-diagonal elements (and reset them to 0)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,123,for (int j = i + 1; j < order; ++j) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,124,final double[] lJ = lTData[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,125,final double lIJ = lI[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,126,final double lJI = lJ[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,127,final double maxDelta =
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,128,"relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,129,if (Math.abs(lIJ - lJI) > maxDelta) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,130,throw new NotSymmetricMatrixException();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,132,lJ[i] = 0;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,136,// transform the matrix
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,137,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,139,final double[] ltI = lTData[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,140,ltI[i] = Math.sqrt(ltI[i]);
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,141,final double inverse = 1.0 / ltI[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,143,for (int q = order - 1; q > i; --q) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,144,ltI[q] *= inverse;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,145,final double[] ltQ = lTData[q];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,146,for (int p = q; p < order; ++p) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,147,ltQ[p] -= ltI[q] * ltI[p];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,155,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,156,public RealMatrix getL() {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,157,if (cachedL == null) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,158,cachedL = getLT().transpose();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,160,return cachedL;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,163,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,164,public RealMatrix getLT() {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,166,if (cachedLT == null) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,167,cachedLT = MatrixUtils.createRealMatrix(lTData);
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,170,// return the cached matrix
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,171,return cachedLT;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,175,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,176,public double getDeterminant() {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,177,double determinant = 1.0;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,178,for (int i = 0; i < lTData.length; ++i) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,179,double lTii = lTData[i][i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,180,determinant *= lTii * lTii;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,182,return determinant;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,185,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,186,public DecompositionSolver getSolver() {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,187,return new Solver(lTData);
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,190,/** Specialized solver. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,191,private static class Solver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,193,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,194,private static final long serialVersionUID = -7288829864732555901L;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,196,/** Row-oriented storage for L<sup>T</sup> matrix data. */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,197,private final double[][] lTData;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,200,* Build a solver from decomposed matrix.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,201,* @param lData row-oriented storage for L<sup>T</sup> matrix data
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,203,private Solver(final double[][] lTData) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,204,this.lTData = lTData;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,207,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,208,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,209,"// if we get this far, the matrix was positive definite, hence non-singular"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,210,return true;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,213,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,214,public double[] solve(double[] b)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,215,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,217,final int m = lTData.length;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,218,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,219,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,220,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,221,"new Object[] { b.length, m });"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,224,final double[] x = b.clone();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,226,// Solve LY = b
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,227,for (int j = 0; j < m; j++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,228,final double[] lJ = lTData[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,229,x[j] /= lJ[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,230,final double xJ = x[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,231,for (int i = j + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,232,x[i] -= xJ * lJ[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,236,// Solve LTX = Y
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,237,for (int j = m - 1; j >= 0; j--) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,238,x[j] /= lTData[j][j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,239,final double xJ = x[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,240,for (int i = 0; i < j; i++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,241,x[i] -= xJ * lTData[i][j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,245,return x;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,249,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,250,public RealVector solve(RealVector b)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,251,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,252,try {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,253,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,254,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,256,final int m = lTData.length;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,257,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,258,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,259,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,260,"new Object[] { b.getDimension(), m });"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,263,final double[] x = b.getData();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,265,// Solve LY = b
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,266,for (int j = 0; j < m; j++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,267,final double[] lJ = lTData[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,268,x[j] /= lJ[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,269,final double xJ = x[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,270,for (int i = j + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,271,x[i] -= xJ * lJ[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,275,// Solve LTX = Y
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,276,for (int j = m - 1; j >= 0; j--) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,277,x[j] /= lTData[j][j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,278,final double xJ = x[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,279,for (int i = 0; i < j; i++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,280,x[i] -= xJ * lTData[i][j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,284,"return new RealVectorImpl(x, false);"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,289,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,290,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,291,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,292,* @return a vector X such that A &times; X = B
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,293,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,294,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,296,public RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,297,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,298,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,301,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,302,public RealMatrix solve(RealMatrix b)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,303,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,305,final int m = lTData.length;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,306,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,307,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,308,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,309,"new Object[] { b.getRowDimension(), b.getColumnDimension(), m, ""n""});"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,312,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,313,double[][] x = b.getData();
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,315,// Solve LY = b
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,316,for (int j = 0; j < m; j++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,317,final double[] lJ = lTData[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,318,final double lJJ = lJ[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,319,final double[] xJ = x[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,320,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,321,xJ[k] /= lJJ;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,323,for (int i = j + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,324,final double[] xI = x[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,325,final double lJI = lJ[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,326,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,327,xI[k] -= xJ[k] * lJI;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,332,// Solve LTX = Y
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,333,for (int j = m - 1; j >= 0; j--) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,334,final double lJJ = lTData[j][j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,335,final double[] xJ = x[j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,336,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,337,xJ[k] /= lJJ;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,339,for (int i = 0; i < j; i++) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,340,final double[] xI = x[i];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,341,final double lIJ = lTData[i][j];
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,342,for (int k = 0; k < nColB; ++k) {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,343,xI[k] -= xJ[k] * lIJ;
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,348,"return new RealMatrixImpl(x, false);"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,352,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,353,public RealMatrix getInverse() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,354,return solve(MatrixUtils.createRealIdentityMatrix(lTData.length));
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,23,* This class represents exceptions thrown when a matrix expected to
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,24,* be symmetric is not
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,26,* @since 2.0
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,30,public class NotSymmetricMatrixException extends MathException {
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,32,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,33,private static final long serialVersionUID = -7012803946709786097L;
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,35,/** Simple constructor.
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,36,* build an exception with a default message.
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,38,public NotSymmetricMatrixException() {
True,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java,39,"super(""not symmetric matrix"", null);"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,20,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,26,public class CholeskyDecompositionImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,28,private double[][] testData = new double[][] {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,29,"{  1,  2,   4,   7,  11 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,30,"{  2, 13,  23,  38,  58 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,31,"{  4, 23,  77, 122, 182 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,32,"{  7, 38, 122, 294, 430 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,33,"{ 11, 58, 182, 430, 855 }"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,36,public CholeskyDecompositionImplTest(String name) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,37,super(name);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,40,public static Test suite() {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,41,TestSuite suite = new TestSuite(CholeskyDecompositionImplTest.class);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,42,"suite.setName(""CholeskyDecompositionImpl Tests"");"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,43,return suite;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,46,/** test dimensions */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,47,public void testDimensions() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,48,CholeskyDecomposition llt =
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,49,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,50,"assertEquals(testData.length, llt.getL().getRowDimension());"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,51,"assertEquals(testData.length, llt.getL().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,52,"assertEquals(testData.length, llt.getLT().getRowDimension());"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,53,"assertEquals(testData.length, llt.getLT().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,56,/** test non-square matrix */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,57,public void testNonSquare() {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,58,try {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,59,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,60,} catch (NonSquareMatrixException ime) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,61,// expected behavior
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,62,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,63,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,67,/** test non-symmetric matrix */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,68,public void testNotSymmetricMatrixException() {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,69,try {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,70,double[][] changed = testData.clone();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,71,changed[0][changed[0].length - 1] += 1.0e-5;
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,72,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,73,} catch (NotSymmetricMatrixException e) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,74,// expected behavior
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,75,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,76,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,80,/** test non positive definite matrix */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,81,public void testNotPositiveDefinite() {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,82,try {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,83,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,84,"{ 14, 11, 13, 15, 24 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,85,"{ 11, 34, 13, 8,  25 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,86,"{ 13, 13, 14, 15, 21 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,87,"{ 15, 8,  15, 18, 23 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,88,"{ 24, 25, 21, 23, 45 }"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,90,} catch (NotPositiveDefiniteMatrixException e) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,91,// expected behavior
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,92,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,93,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,97,/** test A = LLT */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,98,public void testAEqualLLT() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,99,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,100,CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,101,RealMatrix l  = llt.getL();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,102,RealMatrix lt = llt.getLT();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,103,double norm = l.multiply(lt).subtract(matrix).getNorm();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,104,"assertEquals(0, norm, 1.0e-15);"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,107,/** test that L is lower triangular */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,108,public void testLLowerTriangular() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,109,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,110,RealMatrix l = new CholeskyDecompositionImpl(matrix).getL();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,111,for (int i = 0; i < l.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,112,for (int j = i + 1; j < l.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,113,"assertEquals(0.0, l.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,118,/** test that LT is transpose of L */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,119,public void testLTTransposed() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,120,RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,121,CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,122,RealMatrix l  = llt.getL();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,123,RealMatrix lt = llt.getLT();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,124,double norm = l.subtract(lt.transpose()).getNorm();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,125,"assertEquals(0, norm, 1.0e-15);"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,128,/** test matrices values */
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,129,public void testMatricesValues() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,130,RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,131,"{  1,  0,  0,  0,  0 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,132,"{  2,  3,  0,  0,  0 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,133,"{  4,  5,  6,  0,  0 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,134,"{  7,  8,  9, 10,  0 },"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,135,"{ 11, 12, 13, 14, 15 }"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,137,CholeskyDecomposition llt =
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,138,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,140,// check values against known references
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,141,RealMatrix l = llt.getL();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,142,"assertEquals(0, l.subtract(lRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,143,RealMatrix lt = llt.getLT();
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,144,"assertEquals(0, lt.subtract(lRef.transpose()).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,146,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,147,assertTrue(l  == llt.getL());
True,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,148,assertTrue(lt == llt.getLT());
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,24,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,26,public class CholeskySolverTest extends TestCase {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,28,private double[][] testData = new double[][] {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,29,"{  1,  2,   4,   7,  11 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,30,"{  2, 13,  23,  38,  58 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,31,"{  4, 23,  77, 122, 182 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,32,"{  7, 38, 122, 294, 430 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,33,"{ 11, 58, 182, 430, 855 }"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,36,public CholeskySolverTest(String name) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,37,super(name);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,40,public static Test suite() {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,41,TestSuite suite = new TestSuite(CholeskySolverTest.class);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,42,"suite.setName(""LUSolver Tests"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,43,return suite;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,46,/** test solve dimension errors */
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,47,public void testSolveDimensionErrors() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,48,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,49,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,50,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,51,try {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,52,solver.solve(b);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,53,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,54,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,55,// expected behavior
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,56,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,57,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,59,try {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,60,solver.solve(b.getColumn(0));
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,61,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,62,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,63,// expected behavior
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,64,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,65,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,67,try {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,68,solver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,69,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,70,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,71,// expected behavior
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,72,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,73,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,77,/** test solve */
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,78,public void testSolve() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,79,DecompositionSolver solver =
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,80,new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData)).getSolver();
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,81,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,82,"{   78,  -13,    1 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,83,"{  414,  -62,   -1 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,84,"{ 1312, -202,  -37 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,85,"{ 2989, -542,  145 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,86,"{ 5510, -1465, 201 }"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,88,RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,89,"{ 1,  0,  1 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,90,"{ 0,  1,  1 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,91,"{ 2,  1, -4 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,92,"{ 2,  2,  2 },"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,93,"{ 5, -3,  0 }"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,96,// using RealMatrix
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,97,"assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 1.0e-13);"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,99,// using double[]
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,100,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,101,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,102,"new RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,103,1.0e-13);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,106,// using RealVectorImpl
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,107,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,108,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,109,"solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,110,1.0e-13);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,113,// using RealVector with an alternate implementation
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,114,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,115,RealVectorImplTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,116,new RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,117,"assertEquals(0,"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,118,"solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,119,1.0e-13);
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,124,/** test determinant */
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,125,public void testDeterminant() throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,126,"assertEquals(7290000.0, getDeterminant(MatrixUtils.createRealMatrix(testData)), 1.0e-15);"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,129,private double getDeterminant(RealMatrix m) throws MathException {
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,130,return new CholeskyDecompositionImpl(m).getDeterminant();

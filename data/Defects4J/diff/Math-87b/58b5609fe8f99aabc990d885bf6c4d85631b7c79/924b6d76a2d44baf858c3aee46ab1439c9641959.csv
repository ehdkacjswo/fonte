is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,47,// org.apache.commons.math.util.MathUtils
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,48,"{ ""overflow: gcd({0}, {1}) is 2^31"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,49,"""d\u00e9passement de capacit\u00e9 : le PGCD de {0} et {1} vaut 2^31"" },"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,23,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,516,* Special cases:
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,517,* <ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,518,* <li>The invocations
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,519,"* <code>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)</code>,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,520,"* <code>gcd(Integer.MIN_VALUE, 0)</code> and"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,521,"* <code>gcd(0, Integer.MIN_VALUE)</code> throw an"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,522,"* <code>ArithmeticException</code>, because the result would be 2^31, which"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,523,* is too large for an int value.</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,524,"* <li>The result of <code>gcd(x, x)</code>, <code>gcd(0, x)</code> and"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,525,"* <code>gcd(x, 0)</code> is the absolute value of <code>x</code>, except"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,526,* for the special cases above.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,527,"* <li>The invocation <code>gcd(0, 0)</code> is the only one which returns"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,528,* <code>0</code>.</li>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,529,* </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,514, @param u a non-zero number
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,515, @param v a non-zero number
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,516," @return the greatest common divisor, never zero"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,531,* @param u any number
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,532,* @param v any number
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,533,"* @return the greatest common divisor, never negative"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,534,* @throws ArithmeticException
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,535,*             if the result cannot be represented as a nonnegative int
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,536,*             value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,519,"ublic static int gcd(int u, int v) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,539,"public static int gcd(final int p, final int q) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,540,int u = p;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,541,int v = q;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,543,if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,544,throw MathRuntimeException.createArithmeticException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,545,"""overflow: gcd({0}, {1}) is 2^31"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,546,"new Object[] { p, q });"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,543,"hrow new ArithmeticException(""overflow: gcd is 2^31"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,570,throw MathRuntimeException.createArithmeticException(
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,571,"""overflow: gcd({0}, {1}) is 2^31"","
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,572,"new Object[] { p, q });"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,663, Returns the least common multiple between two integer values.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,692,* <p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,693,"* Returns the least common multiple of the absolute value of two numbers,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,694,"* using the formula <code>lcm(a,b) = (a / gcd(a,b)) * b</code>."
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,695,* </p>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,696,* Special cases:
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,697,* <ul>
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,698,"* <li>The invocations <code>lcm(Integer.MIN_VALUE, n)</code> and"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,699,"* <code>lcm(n, Integer.MIN_VALUE)</code>, where <code>abs(n)</code> is a"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,700,"* power of 2, throw an <code>ArithmeticException</code>, because the result"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,701,"* would be 2^31, which is too large for an int value.</li>"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,702,"* <li>The result of <code>lcm(0, x)</code> and <code>lcm(x, 0)</code> is"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,703,* <code>0</code> for any <code>x</code>.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,704,* </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,665, @param a the first integer value.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,666, @param b the second integer value.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,667, @return the least common multiple between a and b.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,668, @throws ArithmeticException if the lcm is too large to store as an int
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,706,* @param a any number
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,707,* @param b any number
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,708,"* @return the least common multiple, never negative"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,709,* @throws ArithmeticException
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,710,*             if the result cannot be represented as a nonnegative int
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,711,*             value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,672,"eturn Math.abs(mulAndCheck(a / gcd(a, b), b));"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,715,if (a==0 || b==0){
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,716,return 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,718,"int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,719,if (lcm == Integer.MIN_VALUE){
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,720,"throw new ArithmeticException(""overflow: lcm is 2^31"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,722,return lcm;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,432,/ abs(Integer.MIN_VALUE) == Integer.MIN_VALUE
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,433,"ssertEquals(Integer.MIN_VALUE, MathUtils.gcd(Integer.MIN_VALUE, 0));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,432,"assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,433,"assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,435,"// gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,436,"MathUtils.gcd(Integer.MIN_VALUE, 0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,437,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,438,} catch (ArithmeticException expected) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,439,// expected
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,441,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,442,"// gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,443,"MathUtils.gcd(0, Integer.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,444,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,445,} catch (ArithmeticException expected) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,446,// expected
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,448,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,449,"// gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,451,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,453,// expected
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,577,"assertEquals(150, MathUtils.lcm(-a, -b));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,580,// Assert that no intermediate value overflows:
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,581,"// The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,582,"assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,584,// Special case
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,585,"assertEquals(0, MathUtils.lcm(0, 0));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,587,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,588,// lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,589,"MathUtils.lcm(Integer.MIN_VALUE, 1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,590,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,591,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,592,// expected
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,595,try {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,596,// lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,597,"MathUtils.lcm(Integer.MIN_VALUE, 1<<20);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,598,"fail(""Expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,599,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,600,// expected

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,152, Get the covariance matrix of estimated parameters.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,152,* Get the covariance matrix of unbound estimated parameters.
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,166,inal int cols = problem.getAllParameters().length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,166,final int cols = problem.getUnboundParameters().length;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,191, Guess the errors in estimated parameters.
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,191,* Guess the errors in unbound estimated parameters.
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,202,nt p = problem.getAllParameters().length;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,202,int p = problem.getUnboundParameters().length;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,207,ouble[] errors = new double[problem.getAllParameters().length];
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,207,double[] errors = new double[problem.getUnboundParameters().length];
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,451,public void testBoundParameters() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,452,EstimatedParameter[] p = {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,453,"new EstimatedParameter(""unbound0"", 2, false),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,454,"new EstimatedParameter(""unbound1"", 2, false),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,455,"new EstimatedParameter(""bound"",    2, true)"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,457,LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,458,"new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,459,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,460,"3.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,461,"new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,462,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,463,"1.0),"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,464,"new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,465,"new EstimatedParameter[] { p[0], p[1], p[2] },"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,466,7.0)
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,469,"GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,470,estimator.estimate(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,471,assertTrue(estimator.getRMS(problem) < 1.0e-10);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,472,double[][] covariances = estimator.getCovariances(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,473,"int i0 = 0, i1 = 1;"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,474,"if (problem.getUnboundParameters()[0].getName().endsWith(""1"")) {"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,475,i0 = 1;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,476,i1 = 0;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,478,"assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,479,"assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,480,"assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,481,"assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,483,double[] errors = estimator.guessParametersErrors(problem);
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,484,"assertEquals(0, errors[i0], 1.0e-10);"
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,485,"assertEquals(0, errors[i1], 1.0e-10);"

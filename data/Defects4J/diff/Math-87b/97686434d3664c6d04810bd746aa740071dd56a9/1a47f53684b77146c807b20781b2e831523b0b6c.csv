is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,74,// org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,121,// org.apache.commons.math.optimization.direct.DirectSearchOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,122,// org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,122,/ org.apache.commons.math.optimization.general.AbstractEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,126,// org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,128,/ org.apache.commons.math.optimization.general.GaussNewtonEstimator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,132,// org.apache.commons.math.optimization.general.GaussNewtonOptimizer
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,23,** This class converts {@link MultiObjectiveFunction vectorial
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,24, objective functions} to {@link ObjectiveFunction scalar objective functions}
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,23,/** This class converts {@link VectorialObjectiveFunction vectorial
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,24,* objective functions} to {@link ScalarObjectiveFunction scalar objective functions}
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,38, class implements the {@link ObjectiveFunction} interface and can therefore be
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,38,* class implements the {@link ScalarObjectiveFunction} interface and can therefore be
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,48, @see ObjectiveFunction
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,49, @see MultiObjectiveFunction
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,48,* @see ScalarObjectiveFunction
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,49,* @see VectorialObjectiveFunction
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,54,ublic class LeastSquaresConverter implements ObjectiveFunction {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,54,public class LeastSquaresConverter implements ScalarObjectiveFunction {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,57,rivate static final long serialVersionUID = 2424320989874772110L;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,57,private static final long serialVersionUID = -4369653306135732243L;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,60,rivate final MultiObjectiveFunction function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,60,private final VectorialObjectiveFunction function;
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,75,"ublic LeastSquaresConverter (final MultiObjectiveFunction function,"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,76,inal double[] observations) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,75,"public LeastSquaresConverter(final VectorialObjectiveFunction function,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,76,final double[] observations) {
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,111,"ublic LeastSquaresConverter (final MultiObjectiveFunction function,"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112,"inal double[] observations, final double[] weights)"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,111,"public LeastSquaresConverter(final VectorialObjectiveFunction function,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112,"final double[] observations, final double[] weights)"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,144,"ublic LeastSquaresConverter (final MultiObjectiveFunction function,"
False,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,145,"inal double[] observations, final RealMatrix scale)"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,144,"public LeastSquaresConverter(final VectorialObjectiveFunction function,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,145,"final double[] observations, final RealMatrix scale)"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,28, Special implementation of the {@link Optimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,28,* Special implementation of the {@link ScalarOptimizer} interface adding
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,38,ublic class MultiStartOptimizer implements Optimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,38,public class MultiStartOptimizer implements ScalarOptimizer {
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,44,rivate final Optimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,44,private final ScalarOptimizer optimizer;
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,59,rivate PointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,59,private ScalarPointValuePair[] optima;
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,69,"ublic MultiStartOptimizer(final Optimizer optimizer, final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,69,"public MultiStartOptimizer(final ScalarOptimizer optimizer, final int starts,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,80," #optimize(ObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,80,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}."
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,82," restarts. The {@link #optimize(ObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,82,"* restarts. The {@link #optimize(ScalarObjectiveFunction, GoalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,86," #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,86,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,96," elements will be null if the {@link #optimize(ObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,96,"* elements will be null if the {@link #optimize(ScalarObjectiveFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,102," @exception IllegalStateException if {@link #optimize(ObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,102,"* @exception IllegalStateException if {@link #optimize(ScalarObjectiveFunction,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,105,ublic PointValuePair[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,105,public ScalarPointValuePair[] getOptima() throws IllegalStateException {
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,109,eturn (PointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,109,return (ScalarPointValuePair[]) optima.clone();
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,128,ublic void setConvergenceChecker(ConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,128,public void setConvergenceChecker(ScalarConvergenceChecker checker) {
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,133,ublic ConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,133,public ScalarConvergenceChecker getConvergenceChecker() {
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,138,"ublic PointValuePair optimize(final ObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,138,"public ScalarPointValuePair optimize(final ScalarObjectiveFunction f,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,143,ptima = new PointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,143,optima = new ScalarPointValuePair[starts];
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,164,"rrays.sort(optima, new Comparator<PointValuePair>() {"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,165,"ublic int compare(final PointValuePair o1, final PointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,164,"Arrays.sort(optima, new Comparator<ScalarPointValuePair>() {"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,165,"public int compare(final ScalarPointValuePair o1, final ScalarPointValuePair o2) {"
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,22,** This interface specifies how to check if an {@link Optimizer optimization
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,22,/** This interface specifies how to check if an {@link ScalarOptimizer optimization
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,34,ublic interface ConvergenceChecker extends Serializable {
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,34,public interface ScalarConvergenceChecker extends Serializable {
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,50,"oolean converged(int iteration, PointValuePair previous, PointValuePair current);"
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ScalarConvergenceChecker.java,50,"boolean converged(int iteration, ScalarPointValuePair previous, ScalarPointValuePair current);"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,21,* This interface represents a scalar objective function that can be differentiated.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,23,* @since 2.0
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,25,public interface ScalarDifferentiableObjectiveFunction extends ScalarObjectiveFunction {
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,28,* Compute the partial derivatives of the objective function.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,29,* @param variables variables set
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,30,* @return partial derivatives of the objective function
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,31,* @exception ObjectiveException if no value can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,32,* @exception IllegalArgumentException if variables dimension is wrong
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,34,double[] partials(double[] variables)
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableObjectiveFunction.java,35,"throws ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,23,* This interface represents an optimization algorithm for {@link ScalarDifferentiableObjectiveFunction
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,24,* scalar differentiable objective functions}.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,25,* @see ScalarOptimizer
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,26,* @see VectorialDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,28,* @since 2.0
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,30,public interface ScalarDifferentiableOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,32,/** Set the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,33,* <p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,34,* The number of objective function calls may be checked <em>after</em> a few
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,35,* related calls have been made. This implies that in some cases this number may
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,36,"* be exceeded by a few units, depending on the dimension of the problem and kind"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,37,* of optimizer.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,38,* </p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,39,* @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,42,void setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,44,/** Get the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,45,* <p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,46,* The number of objective function calls may be checked <em>after</em> a few
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,47,* related calls have been made. This implies that in some cases this number may
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,48,"* be exceeded by a few units, depending on the dimension of the problem and kind"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,49,* of optimizer.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,50,* </p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,51,* @return maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,53,int getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,55,/** Get the number of evaluations of the objective function.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,56,* <p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,57,* The number of evaluation correspond to the last call to the
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,58,"* {@link #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,59,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,60,* </p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,61,* @return number of evaluations of the objective function
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,63,int getEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,65,/** Set the convergence checker.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,66,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,68,void setConvergenceChecker(ScalarConvergenceChecker checker);
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,70,/** Get the convergence checker.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,71,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,73,ScalarConvergenceChecker getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,75,/** Optimizes an objective function.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,76,* @param f objective function
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,77,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,78,* or {@link GoalType#MINIMIZE}
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,79,* @param startPoint the start point for optimization
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,80,* @return the point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,81,* @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,82,* the search
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,83,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,84,* @exception IllegalArgumentException if the start point dimension is wrong
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,86,"ScalarPointValuePair optimize(ScalarDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,87,"GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,88,double[] startPoint)
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,89,"throws ObjectiveException, OptimizationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,25, @since 1.2
True,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,25,* @since 2.0
False,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,27,ublic interface ObjectiveFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,src/java/org/apache/commons/math/optimization/ScalarObjectiveFunction.java,27,public interface ScalarObjectiveFunction extends Serializable {
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,23, This interface represents an optimization algorithm.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,23,* This interface represents an optimization algorithm for {@link ScalarObjectiveFunction
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,24,* scalar objective functions}.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,25,* @see ScalarDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,26,* @see VectorialDifferentiableOptimizer
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,27,ublic interface Optimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,30,public interface ScalarOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,55,/** Get the number of evaluations of the objective function.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,56,* <p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,57,* The number of evaluation correspond to the last call to the
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,58,"* {@link #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,59,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,60,* </p>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,61,* @return number of evaluations of the objective function
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,63,int getEvaluations();
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,55,oid setConvergenceChecker(ConvergenceChecker checker);
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,68,void setConvergenceChecker(ScalarConvergenceChecker checker);
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,60,onvergenceChecker getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,73,ScalarConvergenceChecker getConvergenceChecker();
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,73,"ointValuePair optimize(ObjectiveFunction f, GoalType goalType,"
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,74,ouble[] startPoint)
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,86,"ScalarPointValuePair optimize(ScalarObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,87,"GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,88,double[] startPoint)
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,77,** Get the number of evaluations of the objective function.
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,78, <p>
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,79, The number of evaluation correspond to the last call to the
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,80," {@link #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,81, method. It is 0 if the method has not been called yet.
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,82, </p>
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,83, @return number of evaluations of the objective function
False,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,85,nt getEvaluations();
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,25,* @see VectorialPointValuePair
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,26,* @see ScalarObjectiveFunction
False,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,26, @see ObjectiveFunction
False,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,29,ublic class PointValuePair implements Serializable {
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,30,public class ScalarPointValuePair implements Serializable {
False,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,45,"ublic PointValuePair(final double[] point, final double value) {"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,46,"public ScalarPointValuePair(final double[] point, final double value) {"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,51,/** Build a point/objective function value pair.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,52,* @param point point coordinates (the built instance will store
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,53,"* a copy of the array, not the array passed as argument)"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,54,* @param value value of an objective function at the point
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,55,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,56,* it will be referenced
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,58,"public ScalarPointValuePair(final double[] point, final double value,"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,59,final boolean copyArray) {
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,60,this.point = copyArray ? point.clone() : point;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,61,this.value  = value;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,71,/** Get a reference to the point.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,72,* <p>This method is provided as a convenience to avoid copying
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,73,"* the array, the elements of the array should <em>not</em> be modified.</p>"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,74,* @return a reference to the internal array storing the point
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,76,public double[] getPointRef() {
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,77,return point;
False,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,23, Special implementation of the {@link ConvergenceChecker} interface using
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,23,* Simple implementation of the {@link ScalarConvergenceChecker} interface using
False,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,34,ublic class ObjectiveValueChecker implements ConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,34,public class SimpleValueChecker implements ScalarConvergenceChecker {
False,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,53,ublic ObjectiveValueChecker() {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,53,public SimpleValueChecker() {
False,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,67,"ublic ObjectiveValueChecker(final double relativeThreshold,"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,67,"public SimpleValueChecker(final double relativeThreshold,"
False,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,75,"inal PointValuePair previous,"
False,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,76,inal PointValuePair current) {
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,75,"final ScalarPointValuePair previous,"
True,src/java/org/apache/commons/math/optimization/ObjectiveValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleValueChecker.java,76,final ScalarPointValuePair current) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,20,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,23,* Simple implementation of the {@link VectorialConvergenceChecker} interface using
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,24,* only objective function values.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,25,* <p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,26,* Convergence is considered to have been reached if either the relative
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,27,* difference between the objective function values is smaller than a
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,28,* threshold or if either the absolute difference between the objective
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,29,* function values is smaller than another threshold for all vectors elements.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,30,* </p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,32,* @since 2.0
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,34,public class SimpleVectorialValueChecker implements VectorialConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,37,private static final long serialVersionUID = -3892196630780700808L;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,39,/** Default relative threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,40,private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,42,/** Default absolute threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,43,private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,45,/** Relative tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,46,private final double relativeThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,48,/** Absolute tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,49,private final double absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,51,/** Build an instance with default threshold.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,53,public SimpleVectorialValueChecker() {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,54,this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,55,this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,58,/** Build an instance with a specified threshold.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,59,* <p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,60,"* In order to perform only relative checks, the absolute tolerance"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,61,* must be set to a negative value. In order to perform only absolute
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,62,"* checks, the relative tolerance must be set to a negative value."
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,63,* </p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,64,* @param relativeThreshold relative tolerance threshold
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,65,* @param absoluteThreshold absolute tolerance threshold
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,67,"public SimpleVectorialValueChecker(final double relativeThreshold,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,68,final double absoluteThreshold) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,69,this.relativeThreshold = relativeThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,70,this.absoluteThreshold = absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,73,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,"public boolean converged(final int iteration,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75,"final VectorialPointValuePair previous,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,76,final VectorialPointValuePair current) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,77,final double[] p        = previous.getValueRef();
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,78,final double[] c        = current.getValueRef();
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,79,for (int i = 0; i < p.length; ++i) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,80,final double pi         = p[i];
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,81,final double ci         = c[i];
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,82,final double difference = Math.abs(pi - ci);
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,83,"final double size       = Math.max(Math.abs(pi), Math.abs(ci));"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,84,if ((difference > (size * relativeThreshold)) &&
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,85,(difference > absoluteThreshold)) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,86,return false;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,89,return true;
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,22,/** This interface specifies how to check if an {@link VectorialOptimizer optimization
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,23,* algorithm} has converged.
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,25,* <p>Deciding if convergence has been reached is a problem-dependent
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,26,* issue. The user should provide a class implementing this interface
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,27,* to allow the optimization algorithm to stop its search according to
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,28,* the problem at hand.</p>
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,31,* @since 2.0
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,34,public interface VectorialConvergenceChecker extends Serializable {
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,36,/** Check if the optimization algorithm has converged considering the last points.
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,37,* <p>
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,38,* This method may be called several time from the same algorithm iteration with
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,39,* different points. This can be detected by checking the iteration number at each
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,40,"* call if needed. Each time this method is called, the previous and current point"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,41,"* correspond to points with the same role at each iteration, so they can be"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,42,"* compared. As an example, simplex-based algorithms call this method for all"
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,43,"* points of the simplex, not only for the best or worst ones."
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,44,* </p>
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,45,* @param iteration index of current iteration
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,46,* @param previous point from previous iteration
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,47,* @param current point from current iteration
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,48,* @return true if the algorithm is considered to have converged
True,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,50,"boolean converged(int iteration, VectorialPointValuePair previous, VectorialPointValuePair current);"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,21,* This interface represents a vectorial objective function that can be differentiated.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,23,* @since 2.0
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,25,public interface VectorialDifferentiableObjectiveFunction extends VectorialObjectiveFunction {
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,28,* Compute the jacobian of the objective function.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,29,* @param variables variables set
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,30,* @param value value of the objective function (already computed)
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,31,* @return jacobian of the objective function
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,32,* @exception ObjectiveException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,33,* @exception IllegalArgumentException if variables dimension is wrong
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,35,"double[][] jacobian(double[] variables, double[] value)"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableObjectiveFunction.java,36,"throws ObjectiveException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,23,* This interface represents an optimization algorithm for {@link VectorialDifferentiableObjectiveFunction
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,24,* vectorial differentiable objective functions}.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,25,* @see ScalarOptimizer
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,26,* @see ScalarDifferentiableOptimizer
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,28,* @since 2.0
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,30,public interface VectorialDifferentiableOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,32,/** Set the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,33,* <p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,34,* The number of objective function calls may be checked <em>after</em> a few
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,35,* related calls have been made. This implies that in some cases this number may
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,36,"* be exceeded by a few units, depending on the dimension of the problem and kind"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,37,* of optimizer.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,38,* </p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,39,* @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,42,void setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,44,/** Get the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,45,* <p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,46,* The number of objective function calls may be checked <em>after</em> a few
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,47,* related calls have been made. This implies that in some cases this number may
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,48,"* be exceeded by a few units, depending on the dimension of the problem and kind"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,49,* of optimizer.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,50,* </p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,51,* @return maximal number of function calls
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,53,int getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,55,/** Get the number of evaluations of the objective function.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,56,* <p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,57,* The number of evaluation correspond to the last call to the
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,58,"* {@link #optimize(ObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,59,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,60,* </p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,61,* @return number of evaluations of the objective function
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,63,int getEvaluations();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,65,/** Set the convergence checker.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,66,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,68,void setConvergenceChecker(VectorialConvergenceChecker checker);
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,70,/** Get the convergence checker.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,71,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,73,VectorialConvergenceChecker getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,75,/** Optimizes an objective function.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,76,* <p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,77,* Optimization is considered to be a weighted least-squares minimization.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,78,* The cost function to be minimized is
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,79,* &sum;weight<sub>i</sub>(objective<sub>i</sub>-target<sub>i</sub>)<sup>2</sup>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,80,* </p>
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,81,* @param f objective function
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,82,* @param target target value for the objective functions at optimum
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,83,* @param weights weight for the least squares cost computation
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,84,* @param startPoint the start point for optimization
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,85,* @return the point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,86,* @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,87,* the search
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,88,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,89,* @exception IllegalArgumentException if the start point dimension is wrong
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,91,"VectorialPointValuePair optimize(VectorialDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,92,"double[] target, double[] weights,"
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,93,double[] startPoint)
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,94,"throws ObjectiveException, OptimizationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,28,ublic interface MultiObjectiveFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/VectorialObjectiveFunction.java,28,public interface VectorialObjectiveFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,23,* This class holds a point and the vectorial value of an objective function at this point.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,24,* <p>This is a simple immutable container.</p>
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,25,* @see ScalarPointValuePair
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,26,* @see VectorialObjectiveFunction
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,28,* @since 2.0
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,30,public class VectorialPointValuePair implements Serializable {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,33,private static final long serialVersionUID = 1003888396256744753L;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,35,/** Point coordinates. */
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,36,private final double[] point;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,38,/** Vectorial value of the objective function at the point. */
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,39,private final double[] value;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,41,/** Build a point/objective function value pair.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,42,* @param point point coordinates (the built instance will store
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,43,"* a copy of the array, not the array passed as argument)"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,44,* @param value value of an objective function at the point
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,46,"public VectorialPointValuePair(final double[] point, final double[] value) {"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,47,this.point = point.clone();
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,48,this.value = value.clone();
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,51,/** Build a point/objective function value pair.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,52,* @param point point coordinates (the built instance will store
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,53,"* a copy of the array, not the array passed as argument)"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,54,* @param value value of an objective function at the point
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,55,"* @param copyArray if true, the input arrays will be copied, otherwise"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,56,* they will be referenced
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,58,"public VectorialPointValuePair(final double[] point, final double[] value,"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,59,final boolean copyArray) {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,60,this.point = copyArray ? point.clone() : point;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,61,this.value = copyArray ? value.clone() : value;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,64,/** Get the point.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,65,* @return a copy of the stored point
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,67,public double[] getPoint() {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,68,return point.clone();
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,71,/** Get a reference to the point.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,72,* <p>This method is provided as a convenience to avoid copying
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,73,"* the array, the elements of the array should <em>not</em> be modified.</p>"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,74,* @return a reference to the internal array storing the point
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,76,public double[] getPointRef() {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,77,return point;
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,80,/** Get the value of the objective function.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,81,* @return a copy of the stored value of the objective function
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,83,public double[] getValue() {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,84,return value.clone();
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,87,/** Get a reference to the value of the objective function.
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,88,* <p>This method is provided as a convenience to avoid copying
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,89,"* the array, the elements of the array should <em>not</em> be modified.</p>"
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,90,* @return a reference to the internal array storing the value of the objective function
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,92,public double[] getValueRef() {
True,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,93,return value;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,24,mport org.apache.commons.math.optimization.ConvergenceChecker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,24,import org.apache.commons.math.optimization.ScalarConvergenceChecker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,mport org.apache.commons.math.optimization.ObjectiveFunction;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,27,import org.apache.commons.math.optimization.ScalarObjectiveFunction;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,mport org.apache.commons.math.optimization.Optimizer;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,30,mport org.apache.commons.math.optimization.PointValuePair;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,mport org.apache.commons.math.optimization.ObjectiveValueChecker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,import org.apache.commons.math.optimization.ScalarOptimizer;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,30,import org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,import org.apache.commons.math.optimization.SimpleValueChecker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,60," #optimize(ObjectiveFunction, GoalType, double[]) optimize} will reuse"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,60,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize} will reuse"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67," <p>If {@link #setConvergenceChecker(ConvergenceChecker)} is not called,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68, a default {@link ObjectiveValueChecker} is used.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67,"* <p>If {@link #setConvergenceChecker(ScalarConvergenceChecker)} is not called,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68,* a default {@link SimpleValueChecker} is used.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,78, @see ObjectiveFunction
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,78,* @see ScalarObjectiveFunction
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,84,ublic abstract class DirectSearchOptimizer implements Optimizer {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,84,public abstract class DirectSearchOptimizer implements ScalarOptimizer {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,90,rotected PointValuePair[] simplex;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,90,protected ScalarPointValuePair[] simplex;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,93,rivate ObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,93,private ScalarObjectiveFunction f;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96,rivate ConvergenceChecker checker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96,private ScalarConvergenceChecker checker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,etConvergenceChecker(new ObjectiveValueChecker());
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,setConvergenceChecker(new SimpleValueChecker());
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,111,setMaxEvaluations(Integer.MAX_VALUE);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,220,ublic void setConvergenceChecker(ConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,public void setConvergenceChecker(ScalarConvergenceChecker checker) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,225,ublic ConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,public ScalarConvergenceChecker getConvergenceChecker() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,230,"ublic PointValuePair optimize(final ObjectiveFunction f, final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,"public ScalarPointValuePair optimize(final ScalarObjectiveFunction f, final GoalType goalType,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,243,inal Comparator<PointValuePair> comparator = new Comparator<PointValuePair>() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,244,"ublic int compare(final PointValuePair o1, final PointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,244,final Comparator<ScalarPointValuePair> comparator = new Comparator<ScalarPointValuePair>() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,245,"public int compare(final ScalarPointValuePair o1, final ScalarPointValuePair o2) {"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,ointValuePair[] previous = new PointValuePair[simplex.length];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,ScalarPointValuePair[] previous = new ScalarPointValuePair[simplex.length];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,296,rotected abstract void iterateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,protected abstract void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,328,implex = new PointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,"implex[0] = new PointValuePair(startPoint, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,simplex = new ScalarPointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,330,"simplex[0] = new ScalarPointValuePair(startPoint, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,338,"implex[i + 1] = new PointValuePair(vertexI, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,339,"simplex[i + 1] = new ScalarPointValuePair(vertexI, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,347,rotected void evaluateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,348,protected void evaluateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,352,inal PointValuePair vertex = simplex[i];
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,353,inal double[] point = vertex.getPoint();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,353,final ScalarPointValuePair vertex = simplex[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,354,final double[] point = vertex.getPointRef();
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,355,"implex[i] = new PointValuePair(point, evaluate(point));"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,356,"simplex[i] = new ScalarPointValuePair(point, evaluate(point), false);"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,368,"rotected void replaceWorstPoint(PointValuePair pointValuePair,"
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,369,inal Comparator<PointValuePair> comparator) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,369,"protected void replaceWorstPoint(ScalarPointValuePair pointValuePair,"
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,370,final Comparator<ScalarPointValuePair> comparator) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,373,ointValuePair tmp = simplex[i];
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,374,ScalarPointValuePair tmp = simplex[i];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,mport org.apache.commons.math.optimization.PointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,import org.apache.commons.math.optimization.ScalarPointValuePair;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,rotected void iterateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,protected void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,69,inal PointValuePair[] original = simplex;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,inal PointValuePair best = original[0];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,69,final ScalarPointValuePair[] original = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,final ScalarPointValuePair best = original[0];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,73,"inal PointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,73,"final ScalarPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,inal PointValuePair[] reflectedSimplex = simplex;
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,"inal PointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,final ScalarPointValuePair[] reflectedSimplex = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,"final ScalarPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,89,"inal PointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,89,"final ScalarPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,"rivate PointValuePair evaluateNewSimplex(final PointValuePair[] original,"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,"private ScalarPointValuePair evaluateNewSimplex(final ScalarPointValuePair[] original,"
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,inal Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116,inal double[] xSmallest = original[0].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116,final double[] xSmallest = original[0].getPointRef();
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,120,implex = new PointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,120,simplex = new ScalarPointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,123,inal double[] xOriginal    = original[i].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,123,final double[] xOriginal    = original[i].getPointRef();
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,128,"implex[i] = new PointValuePair(xTransformed, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,128,"simplex[i] = new ScalarPointValuePair(xTransformed, Double.NaN, false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,23,mport org.apache.commons.math.optimization.PointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,23,import org.apache.commons.math.optimization.ScalarPointValuePair;
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,75,rotected void iterateSimplex(final Comparator<PointValuePair> comparator)
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,75,protected void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,82,inal PointValuePair best       = simplex[0];
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,83,inal PointValuePair secondBest = simplex[n-1];
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,84,inal PointValuePair worst      = simplex[n];
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,inal double[] xWorst = worst.getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,82,final ScalarPointValuePair best       = simplex[0];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,83,final ScalarPointValuePair secondBest = simplex[n-1];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,84,final ScalarPointValuePair worst      = simplex[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,final double[] xWorst = worst.getPointRef();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,91,inal double[] x = simplex[i].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,91,final double[] x = simplex[i].getPointRef();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,106,"inal PointValuePair reflected = new PointValuePair(xR, evaluate(xR));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,106,"final ScalarPointValuePair reflected = new ScalarPointValuePair(xR, evaluate(xR), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,121,"inal PointValuePair expanded = new PointValuePair(xE, evaluate(xE));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,121,"final ScalarPointValuePair expanded = new ScalarPointValuePair(xE, evaluate(xE), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,"inal PointValuePair outContracted = new PointValuePair(xC, evaluate(xC));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,"final ScalarPointValuePair outContracted = new ScalarPointValuePair(xC, evaluate(xC), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,155,"inal PointValuePair inContracted = new PointValuePair(xC, evaluate(xC));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,155,"final ScalarPointValuePair inContracted = new ScalarPointValuePair(xC, evaluate(xC), false);"
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,166,inal double[] xSmallest = simplex[0].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,166,final double[] xSmallest = simplex[0].getPointRef();
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,172,"implex[i] = new PointValuePair(x, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,172,"simplex[i] = new ScalarPointValuePair(x, Double.NaN, false);"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,28,mport org.apache.commons.math.optimization.ObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,29,mport org.apache.commons.math.optimization.PointValuePair;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,mport org.apache.commons.math.optimization.ObjectiveValueChecker;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,28,import org.apache.commons.math.optimization.ScalarObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,29,import org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,import org.apache.commons.math.optimization.SimpleValueChecker;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,40,bjectiveFunction wrong =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,41,ew ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,40,ScalarObjectiveFunction wrong =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,41,new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,bjectiveFunction fourExtrema = new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,ScalarObjectiveFunction fourExtrema = new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"ptimizer.setConvergenceChecker(new ObjectiveValueChecker(1.0e-10, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"optimizer.setConvergenceChecker(new SimpleValueChecker(1.0e-10, 1.0e-30));"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,ointValuePair optimum;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,ScalarPointValuePair optimum;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,137,bjectiveFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,138,ew ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,137,ScalarObjectiveFunction rosenbrock =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,138,new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,"ptimizer.setConvergenceChecker(new ObjectiveValueChecker(-1, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,"optimizer.setConvergenceChecker(new SimpleValueChecker(-1, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,155,ointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,155,ScalarPointValuePair optimum =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,168,bjectiveFunction powell =
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,169,ew ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,168,ScalarObjectiveFunction powell =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,169,new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,"ptimizer.setConvergenceChecker(new ObjectiveValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,"optimizer.setConvergenceChecker(new SimpleValueChecker(-1.0, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,185,ointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,185,ScalarPointValuePair optimum =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,mport org.apache.commons.math.optimization.ObjectiveFunction;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,mport org.apache.commons.math.optimization.PointValuePair;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,mport org.apache.commons.math.optimization.ObjectiveValueChecker;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,import org.apache.commons.math.optimization.ScalarObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,import org.apache.commons.math.optimization.ScalarPointValuePair;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,import org.apache.commons.math.optimization.SimpleValueChecker;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,bjectiveFunction wrong =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,ew ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,40,ScalarObjectiveFunction wrong =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,bjectiveFunction fourExtrema = new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,ScalarObjectiveFunction fourExtrema = new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,"ptimizer.setConvergenceChecker(new ObjectiveValueChecker(1.0e-10, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,"optimizer.setConvergenceChecker(new SimpleValueChecker(1.0e-10, 1.0e-30));"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,ointValuePair optimum;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,ScalarPointValuePair optimum;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,bjectiveFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,ew ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,ScalarObjectiveFunction rosenbrock =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,"ptimizer.setConvergenceChecker(new ObjectiveValueChecker(-1, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,"optimizer.setConvergenceChecker(new SimpleValueChecker(-1, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,ointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,ScalarPointValuePair optimum =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,bjectiveFunction powell =
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,ew ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,ScalarObjectiveFunction powell =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,new ScalarObjectiveFunction() {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,"ptimizer.setConvergenceChecker(new ObjectiveValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,"optimizer.setConvergenceChecker(new SimpleValueChecker(-1.0, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,ointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,ScalarPointValuePair optimum =

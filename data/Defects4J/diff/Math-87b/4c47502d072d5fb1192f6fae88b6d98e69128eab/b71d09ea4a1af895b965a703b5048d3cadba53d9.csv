is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,26, @version $Revision: 1.12 $ $Date: 2004/04/08 20:45:59 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,26,* @version $Revision: 1.13 $ $Date: 2004/05/11 02:04:21 $
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,39," For this disbution, X, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,39,"* For this distribution, X, this method returns P(x0 &le; X &le; x1)."
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,45,* @exception IllegalArgumentException if x0 > x1
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,46,"ublic double cumulativeProbability(int x0, int x1) throws MathException{"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,47,eturn cumulativeProbability(x1) -
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,48,umulativeProbability(x0 - 1);
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,47,"public double cumulativeProbability(int x0, int x1) throws MathException {"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,48,if (x0 > x1) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,49,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,50,"(""lower endpoint must be less than or equal to upper endpoint"");"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,52,return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,52," For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,56,"* For this distribution, X, this method returns the lagest x, such"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,56," @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,60,* @return the largest x such that P(X &le; x) <= p
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,63,* @exception IllegalArgumentException if p < 0 or p >= 1
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,61,f (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,66,if (p < 0.0 || p >= 1.0) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,63,"p must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,68,"""p must be greater than or equal to 0.0 and strictly less than 1.0"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,55,/** A vector with all coordinates set to NaN. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,56,"public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,58,/** A vector with all coordinates set to positive infinity. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,59,public static final Vector3D POSITIVE_INFINITY =
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,60,"new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,62,/** A vector with all coordinates set to negative infinity. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,63,public static final Vector3D NEGATIVE_INFINITY =
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,64,"new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,66,/** Default format. */
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,67,private static final Vector3DFormat DEFAULT_FORMAT =
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,68,Vector3DFormat.getInstance();
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,54,rivate static final long serialVersionUID = -6155041477622120793L;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,71,private static final long serialVersionUID = 5133268763396045979L;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,358,* Returns true if any coordinate of this vector is NaN; false otherwise
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,359,* @return  true if any coordinate of this vector is NaN; false otherwise
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,361,public boolean isNaN() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,362,return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,366,* Returns true if any coordinate of this vector is infinite and none are NaN;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,367,* false otherwise
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,368,* @return  true if any coordinate of this vector is infinite and none are NaN;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,369,* false otherwise
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,371,public boolean isInfinite() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,372,return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,376,* Test for the equality of two 3D vectors.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,377,* <p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,378,"* If all coordinates of two 3D vectors are exactly the same, and none are"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,379,"* <code>Double.NaN</code>, the two 3D vectors are considered to be equal."
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,380,* </p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,381,* <p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,382,"* All <code>NaN</code> values are considered to be equal - i.e, if either"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,383,"* (or all) coordinates of the 3D vector are equal to <code>Double.NaN</code>,"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,384,* the complex number is equal to
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,385,* <code>Complex.NaN</code>.</p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,387,* @param other Object to test for equality to this
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,388,"* @return true if two 3D vector objects are equal, false if"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,389,"*         object is null, not an instance of Vector3D, or"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,390,*         not equal to this Vector3D instance
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,393,public boolean equals(Object other) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,395,if (this == other) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,396,return true;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,399,if (other == null) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,400,return false;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,403,try {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,405,Vector3D rhs = (Vector3D)other;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,406,if (rhs.isNaN()) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,407,return this.isNaN();
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,410,return (Double.doubleToRawLongBits(x) == Double.doubleToRawLongBits(rhs.x)) &&
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,411,(Double.doubleToRawLongBits(y) == Double.doubleToRawLongBits(rhs.y)) &&
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,412,(Double.doubleToRawLongBits(z) == Double.doubleToRawLongBits(rhs.z));
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,414,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,415,// ignore exception
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,416,return false;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,422,* Get a hashCode for the 3D vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,423,* <p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,424,* All NaN values have the same hash code.</p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,426,* @return a hash code value for this object
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,428,public int hashCode() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,429,if (isNaN()) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,430,return 8;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,432,return 31 * (23 * MathUtils.hash(x) +  19 * MathUtils.hash(y) +  MathUtils.hash(z));
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,485,/** Get a string representation of this vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,486,* @return a string representation of this vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,488,public String toString() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,489,return DEFAULT_FORMAT.format(this);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,18,package org.apache.commons.math.geometry;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,20,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,21,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,22,import java.text.ParseException;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,23,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,24,import java.util.Locale;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,26,import org.apache.commons.math.util.CompositeFormat;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,29,"* Formats a 3D vector in components list format ""{x; y; z}""."
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,30,"* <p>The prefix and suffix ""{"" and ""}"" and the separator "", "" can be replaced by"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,31,* any user-defined strings. The number format for components can be configured.</p>
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,32,"* <p>White space is ignored at parse time, even if it is in the prefix, suffix"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,33,* or separator specifications. So even if the default separator does include a space
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,34,"* character that is used at format time, both input string ""{1;1;1}"" and"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,35,"* "" { 1 ; 1 ; 1 } "" will be parsed without error and the same vector will be"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,36,"* returned. In the second case, however, the parse position after parsing will be"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,37,"* just after the closing curly brace, i.e. just before the trailing space.</p>"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,39,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,41,public class Vector3DFormat extends CompositeFormat {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,43,/** Serializable version identifier */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,44,private static final long serialVersionUID = -5447606608652576301L;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,46,"/** The default prefix: ""{"". */"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,47,"private static final String DEFAULT_PREFIX = ""{"";"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,49,"/** The default suffix: ""}"". */"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,50,"private static final String DEFAULT_SUFFIX = ""}"";"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,52,"/** The default separator: "", "". */"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,53,"private static final String DEFAULT_SEPARATOR = ""; "";"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,55,/** Prefix. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,56,private final String prefix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,58,/** Suffix. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,59,private final String suffix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,61,/** Separator. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,62,private final String separator;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,64,/** Trimmed prefix. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,65,private final String trimmedPrefix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,67,/** Trimmed suffix. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,68,private final String trimmedSuffix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,70,/** Trimmed separator. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,71,private final String trimmedSeparator;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,73,/** The format used for components. */
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,74,private NumberFormat format;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,77,* Create an instance with default settings.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,78,"* <p>The instance uses the default prefix, suffix and separator:"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,79,"* ""{"", ""}"", and ""; "" and the default number format for components.</p>"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,81,public Vector3DFormat() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,82,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,86,* Create an instance with a custom number format for components.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,87,* @param format the custom format for components.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,89,public Vector3DFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,90,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,94,"* Create an instance with custom prefix, suffix and separator."
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,95,"* @param prefix prefix to use instead of the default ""{"""
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,96,"* @param suffix suffix to use instead of the default ""}"""
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,97,"* @param separator separator to use instead of the default ""; """
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,99,"public Vector3DFormat(final String prefix, final String suffix,"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,100,final String separator) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,101,"this(prefix, suffix, separator, getDefaultNumberFormat());"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,105,"* Create an instance with custom prefix, suffix, separator and format"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,106,* for components.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,107,"* @param prefix prefix to use instead of the default ""{"""
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,108,"* @param suffix suffix to use instead of the default ""}"""
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,109,"* @param separator separator to use instead of the default ""; """
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,110,* @param format the custom format for components.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,112,"public Vector3DFormat(final String prefix, final String suffix,"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,113,"final String separator, final NumberFormat format) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,114,this.prefix      = prefix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,115,this.suffix      = suffix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,116,this.separator   = separator;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,117,trimmedPrefix    = prefix.trim();
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,118,trimmedSuffix    = suffix.trim();
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,119,trimmedSeparator = separator.trim();
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,120,this.format      = format;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,124,* Get the set of locales for which 3D vectors formats are available.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,125,* <p>This is the same set as the {@link NumberFormat} set.</p>
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,126,* @return available complex format locales.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,128,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,129,return NumberFormat.getAvailableLocales();
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,133,* Get the format prefix.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,134,* @return format prefix.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,136,public String getPrefix() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,137,return prefix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,141,* Get the format suffix.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,142,* @return format suffix.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,144,public String getSuffix() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,145,return suffix;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,149,* Get the format separator between components.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,150,* @return format separator.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,152,public String getSeparator() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,153,return separator;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,157,* Get the components format.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,158,* @return components format.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,160,public NumberFormat getFormat() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,161,return format;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,165,* Returns the default complex format for the current locale.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,166,* @return the default complex format.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,168,public static Vector3DFormat getInstance() {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,169,return getInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,173,* Returns the default complex format for the given locale.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,174,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,175,* @return the complex format specific to the given locale.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,177,public static Vector3DFormat getInstance(final Locale locale) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,178,return new Vector3DFormat(getDefaultNumberFormat(locale));
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,182,* This static method calls {@link #format(Object)} on a default instance of
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,183,* Vector3DFormat.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,185,* @param v Vector3D object to format
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,186,* @return A formatted vector
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,188,public static String formatVector3D(Vector3D v) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,189,return getInstance().format(v);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,193,* Formats a {@link Vector3D} object to produce a string.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,194,* @param vector the object to format.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,195,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,196,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,197,*            offsets of the alignment field
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,198,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,200,"public StringBuffer format(Vector3D vector, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,201,FieldPosition pos) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,203,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,204,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,206,// format prefix
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,207,toAppendTo.append(prefix);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,209,// format components
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,210,"formatDouble(vector.getX(), format, toAppendTo, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,211,toAppendTo.append(separator);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,212,"formatDouble(vector.getY(), format, toAppendTo, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,213,toAppendTo.append(separator);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,214,"formatDouble(vector.getZ(), format, toAppendTo, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,216,// format suffix
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,217,toAppendTo.append(suffix);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,219,return toAppendTo;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,224,* Formats a object to produce a string.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,225,* <p><code>obj</code> must be a  {@link Vector3D} object. Any other type of
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,226,* object will result in an {@link IllegalArgumentException} being thrown.</p>
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,227,* @param obj the object to format.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,228,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,229,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,230,*            offsets of the alignment field
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,231,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,232,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,233,* @throws IllegalArgumentException is <code>obj</code> is not a valid type.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,235,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,236,FieldPosition pos) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,238,if (obj instanceof Vector3D) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,239,"return format( (Vector3D)obj, toAppendTo, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,242,"throw new IllegalArgumentException(""Cannot format given Object as a Vector3D"");"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,247,* Parses a string to produce a {@link Vector3D} object.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,248,* @param source the string to parse
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,249,* @return the parsed {@link Vector3D} object.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,250,* @exception ParseException if the beginning of the specified string
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,251,*            cannot be parsed.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,253,public Vector3D parse(String source) throws ParseException {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,254,ParsePosition parsePosition = new ParsePosition(0);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,255,"Vector3D result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,256,if (parsePosition.getIndex() == 0) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,257,"throw new ParseException(""Unparseable 3D vector: \"""" + source +"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,258,"""\"""", parsePosition.getErrorIndex());"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,260,return result;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,264,* Parses a string to produce a {@link Vector3D} object.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,265,* @param source the string to parse
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,266,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,267,* @return the parsed {@link Vector3D} object.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,269,"public Vector3D parse(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,270,int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,272,// parse prefix
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,273,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,274,"if (!parseFixedstring(source, trimmedPrefix, pos)) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,275,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,278,// parse X component
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,279,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,280,"Number x = parseNumber(source, format, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,281,if (x == null) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,282,// invalid abscissa
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,283,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,284,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,285,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,288,// parse Y component
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,289,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,290,"if (!parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,291,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,293,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,294,"Number y = parseNumber(source, format, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,295,if (y == null) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,296,// invalid ordinate
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,297,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,298,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,299,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,302,// parse Z component
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,303,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,304,"if (!parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,305,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,307,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,308,"Number z = parseNumber(source, format, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,309,if (z == null) {
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,310,// invalid height
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,311,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,312,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,313,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,316,// parse suffix
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,317,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,318,"if (!parseFixedstring(source, trimmedSuffix, pos)) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,319,return null;
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,322,"return new Vector3D(x.doubleValue(), y.doubleValue(), z.doubleValue());"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,327,* Parses a string to produce a object.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,328,* @param source the string to parse
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,329,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,330,* @return the parsed object.
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,331,"* @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,333,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,src/java/org/apache/commons/math/geometry/Vector3DFormat.java,334,"return parse(source, pos);"
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,18,package org.apache.commons.math.geometry;
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,23,public class FrenchVector3DFormatTest extends Vector3DFormatAbstractTest {
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,25,protected char getDecimalCharacter() {
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,26,"return ',';"
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,29,protected Locale getLocale() {
True,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,src/test/org/apache/commons/math/geometry/FrenchVector3DFormatTest.java,30,return Locale.FRENCH;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,18,package org.apache.commons.math.geometry;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,20,import java.text.NumberFormat;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,21,import java.text.ParseException;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,22,import java.text.ParsePosition;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,23,import java.util.Locale;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,27,import org.apache.commons.math.util.CompositeFormat;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,29,public abstract class Vector3DFormatAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,31,Vector3DFormat vector3DFormat = null;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,32,Vector3DFormat vector3DFormatSquare = null;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,34,protected abstract Locale getLocale();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,36,protected abstract char getDecimalCharacter();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,38,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,39,vector3DFormat = Vector3DFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,40,final NumberFormat nf = NumberFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,41,nf.setMaximumFractionDigits(2);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,42,"vector3DFormatSquare = new Vector3DFormat(""["", ""]"", "" : "", nf);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,45,public void testSimpleNoDecimals() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,46,"Vector3D c = new Vector3D(1, 1, 1);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,47,"String expected = ""{1; 1; 1}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,48,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,49,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,52,public void testSimpleWithDecimals() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,53,"Vector3D c = new Vector3D(1.23, 1.43, 1.63);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,54,String expected =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,55,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,56,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,57,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,58,"""63}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,59,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,60,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,63,public void testSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,64,"Vector3D c = new Vector3D(1.2323, 1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,65,String expected =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,66,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,67,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,68,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,69,"""63}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,70,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,71,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,74,public void testNegativeX() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,75,"Vector3D c = new Vector3D(-1.2323, 1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,76,String expected =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,77,"""{-1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,78,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,79,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,80,"""63}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,81,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,82,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,85,public void testNegativeY() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,86,"Vector3D c = new Vector3D(1.2323, -1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,87,String expected =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,88,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,89,"""23; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,90,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,91,"""63}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,92,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,93,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,96,public void testNegativeZ() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,97,"Vector3D c = new Vector3D(1.2323, 1.4343, -1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,98,String expected =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,99,"""{1""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,100,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,101,"""43; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,102,"""63}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,103,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,104,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,107,public void testNonDefaultSetting() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,108,"Vector3D c = new Vector3D(1, 1, 1);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,109,"String expected = ""[1 : 1 : 1]"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,110,String actual = vector3DFormatSquare.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,111,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,114,public void testStaticFormatVector3D() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,115,Locale defaultLocal = Locale.getDefault();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,116,Locale.setDefault(getLocale());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,118,"Vector3D c = new Vector3D(232.222, -342.33, 432.444);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,119,String expected =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,120,"""{232""    + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,121,"""22; -342"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,122,"""33; 432"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,123,"""44}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,124,String actual = Vector3DFormat.formatVector3D(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,125,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,127,Locale.setDefault(defaultLocal);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,130,public void testNan() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,131,Vector3D c = Vector3D.NaN;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,132,"String expected = ""{(NaN); (NaN); (NaN)}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,133,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,134,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,137,public void testPositiveInfinity() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,138,Vector3D c = Vector3D.POSITIVE_INFINITY;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,139,"String expected = ""{(Infinity); (Infinity); (Infinity)}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,140,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,141,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,144,public void tesNegativeInfinity() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,145,Vector3D c = Vector3D.NEGATIVE_INFINITY;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,146,"String expected = ""{(-Infinity); (-Infinity); (-Infinity)}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,147,String actual = vector3DFormat.format(c);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,148,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,151,public void testParseSimpleNoDecimals() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,152,"String source = ""{1; 1; 1}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,153,"Vector3D expected = new Vector3D(1, 1, 1);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,154,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,155,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,156,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,157,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,158,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,162,public void testParseIgnoredWhitespace() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,163,"Vector3D expected = new Vector3D(1, 1, 1);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,164,ParsePosition pos1 = new ParsePosition(0);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,165,"String source1 = ""{1;1;1}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,166,"assertEquals(expected, vector3DFormat.parseObject(source1, pos1));"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,167,"assertEquals(source1.length(), pos1.getIndex());"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,168,ParsePosition pos2 = new ParsePosition(0);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,169,"String source2 = "" { 1 ; 1 ; 1 } "";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,170,"assertEquals(expected, vector3DFormat.parseObject(source2, pos2));"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,171,"assertEquals(source2.length() - 1, pos2.getIndex());"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,174,public void testParseSimpleWithDecimals() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,175,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,176,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,177,"""23; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,178,"""43; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,179,"""63}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,180,"Vector3D expected = new Vector3D(1.23, 1.43, 1.63);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,181,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,182,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,183,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,184,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,185,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,189,public void testParseSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,190,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,191,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,192,"""2323; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,193,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,194,"""6333}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,195,"Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,196,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,197,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,198,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,199,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,200,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,204,public void testParseNegativeX() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,205,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,206,"""{-1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,207,"""2323; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,208,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,209,"""6333}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,210,"Vector3D expected = new Vector3D(-1.2323, 1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,211,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,212,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,213,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,214,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,215,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,219,public void testParseNegativeY() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,220,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,221,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,222,"""2323; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,223,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,224,"""6333}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,225,"Vector3D expected = new Vector3D(1.2323, -1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,226,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,227,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,228,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,229,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,230,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,234,public void testParseNegativeZ() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,235,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,236,"""{1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,237,"""2323; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,238,"""4343; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,239,"""6333}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,240,"Vector3D expected = new Vector3D(1.2323, 1.4343, -1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,241,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,242,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,243,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,244,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,245,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,249,public void testParseNegativeAll() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,250,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,251,"""{-1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,252,"""2323; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,253,"""4343; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,254,"""6333}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,255,"Vector3D expected = new Vector3D(-1.2323, -1.4343, -1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,256,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,257,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,258,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,259,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,260,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,264,public void testParseZeroX() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,265,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,266,"""{0"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,267,"""0; -1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,268,"""4343; 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,269,"""6333}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,270,"Vector3D expected = new Vector3D(0.0, -1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,271,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,272,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,273,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,274,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,275,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,279,public void testParseNonDefaultSetting() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,280,String source =
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,281,"""[1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,282,"""2323 : 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,283,"""4343 : 1"" + getDecimalCharacter() +"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,284,"""6333]"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,285,"Vector3D expected = new Vector3D(1.2323, 1.4343, 1.6333);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,286,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,287,Vector3D actual = (Vector3D) vector3DFormatSquare.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,288,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,289,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,290,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,294,public void testParseNan() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,295,"String source = ""{(NaN); (NaN); (NaN)}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,296,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,297,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,298,"assertEquals(Vector3D.NaN, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,299,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,300,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,304,public void testParsePositiveInfinity() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,305,"String source = ""{(Infinity); (Infinity); (Infinity)}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,306,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,307,Vector3D actual = (Vector3D)vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,308,"assertEquals(Vector3D.POSITIVE_INFINITY, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,309,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,310,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,314,public void testParseNegativeInfinity() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,315,"String source = ""{(-Infinity); (-Infinity); (-Infinity)}"";"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,316,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,317,Vector3D actual = (Vector3D)vector3DFormat.parseObject(source);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,318,"assertEquals(Vector3D.NEGATIVE_INFINITY, actual);"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,319,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,320,fail(ex.getMessage());
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,324,public void testConstructorSingleFormat() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,325,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,326,Vector3DFormat cf = new Vector3DFormat(nf);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,327,assertNotNull(cf);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,328,"assertEquals(nf, cf.getFormat());"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,331,public void testFormatObject() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,332,try {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,333,CompositeFormat cf = new Vector3DFormat();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,334,Object object = new Object();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,335,cf.format(object);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,336,fail();
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,337,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,338,// success
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,342,public void testForgottenPrefix() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,343,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,344,"assertNull(new Vector3DFormat().parse(""1; 1; 1}"", pos));"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,345,"assertEquals(0, pos.getErrorIndex());"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,348,public void testForgottenSeparator() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,349,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,350,"assertNull(new Vector3DFormat().parse(""{1; 1 1}"", pos));"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,351,"assertEquals(6, pos.getErrorIndex());"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,354,public void testForgottenSuffix() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,355,ParsePosition pos = new ParsePosition(0);
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,356,"assertNull(new Vector3DFormat().parse(""{1; 1; 1 "", pos));"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,357,"assertEquals(8, pos.getErrorIndex());"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,18,package org.apache.commons.math.geometry;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,23,public class Vector3DFormatTest extends Vector3DFormatAbstractTest {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,24,protected char getDecimalCharacter() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,25,return '.';
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,28,protected Locale getLocale() {
True,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,src/test/org/apache/commons/math/geometry/Vector3DFormatTest.java,29,return Locale.US;

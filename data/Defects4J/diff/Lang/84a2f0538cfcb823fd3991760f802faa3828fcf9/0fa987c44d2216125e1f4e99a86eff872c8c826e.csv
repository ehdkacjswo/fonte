is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,107," @version $Id: ReflectionToStringBuilder.java,v 1.13 2003/10/23 22:27:45 ggregory Exp $"
True,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,107,"* @version $Id: ReflectionToStringBuilder.java,v 1.14 2003/11/03 00:21:19 ggregory Exp $"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,339, TODO: Is this convenience API really needed?
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,341, <p>This method uses reflection to build a suitable
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,342, <code>toString</code> value which includes static fields.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,344, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,345, fields. This means that it will throw a security exception if run
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,346," under a security manager, if the permissions are not set up correctly."
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,347, It is also not as efficient as testing explicitly. </p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,349, <p>Transient fields are not output.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,351, <p>Superclass fields will be appended up to and including
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,352, <code>java.lang.Object</code>.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,354, <p>The default <code>ToStringStyle</code> is used.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,356, @param object  the Object to be output
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,357, @return the String result
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,358, @throws IllegalArgumentException if the Object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,360,ublic static Object toStringWithStatics(Object object) {
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,361,"eturn toString(object, null, false, true, null);"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,365, TODO: Is this convenience API really needed?
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,367, <p>This method uses reflection to build a suitable
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,368, <code>toString</code> value which includes static fields.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,370, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,371, fields. This means that it will throw a security exception if run
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,372," under a security manager, if the permissions are not set up correctly."
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,373, It is also not as efficient as testing explicitly. </p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,375, <p>Transient fields are not output.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,377, <p>Superclass fields will be appended up to and including the specified superclass.
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,378, A null superclass is treated as <code>java.lang.Object</code>.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,380, <p>The default <code>ToStringStyle</code> is used.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,382, @param object  the Object to be output
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,383," @param reflectUpToClass  the superclass to reflect up to (inclusive),"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,384,  may be <code>null</code>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,385, @return the String result
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,386, @throws IllegalArgumentException if the Object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,388,"ublic static Object toStringWithStatics(Object object, Class reflectUpToClass) {"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,389,"eturn toString(object, null, false, true, reflectUpToClass);"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,393, TODO: Is this convenience API really needed?
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,395, <p>This method uses reflection to build a suitable
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,396, <code>toString</code> value which includes static fields.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,398, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,399, fields. This means that it will throw a security exception if run
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,400," under a security manager, if the permissions are not set up correctly."
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,401, It is also not as efficient as testing explicitly. </p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,403, <p>Transient fields are not output.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,405, <p>Superclass fields will be appended up to and including the specified superclass.
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,406, A null superclass is treated as <code>java.lang.Object</code>.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,408," <p>If the style is <code>null</code>, the default"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,409, <code>ToStringStyle</code> is used.</p>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,411, @param object  the Object to be output
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,412," @param style  the style of the <code>toString</code> to create,"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,413,  may be <code>null</code>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,414," @param reflectUpToClass  the superclass to reflect up to (inclusive),"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,415,  may be <code>null</code>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,416, @return the String result
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,417, @throws IllegalArgumentException if the Object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,419,"ublic static Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {"
False,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java,420,"eturn toString(object, style, false, true, reflectUpToClass);"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,71," @version $Id: ToStringBuilderTest.java,v 1.11 2003/10/23 22:26:00 ggregory Exp $"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,71,"* @version $Id: ToStringBuilderTest.java,v 1.12 2003/11/03 00:20:55 ggregory Exp $"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,853,"eflectionToStringBuilder.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,853,"this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,856,"eflectionToStringBuilder.toStringWithStatics(instance1, SimpleReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,856,"this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,872,"eflectionToStringBuilder.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,872,"this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,875,"eflectionToStringBuilder.toStringWithStatics(instance1, ReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,875,"this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,891,"eflectionToStringBuilder.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,891,"this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,894,"eflectionToStringBuilder.toStringWithStatics(instance1, SimpleReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,894,"this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,898,* <p>This method uses reflection to build a suitable
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,899,* <code>toString</code> value which includes static fields.</p>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,901,* <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,902,* fields. This means that it will throw a security exception if run
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,903,"* under a security manager, if the permissions are not set up correctly."
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,904,* It is also not as efficient as testing explicitly. </p>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,906,* <p>Transient fields are not output.</p>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,908,* <p>Superclass fields will be appended up to and including the specified superclass.
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,909,* A null superclass is treated as <code>java.lang.Object</code>.</p>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,911,"* <p>If the style is <code>null</code>, the default"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,912,* <code>ToStringStyle</code> is used.</p>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,914,* @param object  the Object to be output
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,915,"* @param style  the style of the <code>toString</code> to create,"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,916,*  may be <code>null</code>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,917,"* @param reflectUpToClass  the superclass to reflect up to (inclusive),"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,918,*  may be <code>null</code>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,919,* @return the String result
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,920,* @throws IllegalArgumentException if the Object is <code>null</code>
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,922,"public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,923,"return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);"

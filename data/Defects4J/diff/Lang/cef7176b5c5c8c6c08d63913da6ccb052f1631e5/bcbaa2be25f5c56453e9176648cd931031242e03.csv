is_addition,old_file_path,new_file_path,line_num,content
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,1,// package org.apache.commons.lang;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,4,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,6,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,7,* you may not use this file except in compliance with the License.
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,8,* You may obtain a copy of the License at
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,10,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,15,* See the License for the specific language governing permissions and
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,16,* limitations under the License.
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,19,import java.text.DateFormat;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,20,import java.util.*;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,22,import junit.framework.AssertionFailedError;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,23,import junit.framework.Test;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,24,import junit.framework.TestCase;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,25,import junit.framework.TestSuite;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,26,import junit.textui.TestRunner;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,29,* Unit tests {@link org.apache.commons.lang.CalendarUtils}.
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,31,"* @author <a href=""mailto:sergek@lokitech.com"">Serge Knystautas</a>"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,33,public class CalendarUtilsTest extends TestCase {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,34,DateFormat parser = null;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,35,Date date1 = null;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,36,Date date2 = null;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,38,public CalendarUtilsTest(String name) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,39,super(name);
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,42,public static void main(String[] args) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,43,TestRunner.run(suite());
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,46,public static Test suite() {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,47,TestSuite suite = new TestSuite(CalendarUtilsTest.class);
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,48,"suite.setName(""CalendarUtilsTest Tests"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,49,return suite;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,52,protected void setUp() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,53,super.setUp();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,55,"parser = new java.text.SimpleDateFormat(""MMM dd, yyyy H:mm:ss.SSS"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,57,"date1 = parser.parse(""February 12, 2002 12:34:56.789"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,58,"date2 = parser.parse(""November 18, 2001 1:23:11.321"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,61,protected void tearDown() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,62,super.tearDown();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,69,* Tests various values with the round method
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,71,public void testRound() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,72,"assertEquals(""round year-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,73,"new Date(""2002 January 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,74,"CalendarUtils.round(date1, Calendar.YEAR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,75,"assertEquals(""round year-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,76,"new Date(""2002 January 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,77,"CalendarUtils.round(date2, Calendar.YEAR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,78,"assertEquals(""round month-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,79,"new Date(""2002 February 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,80,"CalendarUtils.round(date1, Calendar.MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,81,"assertEquals(""round month-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,82,"new Date(""2001 December 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,83,"CalendarUtils.round(date2, Calendar.MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,84,"assertEquals(""round semimonth-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,85,"new Date(""2002 February 16""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,86,"CalendarUtils.round(date1, CalendarUtils.SEMI_MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,87,"assertEquals(""round semimonth-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,88,"new Date(""2001 November 16""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,89,"CalendarUtils.round(date2, CalendarUtils.SEMI_MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,90,"assertEquals(""round date-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,91,"new Date(""2002 February 13""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,92,"CalendarUtils.round(date1, Calendar.DATE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,93,"assertEquals(""round date-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,94,"new Date(""2001 November 18""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,95,"CalendarUtils.round(date2, Calendar.DATE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,96,"assertEquals(""round hour-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,97,"parser.parse(""February 12, 2002 13:00:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,98,"CalendarUtils.round(date1, Calendar.HOUR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,99,"assertEquals(""round hour-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,100,"parser.parse(""November 18, 2001 1:00:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,101,"CalendarUtils.round(date2, Calendar.HOUR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,102,"assertEquals(""round minute-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,103,"parser.parse(""February 12, 2002 12:35:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,104,"CalendarUtils.round(date1, Calendar.MINUTE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,105,"assertEquals(""round minute-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,106,"parser.parse(""November 18, 2001 1:23:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,107,"CalendarUtils.round(date2, Calendar.MINUTE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,108,"assertEquals(""round second-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,109,"parser.parse(""February 12, 2002 12:34:57.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,110,"CalendarUtils.round(date1, Calendar.SECOND));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,111,"assertEquals(""round second-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,112,"parser.parse(""November 18, 2001 1:23:11.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,113,"CalendarUtils.round(date2, Calendar.SECOND));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,117,* Tests various values with the trunc method
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,119,public void testTrunc() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,120,"assertEquals(""trunc year-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,121,"new Date(""2002 January 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,122,"CalendarUtils.trunc(date1, Calendar.YEAR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,123,"assertEquals(""trunc year-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,124,"new Date(""2001 January 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,125,"CalendarUtils.trunc(date2, Calendar.YEAR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,126,"assertEquals(""trunc month-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,127,"new Date(""2002 February 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,128,"CalendarUtils.trunc(date1, Calendar.MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,129,"assertEquals(""trunc month-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,130,"new Date(""2001 November 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,131,"CalendarUtils.trunc(date2, Calendar.MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,132,"assertEquals(""trunc semimonth-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,133,"new Date(""2002 February 1""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,134,"CalendarUtils.trunc(date1, CalendarUtils.SEMI_MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,135,"assertEquals(""trunc semimonth-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,136,"new Date(""2001 November 16""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,137,"CalendarUtils.trunc(date2, CalendarUtils.SEMI_MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,138,"assertEquals(""trunc date-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,139,"new Date(""2002 February 12""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,140,"CalendarUtils.trunc(date1, Calendar.DATE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,141,"assertEquals(""trunc date-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,142,"new Date(""2001 November 18""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,143,"CalendarUtils.trunc(date2, Calendar.DATE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,144,"assertEquals(""trunc hour-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,145,"parser.parse(""February 12, 2002 12:00:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,146,"CalendarUtils.trunc(date1, Calendar.HOUR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,147,"assertEquals(""trunc hour-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,148,"parser.parse(""November 18, 2001 1:00:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,149,"CalendarUtils.trunc(date2, Calendar.HOUR));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,150,"assertEquals(""trunc minute-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,151,"parser.parse(""February 12, 2002 12:34:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,152,"CalendarUtils.trunc(date1, Calendar.MINUTE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,153,"assertEquals(""trunc minute-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,154,"parser.parse(""November 18, 2001 1:23:00.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,155,"CalendarUtils.trunc(date2, Calendar.MINUTE));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,156,"assertEquals(""trunc second-1 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,157,"parser.parse(""February 12, 2002 12:34:56.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,158,"CalendarUtils.trunc(date1, Calendar.SECOND));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,159,"assertEquals(""trunc second-2 failed"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,160,"parser.parse(""November 18, 2001 1:23:11.000""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,161,"CalendarUtils.trunc(date2, Calendar.SECOND));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,166,"* Tests the parse method, which is supposed to handle various strings"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,167,* as flexibly as CVS supports.
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,169,public void testParse() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,170,"//This is difficult to test since the ""now"" used in the"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,171,//  parse function cannot be controlled.  We could possibly control
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,172,//  it by trying before and after and making sure the value we expect
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,173,//  is between the two values calculated.
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,174,//For now we're just using the custom assertEquals that takes a delta
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,176,Calendar now = null;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,178,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,179,"now.add(Calendar.MINUTE, -1);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,180,"assertEquals(""parse 1 minute ago"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,181,"now, CalendarUtils.parse(""1 minute ago""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,182,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,183,"now.add(Calendar.MINUTE, -8);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,184,"assertEquals(""parse 8 minutes ago"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,185,"now, CalendarUtils.parse(""8 minutes ago""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,187,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,188,"now.add(Calendar.DATE, -1);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,189,"assertEquals(""parse yesterday"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,190,"now, CalendarUtils.parse(""yesterday""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,192,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,193,"now.add(Calendar.DATE, 1);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,194,"assertEquals(""parse tomorrow"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,195,"now, CalendarUtils.parse(""tomorrow""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,197,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,198,"//Sunday would be 1, Saturday would be 7, so we walk back up to 6 days."
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,199,if (now.get(Calendar.DATE) == 1) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,200,"//If Sunday already, we go back a full week"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,201,"now.add(Calendar.DATE, -7);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,202,} else {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,203,"now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,205,"assertEquals(""parse last Sunday"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,206,"now, CalendarUtils.parse(""last Sunday""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,208,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,209,"now.add(Calendar.DATE, -7);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,210,"assertEquals(""parse last week"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,211,"now, CalendarUtils.parse(""last week""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,213,now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,214,"//January would be 0, December would be 11, so we walk back up to 11 months"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,215,if (now.get(Calendar.MONTH) == 0) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,216,"//If January already, we go back a full year"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,217,"now.add(Calendar.MONTH, -12);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,218,} else {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,219,"now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,221,"assertEquals(""parse last January"","
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,222,"now, CalendarUtils.parse(""last January""), 50);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,226,* Tests the calendar iterator for week ranges
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,228,public void testWeekIterator() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,229,Calendar now = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,230,"Calendar today = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,231,"Calendar sunday = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,232,"sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,233,"Calendar monday = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,234,if (monday.get(Calendar.DATE) == 1) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,235,//This is sunday... roll back 6 days
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,236,"monday.add(Calendar.DATE, -6);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,237,} else {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,238,"monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,240,"Calendar centered = CalendarUtils.trunc(now, Calendar.DATE);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,241,"centered.add(Calendar.DATE, -3);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,243,"Iterator it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_SUNDAY);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,244,"assertWeekIterator(it, sunday);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,245,"it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_MONDAY);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,246,"assertWeekIterator(it, monday);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,247,"it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,248,"assertWeekIterator(it, today);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,249,"it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_CENTER);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,250,"assertWeekIterator(it, centered);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,254,* Tests the calendar iterator for month-based ranges
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,256,public void testMonthIterator() throws Exception {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,257,"Iterator it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_SUNDAY);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,258,"assertWeekIterator(it,"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,259,"new Date(""January 27, 2002""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,260,"new Date(""March 2, 2002""));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,262,"it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_MONDAY);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,263,"assertWeekIterator(it,"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,264,"new Date(""January 28, 2002""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,265,"new Date(""March 3, 2002""));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,267,"it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_SUNDAY);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,268,"assertWeekIterator(it,"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,269,"new Date(""October 28, 2001""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,270,"new Date(""December 1, 2001""));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,272,"it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_MONDAY);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,273,"assertWeekIterator(it,"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,274,"new Date(""October 29, 2001""),"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,275,"new Date(""December 2, 2001""));"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,279,* This checks that this is a 7 element iterator of Calendar objects
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,280,"* that are dates (no time), and exactly 1 day spaced after each other."
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,282,"private static void assertWeekIterator(Iterator it, Calendar start) {"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,283,Calendar end = (Calendar) start.clone();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,284,"end.add(Calendar.DATE, 6);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,286,"assertWeekIterator(it, start, end);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,290,* Convenience method for when working with Date objects
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,292,"private static void assertWeekIterator(Iterator it, Date start, Date end) {"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,293,Calendar calStart = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,294,calStart.setTime(start);
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,295,Calendar calEnd = Calendar.getInstance();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,296,calEnd.setTime(end);
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,298,"assertWeekIterator(it, calStart, calEnd);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,302,* This checks that this is a 7 divisble iterator of Calendar objects
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,303,"* that are dates (no time), and exactly 1 day spaced after each other"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,304,* (in addition to the proper start and stop dates)
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,306,"private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,307,Calendar cal = (Calendar) it.next();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,308,"assertEquals("""", start, cal, 0);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,309,Calendar last = null;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,310,int count = 1;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,311,while (it.hasNext()) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,312,//Check this is just a date (no time component)
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,313,"assertEquals("""", cal, CalendarUtils.trunc(cal, Calendar.DATE), 0);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,315,last = cal;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,316,cal = (Calendar) it.next();
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,317,count++;
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,319,//Check that this is one day more than the last date
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,320,"last.add(Calendar.DATE, 1);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,321,"assertEquals("""", last, cal, 0);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,323,if (count % 7 != 0) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,324,"throw new AssertionFailedError(""There were "" + count + "" days in this iterator"");"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,326,"assertEquals("""", end, cal, 0);"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,330,* Used to check that Calendar objects are close enough
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,331,* delta is in milliseconds
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,333,"public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {"
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,334,if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,335,throw new AssertionFailedError(
True,src/pending/CalendarUtilsTest.java,src/pending/CalendarUtilsTest.java,336,"message + "" expected "" + cal1.getTime() + "" but got "" + cal2.getTime());"

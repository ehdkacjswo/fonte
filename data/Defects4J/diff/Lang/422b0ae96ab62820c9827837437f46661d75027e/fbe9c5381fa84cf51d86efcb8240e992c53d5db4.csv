is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,320,* @param <T> the type of the value used by this {@code Future} object
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,329,* A specialized {@code Future} implementation which wraps a constant value.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,330,* @param <T> the type of the value wrapped by this class
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,337,* Creates a new instance of {@code ConstantFuture} and initializes it
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,338,* with the constant value.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,340,* @param value the value (may be <b>null</b>)
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,347,* {@inheritDoc} This implementation always returns <b>true</b> because
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,348,* the constant object managed by this {@code Future} implementation is
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,349,* always available.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,356,* {@inheritDoc} This implementation just returns the constant value.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,363,* {@inheritDoc} This implementation just returns the constant value; it
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,364,"* does not block, therefore the timeout has no meaning."
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,371,* {@inheritDoc} This implementation always returns <b>false</b>; there
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,372,* is no background process which could be cancelled.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,379,* {@inheritDoc} The cancel operation is not supported. This
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,380,* implementation always returns <b>false</b>.

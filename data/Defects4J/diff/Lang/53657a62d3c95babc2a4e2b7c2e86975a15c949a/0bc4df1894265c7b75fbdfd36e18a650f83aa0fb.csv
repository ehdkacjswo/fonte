is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,34,"* @author <a href=""mailto:david@davidkarlsen.com"">David J. M. Karlsen</a>"
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,283,* Null safe comparison of Comparables.
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,285,* @param c1
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,286,* @param c2
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,287,* @return
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,288,*  <ul>
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,289,"*   <li>If both objects are non-null and unequal, the lesser object."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,290,"*   <li>If both objects are non-null and equal, c1."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,291,"*   <li>If one of the comparables is null, the non-null object."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,292,"*   <li>If both the comparables are null, null is returned."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,293,*  </ul>
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,295,"public static Object min( Comparable c1, Comparable c2 ) {"
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,296,if ( c1 != null && c2 != null ) {
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,297,return c1.compareTo( c2 ) < 1 ? c1 : c2;
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,299,else {
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,300,return c1 != null ? c1 : c2;
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,305,* Null safe comparison of Comparables.
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,307,* @param c1
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,308,* @param c2
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,309,* @return
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,310,*  <ul>
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,311,"*   <li>If both objects are non-null and unequal, the greater object."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,312,"*   <li>If both objects are non-null and equal, c1."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,313,"*   <li>If one of the comparables is null, the non-null object."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,314,"*   <li>If both the comparables are null, null is returned."
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,315,*  </ul>
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,317,"public static Object max( Comparable c1, Comparable c2 ) {"
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,318,if ( c1 != null && c2 != null ) {
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,319,return c1.compareTo( c2 ) >= 0 ? c1 : c2;
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,321,else {
True,src/java/org/apache/commons/lang/ObjectUtils.java,src/java/org/apache/commons/lang/ObjectUtils.java,322,return c1 != null ? c1 : c2;
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,21,import java.util.Calendar;
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,22,import java.util.Date;
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,183,public void testMax() {
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,184,Calendar calendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,185,Comparable nonNullComparable1 = calendar.getTime();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,186,Comparable nonNullComparable2 = calendar.getTime();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,188,"calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,189,Comparable minComparable = calendar.getTime();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,191,"assertNotSame( nonNullComparable1, nonNullComparable2 );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,193,"assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,194,"assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,195,"assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,196,"assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,197,"assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,200,public void testMin() {
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,201,Calendar calendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,202,Comparable nonNullComparable1 = calendar.getTime();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,203,Comparable nonNullComparable2 = calendar.getTime();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,205,"calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,206,Comparable minComparable = calendar.getTime();
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,208,"assertNotSame( nonNullComparable1, nonNullComparable2 );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,210,"assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,211,"assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,212,"assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,213,"assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );"
True,src/test/org/apache/commons/lang/ObjectUtilsTest.java,src/test/org/apache/commons/lang/ObjectUtilsTest.java,214,"assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,592,"omparison = NumberUtils.compare(lhs, rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,592,"comparison = Double.compare(lhs, rhs);"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,613,"omparison = NumberUtils.compare(lhs, rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,613,"comparison = Float.compare(lhs, rhs);"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1183, <p>Compares two <code>doubles</code> for order.</p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1185, <p>This method is more comprehensive than the standard Java greater
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1186," than, less than and equals operators.</p>"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1187, <ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1188,  <li>It returns <code>-1</code> if the first value is less than the second.</li>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1189,  <li>It returns <code>+1</code> if the first value is greater than the second.</li>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1190,  <li>It returns <code>0</code> if the values are equal.</li>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1191, </ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1193, <p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1194," The ordering is as follows, largest to smallest:"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1195, <ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1196,  <li>NaN
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1197,  <li>Positive infinity
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1198,  <li>Maximum double
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1199,  <li>Normal positive numbers
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1200,  <li>+0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1201,  <li>-0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1202,  <li>Normal negative numbers
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1203,  <li>Minimum double (<code>-Double.MAX_VALUE</code>)
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1204,  <li>Negative infinity
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1205, </ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1206, </p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1208, <p>Comparing <code>NaN</code> with <code>NaN</code> will
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1209, return <code>0</code>.</p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1211, @param lhs  the first <code>double</code>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1212, @param rhs  the second <code>double</code>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1213," @return <code>-1</code> if lhs is less, <code>+1</code> if greater,"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1214,  <code>0</code> if equal to rhs
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1216,"ublic static int compare(double lhs, double rhs) {"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1217,f (lhs < rhs) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1218,eturn -1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1220,f (lhs > rhs) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1221,eturn +1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1223,/ Need to compare bits to handle 0.0 == -0.0 being true
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1224,/ compare should put -0.0 < +0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1225,/ Two NaNs are also == for compare purposes
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1226,/ where NaN == NaN is false
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1227,ong lhsBits = Double.doubleToLongBits(lhs);
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1228,ong rhsBits = Double.doubleToLongBits(rhs);
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1229,f (lhsBits == rhsBits) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1230,eturn 0;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1232,/ Something exotic! A comparison to NaN or 0.0 vs -0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1233,/ Fortunately NaN's long is > than everything else
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1234,/ Also negzeros bits < poszero
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1235,/ NAN: 9221120237041090560
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1236,/ MAX: 9218868437227405311
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1237,/ NEGZERO: -9223372036854775808
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1238,f (lhsBits < rhsBits) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1239,eturn -1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1240, else {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1241,eturn +1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1246, <p>Compares two floats for order.</p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1248," <p>This method is more comprehensive than the standard Java greater than,"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1249, less than and equals operators.</p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1250, <ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1251,  <li>It returns <code>-1</code> if the first value is less than the second.
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1252,  <li>It returns <code>+1</code> if the first value is greater than the second.
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1253,  <li>It returns <code>0</code> if the values are equal.
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1254, </ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1256," <p> The ordering is as follows, largest to smallest:"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1257, <ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1258, <li>NaN
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1259, <li>Positive infinity
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1260, <li>Maximum float
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1261, <li>Normal positive numbers
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1262, <li>+0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1263, <li>-0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1264, <li>Normal negative numbers
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1265, <li>Minimum float (<code>-Float.MAX_VALUE</code>)
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1266, <li>Negative infinity
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1267, </ul>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1269, <p>Comparing <code>NaN</code> with <code>NaN</code> will return
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1270, <code>0</code>.</p>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1272, @param lhs  the first <code>float</code>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1273, @param rhs  the second <code>float</code>
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1274," @return <code>-1</code> if lhs is less, <code>+1</code> if greater,"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1275,  <code>0</code> if equal to rhs
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1277,"ublic static int compare(float lhs, float rhs) {"
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1278,f (lhs < rhs) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1279,eturn -1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1281,f (lhs > rhs) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1282,eturn +1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1284,/Need to compare bits to handle 0.0 == -0.0 being true
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1285,/ compare should put -0.0 < +0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1286,/ Two NaNs are also == for compare purposes
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1287,/ where NaN == NaN is false
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1288,nt lhsBits = Float.floatToIntBits(lhs);
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1289,nt rhsBits = Float.floatToIntBits(rhs);
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1290,f (lhsBits == rhsBits) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1291,eturn 0;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1293,/Something exotic! A comparison to NaN or 0.0 vs -0.0
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1294,/Fortunately NaN's int is > than everything else
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1295,/Also negzeros bits < poszero
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1296,/NAN: 2143289344
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1297,/MAX: 2139095039
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1298,/NEGZERO: -2147483648
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1299,f (lhsBits < rhsBits) {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1300,eturn -1;
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1301, else {
False,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1302,eturn +1;
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,270,"nt compareMin = NumberUtils.compare(getMinimumDouble(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,271,"nt compareMax = NumberUtils.compare(getMaximumDouble(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,270,"int compareMin = Double.compare(getMinimumDouble(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,271,"int compareMax = Double.compare(getMaximumDouble(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,306,"nt compareMin = NumberUtils.compare(getMinimumFloat(), value);"
False,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,307,"nt compareMax = NumberUtils.compare(getMaximumFloat(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,306,"int compareMin = Float.compare(getMinimumFloat(), value);"
True,src/java/org/apache/commons/lang/math/Range.java,src/java/org/apache/commons/lang/math/Range.java,307,"int compareMax = Float.compare(getMaximumFloat(), value);"
False,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,306,"eturn NumberUtils.compare(value, anotherVal);"
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,306,"return Double.compare(value, anotherVal);"
False,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,307,"eturn NumberUtils.compare(value, anotherVal);"
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,307,"return Float.compare(value, anotherVal);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,778,// Testing JDK against old Lang functionality
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,779,"ssertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,780,"ssertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,781,"ssertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,782,"ssertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,783,"ssertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,784,"ssertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,785,"ssertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,786,"ssertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,787,"ssertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,780,"assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,781,"assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,782,"assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,783,"assertTrue(Double.compare(Double.NaN, 1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,784,"assertTrue(Double.compare(Double.NaN, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,785,"assertTrue(Double.compare(Double.NaN, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,786,"assertTrue(Double.compare(Double.NaN, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,787,"assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,788,"assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,789,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,790,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,791,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,792,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,793,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,794,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,795,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,796,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,797,"ssertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,790,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,791,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,792,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,793,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,794,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,795,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,796,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,797,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,798,"assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,799,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,800,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,801,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,802,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,803,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,804,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,805,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,806,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,807,"ssertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,800,"assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,801,"assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,802,"assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,803,"assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,804,"assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,805,"assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,806,"assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,807,"assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,808,"assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,809,"ssertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,810,"ssertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,811,"ssertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,812,"ssertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,813,"ssertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,814,"ssertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,815,"ssertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,816,"ssertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,817,"ssertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,810,"assertTrue(Double.compare(1.2d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,811,"assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,812,"assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,813,"assertTrue(Double.compare(1.2d, 1.2d) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,814,"assertTrue(Double.compare(1.2d, 0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,815,"assertTrue(Double.compare(1.2d, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,816,"assertTrue(Double.compare(1.2d, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,817,"assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,818,"assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,819,"ssertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,820,"ssertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,821,"ssertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,822,"ssertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,823,"ssertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,824,"ssertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,825,"ssertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,826,"ssertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,827,"ssertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,820,"assertTrue(Double.compare(0.0d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,821,"assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,822,"assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,823,"assertTrue(Double.compare(0.0d, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,824,"assertTrue(Double.compare(0.0d, 0.0d) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,825,"assertTrue(Double.compare(0.0d, -0.0d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,826,"assertTrue(Double.compare(0.0d, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,827,"assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,828,"assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,829,"ssertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,830,"ssertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,831,"ssertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,832,"ssertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,833,"ssertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,834,"ssertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,835,"ssertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,836,"ssertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,837,"ssertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,830,"assertTrue(Double.compare(-0.0d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,831,"assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,832,"assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,833,"assertTrue(Double.compare(-0.0d, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,834,"assertTrue(Double.compare(-0.0d, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,835,"assertTrue(Double.compare(-0.0d, -0.0d) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,836,"assertTrue(Double.compare(-0.0d, -1.2d) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,837,"assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,838,"assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,839,"ssertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,840,"ssertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,841,"ssertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,842,"ssertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,843,"ssertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,844,"ssertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,845,"ssertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,846,"ssertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,847,"ssertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,840,"assertTrue(Double.compare(-1.2d, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,841,"assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,842,"assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,843,"assertTrue(Double.compare(-1.2d, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,844,"assertTrue(Double.compare(-1.2d, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,845,"assertTrue(Double.compare(-1.2d, -0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,846,"assertTrue(Double.compare(-1.2d, -1.2d) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,847,"assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,848,"assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,849,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,850,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,851,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,852,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,853,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,854,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,855,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,856,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,857,"ssertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,850,"assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,851,"assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,852,"assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,853,"assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,854,"assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,855,"assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,856,"assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,857,"assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,858,"assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,859,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,860,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,861,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,862,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,863,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,864,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,865,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,866,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,867,"ssertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,860,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,861,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,862,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,863,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,864,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,865,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,866,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,867,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,868,"assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,871,"ssertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,872,"ssertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,873,"ssertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,874,"ssertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,875,"ssertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,876,"ssertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,877,"ssertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,878,"ssertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,879,"ssertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,872,"assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,873,"assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,874,"assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,875,"assertTrue(Float.compare(Float.NaN, 1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,876,"assertTrue(Float.compare(Float.NaN, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,877,"assertTrue(Float.compare(Float.NaN, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,878,"assertTrue(Float.compare(Float.NaN, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,879,"assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,880,"assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,881,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,882,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,883,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,884,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,885,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,886,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,887,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,888,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,889,"ssertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,882,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,883,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,884,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,885,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,886,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,887,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,888,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,889,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,890,"assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,891,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,892,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,893,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,894,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,895,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,896,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,897,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,898,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,899,"ssertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,892,"assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,893,"assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,894,"assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,895,"assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,896,"assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,897,"assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,898,"assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,899,"assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,900,"assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,901,"ssertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,902,"ssertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,903,"ssertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,904,"ssertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,905,"ssertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,906,"ssertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,907,"ssertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,908,"ssertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,909,"ssertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,902,"assertTrue(Float.compare(1.2f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,903,"assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,904,"assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,905,"assertTrue(Float.compare(1.2f, 1.2f) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,906,"assertTrue(Float.compare(1.2f, 0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,907,"assertTrue(Float.compare(1.2f, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,908,"assertTrue(Float.compare(1.2f, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,909,"assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,910,"assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,911,"ssertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,912,"ssertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,913,"ssertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,914,"ssertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,915,"ssertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,916,"ssertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,917,"ssertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,918,"ssertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,919,"ssertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,912,"assertTrue(Float.compare(0.0f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,913,"assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,914,"assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,915,"assertTrue(Float.compare(0.0f, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,916,"assertTrue(Float.compare(0.0f, 0.0f) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,917,"assertTrue(Float.compare(0.0f, -0.0f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,918,"assertTrue(Float.compare(0.0f, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,919,"assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,920,"assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,921,"ssertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,922,"ssertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,923,"ssertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,924,"ssertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,925,"ssertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,926,"ssertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,927,"ssertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,928,"ssertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,929,"ssertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,922,"assertTrue(Float.compare(-0.0f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,923,"assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,924,"assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,925,"assertTrue(Float.compare(-0.0f, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,926,"assertTrue(Float.compare(-0.0f, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,927,"assertTrue(Float.compare(-0.0f, -0.0f) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,928,"assertTrue(Float.compare(-0.0f, -1.2f) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,929,"assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,930,"assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,931,"ssertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,932,"ssertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,933,"ssertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,934,"ssertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,935,"ssertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,936,"ssertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,937,"ssertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,938,"ssertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,939,"ssertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,932,"assertTrue(Float.compare(-1.2f, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,933,"assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,934,"assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,935,"assertTrue(Float.compare(-1.2f, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,936,"assertTrue(Float.compare(-1.2f, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,937,"assertTrue(Float.compare(-1.2f, -0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,938,"assertTrue(Float.compare(-1.2f, -1.2f) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,939,"assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,940,"assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,941,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,942,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,943,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,944,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,945,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,946,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,947,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,948,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,949,"ssertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,942,"assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,943,"assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,944,"assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,945,"assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,946,"assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,947,"assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,948,"assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,949,"assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,950,"assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,951,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,952,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,953,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,954,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,955,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,956,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,957,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,958,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,959,"ssertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,952,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,953,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,954,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,955,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,956,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,957,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,958,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,959,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,960,"assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);"

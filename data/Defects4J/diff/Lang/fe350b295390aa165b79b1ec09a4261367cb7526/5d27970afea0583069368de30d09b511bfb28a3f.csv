is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,253,"ssertEquals(Float.class,  NumberUtils.createNumber(""3.4028235e+38"").getClass());"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,254,"ssertEquals(Double.class, NumberUtils.createNumber(""3.4028236e+38"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,253,"assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber(""3.4028235e+38""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,254,"assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber(""3.4028236e+38""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,257,"ssertEquals(Double.class,     NumberUtils.createNumber(""1.7976931348623157e+308"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,257,"assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber(""1.7976931348623157e+308""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,259,"ssertEquals(BigDecimal.class, NumberUtils.createNumber(""1.7976931348623159e+308"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,259,"assertEquals(new BigDecimal(""1.7976931348623159e+308""), NumberUtils.createNumber(""1.7976931348623159e+308""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,261,"ssertEquals(Integer.class, NumberUtils.createNumber(""0x12345678"").getClass());"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,262,"ssertEquals(Long.class,    NumberUtils.createNumber(""0x123456789"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,261,"assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber(""0x12345678""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,262,"assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber(""0x123456789""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,264,"ssertEquals(Long.class,       NumberUtils.createNumber(""0x7fffffffffffffff"").getClass());"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,265,"ssertEquals(BigInteger.class, NumberUtils.createNumber(""0x7fffffffffffffff0"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,264,"assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber(""0x7fffffffffffffff""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,265,// Does not appear to be a way to create a literal BigInteger of this magnitude
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,266,"assertEquals(new BigInteger(""7fffffffffffffff0"",16), NumberUtils.createNumber(""0x7fffffffffffffff0""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,267,"ssertEquals(Long.class,       NumberUtils.createNumber(""#7fffffffffffffff"").getClass());"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,268,"ssertEquals(BigInteger.class, NumberUtils.createNumber(""#7fffffffffffffff0"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,268,"assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber(""#7fffffffffffffff""));"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,269,"assertEquals(new BigInteger(""7fffffffffffffff0"",16), NumberUtils.createNumber(""#7fffffffffffffff0""));"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,270,"ssertEquals(Integer.class, NumberUtils.createNumber(""017777777777"").getClass()); // 31 bits"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,271,"ssertEquals(Long.class,    NumberUtils.createNumber(""037777777777"").getClass()); // 32 bits"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,271,"assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber(""017777777777"")); // 31 bits"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,272,"assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber(""037777777777"")); // 32 bits"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,273,"ssertEquals(Long.class,       NumberUtils.createNumber(""0777777777777777777777"").getClass()); // 63 bits"
False,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,274,"ssertEquals(BigInteger.class, NumberUtils.createNumber(""01777777777777777777777"").getClass());// 64 bits"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,274,"assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber(""0777777777777777777777"")); // 63 bits"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,275,"assertEquals(new BigInteger(""1777777777777777777777"",8), NumberUtils.createNumber(""01777777777777777777777""));// 64 bits"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,17, under the License.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,19,ackage org.apache.commons.lang.math;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,21,mport java.util.Random;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,24, <p><code>JVMRandom</code> is a wrapper that supports all possible
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,25, Random methods via the {@link java.lang.Math#random()} method
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,26, and its system-wide {@link Random} object.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,28, It does this to allow for a Random class in which the seed is
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,29, shared between all members of the class - a better name would
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,30, have been SharedSeedRandom.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,32, @since 2.0
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,33, @version $Id$
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,35,ublic final class JVMRandom extends Random {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,38, Required for serialization support.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,40, @see java.io.Serializable
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,42,rivate static final long serialVersionUID = 1L;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,45, Ensures that only the constructor can call reseed.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,47,rivate boolean constructed = false;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,50, Constructs a new instance.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,52,ublic JVMRandom() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,53,his.constructed = true;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,57, Unsupported in 2.0.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,59, @param seed ignored
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,60, @throws UnsupportedOperationException
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,62,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,63,ublic synchronized void setSeed(long seed) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,64,f (this.constructed) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,65,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,70, Unsupported in 2.0.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,72," @return Nothing, this method always throws an UnsupportedOperationException."
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,73, @throws UnsupportedOperationException
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,75,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,76,ublic synchronized double nextGaussian() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,77,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,81, Unsupported in 2.0.
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,83, @param byteArray ignored
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,84, @throws UnsupportedOperationException
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,86,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,87,ublic void nextBytes(byte[] byteArray) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,88,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,92," <p>Returns the next pseudorandom, uniformly distributed int value"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,93, from the Math.random() sequence.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,95, @return the random int
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,97,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,98,ublic int nextInt() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,99,eturn nextInt(Integer.MAX_VALUE);
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,102," <p>Returns a pseudorandom, uniformly distributed int value between"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,103," <code>0</code> (inclusive) and the specified value (exclusive), from"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,104, the Math.random() sequence.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,106, @param n  the specified exclusive max-value
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,107, @return the random int
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,108, @throws IllegalArgumentException when <code>n &lt;= 0</code>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,110,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,111,ublic int nextInt(int n) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,112,f (n <= 0) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,113,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,114,"Upper bound for nextInt must be positive"""
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,117,/ TODO: check this cannot return 'n'
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,118,eturn (int)(Math.random() * n);
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,121," <p>Returns the next pseudorandom, uniformly distributed long value"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,122, from the Math.random() sequence.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,123, @return the random long
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,125,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,126,ublic long nextLong() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,127,/ possible loss of precision?
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,128,eturn nextLong(Long.MAX_VALUE);
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,133," <p>Returns a pseudorandom, uniformly distributed long value between"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,134," <code>0</code> (inclusive) and the specified value (exclusive), from"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,135, the Math.random() sequence.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,137, @param n  the specified exclusive max-value
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,138, @return the random long
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,139, @throws IllegalArgumentException when <code>n &lt;= 0</code>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,141,ublic static long nextLong(long n) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,142,f (n <= 0) {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,143,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,144,"Upper bound for nextInt must be positive"""
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,147,/ TODO: check this cannot return 'n'
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,148,eturn (long)(Math.random() * n);
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,152," <p>Returns the next pseudorandom, uniformly distributed boolean value"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,153, from the Math.random() sequence.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,155, @return the random boolean
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,157,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,158,ublic boolean nextBoolean() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,159,eturn Math.random() > 0.5;
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,162," <p>Returns the next pseudorandom, uniformly distributed float value"
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,163, between <code>0.0</code> and <code>1.0</code> from the Math.random()
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,164, sequence.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,166, @return the random float
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,168,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,169,ublic float nextFloat() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,170,eturn (float)Math.random();
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,173, <p>Synonymous to the Math.random() call.</p>
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,175, @return the random double
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,177,Override
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,178,ublic double nextDouble() {
False,src/java/org/apache/commons/lang/math/JVMRandom.java,src/java/org/apache/commons/lang/math/JVMRandom.java,179,eturn Math.random();

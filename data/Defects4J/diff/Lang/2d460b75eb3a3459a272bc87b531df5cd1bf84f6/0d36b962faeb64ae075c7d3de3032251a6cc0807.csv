is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,481,inal int expPos = str.indexOf('e') + str.indexOf('E') + 1; // TODO assumes both not present
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,481,final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,482,"// if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)"
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,483,// and the parsing which will detect if e or E appear in a number due to using the wrong offset
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,486,f (expPos < decPos || expPos > str.length()) {
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,488,if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
False,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,496,f (expPos > str.length()) {
True,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,src/main/java/org/apache/commons/lang3/math/NumberUtils.java,498,if (expPos > str.length()) { // prevents double exponent causing IOOBE

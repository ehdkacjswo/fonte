is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,248,// Tests to show when magnitude causes switch to next Number type
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,249,// Will probably need to be adjusted if code is changed to check precision (LANG-693)
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,250,@Test
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,251,public void testCreateNumberMagnitude() {
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,252,"// Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,253,"assertEquals(Float.class,  NumberUtils.createNumber(""3.4028235e+38"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,254,"assertEquals(Double.class, NumberUtils.createNumber(""3.4028236e+38"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,256,// Test Double.MAX_VALUE
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,257,"assertEquals(Double.class,     NumberUtils.createNumber(""1.7976931348623157e+308"").getClass());"
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,258,// Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)
True,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,259,"assertEquals(BigDecimal.class, NumberUtils.createNumber(""1.7976931348623159e+308"").getClass());"

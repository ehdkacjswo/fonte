is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,69," @version $Id: Fraction.java,v 1.7 2003/08/04 01:20:47 scolebourne Exp $"
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,69,"* @version $Id: Fraction.java,v 1.8 2003/08/04 02:01:53 scolebourne Exp $"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,203,f (gcd == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,204,"eturn new Fraction(numerator, denominator);"
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,437,f (gcd == 0) {
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,438,eturn this;
False,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,510, @return the greatest common denominator
True,src/java/org/apache/commons/lang/math/Fraction.java,src/java/org/apache/commons/lang/math/Fraction.java,504,"* @return the greatest common denominator, never zero"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,62," @version $Id: AbstractRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,62,"* @version $Id: AbstractRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,299,"assertEquals(false, tenToTwenty.containsRange(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,329,"assertEquals(false, tenToTwenty.overlapsRange(null));"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,370,"assertEquals(true, tenToTwenty.equals(tenToTwenty));"
False,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,382,"ssertEquals(""Range[10,20]"", tenToTwenty.toString());"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,385,String str = tenToTwenty.toString();
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,386,"assertEquals(""Range[10,20]"", str);"
True,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,src/test/org/apache/commons/lang/math/AbstractRangeTest.java,387,"assertSame(str, tenToTwenty.toString());"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,63," @version $Id: DoubleRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,63,"* @version $Id: DoubleRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $"
False,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,200,"ssertEquals(""Range[10.0,20.0]"", tenToTwenty.toString());"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,200,String str = tenToTwenty.toString();
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,201,"assertEquals(""Range[10.0,20.0]"", str);"
True,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,src/test/org/apache/commons/lang/math/DoubleRangeTest.java,202,"assertSame(str, tenToTwenty.toString());"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,63," @version $Id: FloatRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,63,"* @version $Id: FloatRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $"
False,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,200,"ssertEquals(""Range[10.0,20.0]"", tenToTwenty.toString());"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,200,String str = tenToTwenty.toString();
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,201,"assertEquals(""Range[10.0,20.0]"", str);"
True,src/test/org/apache/commons/lang/math/FloatRangeTest.java,src/test/org/apache/commons/lang/math/FloatRangeTest.java,202,"assertSame(str, tenToTwenty.toString());"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,63," @version $Id: FractionTest.java,v 1.2 2002/12/22 21:18:51 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,63,"* @version $Id: FractionTest.java,v 1.3 2003/08/04 02:01:53 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,706,"f1 = Fraction.getFraction(0, 5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,707,"f2 = Fraction.getFraction(4, 5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,708,f = f1.subtract(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,709,"assertEquals(-4, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,710,"assertEquals(5, f.getDenominator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,712,"f1 = Fraction.getFraction(0, 5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,713,"f2 = Fraction.getFraction(-4, 5);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,714,f = f1.subtract(f2);
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,715,"assertEquals(4, f.getNumerator());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,716,"assertEquals(5, f.getDenominator());"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,848,"ssertEquals(""3/5"", f.toString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,860,String str = f.toString();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,861,"assertEquals(""3/5"", str);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,862,"assertSame(str, f.toString());"
False,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,867,"ssertEquals(""3/5"", f.toProperString());"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,881,String str = f.toProperString();
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,882,"assertEquals(""3/5"", str);"
True,src/test/org/apache/commons/lang/math/FractionTest.java,src/test/org/apache/commons/lang/math/FractionTest.java,883,"assertSame(str, f.toProperString());"
False,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,63," @version $Id: IntRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,63,"* @version $Id: IntRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,134,"// test non Integer, for full coverage"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,135,Long fiveL = new Long(5L);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,136,Long tenL = new Long(10L);
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,137,"assertEquals(five, nr.getMinimumNumber());"
True,src/test/org/apache/commons/lang/math/IntRangeTest.java,src/test/org/apache/commons/lang/math/IntRangeTest.java,138,"assertEquals(ten, nr.getMaximumNumber());"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,56,import java.lang.reflect.Constructor;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,57,import java.lang.reflect.Modifier;
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,76," @version $Id: NumberUtilsTest.java,v 1.5 2003/07/26 19:12:30 ggregory Exp $"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,78,"* @version $Id: NumberUtilsTest.java,v 1.6 2003/08/04 02:01:53 scolebourne Exp $"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,97,public void testConstructor() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,98,assertNotNull(new NumberUtils());
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,99,Constructor[] cons = NumberUtils.class.getDeclaredConstructors();
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,100,"assertEquals(1, cons.length);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,101,"assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,102,"assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,103,"assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,289,ssertEquals(
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,290,"min(long[]) failed for array length 5"","
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,291,"10,"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,292,"umberUtils.min(new long[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,301,"assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,302,"assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,317,ssertEquals(
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,318,"min(int[]) failed for array length 5"","
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,319,"10,"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,320,"umberUtils.min(new int[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,327,"assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,328,"assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,345,ssertEquals(
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,346,"min(short[]) failed for array length 5"","
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,347,"10,"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,348,"umberUtils.min(new short[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,353,"assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,354,"assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,386,"assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,387,"assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,419,"assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,420,"assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,449,"assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,450,"assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,479,"assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,480,"assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,509,"assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,510,"assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,542,"assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,543,"assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,575,"assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,576,"assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,579,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(low, mid, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,580,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(mid, low, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,581,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(mid, high, low));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,582,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(low, mid, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,599,"assertEquals(""minimum(short,short,short) 1 failed"", low, NumberUtils.min(low, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,600,"assertEquals(""minimum(short,short,short) 1 failed"", low, NumberUtils.min(mid, low, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,601,"assertEquals(""minimum(short,short,short) 1 failed"", low, NumberUtils.min(mid, high, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,602,"assertEquals(""minimum(short,short,short) 1 failed"", low, NumberUtils.min(low, mid, low));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,589,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(low, mid, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,590,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(mid, low, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,591,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(mid, high, low));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,592,"ssertEquals(""minimum(int,int,int) 1 failed"", low, NumberUtils.min(low, mid, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,609,"assertEquals(""minimum(byte,byte,byte) 1 failed"", low, NumberUtils.min(low, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,610,"assertEquals(""minimum(byte,byte,byte) 1 failed"", low, NumberUtils.min(mid, low, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,611,"assertEquals(""minimum(byte,byte,byte) 1 failed"", low, NumberUtils.min(mid, high, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,612,"assertEquals(""minimum(byte,byte,byte) 1 failed"", low, NumberUtils.min(low, mid, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,615,public void testMinimumDouble() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,616,double low = 12.3;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,617,double mid = 12.3 + 1;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,618,double high = 12.3 + 2;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,619,"assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,620,"assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,621,"assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,622,"assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,623,"assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,626,public void testMinimumFloat() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,627,float low = 12.3f;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,628,float mid = 12.3f + 1;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,629,float high = 12.3f + 2;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,630,"assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,631,"assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,632,"assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,633,"assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,634,"assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,615,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(low, mid, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,616,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(mid, low, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,617,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(mid, high, low));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,618,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(high, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,657,"assertEquals(""maximum(short,short,short) 1 failed"", high, NumberUtils.max(low, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,658,"assertEquals(""maximum(short,short,short) 1 failed"", high, NumberUtils.max(mid, low, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,659,"assertEquals(""maximum(short,short,short) 1 failed"", high, NumberUtils.max(mid, high, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,660,"assertEquals(""maximum(short,short,short) 1 failed"", high, NumberUtils.max(high, mid, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,625,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(low, mid, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,626,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(mid, low, high));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,627,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(mid, high, low));"
False,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,628,"ssertEquals(""minimum(int,int,int) 1 failed"", high, NumberUtils.max(high, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,667,"assertEquals(""maximum(byte,byte,byte) 1 failed"", high, NumberUtils.max(low, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,668,"assertEquals(""maximum(byte,byte,byte) 1 failed"", high, NumberUtils.max(mid, low, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,669,"assertEquals(""maximum(byte,byte,byte) 1 failed"", high, NumberUtils.max(mid, high, low));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,670,"assertEquals(""maximum(byte,byte,byte) 1 failed"", high, NumberUtils.max(high, mid, high));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,673,public void testMaximumDouble() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,674,double low = 12.3;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,675,double mid = 12.3 + 1;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,676,double high = 12.3 + 2;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,677,"assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,678,"assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,679,"assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,680,"assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,681,"assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,684,public void testMaximumFloat() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,685,float low = 12.3f;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,686,float mid = 12.3f + 1;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,687,float high = 12.3f + 2;
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,688,"assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,689,"assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,690,"assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,691,"assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,692,"assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,77,"* @author <a href=""mailto:alex@purpletech.com"">Alexander Day Chaffee</a>"
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,78," @version $Id: StringUtils.java,v 1.32 2003/01/20 22:15:13 dlr Exp $"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,79,"* @version $Id: StringUtils.java,v 1.33 2003/03/17 05:28:36 alex Exp $"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1750,// Abbreviating
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1754,"* Turn ""Now is the time for all good men"" into ""Now is the time for..."""
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1755,* <p>
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1756,* Specifically:
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1757,* <p>
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1758,"* If str is less than max characters long, return it."
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1759,"* Else abbreviate it to (substring(str, 0, max-3) + ""..."")."
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1760,"* If maxWidth is less than 3, throw an IllegalArgumentException."
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1761,* In no case will it return a string of length greater than maxWidth.
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1763,* @param maxWidth maximum length of result string
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1765,"public static String abbreviate(String s, int maxWidth) {"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1766,"return abbreviate(s, 0, maxWidth);"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1770,"* Turn ""Now is the time for all good men"" into ""...is the time for..."""
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1771,* <p>
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1772,"* Works like abbreviate(String, int), but allows you to specify a ""left edge"""
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1773,* offset.  Note that this left edge is not necessarily going to be the leftmost
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1774,"* character in the result, or the first"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1775,"* character following the ellipses, but it will appear somewhere in the result."
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1776,* In no case will it return a string of length greater than maxWidth.
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1778,* @param offset left edge of source string
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1779,* @param maxWidth maximum length of result string
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1781,"public static String abbreviate(String s, int offset, int maxWidth) {"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1782,if (maxWidth < 4)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1783,"throw new IllegalArgumentException(""Minimum abbreviation width is 4"");"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1784,if (s.length() <= maxWidth)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1785,return s;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1786,if (offset > s.length())
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1787,offset = s.length();
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1788,if ((s.length() - offset) < (maxWidth-3))
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1789,offset = s.length() - (maxWidth-3);
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1790,if (offset <= 4)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1791,"return s.substring(0, maxWidth-3) + ""..."";"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1792,if (maxWidth < 7)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1793,"throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1794,if ((offset + (maxWidth-3)) < s.length())
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1795,"return ""..."" + abbreviate(s.substring(offset), maxWidth-3);"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1796,"return ""..."" + s.substring(s.length() - (maxWidth-3));"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1799,// Difference
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1803,"* Compare two strings, and return the portion where they differ."
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1804,"* (More precisely, return the remainder of the second string,"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1805,* starting from where it's different from the first.)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1806,* <p>
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1807,"* E.g. strdiff(""i am a machine"", ""i am a robot"") -> ""robot"""
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1809,"* @return the portion of s2 where it differs from s1; returns the empty string ("""") if they are equal"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1811,"public static String difference(String s1, String s2) {"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1812,"int at = differenceAt(s1, s2);"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1813,if (at == -1)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1814,"return """";"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1815,return s2.substring(at);
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1819,"* Compare two strings, and return the index at which the strings begin to differ"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1820,* <p>
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1821,"* E.g. strdiff(""i am a machine"", ""i am a robot"") -> 7"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1823,* @return the index where s2 and s1 begin to differ; -1 if they are equal
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1825,"public static int differenceAt(String s1, String s2)"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1827,int i;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1828,for (i=0; i<s1.length() && i<s2.length(); ++i) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1829,if (s1.charAt(i) != s2.charAt(i)) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1830,break;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1833,if (i<s2.length() || i<s1.length()) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1834,return i;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,1836,return -1;
False,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,71," @version $Id: StringUtilsTest.java,v 1.13 2003/01/20 22:15:13 dlr Exp $"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,71,"* @version $Id: StringUtilsTest.java,v 1.14 2003/03/17 05:28:37 alex Exp $"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,380,public void testAbbreviate()
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,382,"assertEquals(""abbreviate(String,int) failed"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,383,"""short"", StringUtils.abbreviate(""short"", 10));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,384,"assertEquals(""abbreviate(String,int) failed"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,385,"""Now is ..."", StringUtils.abbreviate(""Now is the time for all good men to come to the aid of their party."", 10));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,387,"String raspberry = ""raspberry peach"";"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,388,"assertEquals(""abbreviate(String,int) failed (one past limit)"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,389,"""raspberry p..."", StringUtils.abbreviate(raspberry, 14));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,390,"assertEquals(""abbreviate(String,int) (at limit)"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,391,"""raspberry peach"", StringUtils.abbreviate(""raspberry peach"", 15));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,392,"assertEquals(""abbreviate(String,int) (one below limit)"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,393,"""raspberry peach"", StringUtils.abbreviate(""raspberry peach"", 16));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,395,"assertEquals(""abbreviate(String,int,int) failed"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,396,"""raspberry peach"", StringUtils.abbreviate(raspberry, 11, 15));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,398,"assertAbbreviateWithOffset(""abcdefg..."", -1, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,399,"assertAbbreviateWithOffset(""abcdefg..."", 0, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,400,"assertAbbreviateWithOffset(""abcdefg..."", 1, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,401,"assertAbbreviateWithOffset(""abcdefg..."", 2, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,402,"assertAbbreviateWithOffset(""abcdefg..."", 3, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,403,"assertAbbreviateWithOffset(""abcdefg..."", 4, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,404,"assertAbbreviateWithOffset(""...fghi..."", 5, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,405,"assertAbbreviateWithOffset(""...ghij..."", 6, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,406,"assertAbbreviateWithOffset(""...hijk..."", 7, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,407,"assertAbbreviateWithOffset(""...ijklmno"", 8, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,408,"assertAbbreviateWithOffset(""...ijklmno"", 9, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,409,"assertAbbreviateWithOffset(""...ijklmno"", 10, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,410,"assertAbbreviateWithOffset(""...ijklmno"", 10, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,411,"assertAbbreviateWithOffset(""...ijklmno"", 11, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,412,"assertAbbreviateWithOffset(""...ijklmno"", 12, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,413,"assertAbbreviateWithOffset(""...ijklmno"", 13, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,414,"assertAbbreviateWithOffset(""...ijklmno"", 14, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,415,"assertAbbreviateWithOffset(""...ijklmno"", 15, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,416,"assertAbbreviateWithOffset(""...ijklmno"", 16, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,417,"assertAbbreviateWithOffset(""...ijklmno"", Integer.MAX_VALUE, 10);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,421,"private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth)"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,423,"String abcdefghijklmno = ""abcdefghijklmno"";"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,424,"String message = ""abbreviate(String,int,int) failed"";"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,425,"String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,426,if (offset >= 0 && offset < abcdefghijklmno.length()) {
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,427,"assertTrue(message + "" -- should contain offset character"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,428,actual.indexOf((char)('a'+offset)) != -1);
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,430,"assertTrue(message + "" -- should not be greater than maxWidth"","
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,431,actual.length() <= maxWidth);
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,432,"assertEquals(message, expected, actual);"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,435,public void testDifference()
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,437,"assertEquals(""robot"", StringUtils.difference(""i am a machine"", ""i am a robot""));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,438,"assertEquals("""", StringUtils.difference(""foo"", ""foo""));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,439,"assertEquals(""you are a robot"", StringUtils.difference(""i am a robot"", ""you are a robot""));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,442,public void testDifferenceAt()
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,444,"assertEquals(7, StringUtils.differenceAt(""i am a machine"", ""i am a robot""));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,445,"assertEquals(-1, StringUtils.differenceAt(""foo"", ""foo""));"
True,src/test/org/apache/commons/lang/StringUtilsTest.java,src/test/org/apache/commons/lang/StringUtilsTest.java,446,"assertEquals(0, StringUtils.differenceAt(""i am a robot"", ""you are a robot""));"

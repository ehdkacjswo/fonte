is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,34," @version $Id: DateUtils.java,v 1.29 2004/09/26 05:45:33 bayard Exp $"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,34,"* @version $Id: DateUtils.java,v 1.30 2004/09/27 03:14:15 bayard Exp $"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,59,/ hmm. not very accurate. used by DurationFormatUtils
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,60,tatic final long MILLIS_PER_YEAR = 365 * MILLIS_PER_DAY + 6 * MILLIS_PER_HOUR;
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,61,tatic final long MILLIS_PER_MONTH = MILLIS_PER_YEAR / 12;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,20,import java.util.Calendar;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,21,import java.util.TimeZone;
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,30," @version $Id: DurationFormatUtils.java,v 1.14 2004/09/26 05:45:33 bayard Exp $"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,33,"* @version $Id: DurationFormatUtils.java,v 1.15 2004/09/27 03:14:15 bayard Exp $"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,104,tringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,107,"return format(millis, format, padWithZeros, TimeZone.getDefault());"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,109,"public static String format(long millis, String format, boolean padWithZeros, TimeZone timezone) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,111,if(millis > 28 * DateUtils.MILLIS_PER_DAY) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,112,Calendar c = Calendar.getInstance(timezone);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,113,"c.set(1970, 0, 1, 0, 0, 0);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,114,"c.set(Calendar.MILLISECOND, 0);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,115,"return format(c.getTime().getTime(), millis, format, padWithZeros, timezone);"
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,106,nt sz = tokens.length;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,128,/*  This will never be evaluated
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,163,"return formatDuration(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,167,"private static String formatDuration(Token[] tokens, int years, int months, int days, int hours,"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,168,"int minutes, int seconds, int milliseconds, boolean padWithZeros)"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,170,StringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,171,int sz = tokens.length;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,206,// slower than the above I presume
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,207,"public static String format(long startMillis, long endMillis, String format, boolean padWithZeros) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,208,"return format(startMillis, endMillis, format, padWithZeros, TimeZone.getDefault());"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,210,"public static String format(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,212,long millis = endMillis - startMillis;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,213,if(millis < 28 * DateUtils.MILLIS_PER_DAY) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,214,"return format(millis, format, padWithZeros, timezone);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,217,Token[] tokens = lexx(format);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,219,"// timezones get funky around 0, so normalizing everything to GMT"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,220,// stops the hours being off
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,221,Calendar start = Calendar.getInstance(timezone);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,222,start.setTimeInMillis(startMillis);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,223,Calendar end = Calendar.getInstance(timezone);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,224,end.setTimeInMillis(endMillis);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,226,// initial estimates
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,227,int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,228,int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,229,// each initial estimate is adjusted in case it is under 0
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,230,while(months < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,231,months += 12;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,232,years -= 1;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,234,int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,235,while(days < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,236,days += 31;  // such overshooting is taken care of later on
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,237,days -= 1;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,239,int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,240,while(hours < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,241,hours += 24;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,242,days -= 1;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,244,int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,245,while(minutes < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,246,minutes += 60;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,247,hours -= 1;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,249,int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,250,while(seconds < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,251,seconds += 60;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,252,minutes -= 1;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,254,int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,255,while(milliseconds < 0) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,256,milliseconds += 1000;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,257,seconds -= 1;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,260,"// take estimates off of end to see if we can equal start, when it overshoots recalculate"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,261,"milliseconds -= reduceAndCorrect( start, end, Calendar.MILLISECOND, milliseconds );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,262,"seconds -= reduceAndCorrect( start, end, Calendar.SECOND, seconds );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,263,"minutes -= reduceAndCorrect( start, end, Calendar.MINUTE, minutes );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,264,"hours -= reduceAndCorrect( start, end, Calendar.HOUR_OF_DAY, hours );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,265,"days -= reduceAndCorrect( start, end, Calendar.DAY_OF_MONTH, days );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,266,"months -= reduceAndCorrect( start, end, Calendar.MONTH, months );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,267,"years -= reduceAndCorrect( start, end, Calendar.YEAR, years );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,269,"return formatDuration(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,272,"// Reduces by difference, then if it overshot, calculates the overshot amount and"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,273,// fixes and returns the amount to change by
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,274,"private static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,275,"end.add( field, -1 * difference );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,276,int endValue = end.get(field);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,277,int startValue = start.get(field);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,278,if(endValue < startValue) {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,279,int newdiff = startValue - endValue;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,280,"end.add( field, newdiff );"
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,281,return newdiff;
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,282,} else {
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,283,return 0;
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,160,"ext = DurationFormatUtils.format(cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false);"
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,161,/ TODO: The 1H41M here should be 9H11M. Again the year/month assumption.
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,162,"ystem.err.println(""T: ""+text);"
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,163,"ssertEquals(""P32Y1M23DT1H41M12.1S"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,160,"text = DurationFormatUtils.format(cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,161,"assertEquals(""P32Y1M22DT9H11M12.1S"", text);"
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,167,"ext = DurationFormatUtils.format(cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false);"
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,168,/ TODO: The 2D21H here is wrong and should be larger. The Year/Month assumption in DurationFormatUtils.
False,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,169,"ssertEquals(""P1Y1M2DT21H0M0.0S"", text);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,165,"text = DurationFormatUtils.format(cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);"
True,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,166,"assertEquals(""P1Y1M2DT10H30M0.0S"", text);"

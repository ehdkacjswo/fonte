is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,17,package org.apache.commons.math3.analysis.differentiation;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,19,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,21,/** Class representing the Jacobian of a multivariate vector function.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,22,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,23,"* The rows iterate on the model functions while the columns iterate on the parameters; thus,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,24,* the numbers of rows is equal to the dimension of the underlying function vector
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,25,* value and the number of columns is equal to the number of free parameters of
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,26,* the underlying function.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,27,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,29,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,31,public class JacobianFunction implements MultivariateMatrixFunction {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,33,/** Underlying vector-valued function. */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,34,private final MultivariateDifferentiableVectorFunction f;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,36,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,37,* @param f underlying vector-valued function
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,39,public JacobianFunction(final MultivariateDifferentiableVectorFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,40,this.f = f;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,43,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,44,public double[][] value(double[] point)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,45,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,47,// set up parameters
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,48,final DerivativeStructure[] dsX = new DerivativeStructure[point.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,49,for (int i = 0; i < point.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,50,"dsX[i] = new DerivativeStructure(point.length, 1, i, point[i]);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,53,// compute the derivatives
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,54,final DerivativeStructure[] dsY = f.value(dsX);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,56,// extract the Jacobian
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,57,final double[][] y = new double[dsY.length][point.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,58,final int[] orders = new int[point.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,59,for (int i = 0; i < dsY.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,60,for (int j = 0; j < point.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,61,orders[j] = 1;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,62,y[i][j] = dsY[i].getPartialDerivative(orders);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,63,orders[j] = 0;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java,67,return y;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,18,package org.apache.commons.math3.analysis.differentiation;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,20,import junit.framework.Assert;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,22,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,28,* Test for class {@link JacobianFunction}.
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,30,public class JacobianFunctionTest {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,32,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,33,public void testSphere() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,34,SphereMapping    f = new SphereMapping(10.0);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,35,JacobianFunction j = new JacobianFunction(f);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,36,for (double latitude = -1.5; latitude < 1.5; latitude += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,37,for (double longitude = -3.1; longitude < 3.1; longitude += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,38,"double[] point = new double[] { latitude, longitude };"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,39,double[][] referenceJacobian  = f.jacobian(point);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,40,double[][] testJacobian       = j.value(point);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,41,"Assert.assertEquals(referenceJacobian.length, testJacobian.length);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,42,for (int i = 0; i < 3; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,43,"TestUtils.assertEquals(referenceJacobian[i], testJacobian[i], 2.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,49,"/* Maps (latitude, longitude) to (x, y, z) */"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,50,private static class SphereMapping implements MultivariateDifferentiableVectorFunction {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,52,private final double radius;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,54,public SphereMapping(final double radius) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,55,this.radius = radius;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,58,public double[] value(double[] point) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,59,final double cLat = FastMath.cos(point[0]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,60,final double sLat = FastMath.sin(point[0]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,61,final double cLon = FastMath.cos(point[1]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,62,final double sLon = FastMath.sin(point[1]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,63,return new double[] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,64,"radius * cLon * cLat,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,65,"radius * sLon * cLat,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,66,radius * sLat
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,70,public DerivativeStructure[] value(DerivativeStructure[] point) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,71,final DerivativeStructure cLat = point[0].cos();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,72,final DerivativeStructure sLat = point[0].sin();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,73,final DerivativeStructure cLon = point[1].cos();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,74,final DerivativeStructure sLon = point[1].sin();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,75,return new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,76,"cLon.multiply(cLat).multiply(radius),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,77,"sLon.multiply(cLat).multiply(radius),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,78,sLat.multiply(radius)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,82,public double[][] jacobian(double[] point) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,83,final double cLat = FastMath.cos(point[0]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,84,final double sLat = FastMath.sin(point[0]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,85,final double cLon = FastMath.cos(point[1]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,86,final double sLon = FastMath.sin(point[1]);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,87,return new double[][] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,88,"{ -radius * cLon * sLat, -radius * sLon * cLat },"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,89,"{ -radius * sLon * sLat,  radius * cLon * cLat },"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java,90,"{  radius * cLat,         0  }"

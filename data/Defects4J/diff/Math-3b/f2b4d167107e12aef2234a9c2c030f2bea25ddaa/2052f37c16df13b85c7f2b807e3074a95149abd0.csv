is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,21,import java.math.BigDecimal;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,23,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,24,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,25,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,26,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,27,import org.apache.commons.math.fraction.BigFraction;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,28,import org.apache.commons.math.fraction.BigFractionField;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,29,import org.apache.commons.math.fraction.FractionConversionException;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,30,import org.apache.commons.math.linear.Array2DRowFieldMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,31,import org.apache.commons.math.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,32,import org.apache.commons.math.linear.FieldMatrix;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,33,import org.apache.commons.math.linear.RealMatrix;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,21, Treats the distribution of the two-sided
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,22, {@code P(D}<sub>{@code n}</sub>{@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,23, where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,24, theoretical cdf G and the emperical cdf Gn.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36,* Implementation of the Kolmogorov-Smirnov distribution.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,38,* <p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,39,* Treats the distribution of the two-sided {@code P(D_n < d)} where
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,40,* {@code D_n = sup_x |G(x) - G_n (x)|} for the theoretical cdf {@code G} and
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,41,* the empirical cdf {@code G_n}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,42,* </p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,43,* <p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,44,* This implementation is based on [1] with certain quick decisions for extreme
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,45,* values given in [2].
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,46,* </p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,47,* <p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,48,"* In short, when wanting to evaluate {@code P(D_n < d)}, the method in [1] is"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,49,* to write {@code d = (k - h) / n} for positive integer {@code k} and
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,50,"* {@code 0 <= h < 1}. Then {@code P(D_n < d) = (n! / n^n) * t_kk}, where"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,51,"* {@code t_kk} is the {@code (k, k)}'th entry in the special matrix"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,52,"* {@code H^n}, i.e. {@code H} to the {@code n}'th power."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,53,* </p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,54,* <p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,55,* References:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,56,* <ul>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,57,"* <li>[1] <a href=""http://www.jstatsoft.org/v08/i18/"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,58,"* Evaluating Kolmogorov's Distribution</a> by George Marsaglia, Wai"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,59,"* Wan Tsang, and Jingbo Wang</li>"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,60,"* <li>[2] <a href=""http://www.jstatsoft.org/v39/i11/"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,61,* Computing the Two-Sided Kolmogorov-Smirnov Distribution</a> by Richard Simard
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,62,* and Pierre L'Ecuyer</li>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,63,* </ul>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,64,"* Note that [1] contains an error in computing h, refer to"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,65,"* <a href=""https://issues.apache.org/jira/browse/MATH-437"">MATH-437</a> for details."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,66,* </p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,68,"* @see <a href=""http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,69,* Kolmogorov-Smirnov test (Wikipedia)</a>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,28,ublic interface KolmogorovSmirnovDistribution {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,72,public class KolmogorovSmirnovDistribution implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,74,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,75,private static final long serialVersionUID = -4670676796862967187L;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,77,/** Number of observations. */
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,78,private int n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,81,* @param n Number of observations
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,82,* @throws NotStrictlyPositiveException if {@code n <= 0}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,84,public KolmogorovSmirnovDistribution(int n)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,85,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,86,if (n <= 0) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,87,"throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, n);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,90,this.n = n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,94,* Calculates {@code P(D_n < d)} using method described in [1] with quick
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,95,* decisions for extreme values given in [2] (see above). The result is not
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,96,* exact as with
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,97,* {@link KolmogorovSmirnovDistribution#cdfExact(double)} because
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,98,* calculations are based on {@code double} rather than
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,99,* {@link org.apache.commons.math.fraction.BigFraction}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,101,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,102,* @return the two-sided probability of {@code P(D_n < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,103,* @throws MathArithmeticException if algorithm fails to convert {@code h}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,104,* to a {@link org.apache.commons.math.fraction.BigFraction} in expressing
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,105,"* {@code d} as {@code (k - h) / m} for integer {@code k, m} and"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,106,* {@code 0 <= h < 1}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,108,public double cdf(double d) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,109,"return this.cdf(d, false);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,113,* Calculates {@code P(D_n < d)} using method described in [1] with quick
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,114,* decisions for extreme values given in [2] (see above). The result is
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,115,* exact in the sense that BigFraction/BigReal is used everywhere at the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,116,* expense of very slow execution time. Almost never choose this in real
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,117,* applications unless you are very sure; this is almost solely for
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,118,"* verification purposes. Normally, you would choose"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,119,* {@link KolmogorovSmirnovDistribution#cdf(double)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,121,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,122,* @return the two-sided probability of {@code P(D_n < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,123,* @throws MathArithmeticException if algorithm fails to convert {@code h}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,124,* to a {@link org.apache.commons.math.fraction.BigFraction} in expressing
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,125,"* {@code d} as {@code (k - h) / m} for integer {@code k, m} and"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,126,* {@code 0 <= h < 1}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,128,public double cdfExact(double d) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,129,"return this.cdf(d, true);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,133,* Calculates {@code P(D_n < d)} using method described in [1] with quick
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,134,* decisions for extreme values given in [2] (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,136,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,137,* @param exact whether the probability should be calculated exact using
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,138,* {@link org.apache.commons.math.fraction.BigFraction} everywhere at the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,139,"* expense of very slow execution time, or if {@code double} should be used"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,140,* convenient places to gain speed. Almost never choose {@code true} in real
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,141,* applications unless you are very sure; {@code true} is almost solely for
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,142,* verification purposes.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,143,* @return the two-sided probability of {@code P(D_n < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,144,* @throws MathArithmeticException if algorithm fails to convert {@code h}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,145,* to a {@link org.apache.commons.math.fraction.BigFraction} in expressing
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,146,"* {@code d} as {@code (k - h) / m} for integer {@code k, m} and"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,147,* {@code 0 <= h < 1}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,149,"public double cdf(double d, boolean exact) throws MathArithmeticException {"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,151,final double ninv = 1 / ((double) n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,152,final double ninvhalf = 0.5 * ninv;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,154,if (d <= ninvhalf) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,156,return 0;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,158,} else if (ninvhalf < d && d <= ninv) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,160,double res = 1;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,161,double f = 2 * d - ninv;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,163,// n! f^n = n*f * (n-1)*f * ... * 1*x
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,164,for (int i = 1; i <= n; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,165,res *= i * f;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,168,return res;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,170,} else if (1 - ninv <= d && d < 1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,172,"return 1 - 2 * Math.pow(1 - d, n);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,174,} else if (1 <= d) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,176,return 1;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,179,return exact ? exactK(d) : roundedK(d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,31, Calculates {@code P(D}<sub>n</sub> {@code < d)}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,183,* Calculates the exact value of {@code P(D_n < d)} using method described
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,184,* in [1] and {@link org.apache.commons.math.fraction.BigFraction} (see
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,185,* above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,187,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,188,* @return the two-sided probability of {@code P(D_n < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,189,* @throws MathArithmeticException if algorithm fails to convert {@code h}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,190,* to a {@link org.apache.commons.math.fraction.BigFraction} in expressing
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,191,"* {@code d} as {@code (k - h) / m} for integer {@code k, m} and"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,192,* {@code 0 <= h < 1}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,194,private double exactK(double d) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,196,final int k = (int) Math.ceil(n * d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,198,final FieldMatrix<BigFraction> H = this.createH(d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,199,final FieldMatrix<BigFraction> Hpower = H.power(n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,201,"BigFraction pFrac = Hpower.getEntry(k - 1, k - 1);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,203,for (int i = 1; i <= n; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,204,pFrac = pFrac.multiply(i).divide(n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,208,* BigFraction.doubleValue converts numerator to double and the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,209,* denominator to double and divides afterwards. That gives NaN quite
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,210,* easy. This does not (scale is the number of digits):
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,212,"return pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP).doubleValue();"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,216,* Calculates {@code P(D_n < d)} using method described in [1] and doubles
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,217,* (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,219,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,220,* @return the two-sided probability of {@code P(D_n < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,221,* @throws MathArithmeticException if algorithm fails to convert {@code h}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,222,* to a {@link org.apache.commons.math.fraction.BigFraction} in expressing
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,223,"* {@code d} as {@code (k - h) / m} for integer {@code k, m} and"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,224,* {@code 0 <= h < 1}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,226,private double roundedK(double d) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,228,final int k = (int) Math.ceil(n * d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,229,final FieldMatrix<BigFraction> HBigFraction = this.createH(d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,230,final int m = HBigFraction.getRowDimension();
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,233,* Here the rounding part comes into play: use
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,234,* RealMatrix instead of FieldMatrix<BigFraction>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,236,"final RealMatrix H = new Array2DRowRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,238,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,239,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,240,"H.setEntry(i, j, HBigFraction.getEntry(i, j).doubleValue());"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,244,final RealMatrix Hpower = H.power(n);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,246,"double pFrac = Hpower.getEntry(k - 1, k - 1);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,248,for (int i = 1; i <= n; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,249,pFrac *= (double)i / (double)n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,252,return pFrac;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,256,* Creates {@code H} of size {@code m x m} as described in [1] (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,34, @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,259,* @return H matrix
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,260,* @throws NumberIsTooLargeException if fractional part is greater than 1
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,261,* @throws FractionConversionException if algorithm fails to convert
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,262,* {@code h} to a {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,263,"* expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,264,* {@code 0 <= h < 1}.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36,ouble cdf(double d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,266,private FieldMatrix<BigFraction> createH(double d)
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,267,"throws NumberIsTooLargeException, FractionConversionException {"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,269,int k = (int) Math.ceil(n * d);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,271,int m = 2 * k - 1;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,272,double hDouble = k - n * d;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,274,if (hDouble >= 1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,275,"throw new NumberIsTooLargeException(hDouble, 1.0, false);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,278,BigFraction h = null;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,280,try {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,281,"h = new BigFraction(hDouble, 1.0e-20, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,282,} catch (FractionConversionException e1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,283,try {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,284,"h = new BigFraction(hDouble, 1.0e-10, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,285,} catch (FractionConversionException e2) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,286,"h = new BigFraction(hDouble, 1.0e-5, 10000);"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,290,final BigFraction[][] Hdata = new BigFraction[m][m];
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,293,* Start by filling everything with either 0 or 1.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,295,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,296,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,297,if (i - j + 1 < 0) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,298,Hdata[i][j] = BigFraction.ZERO;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,299,} else {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,300,Hdata[i][j] = BigFraction.ONE;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,306,* Setting up power-array to avoid calculating the same value twice:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,307,* hPowers[0] = h^1 ... hPowers[m-1] = h^m
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,309,final BigFraction[] hPowers = new BigFraction[m];
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,310,hPowers[0] = h;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,311,for (int i = 1; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,312,hPowers[i] = h.multiply(hPowers[i - 1]);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,316,* First column and last row has special values (each other reversed).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,318,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,319,Hdata[i][0] = Hdata[i][0].subtract(hPowers[i]);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,320,Hdata[m - 1][i] = Hdata[m - 1][i].subtract(hPowers[m - i - 1]);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,324,"* [1] states: ""For 1/2 < h < 1 the bottom left element of the matrix"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,325,"* should be (1 - 2*h^m + (2h - 1)^m )/m!"" Since 0 <= h < 1, then if h >"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,326,* 1/2 is sufficient to check:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,328,if (h.compareTo(BigFraction.ONE_HALF) == 1) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,329,Hdata[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1).pow(m));
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,333,"* Aside from the first column and last row, the (i, j)-th element is"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,334,"* 1/(i - j + 1)! if i - j + 1 >= 0, else 0. 1's and 0's are already"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,335,"* put, so only division with (i - j + 1)! is needed in the elements"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,336,* that have 1's. There is no need to calculate (i - j + 1)! and then
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,337,* divide - small steps avoid overflows.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,339,* Note that i - j + 1 > 0 <=> i + 1 > j instead of j'ing all the way to
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,340,* m. Also note that it is started at g = 2 because dividing by 1 isn't
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,341,* really necessary.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,343,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,344,for (int j = 0; j < i + 1; ++j) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,345,if (i - j + 1 > 0) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,346,for (int g = 2; g <= i - j + 1; ++g) {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,347,Hdata[i][j] = Hdata[i][j].divide(g);
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,353,"return new Array2DRowFieldMatrix<BigFraction>(BigFractionField.getInstance(), Hdata);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,21,mport java.math.BigDecimal;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,23,mport org.apache.commons.math.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,24,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,25,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,26,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,27,mport org.apache.commons.math.fraction.BigFraction;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,28,mport org.apache.commons.math.fraction.BigFractionField;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,29,mport org.apache.commons.math.fraction.FractionConversionException;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,30,mport org.apache.commons.math.linear.Array2DRowFieldMatrix;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,31,mport org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,32,mport org.apache.commons.math.linear.FieldMatrix;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,33,mport org.apache.commons.math.linear.RealMatrix;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,36, The default implementation of {@link KolmogorovSmirnovDistribution}.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,38, <p>Treats the distribution of the two-sided
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,39, {@code P(D}<sub>{@code n}</sub>{@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,40, where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,41, theoretical cdf G and the emperical cdf Gn.</p>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,43, <p>This implementation is based on [1] with certain quick
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,44, decisions for extreme values given in [2].</p>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,46," <p>In short, when wanting to evaluate {@code P(D}<sub>{@code n}</sub>{@code < d)},"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,47, the method in [1] is to write {@code d = (k - h) / n} for positive
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,48, integer {@code k} and {@code 0 <= h < 1}. Then
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,49, {@code P(D}<sub>{@code n}</sub>{@code < d) = (n!/n}<sup>{@code n}</sup>{@code ) * t_kk}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,50," where {@code t_kk} is the {@code (k, k)}'th entry in the special"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,51," matrix {@code H}<sup>{@code n}</sup>, i.e. {@code H} to the {@code n}'th power.</p>"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,53," <p>See also <a href=""http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test"">"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,54, Kolmogorov-Smirnov test on Wikipedia</a> for details.</p>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,56, <p>References:
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,57, <ul>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,58," <li>[1] <a href=""http://www.jstatsoft.org/v08/i18/"">"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,59," Evaluating Kolmogorov's Distribution</a> by George Marsaglia, Wai"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,60," Wan Tsang, and Jingbo Wang</li>"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,61," <li>[2] <a href=""http://www.jstatsoft.org/v39/i11/"">"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,62, Computing the Two-Sided Kolmogorov-Smirnov Distribution</a> by Richard Simard
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,63, and Pierre L'Ecuyer</li>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,64, </ul>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,65," Note that [1] contains an error in computing h, refer to"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,66," <a href=""https://issues.apache.org/jira/browse/MATH-437"">MATH-437</a> for details."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,67, </p>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,69, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,71,"ublic class KolmogorovSmirnovDistributionImpl implements KolmogorovSmirnovDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,73,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,74,rivate static final long serialVersionUID = -4670676796862967187L;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,76,** Number of observations. */
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,77,rivate int n;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,80, @param n Number of observations
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,81, @throws NotStrictlyPositiveException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,82,             if {@code n <= 0}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,84,ublic KolmogorovSmirnovDistributionImpl(int n) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,85,f (n <= 0) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,86,"hrow new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, n);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,89,his.n = n;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,93, Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,94, [1] with quick decisions for extreme values given in [2] (see above). The
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,95, result is not exact as with
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,96, {@link KolmogorovSmirnovDistributionImpl#cdfExact(double)} because
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,97, calculations are based on double rather than
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,98, {@link org.apache.commons.math.fraction.BigFraction}.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,100, @param d statistic
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,101, @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,102, @throws MathArithmeticException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,103,             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,104,             {@link org.apache.commons.math.fraction.BigFraction} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,105,             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,106,"             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,108,ublic double cdf(double d) throws MathArithmeticException {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,109,"eturn this.cdf(d, false);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,113, Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,114, [1] with quick decisions for extreme values given in [2] (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,115, The result is exact in the sense that BigFraction/BigReal is used everywhere
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,116, at the expense of very slow execution time. Almost never choose this in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,117, real applications unless you are very sure; this is almost solely for
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,118," verification purposes. Normally, you would choose"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,119, {@link KolmogorovSmirnovDistributionImpl#cdf(double)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,121, @param d statistic
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,122, @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,123, @throws MathArithmeticException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,124,             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,125,             {@link org.apache.commons.math.fraction.BigFraction} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,126,             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,127,"             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,129,ublic double cdfExact(double d) throws MathArithmeticException {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,130,"eturn this.cdf(d, true);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,134, Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,135, [1] with quick decisions for extreme values given in [2] (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,137, @param d statistic
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,138, @param exact
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,139,            whether the probability should be calculated exact using
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,140,            BigFraction everywhere at the expense of very
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,141,"            slow execution time, or if double should be used convenient"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,142,            places to gain speed. Almost never choose {@code true} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,143,            real applications unless you are very sure; {@code true} is
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,144,            almost solely for verification purposes.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,145, @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,146, @throws MathArithmeticException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,147,             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,148,             {@link org.apache.commons.math.fraction.BigFraction} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,149,             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,150,"             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,152,"ublic double cdf(double d, boolean exact)"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,153,hrows MathArithmeticException {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,155,inal double ninv = 1 / ((double) n);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,156,inal double ninvhalf = 0.5 * ninv;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,158,f (d <= ninvhalf) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,160,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,162, else if (ninvhalf < d && d <= ninv) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,164,ouble res = 1;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,165,ouble f = 2 * d - ninv;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,167,/ n! f^n = n*f * (n-1)*f * ... * 1*x
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,168,or (int i = 1; i <= n; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,169,es *= i * f;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,172,eturn res;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,174, else if (1 - ninv <= d && d < 1) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,176,"eturn 1 - 2 * Math.pow(1 - d, n);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,178, else if (1 <= d) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,180,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,183,eturn exact ? exactK(d) : roundedK(d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,187, Calculates {@code P(D}<sub>n</sub> {@code < d)} exact using method
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,188, described in [1] and BigFraction (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,190, @param d statistic
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,191, @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,192, @throws MathArithmeticException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,193,             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,194,             {@link org.apache.commons.math.fraction.BigFraction} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,195,             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,196,"             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,198,rivate double exactK(double d)
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,199,hrows MathArithmeticException {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,201,inal int k = (int) Math.ceil(n * d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,203,inal FieldMatrix<BigFraction> H = this.createH(d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,204,inal FieldMatrix<BigFraction> Hpower = H.power(n);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,206,"igFraction pFrac = Hpower.getEntry(k - 1, k - 1);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,208,or (int i = 1; i <= n; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,209,Frac = pFrac.multiply(i).divide(n);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,213, BigFraction.doubleValue converts numerator to double and the
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,214, denominator to double and divides afterwards. That gives NaN quite
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,215, easy. This does not (scale is the number of digits):
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,217,"eturn pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP).doubleValue();"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,221, Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,222, [1] and doubles (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,224, @param d statistic
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,225, @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,226, @throws MathArithmeticException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,227,             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,228,             {@link org.apache.commons.math.fraction.BigFraction} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,229,             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,230,"             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,232,rivate double roundedK(double d)
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,233,hrows MathArithmeticException {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,235,inal int k = (int) Math.ceil(n * d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,236,inal FieldMatrix<BigFraction> HBigFraction = this.createH(d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,237,inal int m = HBigFraction.getRowDimension();
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,240, Here the rounding part comes into play: use
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,241, RealMatrix instead of FieldMatrix<BigFraction>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,243,"inal RealMatrix H = new Array2DRowRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,245,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,246,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,247,".setEntry(i, j, HBigFraction.getEntry(i, j).doubleValue());"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,251,inal RealMatrix Hpower = H.power(n);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,253,"ouble pFrac = Hpower.getEntry(k - 1, k - 1);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,255,or (int i = 1; i <= n; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,256,Frac *= (double)i / (double)n;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,259,eturn pFrac;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,263, Creates {@code H} of size {@code m x m} as described in [1] (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,265, @param d statistic
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,266, @return H matrix
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,267, @throws NumberIsTooLargeException if fractional part is greater than 1
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,268, @throws FractionConversionException
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,269,             if algorithm fails to convert {@code h} to a
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,270,             {@link org.apache.commons.math.fraction.BigFraction} in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,271,             expressing {@code d} as {@code (k - h) / m} for integer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,272,"             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,274,rivate FieldMatrix<BigFraction> createH(double d)
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,275,"hrows NumberIsTooLargeException, FractionConversionException {"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,277,nt k = (int) Math.ceil(n * d);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,279,nt m = 2 * k - 1;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,280,ouble hDouble = k - n * d;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,282,f (hDouble >= 1) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,283,"hrow new NumberIsTooLargeException(hDouble, 1.0, false);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,286,igFraction h = null;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,288,ry {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,289," = new BigFraction(hDouble, 1.0e-20, 10000);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,290, catch (FractionConversionException e1) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,291,ry {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,292," = new BigFraction(hDouble, 1.0e-10, 10000);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,293, catch (FractionConversionException e2) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,294," = new BigFraction(hDouble, 1.0e-5, 10000);"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,298,inal BigFraction[][] Hdata = new BigFraction[m][m];
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,301, Start by filling everything with either 0 or 1.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,303,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,304,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,305,f (i - j + 1 < 0) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,306,data[i][j] = BigFraction.ZERO;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,307, else {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,308,data[i][j] = BigFraction.ONE;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,314, Setting up power-array to avoid calculating the same value twice:
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,315, hPowers[0] = h^1 ... hPowers[m-1] = h^m
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,317,inal BigFraction[] hPowers = new BigFraction[m];
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,318,Powers[0] = h;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,319,or (int i = 1; i < m; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,320,Powers[i] = h.multiply(hPowers[i - 1]);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,324, First column and last row has special values (each other reversed).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,326,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,327,data[i][0] = Hdata[i][0].subtract(hPowers[i]);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,328,data[m - 1][i] = Hdata[m - 1][i].subtract(hPowers[m - i - 1]);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,332," [1] states: ""For 1/2 < h < 1 the bottom left element of the matrix"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,333," should be (1 - 2*h^m + (2h - 1)^m )/m!"" Since 0 <= h < 1, then if h >"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,334, 1/2 is sufficient to check:
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,336,f (h.compareTo(BigFraction.ONE_HALF) == 1) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,337,data[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1).pow(m));
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,341," Aside from the first column and last row, the (i, j)-th element is"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,342," 1/(i - j + 1)! if i - j + 1 >= 0, else 0. 1's and 0's are already"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,343," put, so only division with (i - j + 1)! is needed in the elements"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,344, that have 1's. There is no need to calculate (i - j + 1)! and then
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,345, divide - small steps avoid overflows.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,347, Note that i - j + 1 > 0 <=> i + 1 > j instead of j'ing all the way to
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,348, m. Also note that it is started at g = 2 because dividing by 1 isn't
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,349, really necessary.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,351,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,352,or (int j = 0; j < i + 1; ++j) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,353,f (i - j + 1 > 0) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,354,or (int g = 2; g <= i - j + 1; ++g) {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,355,data[i][j] = Hdata[i][j].divide(g);
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,361,"eturn new Array2DRowFieldMatrix<BigFraction>(BigFractionField.getInstance(), Hdata);"
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,24, Test cases for {@link KolmogorovSmirnovDistributionImpl}.
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,24,* Test cases for {@link KolmogorovSmirnovDistribution}.
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,35,olmogorovSmirnovDistributionImpl dist;
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,35,KolmogorovSmirnovDistribution dist;
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,47,ist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,47,dist = new KolmogorovSmirnovDistribution(200);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,53,ist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,53,dist = new KolmogorovSmirnovDistribution(200);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,59,ist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,59,dist = new KolmogorovSmirnovDistribution(200);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,65,ist = new KolmogorovSmirnovDistributionImpl(200);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,65,dist = new KolmogorovSmirnovDistribution(200);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,71,ist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,71,dist = new KolmogorovSmirnovDistribution(341);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,77,ist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,77,dist = new KolmogorovSmirnovDistribution(341);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,83,ist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,83,dist = new KolmogorovSmirnovDistribution(341);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,89,ist = new KolmogorovSmirnovDistributionImpl(341);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,89,dist = new KolmogorovSmirnovDistribution(341);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,95,ist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,95,dist = new KolmogorovSmirnovDistribution(389);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,101,ist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,101,dist = new KolmogorovSmirnovDistribution(389);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,107,ist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,107,dist = new KolmogorovSmirnovDistribution(389);
False,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,113,ist = new KolmogorovSmirnovDistributionImpl(389);
True,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,src/test/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionTest.java,113,dist = new KolmogorovSmirnovDistribution(389);

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,82,// safety check
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,83,checkAdditionCompatible(m);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,83,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,84,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,85," addition compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,86,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,87,"etRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,88,"etColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,89,".getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,90,.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,101,// safety check
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,102,checkSubtractionCompatible(m);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,109,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,110,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,111," subtraction compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,112,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,113,"etRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,114,"etColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,115,".getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,116,.getColumnDimension()
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,166,f (getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,167,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,168," multiplication compatible"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,169,ew Object[] {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,170,"etRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,171,"etColumnDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,172,".getRowDimension(),"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,173,.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,153,// safety check
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,154,checkMultiplicationCompatible(m);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,179,inal int nSum = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,158,final int nSum  = getColumnDimension();
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,202,ublic abstract double[][] getData();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,181,public double[][] getData() {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,183,final double[][] data = new double[getRowDimension()][getColumnDimension()];
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,185,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,186,final double[] dataI = data[i];
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,187,for (int j = 0; j < dataI.length; ++j) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,188,"dataI[j] = getEntry(i, j);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,192,return data;
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,770,"es.append(""RealMatrixImpl{"");"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,762,String fullClassName = getClass().getName();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,763,String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,764,"res.append(shortClassName).append(""{"");"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,847,rivate void checkRowIndex(final int row) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,841,protected void checkRowIndex(final int row) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,859,rivate void checkColumnIndex(final int column)
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,853,protected void checkColumnIndex(final int column)
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,862,* Check if a matrix is addition compatible with the instance
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,863,* @param m matrix to check
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,864,* @exception IllegalArgumentException if matrix is not addition compatible with instance
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,866,protected void checkAdditionCompatible(final RealMatrix m) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,867,if ((getRowDimension()    != m.getRowDimension()) ||
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,868,(getColumnDimension() != m.getColumnDimension())) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,869,"throw MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,870,""" addition compatible"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,871,new Object[] {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,872,"getRowDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,873,"getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,874,"m.getRowDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,875,m.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,881,* Check if a matrix is subtraction compatible with the instance
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,882,* @param m matrix to check
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,883,* @exception IllegalArgumentException if matrix is not subtraction compatible with instance
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,885,protected void checkSubtractionCompatible(final RealMatrix m) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,886,if ((getRowDimension()    != m.getRowDimension()) ||
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,887,(getColumnDimension() != m.getColumnDimension())) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,888,"throw MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,889,""" subtraction compatible"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,890,new Object[] {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,891,"getRowDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,892,"getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,893,"m.getRowDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,894,m.getColumnDimension()
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,900,* Check if a matrix is multiplication compatible with the instance
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,901,* @param m matrix to check
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,902,* @exception IllegalArgumentException if matrix is not multiplication compatible with instance
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,904,protected void checkMultiplicationCompatible(final RealMatrix m) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,905,if (getColumnDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,906,"throw MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,907,""" multiplication compatible"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,908,new Object[] {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,909,"getRowDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,910,"getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,911,"m.getRowDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,912,m.getColumnDimension()
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,189,// safety check
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,190,checkAdditionCompatible(m);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,190,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,191,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,192," addition compatible"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,193,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,194,"etRowDimension(), getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,195,".getRowDimension(), m.getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,228,// safety check
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,229,checkSubtractionCompatible(m);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,231,f (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,232,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,233," subtraction compatible"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,234,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,235,"etRowDimension(), getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,236,".getRowDimension(), m.getColumnDimension()"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,270,f (this.getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,271,"hrow MathRuntimeException.createIllegalArgumentException(""{0}x{1} and {2}x{3} matrices are not"" +"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,272," multiplication compatible"","
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,273,ew Object[] {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,274,"etRowDimension(), getColumnDimension(),"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,275,".getRowDimension(), m.getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,267,// safety check
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,268,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,20,import org.apache.commons.math.util.OpenIntToDoubleHashMap;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,23,* Sparse matrix implementation based on an open addressed map.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,26,* @since 2.0
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,28,public class SparseRealMatrix extends AbstractRealMatrix {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,30,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,31,private static final long serialVersionUID = -5962461716457143437L;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,33,/** Number of rows of the matrix. */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,34,private final int rowDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,36,/** Number of columns of the matrix. */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,37,private final int columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,39,/** Storage for (sparse) matrix elements. */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,40,private OpenIntToDoubleHashMap entries;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,43,* Build a sparse matrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,44,* @param rowDimension number of rows of the matrix
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,45,* @param columnDimension number of columns of the matrix
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,47,"public SparseRealMatrix(int rowDimension, int columnDimension) {"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,48,"super(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,49,this.rowDimension = rowDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,50,this.columnDimension = columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,51,this.entries = new OpenIntToDoubleHashMap();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,55,* Build a matrix by copying another one.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,56,* @param matrix matrix to copy
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,58,public SparseRealMatrix(SparseRealMatrix matrix) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,59,this.rowDimension = matrix.rowDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,60,this.columnDimension = matrix.columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,61,this.entries = new OpenIntToDoubleHashMap(matrix.entries);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,64,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,65,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,66,public RealMatrix copy() {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,67,return new SparseRealMatrix(this);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,70,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,71,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,72,"public RealMatrix createMatrix(int rowDimension, int columnDimension)"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,73,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,74,"return new SparseRealMatrix(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,77,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,78,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,79,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,80,return columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,83,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,84,public RealMatrix add(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,85,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,86,try {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,87,return add((SparseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,88,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,89,return super.add(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,94,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,96,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,97,* @return     this + m
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,98,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,100,public RealMatrix add(SparseRealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,102,// safety check
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,103,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,105,final RealMatrix out = new SparseRealMatrix(this);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,106,for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,107,final OpenIntToDoubleHashMap.Entry entry = iterator.next();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,108,final int row = entry.key() / columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,109,final int col = entry.key() - row * columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,110,"out.setEntry(row, col, getEntry(row, col) + entry.value());"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,113,return out;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,118,public RealMatrix subtract(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,119,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,120,try {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,121,return subtract((SparseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,122,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,123,return super.add(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,128,* Compute this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,130,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,131,* @return     this - m
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,132,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,134,public RealMatrix subtract(SparseRealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,136,// safety check
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,137,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,139,final RealMatrix out = new SparseRealMatrix(this);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,140,for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,141,final OpenIntToDoubleHashMap.Entry entry = iterator.next();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,142,final int row = entry.key() / columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,143,final int col = entry.key() - row * columnDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,144,"out.setEntry(row, col, getEntry(row, col) - entry.value());"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,147,return out;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,151,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,152,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,153,"public double getEntry(int row, int column) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,154,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,155,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,156,"return entries.get(computeKey(row, column));"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,159,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,160,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,161,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,162,return rowDimension;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,165,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,166,@Override
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,167,"public void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,168,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,169,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,170,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,171,if (value == 0.0) {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,172,"entries.remove(computeKey(row, column));"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,173,} else {
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,174,"entries.put(computeKey(row, column), value);"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,179,* Compute the key to access a matrix element
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,180,* @param row row index of the matrix element
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,181,* @param column column index of the matrix element
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,182,* @return key within the map to access the matrix element
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,184,"private int computeKey(int row, int column) {"
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,185,return row * columnDimension + column;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,24,* Test cases for the {@link SparseRealMatrix} class.
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,26,"* @version $Revision$ $Date: 2008-11-07 06:48:13 -0800 (Fri, 07 Nov"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,27,*          2008) $
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,29,public final class SparseRealMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,31,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,32,"protected double[][] id = { { 1d, 0d, 0d }, { 0d, 1d, 0d }, { 0d, 0d, 1d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,33,// Test data for group operations
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,34,"protected double[][] testData = { { 1d, 2d, 3d }, { 2d, 5d, 3d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,35,"{ 1d, 0d, 8d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,36,"protected double[][] testDataLU = { { 2d, 5d, 3d }, { .5d, -2.5d, 6.5d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,37,"{ 0.5d, 0.2d, .2d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,38,"protected double[][] testDataPlus2 = { { 3d, 4d, 5d }, { 4d, 7d, 5d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,39,"{ 3d, 2d, 10d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,40,"protected double[][] testDataMinus = { { -1d, -2d, -3d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,41,"{ -2d, -5d, -3d }, { -1d, 0d, -8d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,42,"protected double[] testDataRow1 = { 1d, 2d, 3d };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,43,"protected double[] testDataCol3 = { 3d, 3d, 8d };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,44,"protected double[][] testDataInv = { { -40d, 16d, 9d }, { 13d, -5d, -3d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,45,"{ 5d, -2d, -1d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,46,"protected double[] preMultTest = { 8, 12, 33 };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,47,"protected double[][] testData2 = { { 1d, 2d, 3d }, { 2d, 5d, 3d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,48,"protected double[][] testData2T = { { 1d, 2d }, { 2d, 5d }, { 3d, 3d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,49,"protected double[][] testDataPlusInv = { { -39d, 18d, 12d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,50,"{ 15d, 0d, 0d }, { 6d, -2d, 7d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,52,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,53,"protected double[][] luData = { { 2d, 3d, 3d }, { 0d, 5d, 7d }, { 6d, 9d, 8d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,54,"protected double[][] luDataLUDecomposition = { { 6d, 9d, 8d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,55,"{ 0d, 5d, 7d }, { 0.33333333333333, 0d, 0.33333333333333 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,57,// singular matrices
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,58,"protected double[][] singular = { { 2d, 3d }, { 2d, 3d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,59,"protected double[][] bigSingular = { { 1d, 2d, 3d, 4d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,60,"{ 2d, 5d, 3d, 4d }, { 7d, 3d, 256d, 1930d }, { 3d, 7d, 6d, 8d } }; // 4th"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,62,// row
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,64,// 1st
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,66,// 2nd
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,67,"protected double[][] detData = { { 1d, 2d, 3d }, { 4d, 5d, 6d },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,68,"{ 7d, 8d, 10d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,69,"protected double[][] detData2 = { { 1d, 3d }, { 2d, 4d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,71,// vectors
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,72,"protected double[] testVector = { 1, 2, 3 };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,73,"protected double[] testVector2 = { 1, 2, 3, 4 };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,75,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,76,"protected double[][] subTestData = { { 1, 2, 3, 4 },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,77,"{ 1.5, 2.5, 3.5, 4.5 }, { 2, 4, 6, 8 }, { 4, 5, 6, 7 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,79,// array selections
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,80,"protected double[][] subRows02Cols13 = { { 2, 4 }, { 4, 8 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,81,"protected double[][] subRows03Cols12 = { { 2, 3 }, { 5, 6 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,82,"protected double[][] subRows03Cols123 = { { 2, 3, 4 }, { 5, 6, 7 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,84,// effective permutations
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,85,"protected double[][] subRows20Cols123 = { { 4, 6, 8 }, { 2, 3, 4 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,86,"protected double[][] subRows31Cols31 = { { 7, 5 }, { 4.5, 2.5 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,88,// contiguous ranges
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,89,"protected double[][] subRows01Cols23 = { { 3, 4 }, { 3.5, 4.5 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,90,"protected double[][] subRows23Cols00 = { { 2 }, { 4 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,91,protected double[][] subRows00Cols33 = { { 4 } };
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,93,// row matrices
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,94,"protected double[][] subRow0 = { { 1, 2, 3, 4 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,95,"protected double[][] subRow3 = { { 4, 5, 6, 7 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,97,// column matrices
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,98,"protected double[][] subColumn1 = { { 2 }, { 2.5 }, { 4 }, { 5 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,99,"protected double[][] subColumn3 = { { 4 }, { 4.5 }, { 8 }, { 7 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,101,// tolerances
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,102,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,103,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,105,public SparseRealMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,106,super(name);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,109,public void setUp() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,113,public static Test suite() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,114,TestSuite suite = new TestSuite(SparseRealMatrixTest.class);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,115,"suite.setName(""SparseRealMatrix Tests"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,116,return suite;
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,119,/** test dimensions */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,120,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,121,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,122,SparseRealMatrix m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,123,"assertEquals(""testData row dimension"", 3, m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,124,"assertEquals(""testData column dimension"", 3, m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,125,"assertTrue(""testData is square"", m.isSquare());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,126,"assertEquals(""testData2 row dimension"", m2.getRowDimension(), 2);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,127,"assertEquals(""testData2 column dimension"", m2.getColumnDimension(), 3);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,128,"assertTrue(""testData2 is not square"", !m2.isSquare());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,131,/** test copy functions */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,132,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,133,SparseRealMatrix m1 = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,134,RealMatrix m2 = m1.copy();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,135,assertTrue(m2 instanceof SparseRealMatrix);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,136,"assertEquals(((SparseRealMatrix) m2), m1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,137,SparseRealMatrix m3 = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,138,RealMatrix m4 = m3.copy();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,139,assertTrue(m4 instanceof SparseRealMatrix);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,140,"assertEquals(((SparseRealMatrix) m4), m3);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,143,/** test add */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,144,public void testAdd() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,145,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,146,SparseRealMatrix mInv = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,147,SparseRealMatrix mDataPlusInv = createSparseMatrix(testDataPlusInv);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,148,RealMatrix mPlusMInv = m.add(mInv);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,149,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,150,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,151,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,152,"mDataPlusInv.getEntry(row, col), mPlusMInv.getEntry(row, col),"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,153,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,158,/** test add failure */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,159,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,160,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,161,SparseRealMatrix m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,162,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,163,m.add(m2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,164,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,165,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,170,/** test norm */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,171,public void testNorm() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,172,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,173,SparseRealMatrix m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,174,"assertEquals(""testData norm"", 14d, m.getNorm(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,175,"assertEquals(""testData2 norm"", 7d, m2.getNorm(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,178,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,179,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,180,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,181,SparseRealMatrix n = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,182,"assertClose(""m-n = m + -n"", m.subtract(n),"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,183,"n.scalarMultiply(-1d).add(m), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,184,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,185,m.subtract(createSparseMatrix(testData2));
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,186,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,187,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,192,/** test multiply */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,193,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,194,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,195,SparseRealMatrix mInv = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,196,SparseRealMatrix identity = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,197,SparseRealMatrix m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,198,"assertClose(""inverse multiply"", m.multiply(mInv), identity,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,199,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,200,"assertClose(""inverse multiply"", mInv.multiply(m), identity,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,201,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,202,"assertClose(""identity multiply"", m.multiply(identity), m,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,203,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,204,"assertClose(""identity multiply"", identity.multiply(mInv), mInv,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,205,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,206,"assertClose(""identity multiply"", m2.multiply(identity), m2,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,207,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,208,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,209,m.multiply(createSparseMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,210,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,211,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,216,// Additional Test for RealMatrixImplTest.testMultiply
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,218,"private double[][] d3 = new double[][] { { 1, 2, 3, 4 }, { 5, 6, 7, 8 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,219,"private double[][] d4 = new double[][] { { 1 }, { 2 }, { 3 }, { 4 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,220,"private double[][] d5 = new double[][] { { 30 }, { 70 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,222,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,223,RealMatrix m3 = createSparseMatrix(d3);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,224,RealMatrix m4 = createSparseMatrix(d4);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,225,RealMatrix m5 = createSparseMatrix(d5);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,226,"assertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,229,/** test trace */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,230,public void testTrace() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,231,RealMatrix m = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,232,"assertEquals(""identity trace"", 3d, m.getTrace(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,233,m = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,234,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,235,m.getTrace();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,236,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,237,} catch (NonSquareMatrixException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,242,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,243,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,244,RealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,245,"assertClose(""scalar add"", createSparseMatrix(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,246,"m.scalarAdd(2d), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,249,/** test operate */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,250,public void testOperate() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,251,RealMatrix m = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,252,"assertClose(""identity operate"", testVector, m.operate(testVector),"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,253,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,254,"assertClose(""identity operate"", testVector, m.operate("
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,255,"new RealVectorImpl(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,256,m = createSparseMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,257,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,258,m.operate(testVector);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,259,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,260,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,265,/** test issue MATH-209 */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,266,public void testMath209() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,267,RealMatrix a = createSparseMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,268,"{ 1, 2 }, { 3, 4 }, { 5, 6 } });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,269,"double[] b = a.operate(new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,270,"assertEquals(a.getRowDimension(), b.length);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,271,"assertEquals(3.0, b[0], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,272,"assertEquals(7.0, b[1], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,273,"assertEquals(11.0, b[2], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,276,/** test transpose */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,277,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,279,RealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,280,RealMatrix mIT = new LUSolver(new LUDecompositionImpl(m)).getInverse().transpose();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,281,RealMatrix mTI = new LUSolver(new LUDecompositionImpl(m.transpose())).getInverse();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,282,"assertClose(""inverse-transpose"", mIT, mTI, normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,283,m = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,284,RealMatrix mt = createSparseMatrix(testData2T);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,285,"assertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,288,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,289,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,290,RealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,291,"assertClose(""premultiply"", m.preMultiply(testVector), preMultTest,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,292,normTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,293,"assertClose(""premultiply"", m.preMultiply("
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,294,"new RealVectorImpl(testVector).getData()), preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,295,m = createSparseMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,296,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,297,m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,298,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,299,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,304,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,305,RealMatrix m3 = createSparseMatrix(d3);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,306,RealMatrix m4 = createSparseMatrix(d4);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,307,RealMatrix m5 = createSparseMatrix(d5);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,308,"assertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,310,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,311,SparseRealMatrix mInv = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,312,SparseRealMatrix identity = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,313,"assertClose(""inverse multiply"", m.preMultiply(mInv), identity,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,314,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,315,"assertClose(""inverse multiply"", mInv.preMultiply(m), identity,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,316,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,317,"assertClose(""identity multiply"", m.preMultiply(identity), m,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,318,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,319,"assertClose(""identity multiply"", identity.preMultiply(mInv), mInv,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,320,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,321,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,322,m.preMultiply(createSparseMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,323,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,324,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,329,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,330,RealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,331,"assertClose(""get row"", m.getRow(0), testDataRow1, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,332,"assertClose(""get col"", m.getColumn(2), testDataCol3, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,333,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,334,m.getRow(10);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,335,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,336,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,339,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,340,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,341,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,342,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,347,public void testGetEntry() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,348,RealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,349,"assertEquals(""get entry"", m.getEntry(0, 1), 2d, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,350,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,351,"m.getEntry(10, 4);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,352,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,353,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,354,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,358,/** test examples in user guide */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,359,public void testExamples() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,360,// Create a real matrix with two rows and three columns
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,361,"double[][] matrixData = { { 1d, 2d, 3d }, { 2d, 5d, 3d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,362,RealMatrix m = createSparseMatrix(matrixData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,363,"// One more with three rows, two columns"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,364,"double[][] matrixData2 = { { 1d, 2d }, { 2d, 5d }, { 1d, 7d } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,365,RealMatrix n = createSparseMatrix(matrixData2);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,366,// Now multiply m by n
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,367,RealMatrix p = m.multiply(n);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,368,"assertEquals(2, p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,369,"assertEquals(2, p.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,370,// Invert p
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,371,RealMatrix pInverse = new LUSolver(new LUDecompositionImpl(p)).getInverse();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,372,"assertEquals(2, pInverse.getRowDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,373,"assertEquals(2, pInverse.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,375,// Solve example
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,376,"double[][] coefficientsData = { { 2, 3, -2 }, { -1, 7, 6 },"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,377,"{ 4, -3, -5 } };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,378,RealMatrix coefficients = createSparseMatrix(coefficientsData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,379,"double[] constants = { 1, -2, 1 };"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,380,double[] solution = new LUSolver(new LUDecompositionImpl(coefficients)).solve(constants);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,381,"assertEquals(2 * solution[0] + 3 * solution[1] - 2 * solution[2],"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,382,"constants[0], 1E-12);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,383,"assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2],"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,384,"constants[1], 1E-12);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,385,"assertEquals(4 * solution[0] - 3 * solution[1] - 5 * solution[2],"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,386,"constants[2], 1E-12);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,390,// test submatrix accessors
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,391,public void testSubMatrix() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,392,RealMatrix m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,393,RealMatrix mRows23Cols00 = createSparseMatrix(subRows23Cols00);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,394,RealMatrix mRows00Cols33 = createSparseMatrix(subRows00Cols33);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,395,RealMatrix mRows01Cols23 = createSparseMatrix(subRows01Cols23);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,396,RealMatrix mRows02Cols13 = createSparseMatrix(subRows02Cols13);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,397,RealMatrix mRows03Cols12 = createSparseMatrix(subRows03Cols12);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,398,RealMatrix mRows03Cols123 = createSparseMatrix(subRows03Cols123);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,399,RealMatrix mRows20Cols123 = createSparseMatrix(subRows20Cols123);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,400,RealMatrix mRows31Cols31 = createSparseMatrix(subRows31Cols31);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,401,"assertEquals(""Rows23Cols00"", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,402,"assertEquals(""Rows00Cols33"", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,403,"assertEquals(""Rows01Cols23"", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,404,"assertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,405,"m.getSubMatrix(new int[] { 0, 2 }, new int[] { 1, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,406,"assertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,407,"m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2 }));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,408,"assertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,409,"m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,410,"assertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,411,"m.getSubMatrix(new int[] { 2, 0 }, new int[] { 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,412,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,413,"m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 }));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,414,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,415,"m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 }));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,417,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,418,"m.getSubMatrix(1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,419,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,420,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,421,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,423,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,424,"m.getSubMatrix(-1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,425,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,426,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,427,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,429,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,430,"m.getSubMatrix(1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,431,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,432,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,433,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,435,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,436,"m.getSubMatrix(1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,437,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,438,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,439,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,441,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,442,"m.getSubMatrix(new int[] {}, new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,443,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,444,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,445,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,447,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,448,"m.getSubMatrix(new int[] { 0 }, new int[] { 4 });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,449,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,450,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,451,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,455,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,456,RealMatrix m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,457,RealMatrix mRow0 = createSparseMatrix(subRow0);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,458,RealMatrix mRow3 = createSparseMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,459,"assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,460,"assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,461,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,462,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,463,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,464,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,465,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,467,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,468,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,469,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,470,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,471,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,475,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,476,RealMatrix m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,477,RealMatrix mColumn1 = createSparseMatrix(subColumn1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,478,RealMatrix mColumn3 = createSparseMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,479,"assertEquals(""Column1"", mColumn1, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,480,"assertEquals(""Column3"", mColumn3, m.getColumnMatrix(3));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,481,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,482,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,483,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,484,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,485,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,487,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,488,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,489,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,490,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,491,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,495,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,496,RealMatrix m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,497,RealVector mRow0 = new RealVectorImpl(subRow0[0]);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,498,RealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,499,"assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,500,"assertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,501,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,502,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,503,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,504,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,505,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,507,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,508,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,509,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,510,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,511,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,515,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,516,RealMatrix m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,517,RealVector mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,518,RealVector mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,519,"assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,520,"assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,521,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,522,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,523,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,524,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,525,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,527,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,528,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,529,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,530,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,531,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,535,private RealVector columnToVector(double[][] column) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,536,double[] data = new double[column.length];
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,537,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,538,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,540,"return new RealVectorImpl(data, false);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,543,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,544,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,545,SparseRealMatrix m1 = (SparseRealMatrix) m.copy();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,546,SparseRealMatrix mt = (SparseRealMatrix) m.transpose();
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,547,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,548,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,549,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,550,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,551,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,552,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,553,assertFalse(m.equals(createSparseMatrix(bigSingular)));
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,556,public void testToString() {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,557,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,558,"assertEquals(""SparseRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,559,m.toString());
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,560,"m = new SparseRealMatrix(1, 1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,561,"assertEquals(""SparseRealMatrix{{0.0}}"", m.toString());"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,564,public void testSetSubMatrix() throws Exception {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,565,SparseRealMatrix m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,566,"m.setSubMatrix(detData2, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,567,RealMatrix expected = createSparseMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,568,"{ 1.0, 2.0, 3.0 }, { 2.0, 1.0, 3.0 }, { 1.0, 2.0, 4.0 } });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,569,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,571,"m.setSubMatrix(detData2, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,572,expected = createSparseMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,573,"{ 1.0, 3.0, 3.0 }, { 2.0, 4.0, 3.0 }, { 1.0, 2.0, 4.0 } });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,574,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,576,"m.setSubMatrix(testDataPlus2, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,577,expected = createSparseMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,578,"{ 3.0, 4.0, 5.0 }, { 4.0, 7.0, 5.0 }, { 3.0, 2.0, 10.0 } });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,579,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,581,// javadoc example
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,582,SparseRealMatrix matrix =
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,583,(SparseRealMatrix) createSparseMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,584,"{ 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 0, 1, 2 } });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,585,"matrix.setSubMatrix(new double[][] { { 3, 4 }, { 5, 6 } }, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,586,expected = createSparseMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,587,"{ 1, 2, 3, 4 }, { 5, 3, 4, 8 }, { 9, 5, 6, 2 } });"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,588,"assertEquals(expected, matrix);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,590,// dimension overflow
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,591,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,592,"m.setSubMatrix(testData, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,593,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,594,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,595,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,597,// dimension underflow
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,598,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,599,"m.setSubMatrix(testData, -1, 1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,600,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,601,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,602,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,604,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,605,"m.setSubMatrix(testData, 1, -1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,606,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,607,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,608,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,611,// null
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,612,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,613,"m.setSubMatrix(null, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,614,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,615,} catch (NullPointerException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,616,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,618,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,619,"new SparseRealMatrix(0, 0);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,620,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,621,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,622,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,625,// ragged
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,626,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,627,"m.setSubMatrix(new double[][] { { 1 }, { 2, 3 } }, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,628,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,629,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,630,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,633,// empty
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,634,try {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,635,"m.setSubMatrix(new double[][] { {} }, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,636,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,637,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,638,// expected
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,643,// --------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,645,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,646,"protected void assertClose(String msg, RealMatrix m, RealMatrix n,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,647,double tolerance) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,648,"assertTrue(msg, m.subtract(n).getNorm() < tolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,651,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,652,"protected void assertClose(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,653,double tolerance) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,654,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,655,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,657,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,658,"assertEquals(msg + "" "" + i + "" elements differ"", m[i], n[i],"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,659,tolerance);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,663,private SparseRealMatrix createSparseMatrix(double[][] data) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,664,"SparseRealMatrix matrix = new SparseRealMatrix(data.length, data[0].length);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,665,for (int row = 0; row < data.length; row++) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,666,for (int col = 0; col < data[row].length; col++) {
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,667,"matrix.setEntry(row, col, data[row][col]);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,670,return matrix;

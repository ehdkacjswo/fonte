is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,28,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,29,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,39,"ublic class PolynomialFunction implements DifferentiableUnivariateFunction, Serializable {"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,41,"public class PolynomialFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction, Serializable {"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,143,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,144,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,145,* @throws NoDataException if {@code coefficients} is empty.
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,146,* @throws NullArgumentException if {@code coefficients} is {@code null}.
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,148,public DerivativeStructure value(final DerivativeStructure t)
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,149,"throws NullArgumentException, NoDataException {"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,150,MathUtils.checkNotNull(coefficients);
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,151,int n = coefficients.length;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,152,if (n == 0) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,153,throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,155,DerivativeStructure result =
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,156,"new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,157,for (int j = n - 2; j >= 0; j--) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,158,result = result.multiply(t).add(coefficients[j]);
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,160,return result;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,24,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,25,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,64,ublic class PolynomialSplineFunction implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,66,"public class PolynomialSplineFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,174,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,175,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,177,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,178,final double t0 = t.getValue();
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,179,if (t0 < knots[0] || t0 > knots[n]) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,180,"throw new OutOfRangeException(t0, knots[0], knots[n]);"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,182,"int i = Arrays.binarySearch(knots, t0);"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,183,if (i < 0) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,184,i = -i - 2;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,186,// This will handle the case where t is the last knot value
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,187,"// There are only n-1 polynomials, so if t is the last knot"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,188,// then we will use the last polynomial to calculate the value.
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,189,if ( i >= polynomials.length ) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,190,i--;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,192,return polynomials[i].value(t.subtract(knots[i]));

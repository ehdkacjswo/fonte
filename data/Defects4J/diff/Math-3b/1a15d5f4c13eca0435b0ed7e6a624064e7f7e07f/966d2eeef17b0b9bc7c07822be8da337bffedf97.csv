is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,685,eturn numerator.doubleValue() / denominator.doubleValue();
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,685,double result = numerator.doubleValue() / denominator.doubleValue();
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,686,if (Double.isNaN(result)) {
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,687,// Numerator and/or denominator must be out of range:
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,688,// Calculate how far to shift them to put them in range.
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,689,"int shift = Math.max(numerator.bitLength(),"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,690,denominator.bitLength()) - Double.MAX_EXPONENT;
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,691,result = numerator.shiftRight(shift).doubleValue() /
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,692,denominator.shiftRight(shift).doubleValue();
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,694,return result;
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,729,eturn numerator.floatValue() / denominator.floatValue();
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,738,float result = numerator.floatValue() / denominator.floatValue();
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,739,if (Double.isNaN(result)) {
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,740,// Numerator and/or denominator must be out of range:
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,741,// Calculate how far to shift them to put them in range.
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,742,"int shift = Math.max(numerator.bitLength(),"
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,743,denominator.bitLength()) - Float.MAX_EXPONENT;
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,744,result = numerator.shiftRight(shift).floatValue() /
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,745,denominator.shiftRight(shift).floatValue();
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,747,return result;
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,201,// MATH-744
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,202,@Test
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,203,public void testDoubleValueForLargeNumeratorAndDenominator() {
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,204,final BigInteger pow400 = BigInteger.TEN.pow(400);
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,205,final BigInteger pow401 = BigInteger.TEN.pow(401);
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,206,"final BigInteger two = new BigInteger(""2"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,207,"final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,208,pow400.multiply(two));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,210,"Assert.assertEquals(5, large.doubleValue(), 1e-15);"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,213,// MATH-744
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,214,@Test
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,215,public void testFloatValueForLargeNumeratorAndDenominator() {
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,216,final BigInteger pow400 = BigInteger.TEN.pow(400);
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,217,final BigInteger pow401 = BigInteger.TEN.pow(401);
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,218,"final BigInteger two = new BigInteger(""2"");"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,219,"final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),"
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,220,pow400.multiply(two));
True,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,222,"Assert.assertEquals(5, large.floatValue(), 1e-15);"

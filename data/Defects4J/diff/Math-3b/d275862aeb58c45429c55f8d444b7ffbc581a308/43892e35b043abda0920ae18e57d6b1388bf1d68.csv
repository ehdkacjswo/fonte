is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,60,* @author Mark Diggory
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,163,* Returns the geometric mean for this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,164,* @see org.apache.commons.math.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,166,public double getGeometricMean() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,167,"double gMean = Math.pow(getProduct(),(1.0/getN()));"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,168,return gMean;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,172,* Returns the product for this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,173,* @see org.apache.commons.math.Univariate#getProduct()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,175,public double getProduct() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,176,double product = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,177,if( getN() > 0 ) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,178,product = 1.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,179,for( int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,180,product *= getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,183,return product;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,116,umber n = (Number) list.get(((list.size() - 1) - windowSize) +
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,117,ndex) ;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,117,int calcIndex = (list.size() - windowSize) + index;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,119,Number n = (Number) list.get(calcIndex);
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,125,"System.out.println( ""Returning value: "" + value );"
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,129,ublic double getN() {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,130,ouble N = 0.0;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,132,public int getN() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,133,int N = 0;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,ublic double getN() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,public int getN() {
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64, @version $Revision: 1.4 $ $Date: 2003/05/20 18:15:29 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64,* @author Mark Diggory
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,65,* @version $Revision: 1.5 $ $Date: 2003/05/21 17:59:19 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,83,* Returns the geometric mean of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,84,* @return mean value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,86,public abstract double getGeometricMean();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89,* Returns the product of all values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,90,* @return product of all values
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,92,public abstract double getProduct();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,106,ublic abstract double getN();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,119,public abstract int getN();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67, @version $Revision: 1.5 $ $Date: 2003/05/20 18:15:29 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67,* @author Mark Diggory
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,68,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,69,* @version $Revision: 1.6 $ $Date: 2003/05/21 17:59:19 $
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,87,rivate double n = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,89,private int n = 0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,97,/** produce of values that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,98,private double product = Double.NaN;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,121,eturn sum/n;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,126,return (sum / (double) n );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,130,* Returns the geometric mean of the values that have been added
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,131,* @return geometric mean value
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,133,public double getGeometricMean() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,134,"return Math.pow(product,( 1.0/n ) );"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,138,* Returns the product of all values add to this Univariate
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,139,* @return product value
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,141,public double getProduct() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,142,return product;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,136,ariance =  (sumsq - xbar*xbar*n)/(n-1);
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,157,variance =  (sumsq - xbar*xbar*((double) n))/(((double) n)-1);
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,180,"// The default value of product is NaN, if you"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,181,// try to retrieve the product for a univariate with
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,182,"// no values, we return NaN."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,184,"// If this is the first call to insertValue, we want"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,185,"// to set product to 1.0, so that our first element"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,186,"// is not ""cancelled"" out by the NaN."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,187,if( n == 0 ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,188,product = 1.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,163,/ Remove the influence of discarded value ONLY
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,164,/ if the discard value has any meaning.  In other words
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165,"/ don't discount until we ""roll""."
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,f( windowSize > doubleArray.getNumElements() ) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,167,/ Remove the influence of the discarded
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,168,um -= discarded;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,169,umsq -= discarded * discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,196,// Remove the influence of the discarded
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,197,sum -= discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,198,sumsq -= discarded * discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,208,// Note that the product CANNOT be discarded
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,209,// properly because one cannot discount the effect
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,210,"// of a zero value.  For this reason, the product"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,211,// of the altered array must be calculated from the
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,212,// current array elements.  Product must be recalculated
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,213,"// everytime the array is ""rolled"""
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,214,product = 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,215,double[] elements = doubleArray.getElements();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,216,for( int i = 0; i < elements.length; i++ ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,217,product *= elements[i];
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,227,product *= v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,238,product *= v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,223,ublic double getN() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,266,public int getN() {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,262,his.n = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,305,this.n = 0;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,67, @version $Revision: 1.2 $ $Date: 2003/05/15 15:38:48 $
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,67,* @version $Revision: 1.3 $ $Date: 2003/05/21 17:59:20 $
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,155,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,156,ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,157,u.setWindowSize(10);
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,159,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,160,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,161,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,162,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,164,"assertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,165,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,167,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,168,// of a discarded element
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,169,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,170,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,172,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,174,"assertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,175,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,64, @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,64,* @version $Revision: 1.2 $ $Date: 2003/05/21 17:59:20 $
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,146,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,147,StoreUnivariateImpl u = new StoreUnivariateImpl();
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,148,u.setWindowSize(10);
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,150,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,151,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,152,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,153,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,155,"assertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,156,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,158,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,159,// of a discarded element
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,160,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,161,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,163,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,165,"assertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/StoreUnivariateImplTest.java,166,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64, @version $Revision: 1.1 $ $Date: 2003/05/15 05:39:01 $
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,64,* @version $Revision: 1.2 $ $Date: 2003/05/21 17:59:20 $
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,129,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,130,UnivariateImpl u = new UnivariateImpl(10);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,132,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,133,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,134,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,135,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,137,"assertEquals( ""Product not expected"", 24.0, u.getProduct(), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,138,"assertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,140,// Now test rolling - UnivariateImpl should discount the contribution
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,141,// of a discarded element
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,142,for( int i = 0; i < 10; i++ ) {
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,143,u.addValue( i + 2 );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,145,"// Values should be (2,3,4,5,6,7,8,9,10,11)"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,147,"assertEquals( ""Product not expected"", 39916800.0, u.getProduct(), 0.00001 );"
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,148,"assertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,66, @version $Revision: 1.1 $
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,66,* @version $Revision: 1.2 $
False,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,108,"ssertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,108,"assertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
False,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,110,"""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,110,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(), tolerance);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,35," getters). In addition, a rotation can also be built implicitely"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,35,"* getters). In addition, a rotation can also be built implicitly"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,40, followong single line of code:</p>
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,40,* following single line of code:</p>
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,52, rotation transforms the coordinates coordinates of this vector in inertial
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,52,* frames change. The rotation transforms the coordinates of the vector in inertial
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,54," case, the rotation implicitely defines the relation between the two frames."
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,55," Another example could be a telescope control application, where the rotation"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,54,"* case, the rotation implicitly defines the relation between the two frames.</p>"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,55,"* <p>Another example could be a telescope control application, where the rotation"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,58, case the rotation transforms the directionf at rest in a topocentric frame
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,59," into the sighting direction in the same topocentric frame. In many case, both"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,60," approaches will be combined, in our telescope example, we will probably also"
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,61, need to transform the observing direction in the topocentric frame into the
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,62, observing direction in inertial frame taking into account the observatory
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,63, location and the Earth rotation.</p>
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,58,* case the rotation transforms the direction at rest in a topocentric frame
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,59,* into the sighting direction in the same topocentric frame. This implies in this
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,60,* case the frame is fixed and the vector moves.</p>
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,61,"* <p>In many case, both approaches will be combined. In our telescope example,"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,62,* we will probably also need to transform the observing direction in the topocentric
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,63,* frame into the observing direction in inertial frame taking into account the observatory
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,64,"* location and the Earth rotation, which would essentially be an application of the"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,65,* first approach.</p>
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,65," <p>These examples show that a rotation is what the user wants it to be, so this"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,67,* <p>These examples show that a rotation is what the user wants it to be. This
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,119,* <p>Note that some conventions put the scalar part of the quaternion
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,120,* as the 4<sup>th</sup> component and the vector part as the first three
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,121,* components. This is <em>not</em> our convention. We put the scalar part
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,122,* as the first component.</p>
False,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,148," the axis and PI/2 as the angle to this constructor, and then"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,154,"* the axis and &pi;/2 as the angle to this constructor, and then"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,157,* <p>Another way to represent our convention is to say that a rotation
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,158,"* of angle &theta; about the unit vector (x, y, z) is the same as the"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,159,"* rotation build from quaternion components { cos(-&theta;/2),"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,160,"* x * sin(-&theta;/2), y * sin(-&theta;/2), z * sin(-&theta;/2) }."
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,161,* Note the minus sign on the angle!</p>
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,162,* <p>On the one hand this convention is consistent with a vectorial
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,163,"* perspective (moving vectors in fixed frames), on the other hand it"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,164,* is different from conventions with a frame perspective (fixed vectors
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,165,* viewed from different frames) like the ones used for example in spacecraft
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,166,* attitude community or in the graphics community.</p>
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,547,"* @see #Rotation(Vector3D, double)"
True,src/main/java/org/apache/commons/math/geometry/Rotation.java,src/main/java/org/apache/commons/math/geometry/Rotation.java,563,"* @see #Rotation(Vector3D, double)"

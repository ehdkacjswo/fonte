is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,21,import java.util.Arrays;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,25,mport org.apache.commons.math.complex.RootsOfUnity;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,88,tatic final long serialVersionUID = 20120501L;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,88,static final long serialVersionUID = 20120802L;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,91,* {@code W_SUB_N_R[i]} is the real part of
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,92,* {@code exp(- 2 * i * pi / n)}:
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,93,"* {@code W_SUB_N_R[i] = cos(2 * pi/ n)}, where {@code n = 2^i}."
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,95,private static final double[] W_SUB_N_R =
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,96,"{  0x1.0p0, -0x1.0p0, 0x1.1a62633145c07p-54, 0x1.6a09e667f3bcdp-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,97,", 0x1.d906bcf328d46p-1, 0x1.f6297cff75cbp-1, 0x1.fd88da3d12526p-1, 0x1.ff621e3796d7ep-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,98,", 0x1.ffd886084cd0dp-1, 0x1.fff62169b92dbp-1, 0x1.fffd8858e8a92p-1, 0x1.ffff621621d02p-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,99,", 0x1.ffffd88586ee6p-1, 0x1.fffff62161a34p-1, 0x1.fffffd8858675p-1, 0x1.ffffff621619cp-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,100,", 0x1.ffffffd885867p-1, 0x1.fffffff62161ap-1, 0x1.fffffffd88586p-1, 0x1.ffffffff62162p-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,101,", 0x1.ffffffffd8858p-1, 0x1.fffffffff6216p-1, 0x1.fffffffffd886p-1, 0x1.ffffffffff621p-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,102,", 0x1.ffffffffffd88p-1, 0x1.fffffffffff62p-1, 0x1.fffffffffffd9p-1, 0x1.ffffffffffff6p-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,103,", 0x1.ffffffffffffep-1, 0x1.fffffffffffffp-1, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,104,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,105,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,106,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,107,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,108,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,109,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,110,", 0x1.0p0, 0x1.0p0, 0x1.0p0, 0x1.0p0"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,111,", 0x1.0p0, 0x1.0p0, 0x1.0p0 };"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,114,* {@code W_SUB_N_I[i]} is the imaginary part of
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,115,* {@code exp(- 2 * i * pi / n)}:
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,116,"* {@code W_SUB_N_I[i] = -sin(2 * pi/ n)}, where {@code n = 2^i}."
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,118,private static final double[] W_SUB_N_I =
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,119,"{  0x1.1a62633145c07p-52, -0x1.1a62633145c07p-53, -0x1.0p0, -0x1.6a09e667f3bccp-1"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,120,", -0x1.87de2a6aea963p-2, -0x1.8f8b83c69a60ap-3, -0x1.917a6bc29b42cp-4, -0x1.91f65f10dd814p-5"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,121,", -0x1.92155f7a3667ep-6, -0x1.921d1fcdec784p-7, -0x1.921f0fe670071p-8, -0x1.921f8becca4bap-9"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,122,", -0x1.921faaee6472dp-10, -0x1.921fb2aecb36p-11, -0x1.921fb49ee4ea6p-12, -0x1.921fb51aeb57bp-13"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,123,", -0x1.921fb539ecf31p-14, -0x1.921fb541ad59ep-15, -0x1.921fb5439d73ap-16, -0x1.921fb544197ap-17"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,124,", -0x1.921fb544387bap-18, -0x1.921fb544403c1p-19, -0x1.921fb544422c2p-20, -0x1.921fb54442a83p-21"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,125,", -0x1.921fb54442c73p-22, -0x1.921fb54442cefp-23, -0x1.921fb54442d0ep-24, -0x1.921fb54442d15p-25"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,126,", -0x1.921fb54442d17p-26, -0x1.921fb54442d18p-27, -0x1.921fb54442d18p-28, -0x1.921fb54442d18p-29"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,127,", -0x1.921fb54442d18p-30, -0x1.921fb54442d18p-31, -0x1.921fb54442d18p-32, -0x1.921fb54442d18p-33"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,128,", -0x1.921fb54442d18p-34, -0x1.921fb54442d18p-35, -0x1.921fb54442d18p-36, -0x1.921fb54442d18p-37"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,129,", -0x1.921fb54442d18p-38, -0x1.921fb54442d18p-39, -0x1.921fb54442d18p-40, -0x1.921fb54442d18p-41"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,130,", -0x1.921fb54442d18p-42, -0x1.921fb54442d18p-43, -0x1.921fb54442d18p-44, -0x1.921fb54442d18p-45"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,131,", -0x1.921fb54442d18p-46, -0x1.921fb54442d18p-47, -0x1.921fb54442d18p-48, -0x1.921fb54442d18p-49"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,132,", -0x1.921fb54442d18p-50, -0x1.921fb54442d18p-51, -0x1.921fb54442d18p-52, -0x1.921fb54442d18p-53"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,133,", -0x1.921fb54442d18p-54, -0x1.921fb54442d18p-55, -0x1.921fb54442d18p-56, -0x1.921fb54442d18p-57"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,134,", -0x1.921fb54442d18p-58, -0x1.921fb54442d18p-59, -0x1.921fb54442d18p-60 };"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,98,** The roots of unity. */
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,99,rivate RootsOfUnity roots = new RootsOfUnity();
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,182,"public static void bitReversalShuffle2(double[] a, double[] b) {"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,183,final int n = a.length;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,184,assert(b.length == n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,185,final int halfOfN = n >> 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,187,int j = 0;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,188,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,189,if (i < j) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,190,// swap indices i & j
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,191,double temp = a[i];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,192,a[i] = a[j];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,193,a[j] = temp;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,195,temp = b[i];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,196,b[i] = b[j];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,197,b[j] = temp;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,200,int k = halfOfN;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,201,while (k <= j && k > 0) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,202,j -= k;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,203,k >>= 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,205,j += k;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,210,* Computes the standard transform of the specified complex data. The
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,211,* computation is done in place. The input data is laid out as follows
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,212,* <ul>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,213,"* <li>{@code dataRI[0][i]} is the real part of the {@code i}-th data point,"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,214,* </li>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,215,* <li>{@code dataRI[1][i]} is the imaginary part of the {@code i}-th data
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,216,* point.</li>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,217,* </ul>
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,219,* @param dataRI the two dimensional array of real and imaginary parts of
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,220,* the data
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,221,* @param inverse {@code true} if the inverse standard transform must be
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,222,* performed
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,223,* @throws DimensionMismatchException if the number of rows of the specified
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,224,"* array is not two, or the array is not rectangular"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,225,* @throws MathIllegalArgumentException if the number of data points is not
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,226,* a power of two
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,228,"public static void transformInPlace(final double[][] dataRI,"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,229,boolean inverse) throws
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,230,"DimensionMismatchException, MathIllegalArgumentException {"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,232,if (dataRI.length != 2) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,233,"throw new DimensionMismatchException(dataRI.length, 2);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,235,final double[] dataR = dataRI[0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,236,final double[] dataI = dataRI[1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,237,if (dataR.length != dataI.length) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,238,"throw new DimensionMismatchException(dataI.length, dataR.length);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,241,final int n = dataR.length;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,242,if (!ArithmeticUtils.isPowerOfTwo(n)) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,243,throw new MathIllegalArgumentException(
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,244,"LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,245,Integer.valueOf(n));
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,248,if (n == 1) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,249,return;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,250,} else if (n == 2) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,251,final double srcR0 = dataR[0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,252,final double srcI0 = dataI[0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,253,final double srcR1 = dataR[1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,254,final double srcI1 = dataI[1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,256,// X_0 = x_0 + x_1
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,257,dataR[0] = srcR0 + srcR1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,258,dataI[0] = srcI0 + srcI1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,259,// X_1 = x_0 - x_1
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,260,dataR[1] = srcR0 - srcR1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,261,dataI[1] = srcI0 - srcI1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,263,if (inverse) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,264,dataR[0] /= 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,265,dataI[0] /= 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,266,dataR[1] /= 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,267,dataI[1] /= 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,269,return;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,272,"bitReversalShuffle2(dataR, dataI);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,274,// Do 4-term DFT.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,275,if (inverse) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,276,for (int i0 = 0; i0 < n; i0 += 4) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,277,final int i1 = i0 + 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,278,final int i2 = i0 + 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,279,final int i3 = i0 + 3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,281,final double srcR0 = dataR[i0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,282,final double srcI0 = dataI[i0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,283,final double srcR1 = dataR[i2];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,284,final double srcI1 = dataI[i2];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,285,final double srcR2 = dataR[i1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,286,final double srcI2 = dataI[i1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,287,final double srcR3 = dataR[i3];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,288,final double srcI3 = dataI[i3];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,290,// 4-term DFT
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,291,// X_0 = x_0 + x_1 + x_2 + x_3
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,292,dataR[i0] = srcR0 + srcR1 + srcR2 + srcR3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,293,dataI[i0] = srcI0 + srcI1 + srcI2 + srcI3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,294,// X_1 = x_0 - x_2 + j * (x_3 - x_1)
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,295,dataR[i1] = srcR0 - srcR2 + (srcI3 - srcI1);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,296,dataI[i1] = srcI0 - srcI2 + (srcR1 - srcR3);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,297,// X_2 = x_0 - x_1 + x_2 - x_3
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,298,dataR[i2] = srcR0 - srcR1 + srcR2 - srcR3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,299,dataI[i2] = srcI0 - srcI1 + srcI2 - srcI3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,300,// X_3 = x_0 - x_2 + j * (x_1 - x_3)
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,301,dataR[i3] = srcR0 - srcR2 + (srcI1 - srcI3);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,302,dataI[i3] = srcI0 - srcI2 + (srcR3 - srcR1);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,304,} else {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,305,for (int i0 = 0; i0 < n; i0 += 4) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,306,final int i1 = i0 + 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,307,final int i2 = i0 + 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,308,final int i3 = i0 + 3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,310,final double srcR0 = dataR[i0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,311,final double srcI0 = dataI[i0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,312,final double srcR1 = dataR[i2];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,313,final double srcI1 = dataI[i2];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,314,final double srcR2 = dataR[i1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,315,final double srcI2 = dataI[i1];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,316,final double srcR3 = dataR[i3];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,317,final double srcI3 = dataI[i3];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,319,// 4-term DFT
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,320,// X_0 = x_0 + x_1 + x_2 + x_3
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,321,dataR[i0] = srcR0 + srcR1 + srcR2 + srcR3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,322,dataI[i0] = srcI0 + srcI1 + srcI2 + srcI3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,323,// X_1 = x_0 - x_2 + j * (x_3 - x_1)
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,324,dataR[i1] = srcR0 - srcR2 + (srcI1 - srcI3);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,325,dataI[i1] = srcI0 - srcI2 + (srcR3 - srcR1);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,326,// X_2 = x_0 - x_1 + x_2 - x_3
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,327,dataR[i2] = srcR0 - srcR1 + srcR2 - srcR3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,328,dataI[i2] = srcI0 - srcI1 + srcI2 - srcI3;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,329,// X_3 = x_0 - x_2 + j * (x_1 - x_3)
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,330,dataR[i3] = srcR0 - srcR2 + (srcI3 - srcI1);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,331,dataI[i3] = srcI0 - srcI2 + (srcR1 - srcR3);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,335,int lastN0 = 4;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,336,int lastLogN0 = 2;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,337,while (lastN0 < n) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,338,int n0 = lastN0 << 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,339,int logN0 = lastLogN0 + 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,340,double wSubN0R = W_SUB_N_R[logN0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,341,double wSubN0I = W_SUB_N_I[logN0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,342,if (inverse) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,343,wSubN0I = -wSubN0I;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,346,// Combine even/odd transforms of size lastN0 into a transform of size N0 (lastN0 * 2).
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,347,for (int destEvenStartIndex = 0; destEvenStartIndex < n; destEvenStartIndex += n0) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,348,int destOddStartIndex = destEvenStartIndex + lastN0;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,350,double wSubN0ToRR = 1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,351,double wSubN0ToRI = 0;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,353,for (int r = 0; r < lastN0; r++) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,354,double grR = dataR[destEvenStartIndex + r];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,355,double grI = dataI[destEvenStartIndex + r];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,356,double hrR = dataR[destOddStartIndex + r];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,357,double hrI = dataI[destOddStartIndex + r];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,359,// dest[destEvenStartIndex + r] = Gr + WsubN0ToR * Hr
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,360,dataR[destEvenStartIndex + r] = grR + wSubN0ToRR * hrR - wSubN0ToRI * hrI;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,361,dataI[destEvenStartIndex + r] = grI + wSubN0ToRR * hrI + wSubN0ToRI * hrR;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,362,// dest[destOddStartIndex + r] = Gr - WsubN0ToR * Hr
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,363,dataR[destOddStartIndex + r] = grR - (wSubN0ToRR * hrR - wSubN0ToRI * hrI);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,364,dataI[destOddStartIndex + r] = grI - (wSubN0ToRR * hrI + wSubN0ToRI * hrR);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,366,// WsubN0ToR *= WsubN0R
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,367,double nextWsubN0ToRR = wSubN0ToRR * wSubN0R - wSubN0ToRI * wSubN0I;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,368,double nextWsubN0ToRI = wSubN0ToRR * wSubN0I + wSubN0ToRI * wSubN0R;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,369,wSubN0ToRR = nextWsubN0ToRR;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,370,wSubN0ToRI = nextWsubN0ToRI;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,374,lastN0 = n0;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,375,lastLogN0 = logN0;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,378,if (inverse) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,379,final double scaleFactor = 1.0 / ((double) n);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,380,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,381,dataR[i] *= scaleFactor;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,382,dataI[i] *= scaleFactor;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,396,final double[][] dataRI = new double[][] {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,397,"Arrays.copyOf(f, f.length), new double[f.length]"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,400,"transformInPlace(dataRI, false);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,151,"eturn TransformUtils.scaleArray(fft(f, false), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,404,"TransformUtils.scaleArray(dataRI[0], s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,405,"TransformUtils.scaleArray(dataRI[1], s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,153,"eturn fft(f, false);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,408,return TransformUtils.createComplexArray(dataRI);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,176,f (unitary) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,177,inal double s = 1.0 / FastMath.sqrt(n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,178,"eturn TransformUtils.scaleArray(fft(data, false), s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,180,"eturn fft(data, false);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,431,return transform(data);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,192,oots.computeRoots(-f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,443,final double[][] dataRI = TransformUtils.createRealImaginaryArray(f);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,445,"transformInPlace(dataRI, false);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,195,"eturn TransformUtils.scaleArray(fft(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,449,"TransformUtils.scaleArray(dataRI[0], s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,450,"TransformUtils.scaleArray(dataRI[1], s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,197,eturn fft(f);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,453,return TransformUtils.createComplexArray(dataRI);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,209,inal double s = 1.0 / (unitary ? FastMath.sqrt(f.length) : f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,210,"eturn TransformUtils.scaleArray(fft(f, true), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,465,final double[][] dataRI = new double[][] {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,466,"Arrays.copyOf(f, f.length), new double[f.length]"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,469,"transformInPlace(dataRI, true);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,471,if (unitary) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,472,final double s = FastMath.sqrt(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,473,"TransformUtils.scaleArray(dataRI[0], s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,474,"TransformUtils.scaleArray(dataRI[1], s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,477,return TransformUtils.createComplexArray(dataRI);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,232,inal double s = 1.0 / (unitary ? FastMath.sqrt(n) : n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,233,"eturn TransformUtils.scaleArray(fft(data, true), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,499,return inverseTransform(data);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,245,oots.computeRoots(f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,246,inal double s = 1.0 / (unitary ? FastMath.sqrt(f.length) : f.length);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,247,"eturn TransformUtils.scaleArray(fft(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,511,final double[][] dataRI = TransformUtils.createRealImaginaryArray(f);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,512,final double[] dataR = dataRI[0];
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,513,final double[] dataI = dataRI[1];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,251, Returns the FFT of the specified real data set. Performs the base-4
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,252, Cooley-Tukey FFT algorithm.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,254, @param f the real data array to be transformed
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,255, @param isInverse {@code true} if inverse transform is to be carried out
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,256, @return the complex transformed array
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,257, @throws MathIllegalArgumentException if the length of the data array is
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,258, not a power of two
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,260,"rotected Complex[] fft(double[] f, boolean isInverse) {"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,262,f (!ArithmeticUtils.isPowerOfTwo(f.length)) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,263,hrow new MathIllegalArgumentException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,264,"ocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,265,nteger.valueOf(f.length));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,267,omplex[] transformed = new Complex[f.length];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,268,f (f.length == 1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,269,"ransformed[0] = new Complex(f[0], 0.0);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,270,eturn transformed;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,273,"/ Rather than the naive real to complex conversion, pack 2N"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,274,/ real numbers into N complex numbers for better performance.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,275,nt n = f.length >> 1;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,276,omplex[] repacked = new Complex[n];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,277,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,278,"epacked[i] = new Complex(f[2 * i], f[2 * i + 1]);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,280,oots.computeRoots(isInverse ? n : -n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,281,omplex[] z = fft(repacked);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,283,/ reconstruct the FFT result for the original array
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,284,oots.computeRoots(isInverse ? 2 * n : -2 * n);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,285,"ransformed[0] = new Complex(2 * (z[0].getReal() + z[0].getImaginary()), 0.0);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,286,"ransformed[n] = new Complex(2 * (z[0].getReal() - z[0].getImaginary()), 0.0);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,287,or (int i = 1; i < n; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,288,omplex a = z[n - i].conjugate();
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,289,omplex b = z[i].add(a);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,290,omplex c = z[i].subtract(a);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,291,/Complex D = roots.getOmega(i).multiply(Complex.I);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,292,"omplex d = new Complex(-roots.getImaginary(i),"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,293,oots.getReal(i));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,294,ransformed[i] = b.subtract(c.multiply(d));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,295,ransformed[2 * n - i] = transformed[i].conjugate();
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,298,"eturn TransformUtils.scaleArray(transformed, 0.5);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,515,"transformInPlace(dataRI, true);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,302, Returns the FFT of the specified complex data set. Performs the base-4
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,303, Cooley-Tukey FFT algorithm.
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,305, @param data the complex data array to be transformed
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,306, @return the complex transformed array
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,307, @throws MathIllegalArgumentException if the length of the data array is
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,308, not a power of two
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,310,rotected Complex[] fft(Complex[] data) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,312,f (!ArithmeticUtils.isPowerOfTwo(data.length)) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,313,hrow new MathIllegalArgumentException(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,314,"ocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,315,nteger.valueOf(data.length));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,318,inal int n = data.length;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,319,inal Complex[] f = new Complex[n];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,321,/ initial simple cases
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,322,f (n == 1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,323,[0] = data[0];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,324,eturn f;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,326,f (n == 2) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,327,[0] = data[0].add(data[1]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,328,[1] = data[0].subtract(data[1]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,329,eturn f;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,332,/ permute original data array in bit-reversal order
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,333,nt ii = 0;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,334,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,335,[i] = data[ii];
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,336,nt k = n >> 1;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,337,hile (ii >= k && k > 0) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,338,i -= k; k >>= 1;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,340,i += k;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,343,/ the bottom base-4 round
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,344,or (int i = 0; i < n; i += 4) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,345,inal Complex a = f[i].add(f[i + 1]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,346,inal Complex b = f[i + 2].add(f[i + 3]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,347,inal Complex c = f[i].subtract(f[i + 1]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,348,inal Complex d = f[i + 2].subtract(f[i + 3]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,349,inal Complex e1 = c.add(d.multiply(Complex.I));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,350,inal Complex e2 = c.subtract(d.multiply(Complex.I));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,351,[i] = a.add(b);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,352,[i + 2] = a.subtract(b);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,353,/ omegaCount indicates forward or inverse transform
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,354,[i + 1] = roots.isCounterClockWise() ? e1 : e2;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,355,[i + 3] = roots.isCounterClockWise() ? e2 : e1;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,517,if (unitary) {
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,518,final double s = FastMath.sqrt(f.length);
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,519,"TransformUtils.scaleArray(dataR, s);"
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,520,"TransformUtils.scaleArray(dataI, s);"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,358,/ iterations from bottom to top take O(N*logN) time
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,359,or (int i = 4; i < n; i <<= 1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,360,inal int m = n / (i << 1);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,361,or (int j = 0; j < n; j += i << 1) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,362,or (int k = 0; k < i; k++) {
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,363,/z = f[i+j+k].multiply(roots.getOmega(k*m));
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,364,inal int km = k * m;
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,365,inal double omegaKmReal = roots.getReal(km);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,366,inal double omegaKmImag = roots.getImaginary(km);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,367,/z = f[i+j+k].multiply(omega[k*m]);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,368,inal Complex z = new Complex(
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,369,[i + j + k].getReal() * omegaKmReal -
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,370,"[i + j + k].getImaginary() * omegaKmImag,"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,371,[i + j + k].getReal() * omegaKmImag +
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,372,[i + j + k].getImaginary() * omegaKmReal);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,374,[i + j + k] = f[j + k].subtract(z);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,375,[j + k] = f[j + k].add(z);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,379,eturn f;
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,523,return TransformUtils.createComplexArray(dataRI);
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,398, @deprecated see
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,399," <a href=""https://issues.apache.org/jira/browse/MATH-736"">MATH-736</a>"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,401,Deprecated
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,471, @deprecated see MATH-736
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,473,Deprecated
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,19,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,23,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,34,* Table of the powers of 2 to facilitate binary search lookup.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,36,* @see #exactLog2(int)
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,38,private static final int[] POWERS_OF_TWO = {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,39,"0x00000001, 0x00000002, 0x00000004, 0x00000008, 0x00000010, 0x00000020,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,40,"0x00000040, 0x00000080, 0x00000100, 0x00000200, 0x00000400, 0x00000800,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,41,"0x00001000, 0x00002000, 0x00004000, 0x00008000, 0x00010000, 0x00020000,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,42,"0x00040000, 0x00080000, 0x00100000, 0x00200000, 0x00400000, 0x00800000,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,43,"0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,44,0x40000000
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,86,* Builds a new two dimensional array of {@code double} filled with the real
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,87,* and imaginary parts of the specified {@link Complex} numbers. In the
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,88,"* returned array {@code dataRI}, the data is laid out as follows"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,89,* <ul>
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,90,"* <li>{@code dataRI[0][i] = dataC[i].getReal()},</li>"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,91,* <li>{@code dataRI[1][i] = dataC[i].getImaginary()}.</li>
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,92,* </ul>
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,94,* @param dataC the array of {@link Complex} data to be transformed
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,95,* @return a two dimensional array filled with the real and imaginary parts
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,96,* of the specified complex input
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,98,public static double[][] createRealImaginaryArray(final Complex[] dataC) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,99,final double[][] dataRI = new double[2][dataC.length];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,100,final double[] dataR = dataRI[0];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,101,final double[] dataI = dataRI[1];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,102,for (int i = 0; i < dataC.length; i++) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,103,final Complex c = dataC[i];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,104,dataR[i] = c.getReal();
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,105,dataI[i] = c.getImaginary();
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,107,return dataRI;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,111,* Builds a new array of {@link Complex} from the specified two dimensional
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,112,"* array of real and imaginary parts. In the returned array {@code dataC},"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,113,* the data is laid out as follows
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,114,* <ul>
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,115,"* <li>{@code dataC[i].getReal() = dataRI[0][i]},</li>"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,116,* <li>{@code dataC[i].getImaginary() = dataRI[1][i]}.</li>
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,117,* </ul>
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,119,* @param dataRI the array of real and imaginary parts to be transformed
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,120,* @return an array of {@link Complex} with specified real and imaginary
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,121,* parts.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,122,* @throws DimensionMismatchException if the number of rows of the specified
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,123,"* array is not two, or the array is not rectangular"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,125,public static Complex[] createComplexArray(final double[][] dataRI)
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,126,throws DimensionMismatchException{
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,128,if (dataRI.length != 2) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,129,"throw new DimensionMismatchException(dataRI.length, 2);"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,131,final double[] dataR = dataRI[0];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,132,final double[] dataI = dataRI[1];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,133,if (dataR.length != dataI.length) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,134,"throw new DimensionMismatchException(dataI.length, dataR.length);"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,137,final int n = dataR.length;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,138,final Complex[] c = new Complex[n];
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,139,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,140,"c[i] = new Complex(dataR[i], dataI[i]);"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,142,return c;
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,147,* Returns the base-2 logarithm of the specified {@code int}. Throws an
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,148,* exception if {@code n} is not a power of two.
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,150,* @param n the {@code int} whose base-2 logarithm is to be evaluated
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,151,* @return the base-2 logarithm of {@code n}
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,152,* @throws MathIllegalArgumentException if {@code n} is not a power of two
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,154,public static int exactLog2(final int n)
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,155,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,157,"int index = Arrays.binarySearch(TransformUtils.POWERS_OF_TWO, n);"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,158,if (index < 0) {
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,159,throw new MathIllegalArgumentException(
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,160,"LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,"
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,161,Integer.valueOf(n));
True,src/main/java/org/apache/commons/math/transform/TransformUtils.java,src/main/java/org/apache/commons/math/transform/TransformUtils.java,163,return index;
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,383,"oTestTransformComplex(64, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,383,"doTestTransformComplex(64, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,471,"oTestTransformComplex(64, 1.0E-13, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,471,"doTestTransformComplex(64, 1.0E-12, forward, standard);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,508,"oTestTransformComplex(2, 1.0E-15, forward, standard);"
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,508,"doTestTransformComplex(2, 1.0E-14, forward, standard);"

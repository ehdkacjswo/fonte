is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,33,"rivate double[] vec1 = { 1d, 2d, 3d, 4d, 5d };"
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,34,"rivate double[] vec2 = { -3d, 0d, 0d, 2d, 1d };"
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,197,ealVector v = new RealVectorTestImpl(vec2.clone());
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,196,"* For non-default values, use x + 1, x + 2, etc... to make sure that"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,197,* these values are really different from x.
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,199,final double x = getPreferredEntryValue();
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,200,final double[] data = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,201,"x, x + 1d, x, x, x + 2d, x + 3d, x + 4d, x, x, x, x + 5d, x + 6d, x"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,204,RealVector v = create(data);
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,200,"ouble[] nonDefaultV2 = { -3d, 2d, 1d };"
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,201,or(Iterator<Entry> it = v.sparseIterator(); it.hasNext() && (e = it.next()) != null; i++) {
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,202,"ssert.assertEquals(nonDefaultV2[i], e.getValue(), 0);"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,207,final double[] nonDefault = {
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,208,"x + 1d, x + 2d, x + 3d, x + 4d, x + 5d, x + 6d"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,210,for (Iterator<Entry> it = v.sparseIterator(); it.hasNext(); i++) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,211,e = it.next();
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,212,"Assert.assertEquals(nonDefault[i], e.getValue(), 0);"
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,204,"ouble [] onlyOne = {0d, 1.0, 0d};"
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,205, = new RealVectorTestImpl(onlyOne);
False,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,206,or(Iterator<Entry> it = v.sparseIterator(); it.hasNext() && (e = it.next()) != null; ) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,214,"double [] onlyOne = {x, x + 1d, x};"
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,215,v = create(onlyOne);
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,216,for(Iterator<Entry> it = v.sparseIterator(); it.hasNext(); ) {
True,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,src/test/java/org/apache/commons/math3/linear/RealVectorTest.java,217,e = it.next();

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,20,import org.apache.commons.math.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,22, {@code P(D<sub>n</sup> &lt; d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,23, where {@code D<sub>n</sup> = sup_x | G(x) - Gn (x) |} for the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,24,* {@code P(D}<sub>{@code n}</sub>{@code < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,25,* where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,26, This implementation is based on [1] with certain quick
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,27, decisions for extreme values given in [2].
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,29," In short, when wanting to evaluate {@code P(D<sub>n</sup> &lt; d)},"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,30, the method in [1] is to write {@code d = (k - h) / n} for positive
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,31, integer {@code k} and {@code 0 <= h < 1}. Then
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,32, {@code P(D<sub>n</sup> &lt; d) = (n!/n^n) * t_kk}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,33," where {@code t_kk} is the (k, k)'th entry in the special matrix {@code H^n},"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,34, i.e. {@code H} to the {@code n}'th power.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36," See also <a href=""http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test"">"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,37, Kolmogorov-Smirnov test on Wikipedia</a> for details.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,39, References:
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,40," [1] Evaluating Kolmogorov's Distribution by George Marsaglia, Wai"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,41," Wan Tsang, Jingbo Wang http://www.jstatsoft.org/v08/i18/paper"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,43," [2] <a href=""http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf"">"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,44, Computing the Two-Sided Kolmogorov-Smirnov Distribution</a> by Richard Simard
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,45, and Pierre L'Ecuyer
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,47," Note that [1] contains an error in computing h, refer to"
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,48," <a href=""https://issues.apache.org/jira/browse/MATH-437"">MATH-437</a> for details."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,33,* Calculates {@code P(D}<sub>n</sub> {@code < d)}.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,35,* @param d statistic
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,36,* @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,36,* <p>Treats the distribution of the two-sided
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,37,* {@code P(D}<sub>{@code n}</sub>{@code < d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,38,* where {@code D}<sub>{@code n}</sub>{@code = sup_x | G(x) - Gn (x) |} for the
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,39,* theoretical cdf G and the emperical cdf Gn.</p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,41,* <p>This implementation is based on [1] with certain quick
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,42,* decisions for extreme values given in [2].</p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,44,"* <p>In short, when wanting to evaluate {@code P(D}<sub>{@code n}</sub>{@code < d)},"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,45,* the method in [1] is to write {@code d = (k - h) / n} for positive
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,46,* integer {@code k} and {@code 0 <= h < 1}. Then
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,47,* {@code P(D}<sub>{@code n}</sub>{@code < d) = (n!/n}<sup>{@code n}</sup>{@code ) * t_kk}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,48,"* where {@code t_kk} is the {@code (k, k)}'th entry in the special"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,49,"* matrix {@code H}<sup>{@code n}</sup>, i.e. {@code H} to the {@code n}'th power.</p>"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,51,"* <p>See also <a href=""http://en.wikipedia.org/wiki/Kolmogorov-Smirnov_test"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,52,* Kolmogorov-Smirnov test on Wikipedia</a> for details.</p>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,54,* <p>References:
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,55,* <ul>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,56,"* <li>[1] <a href=""http://www.jstatsoft.org/v08/i18/paper"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,57,"* Evaluating Kolmogorov's Distribution</a> by George Marsaglia, Wai"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,58,"* Wan Tsang, and Jingbo Wang</li>"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,59,"* <li>[2] <a href=""http://www.iro.umontreal.ca/~lecuyer/myftp/papers/ksdist.pdf"">"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,60,* Computing the Two-Sided Kolmogorov-Smirnov Distribution</a> by Richard Simard
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,61,* and Pierre L'Ecuyer</li>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,62,* </ul>
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,63,"* Note that [1] contains an error in computing h, refer to"
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,64,"* <a href=""https://issues.apache.org/jira/browse/MATH-437"">MATH-437</a> for details."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,65,* </p>
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,48,             if n <= 0
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,79,*             if {@code n <= 0}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,59, Calculates {@code P(D<sub>n</sup> &lt; d)} using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,90,* Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,67, @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,98,* @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,69,             if algorithm fails to convert h to a BigFraction in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,70,"             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,100,*             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,101,*             {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,102,*             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,103,"*             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,77, Calculates {@code P(D<sub>n</sup> &lt; d)} using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,110,* Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,86, @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,119,* @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,88,             if algorithm fails to convert h to a BigFraction in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,89,"             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,121,*             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,122,*             {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,123,*             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,124,"*             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,96, Calculates {@code P(D<sub>n</sup> &lt; d)} using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,131,* Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,104,            places to gain speed. Never choose true in real applications
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,105,            unless you are very sure; true is almost solely for
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,106,            verification purposes.
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,107, @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,139,*            places to gain speed. Almost never choose {@code true} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,140,*            real applications unless you are very sure; {@code true} is
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,141,*            almost solely for verification purposes.
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,142,* @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,109,             if algorithm fails to convert h to a BigFraction in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,110,"             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,144,*             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,145,*             {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,146,*             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,147,"*             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,149, Calculates {@code P(D<sub>n</sup> &lt; d)} exact using method
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,186,* Calculates {@code P(D}<sub>n</sub> {@code < d)} exact using method
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,153, @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,190,* @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,155,             if algorithm fails to convert h to a BigFraction in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,156,"             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,192,*             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,193,*             {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,194,*             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,195,"*             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,183, Calculates <code>P(D<sub>n</sup> &lt; d)</code> using method described in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,222,* Calculates {@code P(D}<sub>n</sub> {@code < d)} using method described in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,187, @return the two-sided probability of {@code P(D<sub>n</sup> &lt; d)}
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,226,* @return the two-sided probability of {@code P(D}<sub>n</sub> {@code < d)}
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,189,             if algorithm fails to convert h to a BigFraction in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,190,"             expressing d as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,228,*             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,229,*             {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,230,*             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,231,"*             {@code k, m} and {@code 0 <= h < 1}."
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,224, Creates H of size m x m as described in [1] (see above).
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,265,* Creates {@code H} of size {@code m x m} as described in [1] (see above).
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,229,             if algorithm fails to convert h to a BigFraction in
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,230,"             expressing x as (k - h) / m for integer k, m and 0 <= h < 1."
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,270,*             if algorithm fails to convert {@code h} to a
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,271,*             {@link org.apache.commons.math.fraction.BigFraction} in
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,272,*             expressing {@code d} as {@code (k - h) / m} for integer
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,273,"*             {@code k, m} and {@code 0 <= h < 1}."

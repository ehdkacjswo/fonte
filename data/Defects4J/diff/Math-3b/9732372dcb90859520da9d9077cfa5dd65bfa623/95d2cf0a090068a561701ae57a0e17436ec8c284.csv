is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,19,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,20,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,21,import org.apache.commons.math.util.OpenIntToFieldHashMap;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,24,* Sparse matrix implementation based on an open addressed map.
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,26,"* @version $Revision: 762117 $ $Date: 2009-04-05 09:53:35 -0700 (Sun, 05 Apr 2009) $"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,27,* @since 2.0
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,29,public class SparseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,31,*  Serial id
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,33,private static final long serialVersionUID = 9078068119297757342L;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,34,/** Storage for (sparse) matrix elements. */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,35,private final OpenIntToFieldHashMap<T> entries;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,37,* row dimension
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,39,private final int rowDimension;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,41,* column dimension
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,43,private final int columnDimension;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,47,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,48,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,50,public SparseFieldMatrix(final Field<T> field) {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,51,super(field);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,52,rowDimension = 0;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,53,columnDimension= 0;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,54,entries = new OpenIntToFieldHashMap<T>(field);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,58,* Create a new SparseFieldMatrix<T> with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,60,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,61,* @param rowDimension  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,62,* @param columnDimension  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,63,* @throws IllegalArgumentException if row or column dimension is not positive
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,65,"public SparseFieldMatrix(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,66,"final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,67,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,68,"super(field, rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,69,this.rowDimension = rowDimension;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,70,this.columnDimension = columnDimension;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,71,entries = new OpenIntToFieldHashMap<T>(field);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,75,* Copy construtor.
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,76,* @param other The instance to copy
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,78,public SparseFieldMatrix(SparseFieldMatrix<T> other){
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,79,"super(other.getField(), other.getRowDimension(), other.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,80,rowDimension = other.getRowDimension();
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,81,columnDimension = other.getColumnDimension();
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,82,entries = new OpenIntToFieldHashMap<T>(other.entries);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,86,* Generic copy construtor.
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,87,* @param other The instance to copy
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,89,public SparseFieldMatrix(FieldMatrix<T> other){
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,90,"super(other.getField(), other.getRowDimension(), other.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,91,rowDimension = other.getRowDimension();
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,92,columnDimension = other.getColumnDimension();
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,93,entries = new OpenIntToFieldHashMap<T>(getField());
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,94,for(int i=0; i < rowDimension; i++){
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,95,for(int j=0; j < columnDimension; j++){
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,96,"setEntry(i, j, other.getEntry(i, j));"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,101,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,102,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,103,"public void addToEntry(int row, int column, T increment)"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,104,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,105,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,106,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,107,"final int key = computeKey(row, column);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,108,final T value = entries.get(key).add(increment);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,109,if (getField().getZero().equals(value)) {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,110,entries.remove(key);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,111,} else {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,112,"entries.put(key, value);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,118,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,119,public FieldMatrix<T> copy() {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,120,return new SparseFieldMatrix<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,123,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,124,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,125,"public FieldMatrix<T> createMatrix(int rowDimension, int columnDimension)"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,126,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,127,"return new SparseFieldMatrix<T>(getField(), rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,130,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,131,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,132,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,133,return columnDimension;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,136,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,137,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,138,"public T getEntry(int row, int column) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,139,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,140,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,141,"return entries.get(computeKey(row, column));"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,144,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,145,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,146,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,147,return rowDimension;
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,150,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,151,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,152,"public void multiplyEntry(int row, int column, T factor)"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,153,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,154,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,155,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,156,"final int key = computeKey(row, column);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,157,final T value = entries.get(key).multiply(factor);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,158,if (getField().getZero().equals(value)) {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,159,entries.remove(key);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,160,} else {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,161,"entries.put(key, value);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,166,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,167,@Override
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,168,"public void setEntry(int row, int column, T value)"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,169,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,170,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,171,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,172,if (getField().getZero().equals(value)) {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,173,"entries.remove(computeKey(row, column));"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,174,} else {
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,175,"entries.put(computeKey(row, column), value);"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,180,* Compute the key to access a matrix element
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,181,* @param row row index of the matrix element
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,182,* @param column column index of the matrix element
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,183,* @return key within the map to access the matrix element
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,185,"private int computeKey(int row, int column) {"
True,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,src/java/org/apache/commons/math/linear/SparseFieldMatrix.java,186,return row * columnDimension + column;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,19,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,21,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,22,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,23,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,24,import org.apache.commons.math.util.OpenIntToFieldHashMap;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,27,* This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,28,"* @version $Revision: 728186 $ $Date: 2009-04-25 12:39:38 -0700 (Sat, 25 Apr 2009) $"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,29,* @since 2.0
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,31,public class SparseFieldVector<T extends FieldElement<T>> implements FieldVector<T> {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,34,*  Serial version id
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,36,private static final long serialVersionUID = 7841233292190413362L;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,37,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,38,private final Field<T> field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,39,/** Entries of the vector. */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,40,private final OpenIntToFieldHashMap<T> entries;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,41,/** Dimension of the vector. */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,42,private final int virtualSize;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,45,* Build a 0-length vector.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,46,* <p>Zero-length vectors may be used to initialized construction of vectors
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,47,* by data gathering. We start with zero-length and use either the {@link
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,48,"* #SparseFieldVector(SparseFieldVector<T>, int)} constructor"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,49,"* or one of the <code>append</code> method ({@link #append(Field<T>)}, {@link"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,50,"* #append(Field<T>[])}, {@link #append(FieldVector)}) to gather data"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,51,* into this vector.</p>
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,53,public SparseFieldVector(Field<T> field) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,54,"this(field, 0);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,59,* Construct a (dimension)-length vector of zeros.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,60,* @param dimension Size of the vector
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,61,* @param epsilon The tolerance for having a value considered zero
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,63,"public SparseFieldVector(Field<T> field, int dimension) {"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,64,this.field = field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,65,virtualSize = dimension;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,66,entries = new OpenIntToFieldHashMap<T>(field);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,70,"* Build a resized vector, for use with append."
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,71,* @param v The original vector
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,72,* @param resize The amount to resize it
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,74,"protected SparseFieldVector(SparseFieldVector<T> v, int resize) {"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,75,field = v.field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,76,virtualSize = v.getDimension() + resize;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,77,entries = new OpenIntToFieldHashMap<T>(v.entries);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,82,* Build a vector with known the sparseness (for advanced use only).
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,83,* @param dimension The size of the vector
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,84,* @param expectedSize The expected number of non-zero entries
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,85,* @param epsilon The tolerance for having a value considered zero
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,87,"public SparseFieldVector(Field<T> field, int dimension, int expectedSize) {"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,88,this.field = field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,89,virtualSize = dimension;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,90,"entries = new OpenIntToFieldHashMap<T> (field,expectedSize);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,95,* Create from a Field array.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,96,* Only non-zero entries will be stored
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,97,* @param values The set of values to create from
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,98,* @param epsilon The tolerance for having a value considered zero
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,100,"public SparseFieldVector(Field<T> field, T[] values) {"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,101,this.field = field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,102,virtualSize = values.length;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,103,entries = new OpenIntToFieldHashMap<T>(field);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,104,for (int key = 0; key < values.length; key++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,105,T value = values[key];
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,106,"entries.put(key, value);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,113,* Copy constructor.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,114,* @param v The instance to copy from
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,116,public SparseFieldVector(SparseFieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,117,field = v.field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,118,virtualSize = v.getDimension();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,119,entries = new OpenIntToFieldHashMap<T>(v.getEntries());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,123,* Get the entries of this instance.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,124,* @return entries of this instance
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,126,private OpenIntToFieldHashMap<T> getEntries() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,127,return entries;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,131,* Optimzed method to add sparse vectors
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,132,* @return The sum of <code>this</code> and <code>v</code>
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,133,* @throws IllegalArgumentException If the dimensions don't match
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,135,public FieldVector<T> add(SparseFieldVector<T> v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,136,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,137,SparseFieldVector<T> res = (SparseFieldVector<T>)copy();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,138,OpenIntToFieldHashMap<T>.Iterator iter = v.getEntries().iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,139,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,140,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,141,int key = iter.key();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,142,T value = iter.value();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,143,if (entries.containsKey(key)) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,144,"res.setEntry(key, entries.get(key).add(value));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,145,} else {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,146,"res.setEntry(key, value);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,149,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,154,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,155,public FieldVector<T> add(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,156,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,157,"SparseFieldVector<T> res = new SparseFieldVector<T>(field,getDimension());"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,158,for (int i = 0; i < v.length; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,159,"res.setEntry(i, v[i].add(getEntry(i)));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,161,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,164,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,165,public FieldVector<T> append(SparseFieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,166,"SparseFieldVector<T> res = new SparseFieldVector<T>(this, v.getDimension());"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,167,OpenIntToFieldHashMap<T>.Iterator iter = v.entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,168,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,169,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,170,"res.setEntry(iter.key() + virtualSize, iter.value());"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,172,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,175,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,176,public FieldVector<T> append(FieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,177,if(v instanceof SparseFieldVector)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,178,return append((SparseFieldVector<T>)v);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,179,else
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,180,return append(v.toArray());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,184,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,185,public FieldVector<T> append(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,186,"FieldVector<T> res = new SparseFieldVector<T>(this, 1);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,187,"res.setEntry(virtualSize, d);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,188,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,191,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,192,public FieldVector<T> append(T[] a) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,193,"FieldVector<T> res = new SparseFieldVector<T>(this, a.length);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,194,for (int i = 0; i < a.length; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,195,"res.setEntry(i + virtualSize, a[i]);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,197,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,200,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,201,public FieldVector<T> copy() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,202,return new SparseFieldVector<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,205,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,206,public T dotProduct(FieldVector<T> v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,207,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,208,T res = field.getZero();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,209,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,210,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,211,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,212,res = res.add(v.getEntry(iter.key()).multiply(iter.value()));
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,214,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,217,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,218,public T dotProduct(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,219,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,220,T res = field.getZero();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,221,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,222,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,223,int idx = iter.key();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,224,T value = field.getZero();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,225,if (idx < v.length) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,226,value = v[idx];
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,228,res = res.add(value.multiply(iter.value()));
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,230,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,233,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,234,public FieldVector<T> ebeDivide(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,235,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,236,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,237,SparseFieldVector<T> res = new SparseFieldVector<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,238,OpenIntToFieldHashMap<T>.Iterator iter = res.entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,239,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,240,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,241,"res.setEntry(iter.key(), iter.value().divide(v.getEntry(iter.key())));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,243,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,246,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,247,public FieldVector<T> ebeDivide(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,248,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,249,SparseFieldVector<T> res = new SparseFieldVector<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,250,OpenIntToFieldHashMap<T>.Iterator iter = res.entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,251,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,252,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,253,"res.setEntry(iter.key(), iter.value().divide(v[iter.key()]));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,255,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,258,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,259,public FieldVector<T> ebeMultiply(FieldVector<T> v)throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,260,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,261,SparseFieldVector<T> res = new SparseFieldVector<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,262,OpenIntToFieldHashMap<T>.Iterator iter = res.entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,263,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,264,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,265,"res.setEntry(iter.key(), iter.value().multiply(v.getEntry(iter.key())));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,267,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,270,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,271,public FieldVector<T> ebeMultiply(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,272,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,273,SparseFieldVector<T> res = new SparseFieldVector<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,274,OpenIntToFieldHashMap<T>.Iterator iter = res.entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,275,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,276,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,277,"res.setEntry(iter.key(), iter.value().multiply(v[iter.key()]));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,279,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,282,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,283,public T[] getData() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,284,T[] res = buildArray(virtualSize);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,285,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,286,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,287,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,288,res[iter.key()] = iter.value();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,290,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,293,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,294,public int getDimension() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,295,return virtualSize;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,298,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,299,public T getEntry(int index) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,300,checkIndex(index);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,301,return entries.get(index);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,304,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,305,public Field<T> getField() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,306,return field;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,309,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,310,"public FieldVector<T> getSubVector(int index, int n)"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,311,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,312,checkIndex(index);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,313,checkIndex(index + n - 1);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,314,"SparseFieldVector<T> res = new SparseFieldVector<T>(field,n);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,315,int end = index + n;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,316,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,317,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,318,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,319,int key = iter.key();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,320,if (key >= index && key < end) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,321,"res.setEntry(key - index, iter.value());"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,324,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,327,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,328,public FieldVector<T> mapAdd(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,329,return copy().mapAddToSelf(d);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,332,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,333,public FieldVector<T> mapAddToSelf(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,334,for (int i = 0; i < virtualSize; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,335,"setEntry(i, getEntry(i).add(d));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,337,return this;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,340,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,341,public FieldVector<T> mapDivide(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,342,return copy().mapDivideToSelf(d);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,345,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,346,public FieldVector<T> mapDivideToSelf(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,347,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,348,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,349,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,350,"entries.put(iter.key(), iter.value().divide(d));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,352,return this;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,355,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,356,public FieldVector<T> mapInv() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,357,return copy().mapInvToSelf();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,360,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,361,public FieldVector<T> mapInvToSelf() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,362,for (int i = 0; i < virtualSize; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,363,"setEntry(i, field.getOne().divide(getEntry(i)));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,365,return this;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,368,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,369,public FieldVector<T> mapMultiply(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,370,return copy().mapMultiplyToSelf(d);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,373,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,374,public FieldVector<T> mapMultiplyToSelf(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,375,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,376,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,377,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,378,"entries.put(iter.key(), iter.value().multiply(d));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,380,return this;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,383,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,384,public FieldVector<T> mapSubtract(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,385,return copy().mapSubtractToSelf(d);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,388,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,389,public FieldVector<T> mapSubtractToSelf(T d) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,390,return mapAddToSelf(field.getZero().subtract(d));
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,394,* Optimized method to compute outer product when both vectors are sparse
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,395,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,396,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,397,* @throws IllegalArgumentException if v is not the same size as {@code this}
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,399,public FieldMatrix<T> outerProduct(SparseFieldVector<T> v)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,400,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,401,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,402,"SparseFieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, virtualSize);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,403,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,404,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,405,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,406,OpenIntToFieldHashMap<T>.Iterator iter2 = v.entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,407,while (iter2.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,408,iter2.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,409,"res.setEntry(iter.key(), iter2.key(), iter.value().multiply(iter2.value()));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,412,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,415,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,416,public FieldMatrix<T> outerProduct(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,417,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,418,"FieldMatrix<T> res = new SparseFieldMatrix<T>(field, virtualSize, virtualSize);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,419,OpenIntToFieldHashMap<T>.Iterator iter = entries.iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,420,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,421,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,422,int row = iter.key();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,423,FieldElement<T>value = iter.value();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,424,for (int col = 0; col < virtualSize; col++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,425,"res.setEntry(row, col, value.multiply(v[col]));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,428,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,431,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,432,public FieldMatrix<T> outerProduct(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,433,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,434,if(v instanceof SparseFieldVector)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,435,return outerProduct((SparseFieldVector<T>)v);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,436,else
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,437,return outerProduct(v.toArray());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,440,public FieldVector<T> projection(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,441,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,442,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,443,return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,446,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,447,public FieldVector<T> projection(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,448,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,449,"return projection(new SparseFieldVector<T>(field,v));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,452,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,453,public void set(T value) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,454,for (int i = 0; i < virtualSize; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,455,"setEntry(i, value);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,459,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,460,"public void setEntry(int index, T value) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,461,checkIndex(index);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,462,"entries.put(index, value);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,465,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,466,"public void setSubVector(int index, FieldVector<T> v)"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,467,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,468,checkIndex(index);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,469,checkIndex(index + v.getDimension() - 1);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,470,"setSubVector(index, v.getData());"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,473,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,474,"public void setSubVector(int index, T[] v) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,475,checkIndex(index);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,476,checkIndex(index + v.length - 1);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,477,for (int i = 0; i < v.length; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,478,"setEntry(i + index, v[i]);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,484,* Optimized method to subtract SparseRealVectors.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,485,* @param v The vector to subtract from <code>this</code>
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,486,* @return The difference of <code>this</code> and <code>v</code>
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,487,* @throws IllegalArgumentException If the dimensions don't match
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,489,public SparseFieldVector<T> subtract(SparseFieldVector<T> v) throws IllegalArgumentException{
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,490,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,491,SparseFieldVector<T> res = (SparseFieldVector<T>)copy();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,492,OpenIntToFieldHashMap<T>.Iterator iter = v.getEntries().iterator();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,493,while (iter.hasNext()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,494,iter.advance();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,495,int key = iter.key();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,496,if (entries.containsKey(key)) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,497,"res.setEntry(key, entries.get(key).subtract(iter.value()));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,498,} else {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,499,"res.setEntry(key, field.getZero().subtract(iter.value()));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,502,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,505,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,506,public FieldVector<T> subtract(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,507,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,508,if(v instanceof SparseFieldVector)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,509,return subtract((SparseFieldVector<T>)v);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,510,else
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,511,return subtract(v.toArray());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,514,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,515,public FieldVector<T> subtract(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,516,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,517,SparseFieldVector<T> res = new SparseFieldVector<T>(this);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,518,for (int i = 0; i < v.length; i++) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,519,if (entries.containsKey(i)) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,520,"res.setEntry(i, entries.get(i).subtract(v[i]));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,521,} else {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,522,"res.setEntry(i, field.getZero().subtract(v[i]));"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,525,return res;
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,528,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,529,public T[] toArray() {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,530,return getData();
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,534,* Check if an index is valid.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,536,* @param index
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,537,*            index to check
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,538,* @exception MatrixIndexException
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,539,*                if index is not valid
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,541,private void checkIndex(final int index) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,542,if (index < 0 || index >= getDimension()) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,543,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,544,"""index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,545,"index, 0, getDimension() - 1);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,550,* Check if instance dimension is equal to some expected value.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,552,* @param n
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,553,*            expected dimension.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,554,* @exception IllegalArgumentException
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,555,*                if the dimension is inconsistent with vector size
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,557,protected void checkVectorDimensions(int n) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,558,if (getDimension() != n) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,559,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,560,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,561,"getDimension(), n);"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,566,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,567,public FieldVector<T> add(FieldVector<T> v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,568,if(v instanceof SparseFieldVector)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,569,return add((SparseFieldVector<T>)v);
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,570,else
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,571,return add(v.toArray());
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,574,/** Build an array of elements.
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,575,* @param length size of the array to build
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,576,* @return a new array
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,578,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,579,private T[] buildArray(final int length) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,580,"return (T[]) Array.newInstance(field.getZero().getClass(), length);"
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,40,rivate OpenIntToDoubleHashMap entries;
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,40,private final OpenIntToDoubleHashMap entries;
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,356,eturn null;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,356,return res;

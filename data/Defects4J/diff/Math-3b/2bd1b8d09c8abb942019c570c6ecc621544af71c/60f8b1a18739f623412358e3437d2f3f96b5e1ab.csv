is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,311,"* The value of the updated, preconditioned residual P * r. This value is"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,312,"* given by {@code min(}{@link #cgnorm}{@code , }{@link #lqnorm}{@code )}."
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,314,private double rnorm;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,334,rivate final RealVector x;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,340,private final RealVector xL;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,378,his.x = x;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,384,this.xL = x;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,480, @param xRefined the vector to be updated with the refined value of x
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,486,* @param xC the vector to be updated with the refined value of xL
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,482,ublic void refine(final RealVector xRefined) {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,483,inal int n = this.x.getDimension();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,488,void moveToCG(final RealVector xC) {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,489,final int n = this.xL.getDimension();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,486,"Refined.setSubVector(0, this.x);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,492,"xC.setSubVector(0, this.xL);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,491,inal double xi = this.x.getEntry(i);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,492,"Refined.setEntry(i, xi + step * bi);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,497,final double xi = this.xL.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,498,"xC.setEntry(i, xi + step * bi);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,503,inal double xi = this.x.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,509,final double xi = this.xL.getEntry(i);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,505,"Refined.setEntry(i, xi + zbar * wi);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,511,"xC.setEntry(i, xi + zbar * wi);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,509,inal double xi = this.x.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,515,final double xi = this.xL.getEntry(i);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,512,"Refined.setEntry(i, xi + zbar * wi + step * bi);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,518,"xC.setEntry(i, xi + zbar * wi + step * bi);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,524,his.x.set(0.);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,530,this.xL.set(0.);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,699,inal int n = x.getDimension();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,705,final int n = xL.getDimension();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,701,inal double xi = x.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,707,final double xi = xL.getEntry(i);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,704,".setEntry(i, xi + wi * zetaC + vi * zetaS);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,710,"xL.setEntry(i, xi + wi * zetaC + vi * zetaS);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,779,"rnorm = FastMath.min(cgnorm, lqnorm);"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,781,ublic boolean hasConverged() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,788,boolean hasConverged() {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,790,ublic boolean bEqualsNullVector() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,797,boolean bEqualsNullVector() {
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,800,ublic boolean betaEqualsZero() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,807,boolean betaEqualsZero() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,812,* Returns the right-hand side vector.
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,814,"* @return the right-hand side vector, b"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,816,RealVector getRightHandSideVector() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,817,return b;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,821,* Returns the current estimate of the solution (LQ point).
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,823,"* @return the solution, xL"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,825,RealVector getSolution() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,826,return xL;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,830,"* Returns the norm of the updated, preconditioned residual."
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,832,"* @return the norm of the residual, ||P * r||"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,834,double getNormOfResidual() {
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,835,return rnorm;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,838,"eturn FastMath.min(state.cgnorm, state.lqnorm);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,872,return state.getNormOfResidual();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,844,eturn RealVector.unmodifiableRealVector(state.b);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,878,return RealVector.unmodifiableRealVector(state.getRightHandSideVector());
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,850,inal int n = state.x.getDimension();
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,851,inal RealVector x = new ArrayRealVector(n);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,852,tate.refine(x);
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,884,final RealVector x = state.getSolution().copy();
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,885,state.moveToCG(x);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1183,"inal State state = new State(a, minv, b, x, goodb, shift, delta, check);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1216,"final State state = new State(a, minv, b, x.copy(), goodb, shift, delta, check);"
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1218,* There is no need to create a new SymmLQEvent each time the state is
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1219,"* updated, as SymmLQEvent keeps a reference to the current state."
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1202,tate.refine(x);
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1204," The following two lines are a hack because state.x is now refined,"
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1205, so further calls to state.refine() (via event.getSolution()) should
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1206, *not* return an altered value of state.x.
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1208,tate.bstep = 0.;
False,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1209,tate.gammaZeta = 0.;
True,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,src/main/java/org/apache/commons/math3/linear/SymmLQ.java,1239,state.moveToCG(x);
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,22,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,499,"ount[2], e.getIterations() - 1);"
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,500,"count[2],"
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,501,e.getIterations() - 1);
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,505,"ount[1], e.getIterations() - 1);"
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,507,"count[1],"
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,508,e.getIterations() - 1);
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,510,inal IterativeLinearSolverEvent ilse = (IterativeLinearSolverEvent) e;
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,513,final IterativeLinearSolverEvent ilse;
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,514,ilse = (IterativeLinearSolverEvent) e;
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,527,"  Check that solution is not ""over-refined"". When the last iteration has"
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,528,"  occurred, no further refinement should be performed."
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,531,"*  Check that solution is not ""over-refined"". When the last"
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,532,"*  iteration has occurred, no further refinement should be"
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,533,*  performed.

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,30,ublic class Acos implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,33,"public class Acos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,41,eturn -1 / FastMath.sqrt(1 - x * x);
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,src/main/java/org/apache/commons/math3/analysis/function/Acos.java,51,return t.acos();
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,30,ublic class Acosh implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,33,"public class Acosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,41,eturn 1 / FastMath.sqrt(x * x - 1);
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,src/main/java/org/apache/commons/math3/analysis/function/Acosh.java,51,return t.acosh();
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,30,ublic class Asin implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,33,"public class Asin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,41,eturn 1 / FastMath.sqrt(1 - x * x);
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,src/main/java/org/apache/commons/math3/analysis/function/Asin.java,51,return t.asin();
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,30,ublic class Asinh implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,33,"public class Asinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,41,eturn 1 / FastMath.sqrt(1 + x * x);
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,src/main/java/org/apache/commons/math3/analysis/function/Asinh.java,51,return t.asinh();
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,30,ublic class Atan implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,33,"public class Atan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,41,eturn 1 / (1 + x * x);
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,src/main/java/org/apache/commons/math3/analysis/function/Atan.java,51,return t.atan();
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,30,ublic class Atanh implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,33,"public class Atanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,41,eturn 1 / (1 - x * x);
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,src/main/java/org/apache/commons/math3/analysis/function/Atanh.java,51,return t.atanh();
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,30,ublic class Cbrt implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,33,"public class Cbrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,41,eturn 1 / (3 * FastMath.cbrt(x * x));
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java,51,return t.cbrt();
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,28,ublic class Constant implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,32,"public class Constant implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,44,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,45,ublic DifferentiableUnivariateFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,46,eturn new Constant(0);
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,48,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,49,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,51,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,52,public UnivariateFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,53,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,56,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,57,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,59,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,src/main/java/org/apache/commons/math3/analysis/function/Constant.java,60,"return new DerivativeStructure(t.getFreeParameters(), t.getOrder(), c);"
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,30,ublic class Cos implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,33,"public class Cos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,41,eturn -FastMath.sin(x);
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,src/main/java/org/apache/commons/math3/analysis/function/Cos.java,51,return t.cos();
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,29,ublic class Cosh implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,33,"public class Cosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,35,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,36,ublic DifferentiableUnivariateFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,37,eturn new Sinh();
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,42,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,43,public UnivariateFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,src/main/java/org/apache/commons/math3/analysis/function/Cosh.java,51,return t.cosh();
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,30,ublic class Exp implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,33,"public class Exp implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,41,eturn FastMath.exp(x);
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,src/main/java/org/apache/commons/math3/analysis/function/Exp.java,51,return t.exp();
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,30,ublic class Expm1 implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,33,"public class Expm1 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,41,eturn FastMath.exp(x);
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,src/main/java/org/apache/commons/math3/analysis/function/Expm1.java,51,return t.expm1();
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,22,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,26,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,27,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,32,import org.apache.commons.math3.util.Precision;
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,35,ublic class Gaussian implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,41,"public class Gaussian implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,44,/** Inverse of the standard deviation. */
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,45,private final double is;
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,60,his.i2s2 = 1 / (2 * sigma * sigma);
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,68,this.is   = 1 / sigma;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,69,this.i2s2 = 0.5 * is * is;
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,87,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,96,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,97,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,99,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,89,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,90,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,91,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,92,inal double diff = x - mean;
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,93,"inal double g = Gaussian.value(diff, norm, i2s2);"
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,95,f (g == 0) {
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,96,/ Avoid returning NaN in case of overflow.
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,97,eturn 0;
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,98, else {
False,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,99,eturn -2 * diff * i2s2 * g;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,101,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,198,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,199,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,201,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,203,final double u = is * (t.getValue() - mean);
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,204,double[] f = new double[t.getOrder() + 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,206,// the nth order derivative of the Gaussian has the form:
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,207,// dn(g(x)/dxn = (norm / s^n) P_n(u) exp(-u^2/2) with u=(x-m)/s
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,208,// where P_n(u) is a degree n polynomial with same parity as n
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,209,"// P_0(u) = 1, P_1(u) = -u, P_2(u) = u^2 - 1, P_3(u) = -u^3 + 3 u..."
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,210,// the general recurrence relation for P_n is:
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,211,// P_n(u) = P_(n-1)'(u) - u P_(n-1)(u)
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,212,"// as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array"
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,213,final double[] p = new double[f.length];
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,214,p[0] = 1;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,215,final double u2 = u * u;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,216,double coeff = norm * FastMath.exp(-0.5 * u2);
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,217,if (coeff <= Precision.SAFE_MIN) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,218,"Arrays.fill(f, 0.0);"
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,219,} else {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,220,f[0] = coeff;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,221,for (int n = 1; n < f.length; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,223,// update and evaluate polynomial P_n(x)
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,224,double v = 0;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,225,p[n] = -p[n - 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,226,for (int k = n; k >= 0; k -= 2) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,227,v = v * u2 + p[k];
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,228,if (k > 2) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,229,p[k - 2] = (k - 1) * p[k - 1] - p[k - 3];
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,230,} else if (k == 2) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,231,p[0] = p[1];
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,234,if ((n & 0x1) == 1) {
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,235,v *= u;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,238,coeff *= is;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,239,f[n] = coeff * v;
True,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java,244,return t.compose(f);
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,20,mport org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,23,mport org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,23,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,24,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,25,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,27,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,34,ublic class HarmonicOscillator implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,37,"public class HarmonicOscillator implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,62,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,65,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,66,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,68,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,64,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,65,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,66,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,67,eturn -amplitude * omega * FastMath.sin(omega * x + phase);
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,70,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,156,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,157,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,159,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,160,final double x = t.getValue();
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,161,double[] f = new double[t.getOrder() + 1];
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,163,final double alpha = omega * x + phase;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,164,f[0] = amplitude * FastMath.cos(alpha);
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,165,if (f.length > 1) {
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,166,f[1] = -amplitude * omega * FastMath.sin(alpha);
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,167,final double mo2 = - omega * omega;
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,168,for (int i = 2; i < f.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,169,f[i] = mo2 * f[i - 2];
True,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java,173,return t.compose(f);
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,28,ublic class Identity implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,32,"public class Identity implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,34,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,35,ublic DifferentiableUnivariateFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,36,eturn new Constant(1);
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,38,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,39,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,41,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,42,public UnivariateFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,43,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,46,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,47,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,49,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,src/main/java/org/apache/commons/math3/analysis/function/Identity.java,50,return t;
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,29,ublic class Inverse implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,32,"public class Inverse implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,35,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,38,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,39,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,41,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,37,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,38,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,39,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,40,eturn -1 / (x * x);
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,43,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,46,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,47,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,49,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,src/main/java/org/apache/commons/math3/analysis/function/Inverse.java,50,return t.reciprocal();
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,30,ublic class Log implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,33,"public class Log implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,41,eturn 1 / x;
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Log.java,src/main/java/org/apache/commons/math3/analysis/function/Log.java,51,return t.log();
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,30,ublic class Log10 implements DifferentiableUnivariateFunction {
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,31,** ln(10) = {@value}.*/
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,32,rivate static final double LN_10 = FastMath.log(10);
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,33,"public class Log10 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,39,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,40,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,41,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,43,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,41,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,42,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,43,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,44,eturn 1 / (x * LN_10);
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,45,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,48,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,49,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,51,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,src/main/java/org/apache/commons/math3/analysis/function/Log10.java,52,return t.log10();
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,30,ublic class Log1p implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,33,"public class Log1p implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,41,eturn 1 / (1 + x);
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,src/main/java/org/apache/commons/math3/analysis/function/Log1p.java,51,return t.log1p();
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,24,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,25,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,35,ublic class Logistic implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,38,"public class Logistic implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,85,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,88,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,89,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,91,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,87,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,88,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,89,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,90,inal double exp = q * FastMath.exp(b * (m - x));
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,91,f (Double.isInfinite(exp)) {
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,92,/ Avoid returning NaN in case of overflow.
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,93,eturn 0;
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,95,inal double exp1 = exp + 1;
False,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,96,"eturn b * oneOverN * exp / FastMath.pow(exp1, oneOverN + 1);"
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,93,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,204,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,205,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,207,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,src/main/java/org/apache/commons/math3/analysis/function/Logistic.java,208,return t.negate().add(m).multiply(b).exp().multiply(q).add(1).pow(oneOverN).reciprocal().multiply(k - a).add(a);
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,20,mport org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,23,mport org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,23,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,24,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,25,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,27,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,36,ublic class Logit implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,39,"public class Logit implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,67,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,70,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,71,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,73,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,69,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,70,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,71,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,72,eturn (hi - lo) / ((x - lo) * (hi - x));
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,75,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,159,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,160,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,161,* @exception OutOfRangeException if parameter is outside of function domain
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,163,public DerivativeStructure value(final DerivativeStructure t)
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,164,throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,165,final double x = t.getValue();
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,166,if (x < lo || x > hi) {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,167,"throw new OutOfRangeException(x, lo, hi);"
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,169,double[] f = new double[t.getOrder() + 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,171,// function value
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,172,f[0] = FastMath.log((x - lo) / (hi - x));
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,174,if (Double.isInfinite(f[0])) {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,176,if (f.length > 1) {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,177,f[1] = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,179,// fill the array with infinities
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,180,"// (for x close to lo the signs will flip between -inf and +inf,"
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,181,//  for x close to hi the signs will always be +inf)
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,182,"// this is probably overkill, since the call to compose at the end"
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,183,// of the method will transform most infinities into NaN ...
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,184,for (int i = 2; i < f.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,185,f[i] = f[i - 2];
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,188,} else {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,190,// function derivatives
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,191,final double invL = 1.0 / (x - lo);
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,192,double xL = invL;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,193,final double invH = 1.0 / (hi - x);
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,194,double xH = invH;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,195,for (int i = 1; i < f.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,196,f[i] = xL + xH;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,197,xL  *= -i * invL;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,198,xH  *=  i * invH;
True,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,src/main/java/org/apache/commons/math3/analysis/function/Logit.java,202,return t.compose(f);
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,28,ublic class Minus implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,32,"public class Minus implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,34,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,35,ublic DifferentiableUnivariateFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,36,eturn new Constant(-1);
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,38,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,39,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,41,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,42,public UnivariateFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,43,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,46,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,47,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,49,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,src/main/java/org/apache/commons/math3/analysis/function/Minus.java,50,return t.negate();
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,30,ublic class Power implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,33,"public class Power implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,46,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,49,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,50,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,52,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,48,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,49,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,50,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,51,"eturn p * FastMath.pow(x, p - 1);"
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,54,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,57,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,58,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,60,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Power.java,src/main/java/org/apache/commons/math3/analysis/function/Power.java,61,return t.pow(p);
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,22,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,26,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,27,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,37,ublic class Sigmoid implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,42,"public class Sigmoid implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,63,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,68,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,69,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,71,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,65,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,66,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,67,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,68,inal double exp = FastMath.exp(-x);
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,69,f (Double.isInfinite(exp)) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,70,/ Avoid returning NaN in case of overflow.
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,71,eturn 0;
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,73,inal double exp1 = 1 + exp;
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,74,eturn (hi - lo) * exp / (exp1 * exp1);
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,73,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
False,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,79,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,157,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,158,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,160,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,162,double[] f = new double[t.getOrder() + 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,163,final double exp = FastMath.exp(-t.getValue());
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,164,if (Double.isInfinite(exp)) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,166,"// special handling near lower boundary, to avoid NaN"
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,167,f[0] = lo;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,168,"Arrays.fill(f, 1, f.length, 0.0);"
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,170,} else {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,172,// the nth order derivative of sigmoid has the form:
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,173,// dn(sigmoid(x)/dxn = P_n(exp(-x)) / (1+exp(-x))^(n+1)
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,174,// where P_n(t) is a degree n polynomial with normalized higher term
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,175,"// P_0(t) = 1, P_1(t) = t, P_2(t) = t^2 - t, P_3(t) = t^3 - 4 t^2 + t..."
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,176,// the general recurrence relation for P_n is:
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,177,// P_n(x) = n t P_(n-1)(t) - t (1 + t) P_(n-1)'(t)
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,178,final double[] p = new double[f.length];
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,180,final double inv   = 1 / (1 + exp);
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,181,double coeff = hi - lo;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,182,for (int n = 0; n < f.length; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,184,// update and evaluate polynomial P_n(t)
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,185,double v = 0;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,186,p[n] = 1;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,187,for (int k = n; k >= 0; --k) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,188,v = v * exp + p[k];
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,189,if (k > 1) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,190,p[k - 1] = (n - k + 2) * p[k - 2] - (k - 1) * p[k - 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,191,} else {
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,192,p[0] = 0;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,196,coeff *= inv;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,197,f[n]   = coeff * v;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,201,// fix function value
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,202,f[0] += lo;
True,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java,206,return t.compose(f);
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,29,ublic class Sin implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,35,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,36,ublic DifferentiableUnivariateFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,37,eturn new Cos();
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,42,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,43,public UnivariateFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,src/main/java/org/apache/commons/math3/analysis/function/Sin.java,51,return t.sin();
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,20,mport org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,35,ublic class Sinc implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,38,"public class Sinc implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,37, Value below which the result of the computation will not change
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,38," anymore due to the finite precision of the ""double"" representation"
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,39, of real numbers.
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,40,* Value below which the computations are done using Taylor series.
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,41,* <p>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,42,* The Taylor series for sinc even order derivatives are:
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,43,* <pre>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,44,* d^(2n)sinc/dx^(2n)     = Sum_(k>=0) (-1)^(n+k) / ((2k)!(2n+2k+1)) x^(2k)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,45,*                        = (-1)^n     [ 1/(2n+1) - x^2/(4n+6) + x^4/(48n+120) - x^6/(1440n+5040) + O(x^8) ]
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,46,* </pre>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,47,* </p>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,48,* <p>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,49,* The Taylor series for sinc odd order derivatives are:
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,50,* <pre>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,51,* d^(2n+1)sinc/dx^(2n+1) = Sum_(k>=0) (-1)^(n+k+1) / ((2k+1)!(2n+2k+3)) x^(2k+1)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,52,*                        = (-1)^(n+1) [ x/(2n+3) - x^3/(12n+30) + x^5/(240n+840) - x^7/(10080n+45360) + O(x^9) ]
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,53,* </pre>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,54,* </p>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,55,* <p>
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,56,* So the ratio of the fourth term with respect to the first term
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,57,"* is always smaller than x^6/720, for all derivative orders."
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,58,* This implies that neglecting this term and using only the first three terms induces
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,59,* a relative error bounded by x^6/720. The SHORTCUT value is chosen such that this
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,60,* relative error is below double precision accuracy when |x| <= SHORTCUT.
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,61,* </p>
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,41,rivate static final double SHORTCUT = 1e-9;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,63,private static final double SHORTCUT = 6.0e-3;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,63,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,64,f (normalized) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,65,inal double piTimesX = Math.PI * x;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,66,eturn sinc(piTimesX);
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,85,public double value(final double x) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,86,final double scaledX = normalized ? FastMath.PI * x : x;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,87,if (FastMath.abs(scaledX) <= SHORTCUT) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,88,// use Taylor series
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,89,final double scaledX2 = scaledX * scaledX;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,90,return ((scaledX2 - 20) * scaledX2 + 120) / 120;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,68,eturn sinc(x);
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,92,// use definition expression
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,93,return FastMath.sin(scaledX) / scaledX;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,72,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,97,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,98,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,100,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,74,f (normalized) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,75,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,76,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,77,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,78,inal double piTimesX = Math.PI * x;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,79,eturn sincDerivative(piTimesX);
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,102,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,105,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,106,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,108,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,110,final double scaledX  = (normalized ? FastMath.PI : 1) * t.getValue();
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,111,final double scaledX2 = scaledX * scaledX;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,113,double[] f = new double[t.getOrder() + 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,115,if (FastMath.abs(scaledX) <= SHORTCUT) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,117,for (int i = 0; i < f.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,118,final int k = i / 2;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,119,if ((i & 0x1) == 0) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,120,// even derivation order
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,121,f[i] = (((k & 0x1) == 0) ? 1 : -1) *
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,122,(1.0 / (i + 1) - scaledX2 * (1.0 / (2 * i + 6) - scaledX2 / (24 * i + 120)));
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,123,} else {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,124,// odd derivation order
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,125,f[i] = (((k & 0x1) == 0) ? -scaledX : scaledX) *
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,126,(1.0 / (i + 2) - scaledX2 * (1.0 / (6 * i + 24) - scaledX2 / (120 * i + 720)));
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,83,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,84,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,85,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,86,eturn sincDerivative(x);
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,132,final double inv = 1 / scaledX;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,133,final double cos = FastMath.cos(scaledX);
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,134,final double sin = FastMath.sin(scaledX);
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,136,f[0] = inv * sin;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,138,// the nth order derivative of sinc has the form:
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,139,// dn(sinc(x)/dxn = [S_n(x) sin(x) + C_n(x) cos(x)] / x^(n+1)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,140,// where S_n(x) is an even polynomial with degree n-1 or n (depending on parity)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,141,// and C_n(x) is an odd polynomial with degree n-1 or n (depending on parity)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,142,"// S_0(x) = 1, S_1(x) = -1, S_2(x) = -x^2 + 2, S_3(x) = 3x^2 - 6..."
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,143,"// C_0(x) = 0, C_1(x) = x, C_2(x) = -2x, C_3(x) = -x^3 + 6x..."
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,144,// the general recurrence relations for S_n and C_n are:
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,145,// S_n(x) = x S_(n-1)'(x) - n S_(n-1)(x) - x C_(n-1)(x)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,146,// C_n(x) = x C_(n-1)'(x) - n C_(n-1)(x) + x S_(n-1)(x)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,147,"// as per polynomials parity, we can store both S_n and C_n in the same array"
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,148,final double[] sc = new double[f.length];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,149,sc[0] = 1;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,151,double coeff = inv;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,152,for (int n = 1; n < f.length; ++n) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,154,double s = 0;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,155,double c = 0;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,157,// update and evaluate polynomials S_n(x) and C_n(x)
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,158,final int kStart;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,159,if ((n & 0x1) == 0) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,160,"// even derivation order, S_n is degree n and C_n is degree n-1"
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,161,sc[n] = 0;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,162,kStart = n;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,163,} else {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,164,"// odd derivation order, S_n is degree n-1 and C_n is degree n"
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,165,sc[n] = sc[n - 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,166,c = sc[n];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,167,kStart = n - 1;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,170,"// in this loop, k is always even"
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,171,for (int k = kStart; k > 1; k -= 2) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,173,// sine part
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,174,sc[k]     = (k - n) * sc[k] - sc[k - 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,175,s         = s * scaledX2 + sc[k];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,177,// cosine part
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,178,sc[k - 1] = (k - 1 - n) * sc[k - 1] + sc[k -2];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,179,c         = c * scaledX2 + sc[k - 1];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,182,sc[0] *= -n;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,183,s      = s * scaledX2 + sc[0];
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,185,coeff *= inv;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,186,f[n]   = coeff * (s * sin + c * scaledX * cos);
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,93, @param x Argument.
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,94, @return {@code sin(x) / x}.
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,96,rivate static double sinc(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,97,/ The direct assignment to 1 for values below 1e-9 is an efficiency
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,98,/ optimization on the ground that the result of the full computation
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,99,/ is indistinguishable from 1 due to the limited accuracy of the
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,100,/ floating point representation.
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,101,eturn FastMath.abs(x) < SHORTCUT ? 1 :
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,102,astMath.sin(x) / x;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,192,if (normalized) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,193,double scale = FastMath.PI;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,194,for (int i = 1; i < f.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,195,f[i]  *= scale;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,196,scale *= FastMath.PI;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,200,return t.compose(f);
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,106, @param x Argument.
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,107, @return {@code (cos(x) - sin(x) / x) / x}.
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,109,rivate static double sincDerivative(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,110,/ The direct assignment to 0 for values below 1e-9 is an efficiency
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,111,/ optimization on the ground that the result of the full computation
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,112,/ is indistinguishable from 1 due to the limited accuracy of the
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,113,/ floating point representation.
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,114,eturn FastMath.abs(x) < SHORTCUT ? 0 :
False,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,src/main/java/org/apache/commons/math3/analysis/function/Sinc.java,115,FastMath.cos(x) - FastMath.sin(x) / x) / x;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,21,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,22,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,29,ublic class Sinh implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,33,"public class Sinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,35,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,36,ublic DifferentiableUnivariateFunction derivative() {
False,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,37,eturn new Cosh();
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,42,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,43,public UnivariateFunction derivative() {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,src/main/java/org/apache/commons/math3/analysis/function/Sinh.java,51,return t.sinh();
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,30,ublic class Sqrt implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,33,"public class Sqrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,41,eturn 1 / (2 * FastMath.sqrt(x));
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java,51,return t.sqrt();
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,30,ublic class Tan implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,33,"public class Tan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,41,inal double tanX = FastMath.tan(x);
False,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,42,eturn 1 + tanX * tanX;
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,src/main/java/org/apache/commons/math3/analysis/function/Tan.java,51,return t.tan();
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,20,import org.apache.commons.math3.analysis.FunctionUtils;
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,23,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,24,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,30,ublic class Tanh implements DifferentiableUnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,33,"public class Tanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {"
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,36,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,39,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,40,"* @deprecated as of 3.1, replaced by {@link #value(DerivativeStructure)}"
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,42,@Deprecated
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,38,eturn new UnivariateFunction() {
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,39,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,40,ublic double value(double x) {
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,41,inal double tanhX = FastMath.tanh(x);
False,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,42,eturn 1 - tanhX * tanhX;
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,44,return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,47,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,48,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,50,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,src/main/java/org/apache/commons/math3/analysis/function/Tanh.java,51,return t.tanh();
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,22,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,23,import org.apache.commons.math3.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,23,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,60,ublic void testDerivative() {
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,61,inal Gaussian f = new Gaussian();
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,62,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,64,"ssert.assertEquals(0, dfdx.value(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,61,public void testDerivatives() {
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,62,"final UnivariateDifferentiable gaussian = new Gaussian(2.0, 0.9, 3.0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,63,"final DerivativeStructure dsX = new DerivativeStructure(1, 4, 0, 1.1);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,64,final DerivativeStructure dsY = gaussian.value(dsX);
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,65,"Assert.assertEquals( 1.9955604901712128349,   dsY.getValue(),              EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,66,"Assert.assertEquals(-0.044345788670471396332, dsY.getPartialDerivative(1), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,67,"Assert.assertEquals(-0.22074348138190206174,  dsY.getPartialDerivative(2), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,68,"Assert.assertEquals( 0.014760030401924800557, dsY.getPartialDerivative(3), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,69,"Assert.assertEquals( 0.073253159785035691678, dsY.getPartialDerivative(4), EPS);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,70,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,72,"ssert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,73,"ssert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,74,"ssert.assertEquals(0, dfdx.value(-1e50), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,75,"ssert.assertEquals(0, dfdx.value(-1e2), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,76,"ssert.assertEquals(0, dfdx.value(1e2), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,77,"ssert.assertEquals(0, dfdx.value(1e50), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,78,"ssert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,79,"ssert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,76,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.NEGATIVE_INFINITY)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,77,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -Double.MAX_VALUE)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,78,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e50)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,79,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e2)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,80,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e2)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,81,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e50)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,82,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.MAX_VALUE)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,83,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.POSITIVE_INFINITY)).getPartialDerivative(1), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,83,ublic void testDerivativeNaN() {
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,87,public void testDerivativesNaN() {
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,85,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,87,ssert.assertTrue(Double.isNaN(dfdx.value(Double.NaN)));
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,89,"final DerivativeStructure fx = f.value(new DerivativeStructure(1, 5, 0, Double.NaN));"
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,90,for (int i = 0; i <= fx.getOrder(); ++i) {
True,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java,91,Assert.assertTrue(Double.isNaN(fx.getPartialDerivative(i)));
False,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,21,mport org.apache.commons.math3.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,25,import org.apache.commons.math3.util.Precision;
False,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,54,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,56,inal double d = 0.12345;
False,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,57,or (int i = 0; i < 10; i++) {
False,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,58,inal double v = i * d;
False,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,59,"ssert.assertEquals(-a * w * FastMath.sin(w * v + p), dfdx.value(v), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,56,for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,57,final double d = 0.12345;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,58,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,59,final double v = i * d;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,60,"final DerivativeStructure h = f.value(new DerivativeStructure(1, maxOrder, 0, v));"
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,61,for (int k = 0; k <= maxOrder; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,62,final double trigo;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,63,switch (k % 4) {
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,64,case 0:
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,65,trigo = +FastMath.cos(w * v + p);
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,66,break;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,67,case 1:
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,68,trigo = -FastMath.sin(w * v + p);
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,69,break;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,70,case 2:
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,71,trigo = -FastMath.cos(w * v + p);
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,72,break;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,73,default:
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,74,trigo = +FastMath.sin(w * v + p);
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,75,break;
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,77,"Assert.assertEquals(a * FastMath.pow(w, k) * trigo,"
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,78,"h.getPartialDerivative(k),"
True,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java,79,Precision.EPSILON);
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
False,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,90,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,91,inal UnivariateFunction dgdx = g.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,98,inal double x = min + i * delta;
False,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,99,"ssert.assertEquals(""x="" + x, dgdx.value(x), dfdx.value(x), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,96,"final DerivativeStructure x = new DerivativeStructure(1, 5, 0, min + i * delta);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,97,for (int order = 0; order <= x.getOrder(); ++order) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,98,"Assert.assertEquals(""x="" + x.getValue(),"
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,99,"g.value(x).getPartialDerivative(order),"
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,100,"f.value(x).getPartialDerivative(order),"
True,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java,101,3.0e-15);
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,22,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,23,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,27,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,28,import org.apache.commons.math3.random.Well1024a;
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,29,import org.apache.commons.math3.util.FastMath;
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,68,inal UnivariateFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,74,"final DerivativeStructure f15 = f.value(new DerivativeStructure(1, 1, 0, 1.5));"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,70,"ssert.assertEquals(4, dfdx.value(1.5), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,76,"Assert.assertEquals(4, f15.getPartialDerivative(1), EPS);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,76,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,78,"ssert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,79,"ssert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,80,"ssert.assertEquals(0, dfdx.value(-1e155), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,81,"ssert.assertEquals(0, dfdx.value(1e155), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,82,"ssert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,83,"ssert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,83,for (double arg : new double[] {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,84,"Double.NEGATIVE_INFINITY, -Double.MAX_VALUE, -1e155, 1e155, Double.MAX_VALUE, Double.POSITIVE_INFINITY"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,86,try {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,87,"f.value(new DerivativeStructure(1, 1, 0, arg));"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,88,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,89,} catch (OutOfRangeException ore) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,90,// expected
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,91,} catch (Exception e) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,92,"Assert.fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,97,@Test
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,98,public void testDerivativesHighOrder() {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,99,"DerivativeStructure l = new Logit(1, 3).value(new DerivativeStructure(1, 5, 0, 1.2));"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,100,"Assert.assertEquals(-2.1972245773362193828, l.getPartialDerivative(0), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,101,"Assert.assertEquals(5.5555555555555555555,  l.getPartialDerivative(1), 9.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,102,"Assert.assertEquals(-24.691358024691358025, l.getPartialDerivative(2), 2.0e-14);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,103,"Assert.assertEquals(250.34293552812071331,  l.getPartialDerivative(3), 2.0e-13);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,104,"Assert.assertEquals(-3749.4284407864654778, l.getPartialDerivative(4), 4.0e-12);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,105,"Assert.assertEquals(75001.270131585632282,  l.getPartialDerivative(5), 8.0e-11);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,140,"inal UnivariateFunction id = FunctionUtils.compose(g, f);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,162,RandomGenerator random = new Well1024a(0x49914cdd9f0b8db5l);
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,163,"final UnivariateDifferentiable id = FunctionUtils.compose((UnivariateDifferentiable) g,"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,164,(UnivariateDifferentiable) f);
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,143,inal double x = lo + Math.random() * (hi - lo);
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,144,"ssert.assertEquals(x, id.value(x), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,167,final double x = lo + random.nextDouble() * (hi - lo);
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,168,"Assert.assertEquals(x, id.value(new DerivativeStructure(1, 1, 0, x)).getValue(), EPS);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,147,"ssert.assertEquals(lo, id.value(lo), EPS);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,148,"ssert.assertEquals(hi, id.value(hi), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,171,"Assert.assertEquals(lo, id.value(new DerivativeStructure(1, 1, 0, lo)).getValue(), EPS);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,172,"Assert.assertEquals(hi, id.value(new DerivativeStructure(1, 1, 0, hi)).getValue(), EPS);"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,152,ublic void testDerivativeWithInverseFunction() {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,176,public void testDerivativesWithInverseFunction() {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,177,"double[] epsilon = new double[] { 1.0e-20, 4.0e-16, 3.0e-15, 2.0e-11, 3.0e-9, 1.0e-6 };"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,156,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,158,inal UnivariateFunction dgdx = g.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,159,inal UnivariateFunction chain
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,160," FunctionUtils.compose(new Inverse(), FunctionUtils.compose(dgdx, f));"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,162,or (int i = 0; i < 10; i++) {
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,163,inal double x = lo + Math.random() * (hi - lo);
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,164,inal double r = dfdx.value(x);
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,165,"ssert.assertEquals(r, chain.value(x), r * 1e-15);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,182,RandomGenerator random = new Well1024a(0x96885e9c1f81cea5l);
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,183,final UnivariateDifferentiable id =
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,184,"FunctionUtils.compose((UnivariateDifferentiable) g, (UnivariateDifferentiable) f);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,185,for (int maxOrder = 0; maxOrder < 6; ++maxOrder) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,186,double max = 0;
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,187,for (int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,188,final double x = lo + random.nextDouble() * (hi - lo);
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,189,"final DerivativeStructure dsX = new DerivativeStructure(1, maxOrder, 0, x);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,190,"max = FastMath.max(max, FastMath.abs(dsX.getPartialDerivative(maxOrder) -"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,191,id.value(dsX).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,192,"Assert.assertEquals(dsX.getPartialDerivative(maxOrder),"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,193,"id.value(dsX).getPartialDerivative(maxOrder),"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,194,epsilon[maxOrder]);
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,197,"// each function evaluates correctly near boundaries,"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,198,// but combination leads to NaN as some intermediate point is infinite
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,199,"final DerivativeStructure dsLo = new DerivativeStructure(1, maxOrder, 0, lo);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,200,if (maxOrder == 0) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,201,Assert.assertTrue(Double.isInfinite(f.value(dsLo).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,202,"Assert.assertEquals(lo, id.value(dsLo).getPartialDerivative(maxOrder), epsilon[maxOrder]);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,203,} else if (maxOrder == 1) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,204,Assert.assertTrue(Double.isInfinite(f.value(dsLo).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,205,Assert.assertTrue(Double.isNaN(id.value(dsLo).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,206,} else {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,207,Assert.assertTrue(Double.isNaN(f.value(dsLo).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,208,Assert.assertTrue(Double.isNaN(id.value(dsLo).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,211,"final DerivativeStructure dsHi = new DerivativeStructure(1, maxOrder, 0, hi);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,212,if (maxOrder == 0) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,213,Assert.assertTrue(Double.isInfinite(f.value(dsHi).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,214,"Assert.assertEquals(hi, id.value(dsHi).getPartialDerivative(maxOrder), epsilon[maxOrder]);"
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,215,} else if (maxOrder == 1) {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,216,Assert.assertTrue(Double.isInfinite(f.value(dsHi).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,217,Assert.assertTrue(Double.isNaN(id.value(dsHi).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,218,} else {
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,219,Assert.assertTrue(Double.isNaN(f.value(dsHi).getPartialDerivative(maxOrder)));
True,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,220,Assert.assertTrue(Double.isNaN(id.value(dsHi).getPartialDerivative(maxOrder)));
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,168,"ssert.assertEquals(dfdx.value(lo), chain.value(lo), 0); // -inf"
False,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java,169,"ssert.assertEquals(dfdx.value(hi), chain.value(hi), 0); // +inf"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,45,inal UnivariateFunction dfdx = f.derivative();
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,46,"final DerivativeStructure f0 = f.value(new DerivativeStructure(1, 1, 0, 0.0));"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,47,"ssert.assertEquals(0.25, dfdx.value(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,48,"Assert.assertEquals(0.25, f0.getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,51,@Test
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,52,public void testDerivativesHighOrder() {
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,53,"DerivativeStructure s = new Sigmoid(1, 3).value(new DerivativeStructure(1, 5, 0, 1.2));"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,54,"Assert.assertEquals(2.5370495669980352859, s.getPartialDerivative(0), 5.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,55,"Assert.assertEquals(0.35578888129361140441, s.getPartialDerivative(1), 6.0e-17);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,56,"Assert.assertEquals(-0.19107626464144938116,  s.getPartialDerivative(2), 6.0e-17);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,57,"Assert.assertEquals(-0.02396830286286711696,  s.getPartialDerivative(3), 4.0e-17);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,58,"Assert.assertEquals(0.21682059798981049049,   s.getPartialDerivative(4), 3.0e-17);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,59,"Assert.assertEquals(-0.19186320234632658055,  s.getPartialDerivative(5), 2.0e-16);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,53,inal UnivariateFunction dfdx = f.derivative();
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,55,"ssert.assertEquals(0, dfdx.value(Double.NEGATIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,56,"ssert.assertEquals(0, dfdx.value(-Double.MAX_VALUE), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,57,"ssert.assertEquals(0, dfdx.value(-1e50), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,58,"ssert.assertEquals(0, dfdx.value(-1e3), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,59,"ssert.assertEquals(0, dfdx.value(1e3), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,60,"ssert.assertEquals(0, dfdx.value(1e50), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,61,"ssert.assertEquals(0, dfdx.value(Double.MAX_VALUE), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,62,"ssert.assertEquals(0, dfdx.value(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,66,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.NEGATIVE_INFINITY)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,67,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -Double.MAX_VALUE)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,68,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e50)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,69,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, -1e3)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,70,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e3)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,71,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, 1e50)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,72,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.MAX_VALUE)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java,73,"Assert.assertEquals(0, f.value(new DerivativeStructure(1, 1, 0, Double.POSITIVE_INFINITY)).getPartialDerivative(1), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,20,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,21,import org.apache.commons.math3.dfp.Dfp;
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,22,import org.apache.commons.math3.dfp.DfpField;
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,23,import org.apache.commons.math3.dfp.DfpMath;
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,21,mport org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,30,ublic double value(double x) {
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,31,eturn FastMath.sin(x) / x;
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,34,public double value(double x) {
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,35,Dfp dfpX = new DfpField(25).newDfp(x);
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,36,return DfpMath.sin(dfpX).divide(dfpX).toDouble();
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,38,"ssert.assertEquals(""x="" + x, fX, sX, 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,43,"Assert.assertEquals(""x="" + x, fX, sX, 2.0e-16);"
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,73,inal UnivariateFunction sPrime = (new Sinc(true)).derivative();
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,78,"final DerivativeStructure s0 = new Sinc(true).value(new DerivativeStructure(1, 1, 0, 0.0));"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,79,"Assert.assertEquals(0, s0.getPartialDerivative(1), 0);"
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,75,"ssert.assertEquals(0, sPrime.value(0), 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,82,@Test
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,83,public void testDerivatives1Dot2Unnormalized() {
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,84,"DerivativeStructure s = new Sinc(false).value(new DerivativeStructure(1, 5, 0, 1.2));"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,85,"Assert.assertEquals( 0.77669923830602195806, s.getPartialDerivative(0), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,86,"Assert.assertEquals(-0.34528456985779031701, s.getPartialDerivative(1), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,87,"Assert.assertEquals(-0.2012249552097047631,  s.getPartialDerivative(2), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,88,"Assert.assertEquals( 0.2010975926270339262,  s.getPartialDerivative(3), 4.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,89,"Assert.assertEquals( 0.106373929549242204,   s.getPartialDerivative(4), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,90,"Assert.assertEquals(-0.1412599110579478695,  s.getPartialDerivative(5), 3.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,93,@Test
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,94,public void testDerivatives1Dot2Normalized() {
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,95,"DerivativeStructure s = new Sinc(true).value(new DerivativeStructure(1, 5, 0, 1.2));"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,96,"Assert.assertEquals(-0.15591488063143983888, s.getPartialDerivative(0), 6.0e-17);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,97,"Assert.assertEquals(-0.54425176145292298767, s.getPartialDerivative(1), 2.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,98,"Assert.assertEquals(2.4459044611635856107,   s.getPartialDerivative(2), 9.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,99,"Assert.assertEquals(0.5391369206235909586,   s.getPartialDerivative(3), 7.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,100,"Assert.assertEquals(-16.984649869728849865,  s.getPartialDerivative(4), 8.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,101,"Assert.assertEquals(5.0980327462666316586,   s.getPartialDerivative(5), 9.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,80,inal UnivariateFunction sPrime = (new Sinc()).derivative();
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,106,final Sinc sinc = new Sinc();
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,83,eturn (FastMath.cos(x) - FastMath.sin(x) / x) / x;
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,109,Dfp dfpX = new DfpField(25).newDfp(x);
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,110,return DfpMath.cos(dfpX).subtract(DfpMath.sin(dfpX).divide(dfpX)).divide(dfpX).toDouble();
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,89,inal double sX = sPrime.value(x);
False,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,90,"ssert.assertEquals(""x="" + x, fX, sX, 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,116,"final DerivativeStructure sX = sinc.value(new DerivativeStructure(1, 1, 0, x));"
True,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,src/test/java/org/apache/commons/math3/analysis/function/SincTest.java,117,"Assert.assertEquals(""x="" + x, fX, sX.getPartialDerivative(1), 3.0e-13);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,20,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,21,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,22,import org.apache.commons.math3.util.FastMath;
False,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,43,inal UnivariateFunction sPrime = (new Sqrt()).derivative();
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,46,final UnivariateDifferentiable sPrime = new Sqrt();
False,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,52,inal double sX = sPrime.value(x);
False,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,53,"ssert.assertEquals(""x="" + x, fX, sX, 0);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,55,"final double sX = sPrime.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,56,"Assert.assertEquals(""x="" + x, fX, sX, FastMath.ulp(fX));"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,60,@Test
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,61,public void testDerivativesHighOrder() {
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,62,"DerivativeStructure s = new Sqrt().value(new DerivativeStructure(1, 5, 0, 1.2));"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,63,"Assert.assertEquals(1.0954451150103322269, s.getPartialDerivative(0), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,64,"Assert.assertEquals(0.45643546458763842789, s.getPartialDerivative(1), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,65,"Assert.assertEquals(-0.1901814435781826783,  s.getPartialDerivative(2), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,66,"Assert.assertEquals(0.23772680447272834785,  s.getPartialDerivative(3), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,67,"Assert.assertEquals(-0.49526417598485072465,   s.getPartialDerivative(4), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java,68,"Assert.assertEquals(1.4445205132891479465,  s.getPartialDerivative(5), 3.0e-16);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,18,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,20,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,22,import org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,23,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,24,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,25,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,28,* Class that models a circle.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,29,* The parameters of problem are:
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,30,* <ul>
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,31,"*  <li>the x-coordinate of the circle center,</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,32,"*  <li>the y-coordinate of the circle center,</li>"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,33,*  <li>the radius of the circle.</li>
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,34,* </ul>
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,35,* The model functions are:
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,36,* <ul>
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,37,"*  <li>for each triplet (cx, cy, r), the (x, y) coordinates of a point on the"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,38,*   corresponding circle.</li>
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,39,* </ul>
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,41,class CircleProblem implements DifferentiableMultivariateVectorFunction {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,42,/** Cloud of points assumed to be fitted by a circle. */
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,43,private final ArrayList<double[]> points;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,44,/** Error on the x-coordinate of the points. */
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,45,private final double xSigma;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,46,/** Error on the y-coordinate of the points. */
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,47,private final double ySigma;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,48,/** Number of points on the circumference (when searching which
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,49,"model point is closest to a given ""observation"". */"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,50,private final int resolution;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,53,* @param xError Assumed error for the x-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,54,* @param xError Assumed error for the y-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,55,* @param searchResolution Number of points to try when searching the one
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,56,"* that is closest to a given ""observed"" point."
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,58,"public CircleProblem(double xError,"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,59,"double yError,"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,60,int searchResolution) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,61,points = new ArrayList<double[]>();
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,62,xSigma = xError;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,63,ySigma = yError;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,64,resolution = searchResolution;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,68,* @param xError Assumed error for the x-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,69,* @param xError Assumed error for the y-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,71,"public CircleProblem(double xError,"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,72,double yError) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,73,"this(xError, yError, 500);"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,76,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,77,"points.add(new double[] { px, py });"
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,80,public double[] target() {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,81,final double[] t = new double[points.size() * 2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,82,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,83,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,84,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,85,t[index] = p[0];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,86,t[index + 1] = p[1];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,89,return t;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,92,public double[] weight() {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,93,final double wX = 1 / (xSigma * xSigma);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,94,final double wY = 1 / (ySigma * ySigma);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,95,final double[] w = new double[points.size() * 2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,96,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,97,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,98,w[index] = wX;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,99,w[index + 1] = wY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,102,return w;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,105,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,106,final double cx = params[0];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,107,final double cy = params[1];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,108,final double r = params[2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,110,final double[] model = new double[points.size() * 2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,112,final double deltaTheta = MathUtils.TWO_PI / resolution;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,113,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,114,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,115,final double px = p[0];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,116,final double py = p[1];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,118,double bestX = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,119,double bestY = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,120,double dMin = Double.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,122,// Find the angle for which the circle passes closest to the
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,123,// current point (using a resolution of 100 points along the
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,124,// circumference).
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,125,for (double theta = 0; theta <= MathUtils.TWO_PI; theta += deltaTheta) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,126,final double currentX = cx + r * FastMath.cos(theta);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,127,final double currentY = cy + r * FastMath.sin(theta);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,128,final double dX = currentX - px;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,129,final double dY = currentY - py;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,130,final double d = dX * dX + dY * dY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,131,if (d < dMin) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,132,dMin = d;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,133,bestX = currentX;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,134,bestY = currentY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,138,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,139,model[index] = bestX;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,140,model[index + 1] = bestY;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,143,return model;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,146,public MultivariateMatrixFunction jacobian() {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,147,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,148,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,149,return jacobian(point);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,154,private double[][] jacobian(double[] params) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,155,final double[][] jacobian = new double[points.size() * 2][3];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,157,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,158,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,159,// Partial derivative wrt x-coordinate of center.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,160,jacobian[index][0] = 1;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,161,jacobian[index + 1][0] = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,162,// Partial derivative wrt y-coordinate of center.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,163,jacobian[index][1] = 0;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,164,jacobian[index + 1][1] = 1;
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,165,// Partial derivative wrt radius.
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,166,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,167,jacobian[index][2] = (p[0] - params[0]) / params[2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,168,jacobian[index + 1][2] = (p[1] - params[1]) / params[2];
True,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java,171,return jacobian;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,593,@Test
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,594,public void testCircleFitting2() {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,595,final double xCenter = 123.456;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,596,final double yCenter = 654.321;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,597,final double xSigma = 10;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,598,final double ySigma = 15;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,599,final double radius = 111.111;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,600,final RandomCirclePointGenerator factory
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,601,"= new RandomCirclePointGenerator(xCenter, yCenter, radius,"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,602,"xSigma, ySigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,603,59421063L);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,604,"final CircleProblem circle = new CircleProblem(xSigma, ySigma);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,606,final int numPoints = 10;
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,607,for (Point2D.Double p : factory.generate(numPoints)) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,608,"circle.addPoint(p.x, p.y);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,609,"// System.out.println(p.x + "" "" + p.y);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,612,// First guess for the center's coordinates and radius.
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,613,"final double[] init = { 90, 659, 115 };"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,615,final LevenbergMarquardtOptimizer optimizer
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,616,= new LevenbergMarquardtOptimizer();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,617,"final PointVectorValuePair optimum = optimizer.optimize(100, circle,"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,618,"circle.target(), circle.weight(),"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,619,init);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,621,final double[] paramFound = optimum.getPoint();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,623,// Retrieve errors estimation.
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,624,final double[][] covMatrix = optimizer.getCovariances();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,625,final double[] asymptoticStandardErrorFound = optimizer.guessParametersErrors();
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,626,final double[] sigmaFound = new double[covMatrix.length];
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,627,for (int i = 0; i < covMatrix.length; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,628,sigmaFound[i] = FastMath.sqrt(covMatrix[i][i]);
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,629,"//             System.out.println(""i="" + i + "" value="" + paramFound[i]"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,630,"//                                + "" sigma="" + sigmaFound[i]"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,631,"//                                + "" ase="" + asymptoticStandardErrorFound[i]);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,634,"// System.out.println(""chi2="" + optimizer.getChiSquare());"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,636,// Check that the parameters are found within the assumed error bars.
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,637,"Assert.assertEquals(xCenter, paramFound[0], asymptoticStandardErrorFound[0]);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,638,"Assert.assertEquals(yCenter, paramFound[1], asymptoticStandardErrorFound[1]);"
True,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java,639,"Assert.assertEquals(radius, paramFound[2], asymptoticStandardErrorFound[2]);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,18,package org.apache.commons.math3.optimization.general;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,20,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,21,import org.apache.commons.math3.random.RandomData;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,22,import org.apache.commons.math3.random.RandomDataImpl;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,23,import org.apache.commons.math3.random.Well44497b;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,24,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,25,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,28,* Factory for generating a cloud of points that approximate a circle.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,30,public class RandomCirclePointGenerator {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,31,/** RNG. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,32,private final RandomData random;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,33,/** Radius of the circle. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,34,private final double radius;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,35,/** x-coordinate of the circle center. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,36,private final double x;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,37,/** y-coordinate of the circle center. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,38,private final double y;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,39,/** Error on the x-coordinate of the center. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,40,private final double xSigma;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,41,/** Error on the x-coordinate of the center. */
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,42,private final double ySigma;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,45,* @param x Abscissa of the circle center.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,46,* @param y Ordinate of the circle center.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,47,* @param radius Radius of the circle.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,48,* @param xSigma Error on the x-coordinate of the circumferenc points.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,49,* @param ySigma Error on the y-coordinate of the circumferenc points.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,50,* @param seed RNG seed.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,52,"public RandomCirclePointGenerator(double x,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,53,"double y,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,54,"double radius,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,55,"double xSigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,56,"double ySigma,"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,57,long seed) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,58,random = new RandomDataImpl(new Well44497b((seed)));
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,59,this.radius = radius;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,60,this.x = x;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,61,this.y = y;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,62,this.xSigma = xSigma;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,63,this.ySigma = ySigma;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,67,* Point generator.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,69,* @param n Number of points to create.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,70,* @return the cloud of {@code n} points.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,72,public Point2D.Double[] generate(int n) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,73,final Point2D.Double[] cloud = new Point2D.Double[n];
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,74,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,75,cloud[i] = create();
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,77,return cloud;
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,81,* Create one point.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,83,* @return a point.
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,85,private Point2D.Double create() {
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,86,"final double cX = random.nextGaussian(x, xSigma);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,87,"final double cY = random.nextGaussian(y, ySigma);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,88,"final double t = random.nextUniform(0, MathUtils.TWO_PI);"
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,90,final double pX = cX + radius * FastMath.cos(t);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,91,final double pY = cY + radius * FastMath.sin(t);
True,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java,93,"return new Point2D.Double(pX, pY);"

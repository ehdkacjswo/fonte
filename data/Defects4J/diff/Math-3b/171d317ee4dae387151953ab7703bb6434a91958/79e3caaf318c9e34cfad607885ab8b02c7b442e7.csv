is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1637,@Test
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1638,public void testSpecialConstructors() {
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1639,"Assert.assertEquals(ninf, field.newDfp(Double.NEGATIVE_INFINITY));"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1640,"Assert.assertEquals(ninf, field.newDfp(""-Infinity""));"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1641,"Assert.assertEquals(pinf, field.newDfp(Double.POSITIVE_INFINITY));"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1642,"Assert.assertEquals(pinf, field.newDfp(""Infinity""));"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1643,Assert.assertTrue(field.newDfp(Double.NaN).isNaN());
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1644,"Assert.assertTrue(field.newDfp(""NaN"").isNaN());"

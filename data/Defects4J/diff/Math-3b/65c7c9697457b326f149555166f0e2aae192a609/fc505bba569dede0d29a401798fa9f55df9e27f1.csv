is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,21,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,27, univariate functions.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,28,* univariate functions. This implementation is an adaptation partly
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,29,"* based on the Python code from SciPy (module ""optimize.py"" v0.5)."
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,50,"eturn optimize(f, goalType, min, max);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,51,clearResult();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,52,"return localMin(f, goalType, min, startValue, max,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53,"getRelativeAccuracy(), getAbsoluteAccuracy());"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57,learResult();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,58,"eturn localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,60,"return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,72, @param f the function to solve
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74,* @param f the function to solve.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74, or {@link GoalType#MINIMIZE}
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75, @param a Lower bound of the interval
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76, @param b Higher bound of the interval
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77, @param eps Relative accuracy
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78, @param t Absolute accuracy
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,79, @return the point at which the function is minimal.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76,* or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77,* @param lo Lower bound of the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78,"* @param mid Point inside the interval {@code [lo, hi]}."
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,79,* @param hi Higher bound of the interval.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,80,* @param eps Relative accuracy.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,81,* @param t Absolute accuracy.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,82,* @return the optimum point.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,85,"rivate double localMin(final UnivariateRealFunction f, final GoalType goalType,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,86,"ouble a, double b, final double eps, final double t)"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,88,"private double localMin(UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89,"GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,90,"double lo, double mid, double hi,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,91,"double eps, double t)"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,88,ouble x = a + GOLDEN_SECTION * (b - a);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,93,if (eps <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,94,throw new NotStrictlyPositiveException(eps);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,96,if (t <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,97,throw new NotStrictlyPositiveException(t);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,99,"double a, b;"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,100,if (lo < hi) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,101,a = lo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,102,b = hi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,103,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,104,a = hi;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,105,b = lo;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,108,double x = mid;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,102,ouble tol = eps * Math.abs(x) + t;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,103,ouble t2 = 2 * tol;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,122,final double tol1 = eps * Math.abs(x) + t;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,123,final double tol2 = 2 * tol1;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,106,f (Math.abs(x - m) > t2 - 0.5 * (b - a)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,126,if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,113,f (Math.abs(e) > tol) { // Fit parabola.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,133,if (Math.abs(e) > tol1) { // Fit parabola.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,129,f (Math.abs(p) < Math.abs(0.5 * q * r) &&
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,130,p < q * (a - x)) && (p < q * (b - x))) { // Parabolic interpolation step.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,131, = p / q;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,132, = x + d;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,134,/ f must not be evaluated too close to a or b.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,135,f (((u - a) < t2) || ((b - u) < t2)) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,136, = (x < m) ? tol : -tol;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,148,if (p > q * (a - x)
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,149,&& p < q * (b - x)
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,150,&& Math.abs(p) < Math.abs(0.5 * q * r)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,151,// Parabolic interpolation step.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,152,d = p / q;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,153,u = x + d;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,155,// f must not be evaluated too close to a or b.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,156,if (u - a < tol2
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,157,|| b - u < tol2) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,158,if (x <= m) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,159,d = tol1;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,160,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,161,d = -tol1;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,164,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,165,// Golden section step.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,166,if (x < m) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,167,e = b - x;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,168,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,169,e = a - x;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,171,d = GOLDEN_SECTION * e;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,173,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,174,// Golden section step.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,175,if (x < m) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,176,e = b - x;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,177,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,178,e = a - x;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,138, else { // Golden section step.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,139, = ((x < m) ? b : a) - x;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,143,/ f must not be evaluated too close to a or b.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,144, = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,183,"// Update by at least ""tol1""."
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,184,if (Math.abs(d) < tol1) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,185,if (d >= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,186,u = x + tol1;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,187,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,188,u = x - tol1;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,190,} else {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,191,u = x + d;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,169,f ((fu <= fw) || (w == x)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,218,if (fu <= fw
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,219,|| w == x) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,174, else if ((fu <= fv) || (v == x) || (v == w)) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,224,} else if (fu <= fv
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,225,|| v == x
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,226,|| v == w) {
False,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,22, Auxillary class for testing solvers.
True,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,22,* Auxiliary class for testing solvers.
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,51,ssertTrue(minimizer.getEvaluations() > 2900);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,52,ssertTrue(minimizer.getEvaluations() < 3100);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,51,assertTrue(minimizer.getEvaluations() > 1500);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,52,assertTrue(minimizer.getEvaluations() < 1700);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,61,underlying.setRelativeAccuracy(1e-15);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,62,.setSeed(4312000053l);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,63,g.setSeed(4312000053L);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,85,"ssertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,86,"ssertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,87,"ssertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,86,"double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,87,"assertEquals(-0.27195612525275803, result, 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,88,"assertEquals(-0.27195612525275803, minimizer.getResult(), 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,89,"assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,95,ssertTrue(minimizer.getEvaluations()    >= 510);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,96,ssertTrue(minimizer.getEvaluations()    <= 530);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,97,ssertTrue(minimizer.getIterationCount() >= 150);
False,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,98,ssertTrue(minimizer.getIterationCount() <= 170);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,97,assertTrue(minimizer.getEvaluations()    >= 300);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,98,assertTrue(minimizer.getEvaluations()    <= 420);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,99,assertTrue(minimizer.getIterationCount() >= 100);
True,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,100,assertTrue(minimizer.getIterationCount() <= 140);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,28,import org.apache.commons.math.analysis.SincFunction;
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,34, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,35,"* @version $Revision: 811685 $ $Date: 2009-09-05 19:36:48 +0200 (Sat, 05 Sep 2009) $"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,36,ublic final class BrentMinimizerTest {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,37,public final class BrentOptimizerTest {
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,57,ssertTrue(minimizer.getEvaluations()    >=  90);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,58,assertTrue(minimizer.getEvaluations()    >=  30);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,71,"/ The quintic function has zeros at 0, +-0.5 and +-1."
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,72,"/ The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,72,// The function has local minima at -0.27195613 and 0.82221643.
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,84,@Test
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,85,public void testQuinticMinPythonComparison() throws MathException {
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,86,// The function has local minima at -0.27195613 and 0.82221643.
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,87,UnivariateRealFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,88,UnivariateRealOptimizer minimizer = new BrentOptimizer();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,89,minimizer.setRelativeAccuracy(1e-12);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,90,minimizer.setAbsoluteAccuracy(1e-11);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,92,double result;
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,93,"int nIter, nEval;"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,95,"result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2, -0.25);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,96,nIter = minimizer.getIterationCount();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,97,nEval = minimizer.getEvaluations();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,98,// XXX Python: -0.27195612805911351 (instead of -0.2719561279558559).
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,99,"assertEquals(-0.2719561279558559, result, 1e-12);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,100,// XXX Python: 15 (instead of 18).
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,101,"assertEquals(18, nEval);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,102,// XXX Python: 11 (instead of 17).
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,103,"assertEquals(17, nIter);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,"result = minimizer.optimize(f, GoalType.MINIMIZE, 0.7, 0.9, 0.8);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,106,nIter = minimizer.getIterationCount();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,107,nEval = minimizer.getEvaluations();
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,108,// XXX Python: 0.82221643488363705 (instead of 0.8222164326561908).
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,109,"assertEquals(0.8222164326561908, result, 1e-12);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,110,// XXX Python: 25 (instead of 43).
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,111,"assertEquals(43, nEval);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,112,// XXX Python: 21 (instead of 24).
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,"assertEquals(24, nIter);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,88,"/ The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,119,// The function has a local maximum at 0.27195613.
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,92,inimizer.setMaximalIterationCount(30);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,123,minimizer.setMaximalIterationCount(20);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,"ssertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,144,"assertEquals(3 * Math.PI / 2, result, 80 * solver.getAbsoluteAccuracy());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,693,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,694,public void walkInRowOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,695,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,696,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,697,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,698,for (int row = 0; row < rows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,699,for (int column = 0; column < columns; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,700,"final double oldValue = getEntry(row, column);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,701,"final double newValue = visitor.visit(row, column, oldValue);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,702,"setEntry(row, column, newValue);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,705,lu = null;
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,708,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,709,public void walkInRowOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,710,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,711,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,712,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,713,for (int row = 0; row < rows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,714,for (int column = 0; column < columns; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,715,"visitor.visit(row, column, getEntry(row, column));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,720,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,721,"public void walkInRowOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,722,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,723,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,724,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,725,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,726,for (int row = startRow; row <= endRow; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,727,for (int column = startColumn; column <= endColumn; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,728,"final double oldValue = getEntry(row, column);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,729,"final double newValue = visitor.visit(row, column, oldValue);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,730,"setEntry(row, column, newValue);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,733,lu = null;
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,736,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,737,"public void walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,738,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,739,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,740,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,741,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,742,for (int row = startRow; row <= endRow; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,743,for (int column = startColumn; column <= endColumn; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,744,"visitor.visit(row, column, getEntry(row, column));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,749,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,750,public void walkInInternalOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,751,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,752,walkInRowOrder(visitor);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,755,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,756,public void walkInInternalOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,757,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,758,walkInRowOrder(visitor);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,761,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,762,"public void walkInInternalOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,763,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,764,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,765,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,766,"walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,769,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,770,"public void walkInInternalOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,771,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,772,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,773,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,774,"walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,26, Implementation of RealMatrix using a flat arrays to store square blocks of the matrix.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,26,* Cache-friendly implementation of RealMatrix using a flat arrays to store
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,27,* square blocks of the matrix.
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,28, This implementation is cache-friendly. Square blocks are stored as small arrays and allow
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,29, efficient traversal of data both in row major direction and columns major direction. This
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,30, greatly increases performances for algorithms that use crossed directions loops like
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,31, multiplication or transposition.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,29,* This implementation is specially designed to be cache-friendly. Square blocks are
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,30,* stored as small arrays and allow efficient traversal of data both in row major direction
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,31,"* and columns major direction, one block at a time. This greatly increases performances"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,32,* for algorithms that use crossed directions loops like multiplication or transposition.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,33,* </p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,34,* <p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,35,* The size of square blocks is a static parameter. It may be tuned according to the cache
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,36,"* size of the target computer processor. As a rule of thumbs, it should be the largest"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,37,* value that allows three blocks to be simultaneously cached (this is necessary for example
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,38,* for matrix multiplication). The default value is to use 52x52 blocks which is well suited
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,39,* for processors with 64k L1 cache (one block holds 2704 values or 21632 bytes). This value
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,40,* could be lowered to 36x36 for processors with 32k L1 cache.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,41,* </p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,42,* <p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,43,* The regular blocks represent {@link #BLOCK_SIZE} x {@link #BLOCK_SIZE} squares. Blocks
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,44,* at right hand side and bottom side which may be smaller to fit matrix dimensions. The square
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,45,* blocks are flattened in row major order in single dimension arrays which are therefore
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,46,* {@link #BLOCK_SIZE}<sup>2</sup> elements long for regular blocks. The blocks are themselves
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,47,* organized in row major order.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,48,* </p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,49,* <p>
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,50,"* As an example, for a block size of 52x52, a 100x60 matrix would be stored in 4 blocks."
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,51,"* Block 0 would be a double[2704] array holding the upper left 52x52 square, block 1 would be"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,52,"* a double[416] array holding the upper right 52x8 rectangle, block 2 would be a double[2496]"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,53,* array holding the lower left 48x52 rectangle and block 3 would be a double[384] array
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,54,* holding the lower right 48x8 rectangle.
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1286,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1287,public void walkInRowOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1288,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1289,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1290,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1291,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1292,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1293,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1294,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1295,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1296,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1297,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1298,"for (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1299,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1306,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1307,public void walkInRowOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1308,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1309,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1310,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1311,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1312,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1313,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1314,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1315,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1316,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1317,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1318,"for (int q = qStart, k = (p - pStart) * jWidth; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1319,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1326,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1327,"public void walkInRowOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1328,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1329,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1330,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1331,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1332,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1333,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1334,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1335,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1336,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1337,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1338,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1339,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1340,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1341,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1342,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1343,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1344,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1351,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1352,"public void walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1353,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1354,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1355,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1356,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1357,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1358,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1359,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1360,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1361,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1362,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1363,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1364,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1365,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1366,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1367,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1368,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1369,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1376,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1377,public void walkInInternalOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1378,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1379,"for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1380,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1381,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1382,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1383,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1384,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1385,final double[] block = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1386,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1387,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1388,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1395,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1396,public void walkInInternalOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1397,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1398,"for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1399,final int pStart = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1400,"final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1401,"for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1402,final int qStart = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1403,"final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1404,final double[] block = blocks[blockIndex];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1405,"for (int p = pStart, k = 0; p < pEnd; ++p) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1406,"for (int q = qStart; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1407,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1414,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1415,"public void walkInInternalOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1416,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1417,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1418,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1419,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1420,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1421,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1422,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1423,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1424,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1425,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1426,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1427,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1428,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1429,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1430,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1431,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1432,"block[k] = visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1439,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1440,"public void walkInInternalOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1441,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1442,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1443,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1444,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1445,for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1446,final int p0     = iBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1447,"final int pStart = Math.max(startRow, p0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1448,"final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1449,for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1450,final int jWidth = blockWidth(jBlock);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1451,final int q0     = jBlock * BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1452,"final int qStart = Math.max(startColumn, q0);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1453,"final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1454,final double[] block = blocks[iBlock * blockColumns + jBlock];
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1455,for (int p = pStart; p < pEnd; ++p) {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1456,"for (int q = qStart, k = (p - p0) * jWidth + qStart - q0; q < qEnd; ++q, ++k) {"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,1457,"visitor.visit(p, q, block[k]);"
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,23,* Thrown when a visitor encounters an error while processing a matrix entry.
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,24,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,26,public class MatrixVisitorException extends MathRuntimeException {
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,28,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,29,private static final long serialVersionUID = 3814333035048617048L;
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,32,* Constructs a new instance with specified formatted detail message.
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,33,* @param pattern format specifier
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,34,* @param arguments format arguments
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,36,"public MatrixVisitorException(final String pattern, final Object[] arguments) {"
True,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,src/java/org/apache/commons/math/linear/MatrixVisitorException.java,37,"super(pattern, arguments);"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,132, @param endRow Final row index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,132,* @param endRow Final row index (inclusive)
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,134, @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,134,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,502,* Visit (and possibly change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,503,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,504,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,505,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,506,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,507,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,508,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,509,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,510,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,511,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,513,void walkInRowOrder(RealMatrixChangingVisitor visitor) throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,516,* Visit (but don't change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,517,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,518,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,519,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,520,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,521,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,522,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,523,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,524,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,525,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,527,void walkInRowOrder(RealMatrixPreservingVisitor visitor) throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,530,* Visit (and possibly change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,531,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,532,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,533,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,534,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,535,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,536,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,537,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,538,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,539,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,540,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,541,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,542,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,543,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,544,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,546,"void walkInRowOrder(RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,547,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,548,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,551,* Visit (but don't change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,552,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,553,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,554,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,555,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,556,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,557,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,558,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,559,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,560,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,561,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,562,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,563,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,564,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,565,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,567,"void walkInRowOrder(RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,568,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,569,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,572,* Visit (and possibly change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,573,* <p>The matrix internal order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,574,"* different from traditional row order, but is generally faster. If there is no need"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,575,"* for an explicit walk order, this method should be preferred to the {@link"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,576,* #walkInRowOrder(RealMatrixChangingVisitor)} one.</p>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,577,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,578,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,579,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,580,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,581,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,582,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,583,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,584,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,585,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,587,void walkInInternalOrder(RealMatrixChangingVisitor visitor) throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,590,* Visit (but don't change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,591,* <p>The matrix internal order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,592,"* different from traditional row order, but is generally faster. If there is no need"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,593,"* for an explicit walk order, this method should be preferred to the {@link"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,594,* #walkInRowOrder(RealMatrixPreservingVisitor)} one.</p>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,595,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,596,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,597,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,598,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,599,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,600,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,601,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,602,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,603,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,605,void walkInInternalOrder(RealMatrixPreservingVisitor visitor) throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,608,* Visit (and possibly change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,609,* <p>The matrix internal order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,610,"* different from traditional row order, but is generally faster. If there is no need"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,611,"* for an explicit walk order, this method should be preferred to the {@link"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,612,"* #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)} one.</p>"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,613,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,614,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,615,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,616,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,617,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,618,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,619,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,620,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,621,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,622,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,623,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,624,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,625,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,626,"* @see #walkInInternalOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,628,"void walkInInternalOrder(RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,629,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,630,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,633,* Visit (but don't change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,634,* Visit (and possibly change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,635,* <p>The matrix internal order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,636,"* different from traditional row order, but is generally faster. If there is no need"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,637,"* for an explicit walk order, this method should be preferred to the {@link"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,638,"* #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)} one.</p>"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,639,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,640,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,641,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,642,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,643,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,644,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,645,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,646,* @see #walkInRowOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,647,* @see #walkInRowOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,648,"* @see #walkInRowOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,649,"* @see #walkInRowOrder(RealMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,650,* @see #walkInInternalOrder(RealMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,651,* @see #walkInInternalOrder(RealMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,652,"* @see #walkInInternalOrder(RealMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,654,"void walkInInternalOrder(RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,655,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,656,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,23,* Interface defining a visitor for matrix entries.
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,26,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,28,public interface RealMatrixChangingVisitor extends Serializable {
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,31,* Visit one matrix entry.
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,32,* @param row row index of the entry
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,33,* @param column column index of the entry
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,34,* @param value current value of the entry
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,35,* @return the new value to be set for the entry
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,36,* @throws MatrixVisitorException if something wrong occurs
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,38,"double visit(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java,39,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,462,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,463,public void walkInRowOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,464,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,465,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,466,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,467,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,468,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,469,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,470,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,475,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,476,public void walkInRowOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,477,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,478,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,479,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,480,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,481,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,482,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,483,"visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,488,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,489,"public void walkInRowOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,490,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,491,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,492,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,493,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,494,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,495,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,496,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,497,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,502,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,503,"public void walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,504,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,505,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,506,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,507,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,508,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,509,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,510,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,511,"visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,23,* Interface defining a visitor for matrix entries.
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,26,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,28,public interface RealMatrixPreservingVisitor extends Serializable {
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,31,* Visit one matrix entry.
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,32,* @param row row index of the entry
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,33,* @param column column index of the entry
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,34,* @param value current value of the entry
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,35,* @throws MatrixVisitorException if something wrong occurs
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,37,"void visit(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java,38,throws MatrixVisitorException;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1023,public void testWalk() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1024,int rows    = 150;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1025,int columns = 75;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1027,"RealMatrix m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1028,m.walkInRowOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1029,GetVisitor getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1030,m.walkInInternalOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1031,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1033,"m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1034,"m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1035,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1036,"m.walkInInternalOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1037,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1038,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1039,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1040,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1042,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1043,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1044,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1048,"m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1049,m.walkInInternalOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1050,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1051,m.walkInRowOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1052,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1054,"m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1055,"m.walkInInternalOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1056,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1057,"m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1058,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1059,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1060,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1061,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1063,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1064,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1065,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1070,private static class SetVisitor implements RealMatrixChangingVisitor {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1071,private static final long serialVersionUID = -5724808764099124932L;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1072,"public double visit(int i, int j, double value) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1073,return i + j / 1024.0;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1077,private static class GetVisitor implements RealMatrixPreservingVisitor {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1078,private static final long serialVersionUID = 1299771253908695242L;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1079,int count = 0;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1080,"public void visit(int i, int j, double value) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1081,++count;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1082,"assertEquals(i + j / 1024.0, value, 0.0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1084,public int getCount() {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1085,return count;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,809,public void testWalk() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,810,int rows    = 150;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,811,int columns = 75;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,813,"RealMatrix m = new RealMatrixImpl(rows, columns);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,814,m.walkInRowOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,815,GetVisitor getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,816,m.walkInInternalOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,817,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,819,"m = new RealMatrixImpl(rows, columns);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,820,"m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,821,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,822,"m.walkInInternalOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,823,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,824,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,825,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,826,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,828,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,829,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,830,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,834,"m = new RealMatrixImpl(rows, columns);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,835,m.walkInInternalOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,836,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,837,m.walkInRowOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,838,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,840,"m = new RealMatrixImpl(rows, columns);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,841,"m.walkInInternalOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,842,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,843,"m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,844,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,845,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,846,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,847,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,849,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,850,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,851,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,856,private static class SetVisitor implements RealMatrixChangingVisitor {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,857,private static final long serialVersionUID = -5724808764099124932L;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,858,"public double visit(int i, int j, double value) {"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,859,return i + j / 1024.0;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,863,private static class GetVisitor implements RealMatrixPreservingVisitor {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,864,private static final long serialVersionUID = 1299771253908695242L;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,865,int count = 0;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,866,"public void visit(int i, int j, double value) {"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,867,++count;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,868,"assertEquals(i + j / 1024.0, value, 0.0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,870,public int getCount() {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,871,return count;

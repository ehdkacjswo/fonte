is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,288,f (FastMath.abs(e[k]) <= threshold) {
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,289,// the following condition is written this way in order
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,290,"// to break out of the loop when NaN occurs, writing it"
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,291,"// as ""if (FastMath.abs(e[k]) <= threshold)"" would loop"
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,292,// indefinitely in case of NaNs because comparison on NaNs
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,293,"// always return false, regardless of what is checked"
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,294,// see issue MATH-947
True,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java,295,if (!(FastMath.abs(e[k]) > threshold)) {
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,319,@Test
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,320,public void testIssue947() {
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,321,double[][] nans = new double[][] {
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,322,"{ Double.NaN, Double.NaN },"
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,323,"{ Double.NaN, Double.NaN }"
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,325,"RealMatrix m = new Array2DRowRealMatrix(nans, false);"
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,326,SingularValueDecomposition svd = new SingularValueDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,327,Assert.assertTrue(Double.isNaN(svd.getSingularValues()[0]));
True,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java,328,Assert.assertTrue(Double.isNaN(svd.getSingularValues()[1]));

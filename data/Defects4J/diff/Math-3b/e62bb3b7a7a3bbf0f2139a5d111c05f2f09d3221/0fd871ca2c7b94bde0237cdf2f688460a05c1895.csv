is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,27," Let A be an m &times; n matrix, then U is an m &times; n orthogonal matrix,"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,28," &Sigma; is a n &times; n diagonal matrix with positive diagonal elements,"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,29, and V is an n &times; n orthogonal matrix.</p>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,27,"* Let A be a m &times; n matrix, then U is a m &times; p orthogonal matrix,"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,28,"* &Sigma; is a p &times; p diagonal matrix with positive diagonal elements,"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,29,* V is a n &times; p orthogonal matrix (hence V<sup>T</sup> is a p &times; n
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,30,* orthogonal matrix). The size p depends on the chosen algorithm:
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,31,* <ul>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,32,"*   <li>for full SVD, p is n,</li>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,33,"*   <li>for compact SVD, p is the rank r of the matrix"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,34,"*       (i. e. the number of positive singular values),</li>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,35,"*   <li>for truncated SVD p is min(r, t) where t is user-specified.</li>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,36,* </ul>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,37,* </p>
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,24, Calculates the Singular Value Decomposition of a matrix.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,24,* Calculates the compact or truncated Singular Value Decomposition of a matrix.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,27," Let A be an m &times; n matrix, then U is an m &times; n orthogonal matrix,"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,28," &Sigma; is a n &times; n diagonal matrix with positive diagonal elements,"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,29, and V is an n &times; n orthogonal matrix.</p>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,27,"* Let A be a m &times; n matrix, then U is a m &times; p orthogonal matrix,"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,28,"* &Sigma; is a p &times; p diagonal matrix with positive diagonal elements,"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,29,* V is a n &times; p orthogonal matrix (hence V<sup>T</sup> is a p &times; n
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,30,* orthogonal matrix). The size p depends on the chosen algorithm:
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,31,* <ul>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,32,"*   <li>for full SVD, p would be n, but this is not supported by this implementation,</li>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,33,"*   <li>for compact SVD, p is the rank r of the matrix"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,34,"*       (i. e. the number of positive singular values),</li>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,35,"*   <li>for truncated SVD p is min(r, t) where t is user-specified.</li>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,36,* </ul>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,37,* </p>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,38,* <p>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,39,* Note that since this class computes only the compact or truncated SVD and not
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,40,"* the full SVD, the singular values computed are always positive."
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,41,* </p>
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,91,* Calculates the compact Singular Value Decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,92,* @param matrix The matrix to decompose.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,93,* @exception InvalidMatrixException (wrapping a {@link
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,94,* org.apache.commons.math.ConvergenceException} if algorithm fails to converge
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,96,public SingularValueDecompositionImpl(final RealMatrix matrix)
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,97,throws InvalidMatrixException {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,98,"this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,104,* @param max maximal number of singular values to compute
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,84,ublic SingularValueDecompositionImpl(RealMatrix matrix)
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,108,"public SingularValueDecompositionImpl(final RealMatrix matrix, final int max)"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,116,ingularValues = eigenDecomposition.getRealEigenvalues();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,117,or (int i = 0; i < singularValues.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,118,inal double si = singularValues[i];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,119,ingularValues[i] = (si < 0) ? 0.0 : Math.sqrt(si);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,140,final double[] eigenValues = eigenDecomposition.getRealEigenvalues();
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,141,"int p = Math.min(max, eigenValues.length);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,142,while ((p > 0) && (eigenValues[p - 1] <= 0)) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,143,--p;
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,145,singularValues = new double[p];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,146,for (int i = 0; i < p; ++i) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,147,singularValues[i] = Math.sqrt(eigenValues[i]);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,158,final int p = singularValues.length;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,132,inal double[][] eData = eigenDecomposition.getV().getData();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,133,inal double[][] iData = new double[m][];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,161,final RealMatrix e =
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,162,"eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,163,final double[][] eData = e.getData();
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,164,final double[][] wData = new double[m][p];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,135,Data[0] = ei1;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,136,or (int i = 0; i < n - 1; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,137,/ compute B.E.S^(-1) where E is the eigenvectors matrix
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,138,/ we reuse the array from matrix E to store the result
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,166,for (int i = 0; i < p - 1; ++i) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,167,// compute W = B.E.S^(-1) where E is the eigenvectors matrix
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,171,final double[] wi  = wData[i];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,143,Data[i + 1] = ei1;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,144,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,145,i0[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,173,for (int j = 0; j < p; ++j) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,174,wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,149,inal double lastMain = mainBidiagonal[n - 1];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,150,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,151,i1[j] *= lastMain / singularValues[j];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,178,final double lastMain = mainBidiagonal[p - 1];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,179,final double[] wr1  = wData[p - 1];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,180,for (int j = 0; j < p; ++j) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,181,wr1[j] = ei1[j] * lastMain / singularValues[j];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,153,or (int i = n; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,154,Data[i] = new double[n];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,183,for (int i = p; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,184,wData[i] = new double[p];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,157,ransformer.getU().multiply(MatrixUtils.createRealMatrix(iData));
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,187,transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,160,achedU = transformer.getU().multiply(eigenDecomposition.getV());
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,190,final RealMatrix e =
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,191,"eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,192,cachedU = transformer.getU().multiply(e);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,240,final int p = singularValues.length;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,210,achedV = transformer.getV().multiply(eigenDecomposition.getV());
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,243,final RealMatrix e =
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,244,"eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,245,cachedV = transformer.getV().multiply(e);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,213,inal double[][] eData = eigenDecomposition.getV().getData();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,214,inal double[][] iData = new double[n][];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,248,// compute W = Bt.E.S^(-1) where E is the eigenvectors matrix
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,249,final RealMatrix e =
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,250,"eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,251,final double[][] eData = e.getData();
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,252,final double[][] wData = new double[n][p];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,216,Data[0] = ei1;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,217,or (int i = 0; i < m - 1; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,218,/ compute Bt.E.S^(-1) where E is the eigenvectors matrix
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,219,/ we reuse the array from matrix E to store the result
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,254,for (int i = 0; i < p - 1; ++i) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,258,final double[] wi  = wData[i];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,224,Data[i + 1] = ei1;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,225,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,226,i0[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,260,for (int j = 0; j < p; ++j) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,261,wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,230,inal double lastMain = mainBidiagonal[m - 1];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,231,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,232,i1[j] *= lastMain / singularValues[j];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,265,final double lastMain = mainBidiagonal[p - 1];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,266,final double[] wr1  = wData[p - 1];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,267,for (int j = 0; j < p; ++j) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,268,wr1[j] = ei1[j] * lastMain / singularValues[j];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,234,or (int i = m; i < n; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,235,Data[i] = new double[m];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,270,for (int i = p; i < n; ++i) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,271,wData[i] = new double[p];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,238,ransformer.getV().multiply(MatrixUtils.createRealMatrix(iData));
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,274,transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,301,final int p = singularValues.length;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,266,hile ((dimension < n) && (singularValues[dimension] >= minSingularValue)) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,303,while ((dimension < p) && (singularValues[dimension] >= minSingularValue)) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,276,inal double[][] data = new double[dimension][n];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,313,final double[][] data = new double[dimension][p];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,283,", 0, dimension - 1, 0, n - 1);"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,320,"}, 0, dimension - 1, 0, p - 1);"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,320,etRank() == singularValues.length);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,357,"getRank() == Math.max(m, n));"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,326,** Singular values. */
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,327,rivate final double[] singularValues;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,329,** U<sup>T</sup> matrix of the decomposition. */
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,330,rivate final RealMatrix uT;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,332,** V matrix of the decomposition. */
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,333,rivate final RealMatrix v;
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,363,/** Pseudo-inverse of the initial matrix. */
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,364,private final RealMatrix pseudoInverse;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,347,his.singularValues = singularValues;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,348,his.uT             = uT;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,349,his.v              = v;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,350,his.nonSingular    = nonSingular;
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,378,double[][] suT      = uT.getData();
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,379,for (int i = 0; i < singularValues.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,380,final double a      = 1.0 / singularValues[i];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,381,final double[] suTi = suT[i];
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,382,for (int j = 0; j < suTi.length; ++j) {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,383,suTi[j] *= a;
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,386,"pseudoInverse    = v.multiply(new Array2DRowRealMatrix(suT, false));"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,387,this.nonSingular = nonSingular;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,359, @exception InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,362,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,364,f (b.length != uT.getColumnDimension()) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,365,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,366,"vector length mismatch: got {0} but expected {1}"","
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,367,".length, uT.getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,370,inal double[] w = uT.operate(b);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,371,or (int i = 0; i < singularValues.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,372,inal double si = singularValues[i];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,373,f (si == 0) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,374,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,376,[i] /= si;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,378,eturn v.operate(w);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,398,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,399,return pseudoInverse.operate(b);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,388, @exception InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,391,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,393,f (b.getDimension() != uT.getColumnDimension()) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,394,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,395,"vector length mismatch: got {0} but expected {1}"","
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,396,".getDimension(), uT.getColumnDimension());"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,399,inal RealVector w = uT.operate(b);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,400,or (int i = 0; i < singularValues.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,401,inal double si = singularValues[i];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,402,f (si == 0) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,403,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,405,".setEntry(i, w.getEntry(i) / si);"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,407,eturn v.operate(w);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,410,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,411,return pseudoInverse.operate(b);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,417, @exception InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,420,"hrows IllegalArgumentException, InvalidMatrixException {"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,422,f (b.getRowDimension() != singularValues.length) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,423,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,424,"dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,425,".getRowDimension(), b.getColumnDimension(),"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,426,"ingularValues.length, ""n"");"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,429,inal RealMatrix w = uT.multiply(b);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,430,or (int i = 0; i < singularValues.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,431,inal double si  = singularValues[i];
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,432,f (si == 0) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,433,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,435,inal double inv = 1.0 / si;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,436,or (int j = 0; j < b.getColumnDimension(); ++j) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,437,".multiplyEntry(i, j, inv);"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,440,eturn v.multiply(w);
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,422,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,423,return pseudoInverse.multiply(b);
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,454, @throws InvalidMatrixException if decomposed matrix is singular
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,456,ublic RealMatrix getInverse()
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,457,hrows InvalidMatrixException {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,459,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,460,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,463,eturn solve(MatrixUtils.createRealIdentityMatrix(singularValues.length));
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,437,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,438,return pseudoInverse;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,20,mport junit.framework.Test;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,22,mport junit.framework.TestSuite;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,21,import org.junit.Test;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,24,mport org.apache.commons.math.linear.DecompositionSolver;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,25,mport org.apache.commons.math.linear.InvalidMatrixException;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,26,mport org.apache.commons.math.linear.MatrixUtils;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,27,mport org.apache.commons.math.linear.RealMatrix;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,28,mport org.apache.commons.math.linear.ArrayRealVector;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,29,mport org.apache.commons.math.linear.SingularValueDecompositionImpl;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,31,ublic class SingularValueSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,23,public class SingularValueSolverTest {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,40,ublic SingularValueSolverTest(String name) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,41,uper(name);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,44,ublic static Test suite() {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,45,estSuite suite = new TestSuite(SingularValueSolverTest.class);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,46,"uite.setName(""SingularValueSolver Tests"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,47,eturn suite;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,33,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,57,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,40,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,61,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,44,"Assert.fail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,65,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,48,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,69,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,52,"Assert.fail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,73,"ail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,56,"Assert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,77,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,60,"Assert.fail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,81,** test solve singularity errors */
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,82,ublic void testSolveSingularityErrors() {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,64,/** test least square solve */
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,65,@Test
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,66,public void testLeastSquareSolve() {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,89,ealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,90,ry {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,91,olver.solve(b);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,92,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,93, catch (InvalidMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,94,/ expected behavior
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,95, catch (Exception e) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,96,"ail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,98,ry {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,99,olver.solve(b.getColumn(0));
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,100,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,101, catch (InvalidMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,102,/ expected behavior
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,103, catch (Exception e) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,104,"ail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,106,ry {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,107,olver.solve(b.getColumnVector(0));
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,108,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,109, catch (InvalidMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,110,/ expected behavior
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,111, catch (Exception e) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,112,"ail(""wrong exception caught"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,114,ry {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,115,olver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,116,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,117, catch (InvalidMatrixException ime) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,118,/ expected behavior
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,119, catch (Exception e) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,120,"ail(""wrong exception caught"");"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,73,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,74,"{ 11, 12 }, { 21, 22 }"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,76,RealMatrix xMatrix = solver.solve(b);
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,77,"Assert.assertEquals(11, xMatrix.getEntry(0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,78,"Assert.assertEquals(12, xMatrix.getEntry(0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,79,"Assert.assertEquals(0, xMatrix.getEntry(1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,80,"Assert.assertEquals(0, xMatrix.getEntry(1, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,81,double[] xCol = solver.solve(b.getColumn(0));
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,82,"Assert.assertEquals(11, xCol[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,83,"Assert.assertEquals(0, xCol[1], 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,84,RealVector xColVec = solver.solve(b.getColumnVector(0));
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,85,"Assert.assertEquals(11, xColVec.getEntry(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,86,"Assert.assertEquals(0, xColVec.getEntry(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,87,RealVector xColOtherVec = solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,88,"Assert.assertEquals(11, xColOtherVec.getEntry(0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,89,"Assert.assertEquals(0, xColOtherVec.getEntry(1), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,93,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,137,"ssertEquals(0, solver.solve(b).subtract(xRef).getNorm(), normTolerance);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,106,"Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), normTolerance);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,141,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,110,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,148,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,117,"Assert.assertEquals(0,"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,157,"ssertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,126,"Assert.assertEquals(0,"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,134,@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,168,"ssertEquals(3.0, svd.getConditionNumber(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,138,"Assert.assertEquals(3.0, svd.getConditionNumber(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,141,@Test
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,142,public void testMath320A() {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,143,RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,144,"{ 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,146,double s439  = Math.sqrt(439.0);
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,147,double[] reference = new double[] {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,148,"Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,150,SingularValueDecomposition svd =
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,151,new SingularValueDecompositionImpl(rm);
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,152,double[] singularValues = svd.getSingularValues();
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,153,for (int i = 0; i < reference.length; ++i) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,154,"Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,156,regularElements(svd.getU());
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,157,regularElements(svd.getVT());
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,158,"//        double[] b = new double[] { 5.0, 6.0, 7.0 };"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,159,//        double[] resSVD = svd.getSolver().solve(b);
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,160,"//        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,161,"//        System.out.println(""resSVD = "" + resSVD[0] + "" "" + resSVD[1] + "" "" + resSVD[2]);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,162,//        double minResidual = Double.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,163,//        double d0Min = Double.NaN;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,164,//        double d1Min = Double.NaN;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,165,//        double d2Min = Double.NaN;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,166,//        double h = 0.01;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,167,//        int    k = 100;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,168,//        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,169,//            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,170,//                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,171,"//                    double[] f = rm.operate(new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 });"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,172,//                    double residual = Math.sqrt((f[0] - b[0]) * (f[0] - b[0]) +
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,173,//                                                (f[1] - b[1]) * (f[1] - b[1]) +
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,174,//                                                (f[2] - b[2]) * (f[2] - b[2]));
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,175,//                    if (residual < minResidual) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,176,//                        d0Min = d0;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,177,//                        d1Min = d1;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,178,//                        d2Min = d2;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,179,//                        minResidual = residual;
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,184,"//        System.out.println(d0Min + "" "" + d1Min + "" "" + d2Min + "" -> "" + minResidual);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,185,"//        Assert.assertEquals(0, d0Min, 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,186,"//        Assert.assertEquals(0, d1Min, 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,187,"//        Assert.assertEquals(0, d2Min, 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,191,@Test
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,192,public void testMath320B() {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,193,RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,194,"{ 1.0, 2.0 }, { 1.0, 2.0 }"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,196,SingularValueDecomposition svd =
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,197,new SingularValueDecompositionImpl(rm);
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,198,regularElements(svd.getU());
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,199,regularElements(svd.getVT());
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,202,private void regularElements(RealMatrix m) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,203,for (int i = 0; i < m.getRowDimension(); ++i) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,204,for (int j = 0; j < m.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,205,"double mij = m.getEntry(i, j);"
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,206,Assert.assertFalse(Double.isInfinite(mij));
True,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,207,Assert.assertFalse(Double.isNaN(mij));

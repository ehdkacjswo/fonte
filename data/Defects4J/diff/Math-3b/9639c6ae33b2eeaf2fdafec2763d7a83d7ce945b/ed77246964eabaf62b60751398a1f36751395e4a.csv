is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,20,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,23,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,24,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,23, eigen decomposition of a real matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,27,* Calculates the eigen decomposition of a real <strong>symmetric</strong>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,28,* matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,27, <p>This interface is similar in spirit to the <code>EigenvalueDecomposition</code>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,32,* <p>This class is similar in spirit to the <code>EigenvalueDecomposition</code>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,44,* <p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,45,"* As of 2.0, this class supports only <strong>symmetric</strong> matrices, and"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,46,* hence computes only real realEigenvalues. This implies the D matrix returned
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,47,* by {@link #getD()} is always diagonal and the imaginary values returned
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,48,* {@link #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,49,* null.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,50,* </p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,51,* <p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,52,"* When called with a {@link RealMatrix} argument, this implementation only uses"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,53,"* the upper part of the matrix, the part below the diagonal is not accessed at"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,54,* all.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,55,* </p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,56,* <p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,57,"* This implementation is based on the paper by A. Drubrulle, R.S. Martin and"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,58,* J.H. Wilkinson 'The Implicit QL Algorithm' in Wilksinson and Reinsch (1971)
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,59,"* Handbook for automatic computation, vol. 2, Linear algebra, Springer-Verlag,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,60,* New-York
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,61,* </p>
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,42, @since 2.0
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,65,* @since 2.0 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,44,ublic interface EigenDecomposition {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,67,public class EigenDecomposition{
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,69,/** Maximum number of iterations accepted in the implicit QL transformation */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,70,private byte maxIter = 30;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,72,/** Main diagonal of the tridiagonal matrix. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,73,private double[] main;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,75,/** Secondary diagonal of the tridiagonal matrix. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,76,private double[] secondary;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,79,* Transformer to tridiagonal (may be null if matrix is already
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,80,* tridiagonal).
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,82,private TriDiagonalTransformer transformer;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,84,/** Real part of the realEigenvalues. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,85,private double[] realEigenvalues;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,87,/** Imaginary part of the realEigenvalues. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,88,private double[] imagEigenvalues;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,90,/** Eigenvectors. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,91,private ArrayRealVector[] eigenvectors;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,93,/** Cached value of V. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,94,private RealMatrix cachedV;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,96,/** Cached value of D. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,97,private RealMatrix cachedD;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,99,/** Cached value of Vt. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,100,private RealMatrix cachedVt;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,103,* Calculates the eigen decomposition of the given symmetric matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,105,* @param matrix Matrix to decompose. It <em>must</em> be symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,106,* @param splitTolerance Dummy parameter (present for backward
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,107,* compatibility only).
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,108,* @throws NonSymmetricMatrixException if the matrix is not symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,109,* @throws MaxCountExceededException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,111,"public EigenDecomposition(final RealMatrix matrix,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,112,final double splitTolerance)  {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,113,"if (isSymmetric(matrix, true)) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,114,transformToTridiagonal(matrix);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,115,findEigenVectors(transformer.getQ().getData());
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,120,* Calculates the eigen decomposition of the symmetric tridiagonal
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,121,* matrix.  The Householder matrix is assumed to be the identity matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,123,* @param main Main diagonal of the symmetric triadiagonal form
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,124,* @param secondary Secondary of the tridiagonal form
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,125,* @param splitTolerance Dummy parameter (present for backward
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,126,* compatibility only).
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,127,* @throws MaxCountExceededException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,129,"public EigenDecomposition(final double[] main,final double[] secondary,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,130,final double splitTolerance) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,131,this.main      = main.clone();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,132,this.secondary = secondary.clone();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,133,transformer    = null;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,134,final int size=main.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,135,double[][] z = new double[size][size];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,136,for (int i=0;i<size;i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,137,z[i][i]=1.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,139,findEigenVectors(z);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,143,* Check if a matrix is symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,145,* @param matrix Matrix to check.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,146,"* @param raiseException If {@code true}, the method will throw an"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,147,* exception if {@code matrix} is not symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,148,* @return {@code true} if {@code matrix} is symmetric.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,149,* @throws NonSymmetricMatrixException if the matrix is not symmetric and
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,150,* {@code raiseException} is {@code true}.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,152,"private boolean isSymmetric(final RealMatrix matrix,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,153,boolean raiseException) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,154,final int rows = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,155,final int columns = matrix.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,156,final double eps = 10 * rows * columns * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,157,for (int i = 0; i < rows; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,158,for (int j = i + 1; j < columns; ++j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,159,"final double mij = matrix.getEntry(i, j);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,160,"final double mji = matrix.getEntry(j, i);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,161,if (FastMath.abs(mij - mji) >
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,162,"(FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * eps)) {"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,163,if (raiseException) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,164,"throw new NonSymmetricMatrixException(i, j, eps);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,166,return false;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,170,return true;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,55,ealMatrix getV();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,182,public RealMatrix getV() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,184,if (cachedV == null) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,185,final int m = eigenvectors.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,186,"cachedV = MatrixUtils.createRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,187,for (int k = 0; k < m; ++k) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,188,"cachedV.setColumnVector(k, eigenvectors[k]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,191,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,192,return cachedV;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,66,ealMatrix getD();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,205,public RealMatrix getD() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,206,if (cachedD == null) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,207,// cache the matrix for subsequent calls
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,208,cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,210,return cachedD;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,77,ealMatrix getVT();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,222,public RealMatrix getVT() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,224,if (cachedVt == null) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,225,final int m = eigenvectors.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,226,"cachedVt = MatrixUtils.createRealMatrix(m, m);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,227,for (int k = 0; k < m; ++k) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,228,"cachedVt.setRowVector(k, eigenvectors[k]);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,233,// return the cached matrix
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,234,return cachedVt;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,86,ouble[] getRealEigenvalues();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,244,public double[] getRealEigenvalues() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,245,return realEigenvalues.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,96,ouble getRealEigenvalue(int i);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,256,public double getRealEigenvalue(final int i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,257,return realEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,105,ouble[] getImagEigenvalues();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,267,public double[] getImagEigenvalues() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,268,return imagEigenvalues.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,115,ouble getImagEigenvalue(int i);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,279,public double getImagEigenvalue(final int i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,280,return imagEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,123,ealVector getEigenvector(int i);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,289,public RealVector getEigenvector(final int i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,290,return eigenvectors[i].copy();
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,129,ouble getDeterminant();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,297,public double getDeterminant() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,298,double determinant = 1;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,299,for (double lambda : realEigenvalues) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,300,determinant *= lambda;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,302,return determinant;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,135,ecompositionSolver getSolver();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,309,public DecompositionSolver getSolver() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,310,"return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,313,/** Specialized solver. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,314,private static class Solver implements DecompositionSolver {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,316,/** Real part of the realEigenvalues. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,317,private double[] realEigenvalues;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,319,/** Imaginary part of the realEigenvalues. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,320,private double[] imagEigenvalues;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,322,/** Eigenvectors. */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,323,private final ArrayRealVector[] eigenvectors;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,326,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,327,* @param realEigenvalues
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,328,*            real parts of the eigenvalues
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,329,* @param imagEigenvalues
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,330,*            imaginary parts of the eigenvalues
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,331,* @param eigenvectors
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,332,*            eigenvectors
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,334,"private Solver(final double[] realEigenvalues,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,335,"final double[] imagEigenvalues,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,336,final ArrayRealVector[] eigenvectors) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,337,this.realEigenvalues = realEigenvalues;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,338,this.imagEigenvalues = imagEigenvalues;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,339,this.eigenvectors = eigenvectors;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,343,* Solve the linear equation A &times; X = B for symmetric matrices A.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,344,* <p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,345,"* This method only find exact linear solutions, i.e. solutions for"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,346,* which ||A &times; X - B|| is exactly 0.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,347,* </p>
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,348,* @param b Right-hand side of the equation A &times; X = B
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,349,* @return a Vector X that minimizes the two norm of A &times; X - B
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,350,* @throws DimensionMismatchException if the matrices dimensions do not match.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,351,* @throws SingularMatrixException if the decomposed matrix is singular.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,353,public RealVector solve(final RealVector b) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,354,if (!isNonSingular()) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,355,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,358,final int m = realEigenvalues.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,359,if (b.getDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,360,"throw new DimensionMismatchException(b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,363,final double[] bp = new double[m];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,364,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,365,final ArrayRealVector v = eigenvectors[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,366,final double[] vData = v.getDataRef();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,367,final double s = v.dotProduct(b) / realEigenvalues[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,368,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,369,bp[j] += s * vData[j];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,373,"return new ArrayRealVector(bp, false);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,376,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,377,public RealMatrix solve(RealMatrix b) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,379,if (!isNonSingular()) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,380,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,383,final int m = realEigenvalues.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,384,if (b.getRowDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,385,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,388,final int nColB = b.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,389,final double[][] bp = new double[m][nColB];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,390,final double[] tmpCol = new double[m];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,391,for (int k = 0; k < nColB; ++k) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,392,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,393,"tmpCol[i] = b.getEntry(i, k);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,394,bp[i][k]  = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,396,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,397,final ArrayRealVector v = eigenvectors[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,398,final double[] vData = v.getDataRef();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,399,double s = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,400,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,401,s += v.getEntry(j) * tmpCol[j];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,403,s /= realEigenvalues[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,404,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,405,bp[j][k] += s * vData[j];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,410,"return new Array2DRowRealMatrix(bp, false);"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,415,* Check if the decomposed matrix is non-singular.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,416,* @return true if the decomposed matrix is non-singular
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,418,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,419,for (int i = 0; i < realEigenvalues.length; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,420,if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,421,return false;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,424,return true;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,428,* Get the inverse of the decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,430,* @return the inverse matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,431,* @throws SingularMatrixException if the decomposed matrix is singular.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,433,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,434,if (!isNonSingular()) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,435,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,438,final int m = realEigenvalues.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,439,final double[][] invData = new double[m][m];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,441,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,442,final double[] invI = invData[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,443,for (int j = 0; j < m; ++j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,444,double invIJ = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,445,for (int k = 0; k < m; ++k) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,446,final double[] vK = eigenvectors[k].getDataRef();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,447,invIJ += vK[i] * vK[j] / realEigenvalues[k];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,449,invI[j] = invIJ;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,452,return MatrixUtils.createRealMatrix(invData);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,457,* Transform matrix to tridiagonal.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,459,* @param matrix Matrix to transform.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,461,private void transformToTridiagonal(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,462,// transform the matrix to tridiagonal
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,463,transformer = new TriDiagonalTransformer(matrix);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,464,main = transformer.getMainDiagonalRef();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,465,secondary = transformer.getSecondaryDiagonalRef();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,469,"* Find eigenvalues and eigenvectors (Dubrulle et al., 1971)"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,471,* @param householderMatrix Householder matrix of the transformation
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,472,* to tri-diagonal form.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,474,private void findEigenVectors(double[][] householderMatrix) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,475,double[][]z = householderMatrix.clone();
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,476,final int n = main.length;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,477,realEigenvalues = new double[n];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,478,imagEigenvalues = new double[n];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,479,double[] e = new double[n];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,480,for (int i = 0; i < n - 1; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,481,realEigenvalues[i] = main[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,482,e[i] = secondary[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,484,realEigenvalues[n - 1] = main[n - 1];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,485,e[n - 1] = 0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,487,// Determine the largest main and secondary value in absolute term.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,488,double maxAbsoluteValue=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,489,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,490,if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,491,maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,493,if (FastMath.abs(e[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,494,maxAbsoluteValue=FastMath.abs(e[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,497,// Make null any main and secondary value too small to be significant
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,498,if (maxAbsoluteValue!=0.0) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,499,for (int i=0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,500,if (FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,501,realEigenvalues[i]=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,503,if (FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,504,e[i]=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,509,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,510,int its = 0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,511,int m;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,512,do {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,513,for (m = j; m < n - 1; m++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,514,double delta = FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,515,if (FastMath.abs(e[m]) + delta == delta) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,516,break;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,519,if (m != j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,520,if (its == maxIter) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,521,"throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,"
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,522,maxIter);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,524,its++;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,525,double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,526,double t = FastMath.sqrt(1 + q * q);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,527,if (q < 0.0) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,528,q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,529,} else {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,530,q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,532,double u = 0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,533,double s = 1.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,534,double c = 1.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,535,int i;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,536,for (i = m - 1; i >= j; i--) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,537,double p = s * e[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,538,double h = c * e[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,539,if (FastMath.abs(p) >= FastMath.abs(q)) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,540,c = q / p;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,541,t = FastMath.sqrt(c * c + 1.0);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,542,e[i + 1] = p * t;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,543,s = 1.0 / t;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,544,c = c * s;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,545,} else {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,546,s = p / q;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,547,t = FastMath.sqrt(s * s + 1.0);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,548,e[i + 1] = q * t;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,549,c = 1.0 / t;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,550,s = s * c;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,552,if (e[i + 1] == 0.0) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,553,realEigenvalues[i + 1] -= u;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,554,e[m] = 0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,555,break;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,557,q = realEigenvalues[i + 1] - u;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,558,t = (realEigenvalues[i] - q) * s + 2.0 * c * h;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,559,u = s * t;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,560,realEigenvalues[i + 1] = q + u;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,561,q = c * t - h;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,562,for (int ia = 0; ia < n; ia++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,563,p = z[ia][i + 1];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,564,z[ia][i + 1] = s * z[ia][i] + c * p;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,565,z[ia][i] = c * z[ia][i] - s * p;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,568,if (t == 0.0 && i >= j) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,569,continue;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,571,realEigenvalues[j] -= u;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,572,e[j] = q;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,573,e[m] = 0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,575,} while (m != j);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,578,//Sort the eigen values (and vectors) in increase order
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,579,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,580,int k = i;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,581,double p = realEigenvalues[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,582,for (int j = i + 1; j < n; j++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,583,if (realEigenvalues[j] > p) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,584,k = j;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,585,p = realEigenvalues[j];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,588,if (k != i) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,589,realEigenvalues[k] = realEigenvalues[i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,590,realEigenvalues[i] = p;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,591,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,592,p = z[j][i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,593,z[j][i] = z[j][k];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,594,z[j][k] = p;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,599,// Determine the largest eigen value in absolute term.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,600,maxAbsoluteValue=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,601,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,602,if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,603,maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,606,// Make null any eigen value too small to be significant
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,607,if (maxAbsoluteValue!=0.0) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,608,for (int i=0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,609,if (FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,610,realEigenvalues[i]=0.0;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,614,eigenvectors = new ArrayRealVector[n];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,615,double[] tmp = new double[n];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,616,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,617,for (int j = 0; j < n; j++) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,618,tmp[j] = z[j][i];
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,620,eigenvectors[i] = new ArrayRealVector(tmp);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,20,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,21,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,22,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,23,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,24,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,27, Calculates the eigen decomposition of a real <strong>symmetric</strong>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,28, matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,29, <p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,30, The eigen decomposition of matrix A is a set of two matrices: V and D such
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,31," that A = V D V<sup>T</sup>. A, V and D are all m &times; m matrices."
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,32, </p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,33, <p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,34," As of 2.0, this class supports only <strong>symmetric</strong> matrices, and"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,35, hence computes only real realEigenvalues. This implies the D matrix returned
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,36, by {@link #getD()} is always diagonal and the imaginary values returned
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,37, {@link #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,38, null.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,39, </p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,40, <p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,41," When called with a {@link RealMatrix} argument, this implementation only uses"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,42," the upper part of the matrix, the part below the diagonal is not accessed at"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,43, all.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,44, </p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,45, <p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,46," This implementation is based on the paper by A. Drubrulle, R.S. Martin and"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,47, J.H. Wilkinson 'The Implicit QL Algorithm' in Wilksinson and Reinsch (1971)
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,48," Handbook for automatic computation, vol. 2, Linear algebra, Springer-Verlag,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,49, New-York
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,50, </p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,51, @version $Id$
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,52, @since 2.0
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,54,ublic class EigenDecompositionImpl implements EigenDecomposition {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,56,** Maximum number of iterations accepted in the implicit QL transformation */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,57,rivate byte maxIter = 30;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,59,** Main diagonal of the tridiagonal matrix. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,60,rivate double[] main;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,62,** Secondary diagonal of the tridiagonal matrix. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,63,rivate double[] secondary;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,66, Transformer to tridiagonal (may be null if matrix is already
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,67, tridiagonal).
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,69,rivate TriDiagonalTransformer transformer;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,71,** Real part of the realEigenvalues. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,72,rivate double[] realEigenvalues;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,74,** Imaginary part of the realEigenvalues. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,75,rivate double[] imagEigenvalues;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,77,** Eigenvectors. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,78,rivate ArrayRealVector[] eigenvectors;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,80,** Cached value of V. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,81,rivate RealMatrix cachedV;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,83,** Cached value of D. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,84,rivate RealMatrix cachedD;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,86,** Cached value of Vt. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,87,rivate RealMatrix cachedVt;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,90, Calculates the eigen decomposition of the given symmetric matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,92, @param matrix Matrix to decompose. It <em>must</em> be symmetric.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,93, @param splitTolerance Dummy parameter (present for backward
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,94, compatibility only).
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,95, @throws NonSymmetricMatrixException if the matrix is not symmetric.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,96, @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,98,"ublic EigenDecompositionImpl(final RealMatrix matrix,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,99,inal double splitTolerance)  {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,100,"f (isSymmetric(matrix, true)) {"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,101,ransformToTridiagonal(matrix);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,102,indEigenVectors(transformer.getQ().getData());
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,107, Calculates the eigen decomposition of the symmetric tridiagonal
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,108, matrix.  The Householder matrix is assumed to be the identity matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,110, @param main Main diagonal of the symmetric triadiagonal form
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,111, @param secondary Secondary of the tridiagonal form
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,112, @param splitTolerance Dummy parameter (present for backward
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,113, compatibility only).
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,114, @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,116,"ublic EigenDecompositionImpl(final double[] main,final double[] secondary,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,117,inal double splitTolerance) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,118,his.main      = main.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,119,his.secondary = secondary.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,120,ransformer    = null;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,121,inal int size=main.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,122,ouble[][] z = new double[size][size];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,123,or (int i=0;i<size;i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,124,[i][i]=1.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,126,indEigenVectors(z);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,130, Check if a matrix is symmetric.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,132, @param matrix Matrix to check.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,133," @param raiseException If {@code true}, the method will throw an"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,134, exception if {@code matrix} is not symmetric.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,135, @return {@code true} if {@code matrix} is symmetric.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,136, @throws NonSymmetricMatrixException if the matrix is not symmetric and
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,137, {@code raiseException} is {@code true}.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,139,"rivate boolean isSymmetric(final RealMatrix matrix,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,140,oolean raiseException) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,141,inal int rows = matrix.getRowDimension();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,142,inal int columns = matrix.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,143,inal double eps = 10 * rows * columns * MathUtils.EPSILON;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,144,or (int i = 0; i < rows; ++i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,145,or (int j = i + 1; j < columns; ++j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,146,"inal double mij = matrix.getEntry(i, j);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,147,"inal double mji = matrix.getEntry(j, i);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,148,f (FastMath.abs(mij - mji) >
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,149,"FastMath.max(FastMath.abs(mij), FastMath.abs(mji)) * eps)) {"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,150,f (raiseException) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,151,"hrow new NonSymmetricMatrixException(i, j, eps);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,153,eturn false;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,157,eturn true;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,160,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,161,ublic RealMatrix getV() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,163,f (cachedV == null) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,164,inal int m = eigenvectors.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,165,"achedV = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,166,or (int k = 0; k < m; ++k) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,167,"achedV.setColumnVector(k, eigenvectors[k]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,170,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,171,eturn cachedV;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,176,ublic RealMatrix getD() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,177,f (cachedD == null) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,178,/ cache the matrix for subsequent calls
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,179,achedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,181,eturn cachedD;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,184,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,185,ublic RealMatrix getVT() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,187,f (cachedVt == null) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,188,inal int m = eigenvectors.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,189,"achedVt = MatrixUtils.createRealMatrix(m, m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,190,or (int k = 0; k < m; ++k) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,191,"achedVt.setRowVector(k, eigenvectors[k]);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,196,/ return the cached matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,197,eturn cachedVt;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,200,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,201,ublic double[] getRealEigenvalues() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,202,eturn realEigenvalues.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,205,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,206,ublic double getRealEigenvalue(final int i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,207,eturn realEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,210,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,211,ublic double[] getImagEigenvalues() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,212,eturn imagEigenvalues.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,215,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,216,ublic double getImagEigenvalue(final int i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,217,eturn imagEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,220,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,221,ublic RealVector getEigenvector(final int i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,222,eturn eigenvectors[i].copy();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,226, Return the determinant of the matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,227, @return determinant of the matrix
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,229,ublic double getDeterminant() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,230,ouble determinant = 1;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,231,or (double lambda : realEigenvalues) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,232,eterminant *= lambda;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,234,eturn determinant;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,237,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,238,ublic DecompositionSolver getSolver() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,239,"eturn new Solver(realEigenvalues, imagEigenvalues, eigenvectors);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,242,** Specialized solver. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,243,rivate static class Solver implements DecompositionSolver {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,245,** Real part of the realEigenvalues. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,246,rivate double[] realEigenvalues;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,248,** Imaginary part of the realEigenvalues. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,249,rivate double[] imagEigenvalues;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,251,** Eigenvectors. */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,252,rivate final ArrayRealVector[] eigenvectors;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,255, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,256, @param realEigenvalues
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,257,            real parts of the eigenvalues
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,258, @param imagEigenvalues
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,259,            imaginary parts of the eigenvalues
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,260, @param eigenvectors
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,261,            eigenvectors
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,263,"rivate Solver(final double[] realEigenvalues,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,264,"inal double[] imagEigenvalues,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,265,inal ArrayRealVector[] eigenvectors) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,266,his.realEigenvalues = realEigenvalues;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,267,his.imagEigenvalues = imagEigenvalues;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,268,his.eigenvectors = eigenvectors;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,272, Solve the linear equation A &times; X = B for symmetric matrices A.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,273, <p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,274," This method only find exact linear solutions, i.e. solutions for"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,275, which ||A &times; X - B|| is exactly 0.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,276, </p>
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,277, @param b Right-hand side of the equation A &times; X = B
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,278, @return a Vector X that minimizes the two norm of A &times; X - B
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,279, @throws DimensionMismatchException if the matrices dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,280, @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,282,ublic RealVector solve(final RealVector b) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,283,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,284,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,287,inal int m = realEigenvalues.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,288,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,289,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,292,inal double[] bp = new double[m];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,293,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,294,inal ArrayRealVector v = eigenvectors[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,295,inal double[] vData = v.getDataRef();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,296,inal double s = v.dotProduct(b) / realEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,297,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,298,p[j] += s * vData[j];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,302,"eturn new ArrayRealVector(bp, false);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,305,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,306,ublic RealMatrix solve(RealMatrix b) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,308,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,309,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,312,inal int m = realEigenvalues.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,313,f (b.getRowDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,314,"hrow new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,317,inal int nColB = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,318,inal double[][] bp = new double[m][nColB];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,319,inal double[] tmpCol = new double[m];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,320,or (int k = 0; k < nColB; ++k) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,321,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,322,"mpCol[i] = b.getEntry(i, k);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,323,p[i][k]  = 0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,325,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,326,inal ArrayRealVector v = eigenvectors[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,327,inal double[] vData = v.getDataRef();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,328,ouble s = 0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,329,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,330, += v.getEntry(j) * tmpCol[j];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,332, /= realEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,333,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,334,p[j][k] += s * vData[j];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,339,"eturn new Array2DRowRealMatrix(bp, false);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,344, Check if the decomposed matrix is non-singular.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,345, @return true if the decomposed matrix is non-singular
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,347,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,348,or (int i = 0; i < realEigenvalues.length; ++i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,349,f ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,350,eturn false;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,353,eturn true;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,357, Get the inverse of the decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,359, @return the inverse matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,360, @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,362,ublic RealMatrix getInverse() {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,363,f (!isNonSingular()) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,364,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,367,inal int m = realEigenvalues.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,368,inal double[][] invData = new double[m][m];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,370,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,371,inal double[] invI = invData[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,372,or (int j = 0; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,373,ouble invIJ = 0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,374,or (int k = 0; k < m; ++k) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,375,inal double[] vK = eigenvectors[k].getDataRef();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,376,nvIJ += vK[i] * vK[j] / realEigenvalues[k];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,nvI[j] = invIJ;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,381,eturn MatrixUtils.createRealMatrix(invData);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,386, Transform matrix to tridiagonal.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,388, @param matrix Matrix to transform.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,390,rivate void transformToTridiagonal(final RealMatrix matrix) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,391,/ transform the matrix to tridiagonal
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,392,ransformer = new TriDiagonalTransformer(matrix);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,393,ain = transformer.getMainDiagonalRef();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,394,econdary = transformer.getSecondaryDiagonalRef();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,398," Find eigenvalues and eigenvectors (Dubrulle et al., 1971)"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,400, @param householderMatrix Householder matrix of the transformation
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,401, to tri-diagonal form.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,403,rivate void findEigenVectors(double[][] householderMatrix) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,404,ouble[][]z = householderMatrix.clone();
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,405,inal int n = main.length;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,406,ealEigenvalues = new double[n];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,407,magEigenvalues = new double[n];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,408,ouble[] e = new double[n];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,409,or (int i = 0; i < n - 1; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,410,ealEigenvalues[i] = main[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,411,[i] = secondary[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,413,ealEigenvalues[n - 1] = main[n - 1];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,414,[n - 1] = 0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,416,/ Determine the largest main and secondary value in absolute term.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,417,ouble maxAbsoluteValue=0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,418,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,419,f (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,420,axAbsoluteValue=FastMath.abs(realEigenvalues[i]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,422,f (FastMath.abs(e[i])>maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,423,axAbsoluteValue=FastMath.abs(e[i]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,426,/ Make null any main and secondary value too small to be significant
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,427,f (maxAbsoluteValue!=0.0) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,428,or (int i=0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,429,f (FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,430,ealEigenvalues[i]=0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,432,f (FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,433,[i]=0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,438,or (int j = 0; j < n; j++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,439,nt its = 0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,440,nt m;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,441,o {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,442,or (m = j; m < n - 1; m++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,443,ouble delta = FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,444,f (FastMath.abs(e[m]) + delta == delta) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,445,reak;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,448,f (m != j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,449,f (its == maxIter) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,450,"hrow new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,451,axIter);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,453,ts++;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,454,ouble q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,455,ouble t = FastMath.sqrt(1 + q * q);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,456,f (q < 0.0) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,457, = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,458, else {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,459, = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,461,ouble u = 0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,462,ouble s = 1.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,463,ouble c = 1.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,464,nt i;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,465,or (i = m - 1; i >= j; i--) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,466,ouble p = s * e[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,467,ouble h = c * e[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,468,f (FastMath.abs(p) >= FastMath.abs(q)) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,469, = q / p;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,470, = FastMath.sqrt(c * c + 1.0);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,471,[i + 1] = p * t;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,472, = 1.0 / t;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,473, = c * s;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,474, else {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,475, = p / q;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,476, = FastMath.sqrt(s * s + 1.0);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,477,[i + 1] = q * t;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,478, = 1.0 / t;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,479, = s * c;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,481,f (e[i + 1] == 0.0) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,ealEigenvalues[i + 1] -= u;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,483,[m] = 0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,484,reak;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,486, = realEigenvalues[i + 1] - u;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,487, = (realEigenvalues[i] - q) * s + 2.0 * c * h;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,488, = s * t;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,489,ealEigenvalues[i + 1] = q + u;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,490, = c * t - h;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,491,or (int ia = 0; ia < n; ia++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,492, = z[ia][i + 1];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,493,[ia][i + 1] = s * z[ia][i] + c * p;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,494,[ia][i] = c * z[ia][i] - s * p;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,497,f (t == 0.0 && i >= j) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,498,ontinue;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,500,ealEigenvalues[j] -= u;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,501,[j] = q;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,502,[m] = 0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,504, while (m != j);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,507,/Sort the eigen values (and vectors) in increase order
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,508,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,509,nt k = i;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,510,ouble p = realEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,511,or (int j = i + 1; j < n; j++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,512,f (realEigenvalues[j] > p) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,513, = j;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,514, = realEigenvalues[j];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,517,f (k != i) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,518,ealEigenvalues[k] = realEigenvalues[i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,519,ealEigenvalues[i] = p;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,520,or (int j = 0; j < n; j++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,521, = z[j][i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,522,[j][i] = z[j][k];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,523,[j][k] = p;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,528,/ Determine the largest eigen value in absolute term.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,529,axAbsoluteValue=0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,530,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,531,f (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,532,axAbsoluteValue=FastMath.abs(realEigenvalues[i]);
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,535,/ Make null any eigen value too small to be significant
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,536,f (maxAbsoluteValue!=0.0) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,537,or (int i=0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,538,f (FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,539,ealEigenvalues[i]=0.0;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,543,igenvectors = new ArrayRealVector[n];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,544,ouble[] tmp = new double[n];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,545,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,546,or (int j = 0; j < n; j++) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,547,mp[j] = z[j][i];
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,549,igenvectors[i] = new ArrayRealVector(tmp);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,31,mport org.apache.commons.math.linear.EigenDecompositionImpl;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,31,import org.apache.commons.math.linear.EigenDecomposition;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,771,"igenDecompositionImpl eig = new EigenDecompositionImpl(C, 1.0);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,771,"EigenDecomposition eig = new EigenDecomposition(C, 1.0);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,40,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,41,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,40,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,41,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,52,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,53,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,52,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,53,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,66,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,67,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,66,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,67,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,81,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,82,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,81,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,82,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,97,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,98,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,97,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,98,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,114,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,115,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,114,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,115,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,146,igenDecompositionImpl decomposition;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,147,"ecomposition = new EigenDecompositionImpl(mainTridiagonal,"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,146,EigenDecomposition decomposition;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,147,"decomposition = new EigenDecomposition(mainTridiagonal,"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,191,igenDecompositionImpl decomposition;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,192,"ecomposition = new EigenDecompositionImpl(mainTridiagonal,"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,191,EigenDecomposition decomposition;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,192,"decomposition = new EigenDecomposition(mainTridiagonal,"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,238,igenDecompositionImpl decomposition;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,239,"ecomposition = new EigenDecompositionImpl(mainTridiagonal,"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,238,EigenDecomposition decomposition;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,239,"decomposition = new EigenDecomposition(mainTridiagonal,"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,270,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,271,"d = new EigenDecompositionImpl(t.getMainDiagonalRef(),"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,270,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,271,"ed = new EigenDecomposition(t.getMainDiagonalRef(),"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,286,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,287,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,286,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,287,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,299,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,300,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,299,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,300,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,317,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,318,"d = new EigenDecompositionImpl(createTestMatrix(r, bigValues),"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,317,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,318,"ed = new EigenDecomposition(createTestMatrix(r, bigValues),"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,330,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,331,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,330,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,331,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,343,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,344,"d = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,343,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,344,"ed = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,355,"ealMatrix v = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getV();"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,355,"RealMatrix v = new EigenDecomposition(matrix, MathUtils.SAFE_MIN).getV();"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,366,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,367,"d = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,366,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,367,"ed = new EigenDecomposition(m, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,384,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,385,"d = new EigenDecompositionImpl(repeated, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,384,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,385,"ed = new EigenDecomposition(repeated, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,400,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,401,"d = new EigenDecompositionImpl(distinct, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,400,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,401,"ed = new EigenDecomposition(distinct, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,418,igenDecompositionImpl ed;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,419,"d = new EigenDecompositionImpl(indefinite, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,418,EigenDecomposition ed;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,419,"ed = new EigenDecomposition(indefinite, MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,434,"igenDecompositionImpl ed, double tolerance) {"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,434,"EigenDecomposition ed, double tolerance) {"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,466,"igenDecompositionImpl ed, double tolerance) {"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,466,"EigenDecomposition ed, double tolerance) {"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,36,"ecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,36,"DecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,52,"ecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,52,"DecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,68,"ecompositionSolver es = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,68,"DecompositionSolver es = new EigenDecomposition(matrix, MathUtils.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,101,"ecompositionSolver es = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,101,"DecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,361, <p>
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,362," Gets the greatest common divisor of the absolute value of two numbers,"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,363," using the ""binary gcd"" method which avoids division and modulo"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,364, operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,365, Stein (1961).
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,366, </p>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,361,* Computes the greatest common divisor of the absolute value of two
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,362,"* numbers, using the ""binary gcd"" method which avoids division and"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,363,* modulo operations.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,364,* See Knuth 4.5.2 algorithm B.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,365,* The algorithm is due to Josef Stein (1961).
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,366,* <br/>
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,369, <li>The invocations
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,370," {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,371," {@code gcd(Integer.MIN_VALUE, 0)} and"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,372," {@code gcd(0, Integer.MIN_VALUE)} throw an"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,373," {@code ArithmeticException}, because the result would be 2^31, which"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,374, is too large for an int value.</li>
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,375," <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,376," {@code gcd(x, 0)} is the absolute value of {@code x}, except"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,377, for the special cases above.
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,378," <li>The invocation {@code gcd(0, 0)} is the only one which returns"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,379, {@code 0}.</li>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,369,*  <li>The invocations
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,370,"*   {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,371,"*   {@code gcd(Integer.MIN_VALUE, 0)} and"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,372,"*   {@code gcd(0, Integer.MIN_VALUE)} throw an"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,373,"*   {@code ArithmeticException}, because the result would be 2^31, which"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,374,*   is too large for an int value.</li>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,375,"*  <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,376,"*   {@code gcd(x, 0)} is the absolute value of {@code x}, except"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,377,*   for the special cases above.</li>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,378,"*  <li>The invocation {@code gcd(0, 0)} is the only one which returns"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,379,*   {@code 0}.</li>
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,389,"ublic static int gcd(final int p, final int q) {"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,390,nt u = p;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,391,nt v = q;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,392,f ((u == 0) || (v == 0)) {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,393,f ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,389,"public static int gcd(int p,"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,390,int q)
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,391,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,392,int a = p;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,393,int b = q;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,394,if (a == 0 ||
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,395,b == 0) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,396,if (a == Integer.MIN_VALUE ||
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,397,b == Integer.MIN_VALUE) {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,397,eturn FastMath.abs(u) + FastMath.abs(v);
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,401,return FastMath.abs(a + b);
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,399,"/ keep u and v negative, as negative integers range down to"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,400,"/ -2^31, while positive numbers can only be as large as 2^31-1"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,401,/ (i.e. we can't necessarily negate a negative number without
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,402,/ overflow)
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,403,* assert u!=0 && v!=0; */
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,404,f (u > 0) {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,405, = -u;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,406, // make u negative
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,407,f (v > 0) {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,408, = -v;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,409, // make v negative
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,410,/ B1. [Find power of 2]
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,411,nt k = 0;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,412,hile ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,413,/ both even...
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,414, /= 2;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,415, /= 2;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,416,++; // cast out twos.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,404,long al = a;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,405,long bl = b;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,406,boolean useLong = false;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,407,if (a < 0) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,408,if(Integer.MIN_VALUE == a) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,409,useLong = true;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,410,} else {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,411,a = -a;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,413,al = -al;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,418,f (k == 31) {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,419,"hrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,420,", q);"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,415,if (b < 0) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,416,if (Integer.MIN_VALUE == b) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,417,useLong = true;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,418,} else {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,419,b = -b;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,421,bl = -bl;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,422,/ B2. Initialize: u and v have been divided by 2^k and at least
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,423,/ one is odd.
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,424,nt t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,425,"/ t negative: u was odd, v may be even (t replaces v)"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,426,"/ t positive: u was even, v is odd (t replaces u)"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,427,o {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,428,* assert u<0 && v<0; */
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,429,/ B4/B3: cast out twos from t.
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,430,hile ((t & 1) == 0) { // while t is even..
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,431, /= 2; // cast out twos
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,423,if (useLong) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,424,if(al == bl) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,425,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,426,"p, q);"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,433,"/ B5 [reset max(u,v)]"
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,434,f (t > 0) {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,435, = -t;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,436, else {
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,437, = t;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,428,long blbu = bl;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,429,bl = al;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,430,al = blbu % al;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,431,if (al == 0) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,432,if (bl > Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,433,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,434,"p, q);"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,436,return (int) bl;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,439,/ B6/B3. at this point both u and v should be odd.
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,440, = (v - u) / 2;
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,441,/ |u| larger: t positive (replace u)
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,442,/ |v| larger: t negative (replace v)
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,443, while (t != 0);
False,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,444,eturn -u * (1 << k); // gcd is u*2^k
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,438,blbu = bl;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,440,"// Now ""al"" and ""bl"" fit in an ""int""."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,441,b = (int) al;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,442,a = (int) (blbu % al);
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,445,"return gcdPositive(a, b);"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,449,* Computes the greatest common divisor of two <em>positive</em> numbers
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,450,* (this precondition is <em>not</em> checked and the result is undefined
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,451,"* if not fulfilled) using the ""binary gcd"" method which avoids division"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,452,* and modulo operations.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,453,* See Knuth 4.5.2 algorithm B.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,454,* The algorithm is due to Josef Stein (1961).
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,455,* <br/>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,456,* Special cases:
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,457,* <ul>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,458,"*  <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,459,"*   {@code gcd(x, 0)} is the value of {@code x}.</li>"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,460,"*  <li>The invocation {@code gcd(0, 0)} is the only one which returns"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,461,*   {@code 0}.</li>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,462,* </ul>
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,464,* @param a Positive number.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,465,* @param b Positive number.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,466,* @return the greatest common divisor.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,468,"private static int gcdPositive(int a,"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,469,int b) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,470,if (a == 0) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,471,return b;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,473,else if (b == 0) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,474,return a;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,477,"// Make ""a"" and ""b"" odd, keeping track of common power of 2."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,478,final int aTwos = Integer.numberOfTrailingZeros(a);
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,479,a >>= aTwos;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,480,final int bTwos = Integer.numberOfTrailingZeros(b);
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,481,b >>= bTwos;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,482,"final int shift = Math.min(aTwos, bTwos);"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,484,"// ""a"" and ""b"" are positive."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,485,"// If a > b then ""gdc(a, b)"" is equal to ""gcd(a - b, b)""."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,486,"// If a < b then ""gcd(a, b)"" is equal to ""gcd(b - a, a)""."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,487,"// Hence, in the successive iterations:"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,488,"//  ""a"" becomes the absolute difference of the current values,"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,489,"//  ""b"" becomes the minimum of the current values."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,490,while (a != b) {
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,491,final int delta = a - b;
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,492,"b = Math.min(a, b);"
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,493,a = Math.abs(delta);
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,495,"// Remove any power of 2 in ""a"" (""b"" is guaranteed to be odd)."
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,496,a >>= Integer.numberOfTrailingZeros(a);
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,499,// Recover the common power of 2.
True,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java,500,return a << shift;

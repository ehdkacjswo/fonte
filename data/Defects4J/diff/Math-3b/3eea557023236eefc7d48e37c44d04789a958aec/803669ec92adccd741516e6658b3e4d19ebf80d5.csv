is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1359," The solution is obtained via straightforward computation of the convolution sum (and not via FFT; for longer sequences,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1360, the performance of this method might be inferior to an FFT-based implementation).
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1359,* The solution is obtained via straightforward computation of the convolution sum (and not via FFT;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1360,"* for longer sequences, the performance of this method might be inferior to an FFT-based implementation)."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1362, @param x the first sequence (double array of length {@code N}); the sequence is assumed to be zero elsewhere
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1363,"   (i.e. {x[i]}=0 for i<0 and i>={@code N}). Typically, this sequence will represent an input signal to a system."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1364, @param h the second sequence (double array of length {@code M}); the sequence is assumed to be zero elsewhere
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1365,"   (i.e. {h[i]}=0 for i<0 and i>={@code M}). Typically, this sequence will represent the impulse response of the system."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1362,* @param x the first sequence (double array of length {@code N});
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1363,*   the sequence is assumed to be zero elsewhere (i.e. {x[i]}=0 for i<0 and i>={@code N}).
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1364,"*   Typically, this sequence will represent an input signal to a system."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1365,* @param h the second sequence (double array of length {@code M});
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1366,*   the sequence is assumed to be zero elsewhere (i.e. {h[i]}=0 for i<0 and i>={@code M}).
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1367,"*   Typically, this sequence will represent the impulse response of the system."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1371, @since 4.0
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1373,* @since 3.3
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1377,inal int N = x.length;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1378,inal int M = h.length;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1379,final int lenX = x.length;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1380,final int lenH = h.length;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1380,f (N == 0 || M == 0) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1382,if (lenX == 0 || lenH == 0) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1385,inal int totalLength = N + M - 1;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1387,final int totalLength = lenX + lenH - 1;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1391,or (int k = 0; k < M; k++) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1392,inal int j = n - k;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1393,f ((j > -1) && (j < N) ) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1394,n = yn + x[j] * h[k];
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1393,"int k = FastMath.max(0, n + 1 - lenX);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1394,int j = n - k;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1395,while (k < lenH && j >= 0) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1396,yn += x[j--] * h[k++];

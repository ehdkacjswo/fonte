is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,39,rivate static final long serialVersionUID = -3239549463135430361L;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,39,private static final long serialVersionUID = 20120522L;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,42,rivate final double alpha;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,42,private final double shape;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,45,rivate final double beta;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,45,private final double scale;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,48," The constant value of {@code alpha + g + 0.5}, where {@code alpha} is"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,49," the shape parameter, and {@code g} is the Lanczos constant"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,50, {@link Gamma#LANCZOS_G}.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,48,"* The constant value of {@code shape + g + 0.5}, where {@code g} is the"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,49,* Lanczos constant {@link Gamma#LANCZOS_G}.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,56," {@code alpha / beta * sqrt(e / (2 * pi * (alpha + g + 0.5))) / L(alpha)},"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,57," where {@code alpha} is the shape parameter, {@code beta} is the scale"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,58," parameter, and {@code L(alpha)} is the Lanczos approximation returned by"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,55,"* {@code shape / scale * sqrt(e / (2 * pi * (shape + g + 0.5))) / L(shape)},"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,56,* where {@code L(shape)} is the Lanczos approximation returned by
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,67," {@code alpha * sqrt(e / (2 * pi * (alpha + g + 0.5))) / L(alpha)},"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,68," where {@code alpha} is the shape parameter, and {@code L(alpha)} is the"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,69, Lanczos approximation returned by {@link Gamma#lanczos(double)}. This
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,70," prefactor is used in {@link #density(double)}, when overflow occurs with"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,71, the natural calculation.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,65,"* {@code shape * sqrt(e / (2 * pi * (shape + g + 0.5))) / L(shape)},"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,66,* where {@code L(shape)} is the Lanczos approximation returned by
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,67,* {@link Gamma#lanczos(double)}. This prefactor is used in
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,68,"* {@link #density(double)}, when overflow occurs with the natural"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,69,* calculation.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,76, Lower bound on {@code y = x / beta} for the selection of the computation
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,74,* Lower bound on {@code y = x / scale} for the selection of the computation
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,78, calculation overflows. {@code beta} is the shape parameter.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,76,* calculation overflows.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,83, Upper bound on {@code log(y)} ({@code y = x / beta}) for the selection of
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,84, the computation method in {@link #density(double)}. For
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,81,* Upper bound on {@code log(y)} ({@code y = x / scale}) for the selection
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,82,* of the computation method in {@link #density(double)}. For
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,86, {@code beta} is the shape parameter.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,94, Create a new gamma distribution with the given {@code alpha} and
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,95, {@code beta} values.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,96, @param alpha the shape parameter.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,97, @param beta the scale parameter.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,91,* Creates a new gamma distribution with specified values of the shape and
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,92,* scale parameters.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,94,* @param shape the shape parameter
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,95,* @param scale the scale parameter
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,99,"ublic GammaDistribution(double alpha, double beta) {"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,100,"his(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,97,"public GammaDistribution(double shape, double scale) {"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,98,"this(shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,104, Create a new gamma distribution with the given {@code alpha} and
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,105, {@code beta} values.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,102,* Creates a new gamma distribution with specified values of the shape and
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,103,* scale parameters.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,107, @param alpha Shape parameter.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,108, @param beta Scale parameter.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,109, @param inverseCumAccuracy Maximum absolute error in inverse
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,105,* @param shape the shape parameter
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,106,* @param scale the scale parameter
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,107,* @param inverseCumAccuracy the aximum absolute error in inverse
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,112, @throws NotStrictlyPositiveException if {@code alpha <= 0} or
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,113, {@code beta <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,110,* @throws NotStrictlyPositiveException if {@code shape <= 0} or
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,111,* {@code scale <= 0}.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,116,"ublic GammaDistribution(double alpha, double beta, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,114,"public GammaDistribution(double shape, double scale, double inverseCumAccuracy)"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,118,f (alpha <= 0) {
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,119,"hrow new NotStrictlyPositiveException(LocalizedFormats.ALPHA, alpha);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,116,if (shape <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,117,"throw new NotStrictlyPositiveException(LocalizedFormats.ALPHA, shape);"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,121,f (beta <= 0) {
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,122,"hrow new NotStrictlyPositiveException(LocalizedFormats.BETA, beta);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,119,if (scale <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,120,"throw new NotStrictlyPositiveException(LocalizedFormats.BETA, scale);"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,125,his.alpha = alpha;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,126,his.beta = beta;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,123,this.shape = shape;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,124,this.scale = scale;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,128,his.shiftedShape = alpha + Gamma.LANCZOS_G + 0.5;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,126,this.shiftedShape = shape + Gamma.LANCZOS_G + 0.5;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,130,his.densityPrefactor2 = alpha * FastMath.sqrt(aux) / Gamma.lanczos(alpha);
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,131,his.densityPrefactor1 = this.densityPrefactor2 / beta *
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,132,"astMath.pow(shiftedShape, -alpha) *"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,133,astMath.exp(alpha + Gamma.LANCZOS_G);
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,134,his.minY = alpha + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE);
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,135,his.maxLogY = FastMath.log(Double.MAX_VALUE) / (alpha - 1.0);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,128,this.densityPrefactor2 = shape * FastMath.sqrt(aux) / Gamma.lanczos(shape);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,129,this.densityPrefactor1 = this.densityPrefactor2 / scale *
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,130,"FastMath.pow(shiftedShape, -shape) *"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,131,FastMath.exp(shape + Gamma.LANCZOS_G);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,132,this.minY = shape + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,133,this.maxLogY = FastMath.log(Double.MAX_VALUE) / (shape - 1.0);
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,139, Access the {@code alpha} shape parameter.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,137,* Returns the shape parameter of {@code this} distribution.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,141, @return {@code alpha}.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,139,* @return the shape parameter
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,144,eturn alpha;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,142,return shape;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,148, Access the {@code beta} scale parameter.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,146,* Returns the scale parameter of {@code this} distribution.
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,150, @return {@code beta}.
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,148,* @return the scale parameter
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,153,eturn beta;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,151,return scale;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,210,inal double y = x / beta;
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,208,final double y = x / scale;
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,216,inal double aux2 = alpha * (FastMath.log1p(aux1) - aux1);
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,214,final double aux2 = shape * (FastMath.log1p(aux1) - aux1);
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,225,"astMath.pow(y, alpha - 1);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,223,"FastMath.pow(y, shape - 1);"
False,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,248,"et = Gamma.regularizedGammaP(alpha, x / beta);"
True,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java,246,"ret = Gamma.regularizedGammaP(shape, x / scale);"

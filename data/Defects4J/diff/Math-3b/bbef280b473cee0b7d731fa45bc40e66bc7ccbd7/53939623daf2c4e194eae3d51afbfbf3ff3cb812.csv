is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,70,"nt i = 1, j, m = maximalIterationCount + 1;"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,71,/ Array structure here can be improved for better space
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,72,/ efficiency because only the lower triangle is used.
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,73,"ouble r, t[][] = new double[m][m], s, olds;"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,70,final int m = maximalIterationCount + 1;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,71,double previousRow[] = new double[m];
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,72,double currentRow[]  = new double[m];
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,80,"[0][0] = qtrap.stage(f, min, max, 0);"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,81,lds = t[0][0];
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,82,hile (i <= maximalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,83,"[i][0] = qtrap.stage(f, min, max, i);"
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,84,or (j = 1; j <= i; j++) {
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,79,"currentRow[0] = qtrap.stage(f, min, max, 0);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,80,double olds = currentRow[0];
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,81,for (int i = 1; i <= maximalIterationCount; ++i) {
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,83,// switch rows
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,84,final double[] tmpRow = previousRow;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,85,previousRow = currentRow;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,86,currentRow = tmpRow;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,88,"currentRow[0] = qtrap.stage(f, min, max, i);"
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,89,for (int j = 1; j <= i; j++) {
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,86, = (1L << (2 * j)) -1;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,87,[i][j] = t[i][j-1] + (t[i][j-1] - t[i-1][j-1]) / r;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,91,final double r = (1L << (2 * j)) - 1;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,92,final double tIJm1 = currentRow[j - 1];
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,93,currentRow[j] = tIJm1 + (tIJm1 - previousRow[j - 1]) / r;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,89, = t[i][i];
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,95,final double s = currentRow[i];
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,91,inal double delta = Math.abs(s - olds);
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,92,inal double rLimit =
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,93,elativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,97,final double delta  = Math.abs(s - olds);
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,98,final double rLimit = relativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,100,++;

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,85,* Get a solver for A &times; X = B.
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,86,* @return a solver
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,88,DecompositionSolver getSolver();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,40,rivate static final long serialVersionUID = 3107050419319784520L;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,40,private static final long serialVersionUID = -2036131698031167221L;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,249,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,250,public DecompositionSolver getSolver() {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,251,"return new Solver(qrt, rDiag);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,254,private static class Solver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,256,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,257,private static final long serialVersionUID = -6353105415121373022L;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,260,* A packed TRANSPOSED representation of the QR decomposition.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,261,* <p>The elements BELOW the diagonal are the elements of the UPPER triangular
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,262,"* matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,263,* from which an explicit form of Q can be recomputed if desired.</p>
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,265,private double[][] qrt;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,267,/** The diagonal elements of R. */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,268,private double[] rDiag;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,271,* Build a solver from decomposed matrix.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,272,* @param qrt packed TRANSPOSED representation of the QR decomposition
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,273,* @param rDiag diagonal elements of R
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,275,"private Solver(final double[][] qrt, final double[] rDiag) {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,276,this.qrt   = qrt;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,277,this.rDiag = rDiag;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,280,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,281,public boolean isNonSingular()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,282,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,284,for (double diag : rDiag) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,285,if (diag == 0) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,286,return false;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,289,return true;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,293,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,294,public double[] solve(double[] b)
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,295,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,297,final int n = qrt.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,298,final int m = qrt[0].length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,299,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,300,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,302,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,303,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,306,final double[] x = new double[n];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,307,final double[] y = b.clone();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,309,// apply Householder transforms to solve Q.y = b
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,310,"for (int minor = 0; minor < Math.min(m, n); minor++) {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,312,final double[] qrtMinor = qrt[minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,313,double dotProduct = 0;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,314,for (int row = minor; row < m; row++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,315,dotProduct += y[row] * qrtMinor[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,317,dotProduct /= rDiag[minor] * qrtMinor[minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,319,for (int row = minor; row < m; row++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,320,y[row] += dotProduct * qrtMinor[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,325,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,326,for (int row = n - 1; row >= 0; --row) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,327,y[row] /= rDiag[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,328,final double yRow   = y[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,329,final double[] qrtRow = qrt[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,330,x[row] = yRow;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,331,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,332,y[i] -= yRow * qrtRow[i];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,336,return x;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,340,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,341,public RealVector solve(RealVector b)
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,342,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,343,try {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,344,return solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,345,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,346,"return new RealVectorImpl(solve(b.getData()), false);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,350,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,351,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,352,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,354,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,355,* has not been called
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,356,* @throws IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,357,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,359,public RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,360,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,361,"return new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,364,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,365,public RealMatrix solve(RealMatrix b)
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,366,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,368,final int n = qrt.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,369,final int m = qrt[0].length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,370,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,371,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,373,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,374,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,377,final int cols = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,378,final double[][] xData = new double[n][cols];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,379,final double[] y = new double[b.getRowDimension()];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,381,for (int k = 0; k < cols; ++k) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,383,// get the right hand side vector
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,384,for (int j = 0; j < y.length; ++j) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,385,"y[j] = b.getEntry(j, k);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,388,// apply Householder transforms to solve Q.y = b
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,389,"for (int minor = 0; minor < Math.min(m, n); minor++) {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,391,final double[] qrtMinor = qrt[minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,392,double dotProduct = 0;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,393,for (int row = minor; row < m; row++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,394,dotProduct += y[row] * qrtMinor[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,396,dotProduct /= rDiag[minor] * qrtMinor[minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,398,for (int row = minor; row < m; row++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,399,y[row] += dotProduct * qrtMinor[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,404,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,405,for (int row = n - 1; row >= 0; --row) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,406,y[row] /= rDiag[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,407,final double yRow = y[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,408,final double[] qrtRow = qrt[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,409,xData[row][k] = yRow;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,410,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,411,y[i] -= yRow * qrtRow[i];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,417,"return new RealMatrixImpl(xData, false);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,421,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,422,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,423,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,424,return solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,33,rivate static final long serialVersionUID = -579465076068393818L;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,33,private static final long serialVersionUID = -446230688570372107L;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,36,rivate final QRDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,36,private final DecompositionSolver solver;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,43,his.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,43,this.solver = decomposition.getSolver();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,57,f (decomposition.getR().getRowDimension() != b.length) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,58,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,60,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,61,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,64,"/ solve Q.y = b, using the fact Q is orthogonal"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,65,inal double[] y = decomposition.getQT().operate(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,67,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,68,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,69,inal double[] x = new double[r.getColumnDimension()];
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,70,"ystem.arraycopy(y, 0, x, 0, r.getRowDimension());"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,71,or (int i = r.getRowDimension() - 1; i >= 0; --i) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,72,"[i] /= r.getEntry(i, i);"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,73,inal double lastX = x[i];
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,74,or (int j = i - 1; j >= 0; --j) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,75,"[j] -= lastX * r.getEntry(j, i);"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,79,eturn x;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,56,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,93,"eturn new RealVectorImpl(solve(b.getData()), false);"
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,69,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,107,f (decomposition.getR().getRowDimension() != b.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,108,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,110,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,111,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,114,"/ solve Q.y = b, using the fact Q is orthogonal"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,115,inal RealMatrix y = decomposition.getQT().multiply(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,117,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,118,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,119,inal double[][] xData =
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,120,ew double[r.getColumnDimension()][b.getColumnDimension()];
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,121,or (int i = 0; i < r.getRowDimension(); ++i) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,122,inal double[] xi = xData[i];
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,123,or (int k = 0; k < xi.length; ++k) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,124,"i[k] = y.getEntry(i, k);"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,127,or (int i = r.getRowDimension() - 1; i >= 0; --i) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,128,"inal double rii = r.getEntry(i, i);"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,129,inal double[] xi = xData[i];
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,130,or (int k = 0; k < xi.length; ++k) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,131,i[k] /= rii;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,132,inal double lastX = xi[k];
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,133,or (int j = i - 1; j >= 0; --j) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,134,"Data[j][k] -= lastX * r.getEntry(j, i);"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,139,eturn MatrixUtils.createRealMatrix(xData);
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,82,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,148,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,149,"inal int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,150,or (int i = 0; i < p; ++i) {
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,151,"f (r.getEntry(i, i) == 0) {"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,152,eturn false;
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,155,eturn true;
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,90,return solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,164,inal RealMatrix r = decomposition.getR();
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,165,"inal int p = Math.min(r.getRowDimension(), r.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,166,eturn solve(MatrixUtils.createRealIdentityMatrix(p));
True,src/java/org/apache/commons/math/linear/QRSolver.java,src/java/org/apache/commons/math/linear/QRSolver.java,99,return solver.getInverse();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,66,ssertTrue(solver.isNonSingular());
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,66,assertFalse(solver.isNonSingular());

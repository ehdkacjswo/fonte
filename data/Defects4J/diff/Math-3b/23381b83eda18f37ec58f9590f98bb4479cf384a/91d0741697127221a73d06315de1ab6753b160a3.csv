is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,31, Returns the partial derivative of the function with respect to point
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,32, coordinate x<sub>j</sub>.
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,33, <p>
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,34, The partial derivative basically represents column j of the jacobian
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,35, matrix. If the partial derivatives with respect to all coordinates are
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,36," needed, it may be more efficient to use the {@link #jacobian()} method"
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,37, which will compute the complete matrix at once.
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,38, </p>
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,39, @param j index of the coordinate with respect to which the partial
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,40, derivative is computed
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,41, @return the partial derivative function with respect to point coordinate
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,42, x<sub>i</sub>
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,44,ultivariateVectorialFunction partialDerivative(int j);
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,47, Returns the gradient function of the i<sup>th</sup> component of
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,48, the vectorial function.
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,50, <p>
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,51, The i<sup>th</sup> gradient basically represents row i of the jacobian
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,52," matrix. If all gradients are needed, it may be more efficient to use the"
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,53, {@link #jacobian()} method which will compute the complete matrix at once.
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,54, </p>
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,55, @param i index of the function component for which the gradient is requested
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,56, @return the gradient function of the i<sup>th</sup> component of
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,57, the vectorial function
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,59,ultivariateVectorialFunction gradient(int i);
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,63, <p>
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,64," If only one column of the jacobian is needed, it may be more efficient to"
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,65, use the {@link #partialDerivative(int)} method which will compute only the
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,66," specified column. If only one row of the jacobian is needed, it may be more"
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,67, efficient to use the {@link #gradient(int)} method which will compute only the
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,68, specified row.
False,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.java,69, </p>
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,496,ublic MultivariateVectorialFunction partialDerivative(final int i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,497,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,498,rivate static final long serialVersionUID = 1037082026387842358L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,499,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,500,eturn factors.getColumn(i);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,505,ublic MultivariateVectorialFunction gradient(final int i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,506,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,507,rivate static final long serialVersionUID = -3268626996728727146L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,508,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,509,eturn factors.getRow(i);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,593,ublic MultivariateVectorialFunction partialDerivative(final int i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,594,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,595,rivate static final long serialVersionUID = -2884159755283203273L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,596,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,597,ouble[][] m = jacobian(point);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,598,ouble[] partial = new double[m.length];
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,599,or (int j = 0; j < partial.length; ++j) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,600,artial[i] = m[i][j];
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,602,eturn partial;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,607,ublic MultivariateVectorialFunction gradient(final int i) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,608,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,609,rivate static final long serialVersionUID = -43357217231860547L;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,610,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,611,eturn jacobian(point)[i];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,536,ublic MultivariateVectorialFunction partialDerivative(final int i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,537,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,538,rivate static final long serialVersionUID = 4868131119285501303L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,539,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,540,eturn factors.getColumn(i);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,545,ublic MultivariateVectorialFunction gradient(final int i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,546,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,547,rivate static final long serialVersionUID = 6280336674474631774L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,548,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,549,eturn factors.getRow(i);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,635,ublic MultivariateVectorialFunction partialDerivative(final int i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,636,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,637,rivate static final long serialVersionUID = -2884159755283203273L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,638,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,639,ouble[][] m = jacobian(point);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,640,ouble[] partial = new double[m.length];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,641,or (int j = 0; j < partial.length; ++j) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,642,artial[i] = m[i][j];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,644,eturn partial;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,649,ublic MultivariateVectorialFunction gradient(final int i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,650,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,651,rivate static final long serialVersionUID = -43357217231860547L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,652,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,653,eturn jacobian(point)[i];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,703,ublic MultivariateVectorialFunction partialDerivative(final int i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,704,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,705,rivate static final long serialVersionUID = 2371658898687841192L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,706,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,707,ouble[][] m = jacobian(point);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,708,ouble[] partial = new double[m.length];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,709,or (int j = 0; j < partial.length; ++j) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,710,artial[i] = m[i][j];
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,712,eturn partial;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,717,ublic MultivariateVectorialFunction gradient(final int i) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,718,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,719,rivate static final long serialVersionUID = 6863958501785879369L;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,720,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,721,eturn jacobian(point)[i];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,585,ublic MultivariateVectorialFunction partialDerivative(final int i) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,586,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,587,rivate static final long serialVersionUID = 2192585229396907068L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,588,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,589,ouble[][] m = jacobian(point);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,590,ouble[] partial = new double[m.length];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,591,or (int j = 0; j < partial.length; ++j) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,592,artial[i] = m[i][j];
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,594,eturn partial;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,599,ublic MultivariateVectorialFunction gradient(final int i) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,600,eturn new MultivariateVectorialFunction() {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,601,rivate static final long serialVersionUID = -5562016064510078300L;
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,602,ublic double[] value(double[] point) {
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,603,eturn jacobian(point)[i];

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,20,import java.util.Collection;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,26,mport org.apache.commons.math3.stat.descriptive.summary.Sum;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,27,mport org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,29,mport java.util.Collection;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,29,import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,30,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,136,* Computes the ANOVA P-value for a collection of {@link SummaryStatistics}.
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,138,* <p><strong>Preconditions</strong>: <ul>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,139,* <li>The categoryData <code>Collection</code> must contain
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,140,* {@link SummaryStatistics}.</li>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,141,* <li> There must be at least two {@link SummaryStatistics} in the
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,142,* <code>categoryData</code> collection and each of these statistics must
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,143,* contain at least two values.</li></ul></p><p>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,144,* This implementation uses the
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,145,* {@link org.apache.commons.math3.distribution.FDistribution
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,146,* commons-math F Distribution implementation} to estimate the exact
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,147,"* p-value, using the formula<pre>"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,148,*   p = 1 - cumulativeProbability(F)</pre>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,149,* where <code>F</code> is the F value and <code>cumulativeProbability</code>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,150,* is the commons-math implementation of the F distribution.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,152,* @param categoryData <code>Collection</code> of {@link SummaryStatistics}
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,153,* each containing data for one category
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,154,"* @param allowOneElementData if true, allow computation for one catagory"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,155,* only or for one data element per category
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,156,* @return Pvalue
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,157,* @throws NullArgumentException if <code>categoryData</code> is <code>null</code>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,158,* @throws DimensionMismatchException if the length of the <code>categoryData</code>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,159,* array is less than 2 or a contained {@link SummaryStatistics} does not have
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,160,* at least two values
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,161,* @throws ConvergenceException if the p-value can not be computed due to a convergence error
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,162,* @throws MaxCountExceededException if the maximum number of iterations is exceeded
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,164,"public double anovaPValue(final Collection<SummaryStatistics> categoryData,"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,165,final boolean allowOneElementData)
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,166,"throws NullArgumentException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,167,"ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,169,"final AnovaStats a = anovaStats(categoryData, allowOneElementData);"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,170,"final FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,171,return 1.0 - fdist.cumulativeProbability(a.F);
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,176,* This method calls the method that actually does the calculations (except
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,177,* P-value).
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,179,* @param categoryData
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,180,*            <code>Collection</code> of <code>double[]</code> arrays each
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,181,*            containing data for one category
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,182,* @return computed AnovaStats
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,183,* @throws NullArgumentException
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,184,*             if <code>categoryData</code> is <code>null</code>
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,185,* @throws DimensionMismatchException
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,186,*             if the length of the <code>categoryData</code> array is less
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,187,*             than 2 or a contained <code>double[]</code> array does not
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,188,*             contain at least two values
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,190,private AnovaStats anovaStats(final Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,191,"throws NullArgumentException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,193,MathUtils.checkNotNull(categoryData);
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,195,final Collection<SummaryStatistics> categoryDataSummaryStatistics =
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,196,new ArrayList<SummaryStatistics>(categoryData.size());
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,198,// convert arrays to SummaryStatistics
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,199,for (final double[] data : categoryData) {
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,200,final SummaryStatistics dataSummaryStatistics = new SummaryStatistics();
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,201,categoryDataSummaryStatistics.add(dataSummaryStatistics);
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,202,for (final double val : data) {
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,203,dataSummaryStatistics.addValue(val);
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,207,"return anovaStats(categoryDataSummaryStatistics, false);"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,264,"* @param allowOneElementData if true, allow computation for one catagory"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,265,* only or for one data element per category
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,189, @throws DimensionMismatchException if the length of the <code>categoryData</code>
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,190, array is less than 2 or a contained <code>double[]</code> array does not contain
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,268,* @throws DimensionMismatchException if <code>allowOneElementData</code> is false and the number of
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,269,* categories is less than 2 or a contained SummaryStatistics does not contain
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,193,rivate AnovaStats anovaStats(final Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,272,"private AnovaStats anovaStats(final Collection<SummaryStatistics> categoryData,"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,273,final boolean allowOneElementData)
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,196,f (categoryData == null) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,197,hrow new NullArgumentException();
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,276,MathUtils.checkNotNull(categoryData);
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,200,/ check if we have enough categories
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,201,f (categoryData.size() < 2) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,202,hrow new DimensionMismatchException(
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,203,"ocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,"
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,204,"ategoryData.size(), 2);"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,278,if (!allowOneElementData) {
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,279,// check if we have enough categories
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,280,if (categoryData.size() < 2) {
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,281,"throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,282,"categoryData.size(), 2);"
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,207,/ check if each category has enough data and all is double[]
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,208,or (double[] array : categoryData) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,209,f (array.length <= 1) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,210,hrow new DimensionMismatchException(
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,211,"ocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,"
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,212,"rray.length, 2);"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,285,// check if each category has enough data
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,286,for (final SummaryStatistics array : categoryData) {
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,287,if (array.getN() <= 1) {
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,288,"throw new DimensionMismatchException(LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,"
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,289,"(int) array.getN(), 2);"
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,218,um totsum = new Sum();
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,219,umOfSquares totsumsq = new SumOfSquares();
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,296,double totsum = 0;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,297,double totsumsq = 0;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,222,or (double[] data : categoryData) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,224,um sum = new Sum();
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,225,umOfSquares sumsq = new SumOfSquares();
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,226,nt num = 0;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,228,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,229,ouble val = data[i];
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,300,for (final SummaryStatistics data : categoryData) {
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,231,/ within category
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,232,um++;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,233,um.increment(val);
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,234,umsq.increment(val);
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,302,final double sum = data.getSum();
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,303,final double sumsq = data.getSumsq();
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,304,final int num = (int) data.getN();
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,305,totnum += num;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,306,totsum += sum;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,307,totsumsq += sumsq;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,236,/ for all categories
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,237,otnum++;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,238,otsum.increment(val);
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,239,otsumsq.increment(val);
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,242,ouble ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,310,final double ss = sumsq - ((sum * sum) / num);
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,245,ouble sst = totsumsq.getResult() - totsum.getResult() *
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,246,otsum.getResult()/totnum;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,247,ouble ssbg = sst - sswg;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,248,nt dfbg = categoryData.size() - 1;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,249,ouble msbg = ssbg/dfbg;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,250,ouble mswg = sswg/dfwg;
False,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,251,ouble F = msbg/mswg;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,314,final double sst = totsumsq - ((totsum * totsum) / totnum);
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,315,final double ssbg = sst - sswg;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,316,final int dfbg = categoryData.size() - 1;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,317,final double msbg = ssbg / dfbg;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,318,final double mswg = sswg / dfwg;
True,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java,319,final double F = msbg / mswg;
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,23,import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,106,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,107,public void testAnovaPValueSummaryStatistics() {
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,108,// Target comparison values computed using R version 2.6.0 (Linux version)
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,109,List<SummaryStatistics> threeClasses = new ArrayList<SummaryStatistics>();
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,110,SummaryStatistics statsA = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,111,for (double a : classA) {
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,112,statsA.addValue(a);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,114,threeClasses.add(statsA);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,115,SummaryStatistics statsB = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,116,for (double b : classB) {
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,117,statsB.addValue(b);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,119,threeClasses.add(statsB);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,120,SummaryStatistics statsC = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,121,for (double c : classC) {
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,122,statsC.addValue(c);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,124,threeClasses.add(statsC);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,126,"Assert.assertEquals(""ANOVA P-value"", 6.959446E-06,"
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,127,"testStatistic.anovaPValue(threeClasses, true), 1E-12);"
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,129,List<SummaryStatistics> twoClasses = new ArrayList<SummaryStatistics>();
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,130,twoClasses.add(statsA);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,131,twoClasses.add(statsB);
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,133,"Assert.assertEquals(""ANOVA P-value"",  0.904212960464,"
True,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java,134,"testStatistic.anovaPValue(twoClasses, false), 1E-12);"

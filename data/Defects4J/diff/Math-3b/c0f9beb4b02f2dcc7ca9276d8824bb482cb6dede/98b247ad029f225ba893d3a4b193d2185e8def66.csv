is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,56,import java.util.Collection;
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,60, @version $Revision: 1.1 $ $Date: 2003/05/18 00:58:51 $
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,61,* @version $Revision: 1.2 $ $Date: 2003/05/29 19:45:35 $
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,198, Generates a uniformly distributed random value from the opem interval
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,199,* Generates a uniformly distributed random value from the open interval
False,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,213,"ublic double nextUniform(double lower, double upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,214,"public double nextUniform(double lower, double upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,217,* Generates an integer array of length <code>k</code> whose entries
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,218,"* are selected randomly, without repetition, from the integers"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,219,"* {0, ... , n-1} -- i.e., generated arrays represent permutations"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,220,* of <code>n</code> taken <code>k</code> at a time. <p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,222,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,223,* <li> k must be less than or equal to n </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,224,* <li> n must be positive (i.e. greater than 0) </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,225,* </ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,227,* @param n domain of the permutation
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,228,* @param k size of the permutation
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,229,* @return random k-permutation of n
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,231,"public int[] nextPermutation(int n, int k);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,234,* Returns an array of <code>k</code> objects selected randomly
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,235,* from the Collection <code>c</code>. Sampling from <code>c</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,236,* is without replacement; but if <code>c</code> contains identical
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,237,"* objects, the sample may include repeats.  If all elements of <code>"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,238,"* c</code> are distinct, the resulting object array represents a"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,239,* <a href=http://rkb.home.cern.ch/rkb/AN16pp/node250.html#SECTION0002500000000000000000>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,240,* Simple Random Sample</a> of size
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,241,* <code>k</code> from the elements of <code>c</code>.<p>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,243,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,244,* <li> k must be less than or equal to the size of c </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,245,* <li> c must not be empty </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,246,* </ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,248,* @param c collection to be sampled
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,249,* @param k size of the sample
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,250,* @return random sample of k elements from c
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,252,"public Object[] nextSample(Collection c, int k);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,62,import java.util.Collection;
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,99, @version $Revision: 1.1 $ $Date: 2003/05/18 00:58:51 $
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,100,* @version $Revision: 1.2 $ $Date: 2003/05/29 19:45:35 $
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,161,"""incorrect bounds for rendomInt"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,162,"(""upper bound must be > lower bound"");"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,170,"""upper bound must be >= lower bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,171,"(""upper bound must be > lower bound"");"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,240,"""lower bound must be <= upper bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,241,"(""lower bound must be < upper bound"");"
False,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,250,"""lower bound must be <= upper bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,251,"(""lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,447,"* Uses a 2-cycle permutation shuffle, as described"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,448,* <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,449,* here</a>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,452,"public int[] nextPermutation(int n, int k) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,453,if (k > n) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,454,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,455,"(""permutation k exceeds n"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,457,if (k == 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,458,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,459,"(""permutation k must be > 0"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,462,int[] index = getNatural(n);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,463,"shuffle(index,n-k);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,464,int[] result = new int[k];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,465,for (int i = 0; i < k; i++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,466,result[i] = index[n-i-1];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,469,return result;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,473,* Uses a 2-cycle permutation shuffle to generate a random
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,474,* permutation of <code>c.size()</code> and then returns the
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,475,* elements whose indexes correspond to the elements of the
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,476,"* generated permutation.  This technique is described, and"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,477,"* proven to generate random samples,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,478,* <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,479,* here</a>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,481,"public Object[] nextSample(Collection c, int k) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,482,int len = c.size();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,483,if (k > len) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,484,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,485,"(""sample size exceeds collection size"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,487,if (k == 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,488,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,489,"(""sample size must be > 0"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,492,Object[] objects = c.toArray();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,493,"int[] index = nextPermutation(len,k);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,494,Object[] result = new Object[k];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,495,for (int i = 0; i < k; i ++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,496,result[i] = objects[index[i]];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,498,return result;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,501,//------------------------Private methods----------------------------------
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,504,* Uses a 2-cycle permutation shuffle to randomly re-order the last
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,505,* end elements of list
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,507,* @param list list to be shuffled
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,508,* @end element past which shuffling begins
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,510,"private void shuffle(int[] list, int end) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,511,int target = 0;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,512,for (int i = list.length-1 ; i >= end; i--) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,513,if (i == 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,514,target = 0;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,515,} else {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,516,"target = nextInt(0,i);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,518,int temp = list[target];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,519,list[target] = list[i];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,520,list[i] = temp;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,525,* Returns an array representing n
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,527,* @param n the natural number to represent
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,528,* @return array with entries = elements of n
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,530,private int[] getNatural(int n) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,531,int[] natural = new int[n];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,532,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,533,natural[i] = i;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,535,return natural;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,62,import java.util.Collection;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,63,import java.util.HashSet;
False,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,66, @version $Revision: 1.2 $ $Date: 2003/05/22 15:31:38 $
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,68,* @version $Revision: 1.3 $ $Date: 2003/05/29 19:45:35 $
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,482,/** tests for nextSample() sampling from Collection */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,483,public void testNextSample() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,484,"Object[][] c = {{""0"",""1""},{""0"",""2""},{""0"",""3""},{""0"",""4""},{""1"",""2""},"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,485,"{""1"",""3""},{""1"",""4""},{""2"",""3""},{""2"",""4""},{""3"",""4""}};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,486,"double[] observed = {0,0,0,0,0,0,0,0,0,0};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,487,"double[] expected = {100,100,100,100,100,100,100,100,100,100};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,489,"HashSet cPop = new HashSet();  //{0,1,2,3,4}"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,490,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,491,cPop.add(Integer.toString(i));
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,494,Object[] sets = new Object[10]; // 2-sets from 5
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,495,for (int i = 0; i < 10; i ++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,496,HashSet hs = new HashSet();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,497,hs.add(c[i][0]);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,498,hs.add(c[i][1]);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,499,sets[i] = hs;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,502,for (int i = 0; i < 1000; i ++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,503,"Object[] cSamp = randomData.nextSample(cPop,2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,504,"observed[findSample(sets,cSamp)]++;"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,507,"/* Use ChiSquare dist with df = 10-1 = 9, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,508,* Change to 21.67 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,510,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,511,"testStatistic.chiSquare(expected,observed) < 27.88);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,513,// Make sure sample of size = size of collection returns same collection
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,514,HashSet hs = new HashSet();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,515,"hs.add(""one"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,516,"Object[] one = randomData.nextSample(hs,1);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,517,String oneString = (String) one[0];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,518,"if ((one.length != 1) || !oneString.equals(""one"")){"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,519,"fail(""bad sample for set size = 1, sample size = 1"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,522,// Make sure we fail for sample size > collection size
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,523,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,524,"one = randomData.nextSample(hs,2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,525,"fail(""sample size > set size, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,526,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,530,// Make sure we fail for empty collection
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,531,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,532,hs = new HashSet();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,533,"one = randomData.nextSample(hs,0);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,534,"fail(""n = k = 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,535,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,540,"private int findSample(Object[] u, Object[] samp) {"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,541,int result = -1;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,542,for (int i = 0; i < u.length; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,543,HashSet set = (HashSet) u[i];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,544,HashSet sampSet = new HashSet();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,545,for (int j = 0; j < samp.length; j++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,546,sampSet.add(samp[j]);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,548,if (set.equals(sampSet)) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,549,return i;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,552,"fail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,553,return -1;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,556,/** tests for nextPermutation */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,557,public void testNextPermutation() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,558,"int[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,559,"double[] observed = {0,0,0,0,0,0,};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,560,"double[] expected = {100,100,100,100,100,100};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,562,for (int i = 0; i < 600; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,563,"int[] perm = randomData.nextPermutation(3,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,564,"observed[findPerm(p,perm)]++;"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,567,"/* Use ChiSquare dist with df = 6-1 = 5, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,568,* Change to 15.09 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,570,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,571,"testStatistic.chiSquare(expected,observed) < 20.52);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,573,// Check size = 1 boundary case
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,574,"int[] perm = randomData.nextPermutation(1,1);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,575,if ((perm.length != 1) || (perm[0] != 0)){
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,576,"fail(""bad permutation for n = 1, sample k = 1"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,578,// Make sure we fail for k size > n
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,579,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,580,"perm = randomData.nextPermutation(2,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,581,"fail(""permutation k > n, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,582,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,586,// Make sure we fail for n = 0
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,587,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,588,"perm = randomData.nextPermutation(0,0);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,589,"fail(""permutation k = n = 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,590,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,599,"private int findPerm(int[][] p, int[] samp) {"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,600,int result = -1;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,601,for (int i = 0; i < p.length; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,602,boolean good = true;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,603,for (int j = 0; j < samp.length; j++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,604,if (samp[j] != p[i][j]) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,605,good = false;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,608,if (good)  {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,609,return i;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,612,"fail(""permutation not found"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,613,return -1;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,344,terator iter = entries.iterator();
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,345,hile (iter.hasNext()) {
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,346,ter.advance();
False,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,347,"es.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));"
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,345,* MATH-803: it is not sufficient to loop through non zero entries of
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,346,"* this only. Indeed, if this[i] = 0d and v[i] = 0d, then"
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,347,"* this[i] / v[i] = NaN, and not 0d."
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,349,final int n = getDimension();
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,350,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,351,"res.setEntry(i, this.getEntry(i) / v.getEntry(i));"
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,367,"* MATH-803: the above loop assumes that 0d * x  = 0d for any double x,"
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,368,"* which allows to consider only the non-zero entries of this. However,"
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,369,* this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,371,* These special cases are handled below.
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,373,if (v.isNaN() || v.isInfinite()) {
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,374,final int n = getDimension();
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,375,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,376,final double y = v.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,377,if (Double.isNaN(y)) {
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,378,"res.setEntry(i, Double.NaN);"
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,379,} else if (Double.isInfinite(y)) {
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,380,final double x = this.getEntry(i);
True,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java,381,"res.setEntry(i, x * y);"
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,240,hrow unsupported();
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,240,boolean isNaN = false;
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,241,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,242,isNaN |= Double.isNaN(data[i]);
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,244,return isNaN;
False,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,245,hrow unsupported();
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,249,boolean isInfinite = false;
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,250,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,251,final double x = data[i];
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,252,if (Double.isNaN(x)) {
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,253,return false;
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,255,isInfinite |= Double.isInfinite(x);
True,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java,257,return isInfinite;

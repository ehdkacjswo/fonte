is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,113,/** RandomDataGenerator instance to use in repeated calls to getNext() */
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,114,protected final RandomDataGenerator randomData;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,137,** RandomDataGenerator instance to use in repeated calls to getNext() */
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,138,rivate final RandomDataGenerator randomData;
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,490,"eturn randomData.nextGaussian(stats.getMean(),"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,491,tats.getStandardDeviation());
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,490,return getKernel(stats).sample();
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,845,rivate RealDistribution getKernel(SummaryStatistics bStats) {
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,846,"/ For now, hard-code Gaussian (only kernel supported)"
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,847,eturn new NormalDistribution(
False,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,848,"Stats.getMean(), bStats.getStandardDeviation());"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,844,protected RealDistribution getKernel(SummaryStatistics bStats) {
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,845,// Default to Gaussian
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,846,"return new NormalDistribution(randomData.getRandomGenerator(),"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,847,"bStats.getMean(), bStats.getStandardDeviation(),"
True,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java,848,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,166,andomGenerator ran = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,166,RandomGenerator ran = getRandomGenerator();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,205,inal RandomGenerator rng = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,205,final RandomGenerator rng = getRandomGenerator();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,214,eturn lower + getRan().nextInt(max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,214,return lower + getRandomGenerator().nextInt(max);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,228,inal RandomGenerator rng = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,228,final RandomGenerator rng = getRandomGenerator();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,237,eturn lower + getRan().nextInt((int) max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,237,return lower + getRandomGenerator().nextInt((int) max);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,240,"eturn lower + nextLong(getRan(), max);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,240,"return lower + nextLong(getRandomGenerator(), max);"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,436,"eturn new PoissonDistribution(getRan(), mean,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,436,"return new PoissonDistribution(getRandomGenerator(), mean,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,446,eturn sigma * getRan().nextGaussian() + mu;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,446,return sigma * getRandomGenerator().nextGaussian() + mu;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,461,"eturn new ExponentialDistribution(getRan(), mean,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,461,"return new ExponentialDistribution(getRandomGenerator(), mean,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,488,"eturn new GammaDistribution(getRan(),shape, scale,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,488,"return new GammaDistribution(getRandomGenerator(),shape, scale,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,505,"eturn new HypergeometricDistribution(getRan(),populationSize,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,505,"return new HypergeometricDistribution(getRandomGenerator(),populationSize,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,520,"eturn new PascalDistribution(getRan(), r, p).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,520,"return new PascalDistribution(getRandomGenerator(), r, p).sample();"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,531,"eturn new TDistribution(getRan(), df,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,531,"return new TDistribution(getRandomGenerator(), df,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,545,"eturn new WeibullDistribution(getRan(), shape, scale,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,545,"return new WeibullDistribution(getRandomGenerator(), shape, scale,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,559,"eturn new ZipfDistribution(getRan(), numberOfElements, exponent).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,559,"return new ZipfDistribution(getRandomGenerator(), numberOfElements, exponent).sample();"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,570,"eturn new BetaDistribution(getRan(), alpha, beta,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,570,"return new BetaDistribution(getRandomGenerator(), alpha, beta,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,582,"eturn new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,582,"return new BinomialDistribution(getRandomGenerator(), numberOfTrials, probabilityOfSuccess).sample();"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,593,"eturn new CauchyDistribution(getRan(), median, scale,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,593,"return new CauchyDistribution(getRandomGenerator(), median, scale,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,604,"eturn new ChiSquaredDistribution(getRan(), df,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,604,"return new ChiSquaredDistribution(getRandomGenerator(), df,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,618,"eturn new FDistribution(getRan(), numeratorDf, denominatorDf,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,618,"return new FDistribution(getRandomGenerator(), numeratorDf, denominatorDf,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,674,inal RandomGenerator generator = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,674,final RandomGenerator generator = getRandomGenerator();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,761,etRan().setSeed(seed);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,761,getRandomGenerator().setSeed(seed);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,792,etRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,792,getRandomGenerator().setSeed(System.currentTimeMillis() + System.identityHashCode(this));
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,826,rivate RandomGenerator getRan() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,826,public RandomGenerator getRandomGenerator() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,25,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,31,import org.apache.commons.math3.distribution.AbstractRealDistribution;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,35,import org.apache.commons.math3.distribution.UniformRealDistribution;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,37,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,436,@Test
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,437,public void testKernelOverrideConstant() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,438,final EmpiricalDistribution dist = new ConstantKernelEmpiricalDistribution(5);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,439,"final double[] data = {1d,2d,3d, 4d,5d,6d, 7d,8d,9d, 10d,11d,12d, 13d,14d,15d};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,440,dist.load(data);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,441,"// Bin masses concentrated on 2, 5, 8, 11, 14 <- effectively discrete uniform distribution over these"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,442,"double[] values = {2d, 5d, 8d, 11d, 14d};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,443,for (int i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,444,"Assert.assertTrue(Arrays.binarySearch(values, dist.sample()) >= 0);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,446,final double tol = 10E-12;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,447,"Assert.assertEquals(0.0, dist.cumulativeProbability(1), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,448,"Assert.assertEquals(0.2, dist.cumulativeProbability(2), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,449,"Assert.assertEquals(0.6, dist.cumulativeProbability(10), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,450,"Assert.assertEquals(0.8, dist.cumulativeProbability(12), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,451,"Assert.assertEquals(0.8, dist.cumulativeProbability(13), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,452,"Assert.assertEquals(1.0, dist.cumulativeProbability(15), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,454,"Assert.assertEquals(2.0, dist.inverseCumulativeProbability(0.1), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,455,"Assert.assertEquals(2.0, dist.inverseCumulativeProbability(0.2), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,456,"Assert.assertEquals(5.0, dist.inverseCumulativeProbability(0.3), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,457,"Assert.assertEquals(5.0, dist.inverseCumulativeProbability(0.4), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,458,"Assert.assertEquals(8.0, dist.inverseCumulativeProbability(0.5), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,459,"Assert.assertEquals(8.0, dist.inverseCumulativeProbability(0.6), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,462,@Test
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,463,public void testKernelOverrideUniform() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,464,final EmpiricalDistribution dist = new UniformKernelEmpiricalDistribution(5);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,465,"final double[] data = {1d,2d,3d, 4d,5d,6d, 7d,8d,9d, 10d,11d,12d, 13d,14d,15d};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,466,dist.load(data);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,467,"// Kernels are uniform distributions on [1,3], [4,6], [7,9], [10,12], [13,15]"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,468,"final double bounds[] = {3d, 6d, 9d, 12d};"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,469,final double tol = 10E-12;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,470,for (int i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,471,final double v = dist.sample();
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,472,"// Make sure v is not in the excluded range between bins - that is (bounds[i], bounds[i] + 1)"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,473,for (int j = 0; j < bounds.length; j++) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,474,Assert.assertFalse(v > bounds[j] + tol && v < bounds[j] + 1 - tol);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,477,"Assert.assertEquals(0.0, dist.cumulativeProbability(1), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,478,"Assert.assertEquals(0.1, dist.cumulativeProbability(2), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,479,"Assert.assertEquals(0.6, dist.cumulativeProbability(10), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,480,"Assert.assertEquals(0.8, dist.cumulativeProbability(12), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,481,"Assert.assertEquals(0.8, dist.cumulativeProbability(13), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,482,"Assert.assertEquals(1.0, dist.cumulativeProbability(15), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,484,"Assert.assertEquals(2.0, dist.inverseCumulativeProbability(0.1), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,485,"Assert.assertEquals(3.0, dist.inverseCumulativeProbability(0.2), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,486,"Assert.assertEquals(5.0, dist.inverseCumulativeProbability(0.3), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,487,"Assert.assertEquals(6.0, dist.inverseCumulativeProbability(0.4), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,488,"Assert.assertEquals(8.0, dist.inverseCumulativeProbability(0.5), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,489,"Assert.assertEquals(9.0, dist.inverseCumulativeProbability(0.6), tol);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,494,* Empirical distribution using a constant smoothing kernel.
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,496,private class ConstantKernelEmpiricalDistribution extends EmpiricalDistribution {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,497,private static final long serialVersionUID = 1L;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,498,public ConstantKernelEmpiricalDistribution(int i) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,499,super(i);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,501,// Use constant distribution equal to bin mean within bin
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,502,protected RealDistribution getKernel(SummaryStatistics bStats) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,503,return new ConstantDistribution(bStats.getMean());
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,508,* Empirical distribution using a uniform smoothing kernel.
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,510,private class UniformKernelEmpiricalDistribution extends EmpiricalDistribution {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,511,public UniformKernelEmpiricalDistribution(int i) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,512,super(i);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,514,protected RealDistribution getKernel(SummaryStatistics bStats) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,515,"return new UniformRealDistribution(randomData.getRandomGenerator(), bStats.getMin(), bStats.getMax(),"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,516,UniformRealDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,521,* Distribution that takes just one value.
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,523,private class ConstantDistribution extends AbstractRealDistribution {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,524,private static final long serialVersionUID = 1L;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,526,/** Singleton value in the sample space */
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,527,private final double c;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,529,public ConstantDistribution(double c) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,530,this.c = c;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,533,public double density(double x) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,534,return 0;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,537,public double cumulativeProbability(double x) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,538,return x < c ? 0 : 1;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,541,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,542,public double inverseCumulativeProbability(double p) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,543,if (p < 0.0 || p > 1.0) {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,544,"throw new OutOfRangeException(p, 0, 1);"
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,546,return c;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,549,public double getNumericalMean() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,550,return c;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,553,public double getNumericalVariance() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,554,return 0;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,557,public double getSupportLowerBound() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,558,return c;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,561,public double getSupportUpperBound() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,562,return c;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,565,public boolean isSupportLowerBoundInclusive() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,566,return false;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,569,public boolean isSupportUpperBoundInclusive() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,570,return true;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,573,public boolean isSupportConnected() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,574,return true;
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,577,@Override
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,578,public double sample() {
True,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java,579,return c;

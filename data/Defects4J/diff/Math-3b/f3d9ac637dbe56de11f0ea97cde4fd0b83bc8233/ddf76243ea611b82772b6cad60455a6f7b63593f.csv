is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,27,import org.apache.commons.math.fraction.BigFraction;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,28,import org.apache.commons.math.fraction.Fraction;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,633,* Convert a {@link FieldMatrix}/{@link Fraction} matrix to a {@link RealMatrix}.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,634,* @param m matrix to convert
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,635,* @return converted matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,637,public static RealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,638,final FractionMatrixConverter converter = new FractionMatrixConverter();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,639,m.walkInOptimizedOrder(converter);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,640,return converter.getConvertedMatrix();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,643,/** Converter for {@link FieldMatrix}/{@link Fraction}. */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,644,private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,646,/** Converted array. */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,647,private double[][] data;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,649,/** Simple constructor. */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,650,public FractionMatrixConverter() {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,651,super(Fraction.ZERO);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,654,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,655,@Override
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,656,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,657,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,658,data = new double[rows][columns];
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,661,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,662,@Override
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,663,"public void visit(int row, int column, Fraction value) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,664,data[row][column] = value.doubleValue();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,667,/** Get the converted matrix.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,668,* @return converted matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,670,RealMatrix getConvertedMatrix() {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,671,"return new RealMatrixImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,677,* Convert a {@link FieldMatrix}/{@link BigFraction} matrix to a {@link RealMatrix}.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,678,* @param m matrix to convert
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,679,* @return converted matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,681,public static RealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m) {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,682,final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,683,m.walkInOptimizedOrder(converter);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,684,return converter.getConvertedMatrix();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,687,/** Converter for {@link FieldMatrix}/{@link BigFraction}. */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,688,private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,690,/** Converted array. */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,691,private double[][] data;
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,693,/** Simple constructor. */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,694,public BigFractionMatrixConverter() {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,695,super(BigFraction.ZERO);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,698,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,699,@Override
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,700,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,701,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,702,data = new double[rows][columns];
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,705,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,706,@Override
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,707,"public void visit(int row, int column, BigFraction value) {"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,708,data[row][column] = value.doubleValue();
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,711,/** Get the converted matrix.
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,712,* @return converted matrix
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,714,RealMatrix getConvertedMatrix() {
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,715,"return new RealMatrixImpl(data, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,24,import org.apache.commons.math.fraction.BigFraction;
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,326,public void testBigFractionConverter() {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,327,BigFraction[][] bfData = {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,328,"{ new BigFraction(1), new BigFraction(2), new BigFraction(3) },"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,329,"{ new BigFraction(2), new BigFraction(5), new BigFraction(3) },"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,330,"{ new BigFraction(1), new BigFraction(0), new BigFraction(8) }"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,332,"FieldMatrix<BigFraction> m = new FieldMatrixImpl<BigFraction>(bfData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,333,RealMatrix converted = MatrixUtils.bigFractionMatrixToRealMatrix(m);
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,334,"RealMatrix reference = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,335,"assertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,338,public void testFractionConverter() {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,339,Fraction[][] fData = {
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,340,"{ new Fraction(1), new Fraction(2), new Fraction(3) },"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,341,"{ new Fraction(2), new Fraction(5), new Fraction(3) },"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,342,"{ new Fraction(1), new Fraction(0), new Fraction(8) }"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,344,"FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(fData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,345,RealMatrix converted = MatrixUtils.fractionMatrixToRealMatrix(m);
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,346,"RealMatrix reference = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,347,"assertEquals(0.0, converted.subtract(reference).getNorm(), 0.0);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,20,import java.text.DecimalFormat;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,21,import java.text.DecimalFormatSymbols;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,22,import java.text.NumberFormat;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,23,import java.util.Locale;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,29,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,55,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,56,public void testEquals() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,57,"Vector3D u1 = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,58,"Vector3D u2 = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,59,"Vector3D v  = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,60,Assert.assertTrue(u1.equals(u1));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,61,Assert.assertTrue(u1.equals(u2));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,62,Assert.assertFalse(u1.equals(v));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,63,"Assert.assertTrue(new Vector3D(0, Double.NaN, 0).equals(new Vector3D(0, 0, Double.NaN)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,66,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,67,public void testHash() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,68,"Assert.assertEquals(new Vector3D(0, Double.NaN, 0).hashCode(), new Vector3D(0, 0, Double.NaN).hashCode());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,69,"Vector3D u = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,70,"Vector3D v = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,71,Assert.assertTrue(u.hashCode() != v.hashCode());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,74,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,75,public void testInfinite() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,76,"Assert.assertTrue(new Vector3D(1, 1, Double.NEGATIVE_INFINITY).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,77,"Assert.assertTrue(new Vector3D(1, Double.NEGATIVE_INFINITY, 1).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,78,"Assert.assertTrue(new Vector3D(Double.NEGATIVE_INFINITY, 1, 1).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,79,"Assert.assertFalse(new Vector3D(1, 1, 2).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,80,"Assert.assertFalse(new Vector3D(1, Double.NaN, Double.NEGATIVE_INFINITY).isInfinite());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,83,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,84,public void testToString() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,85,"Assert.assertEquals(""{3; 2; 1}"", new Vector3D(3, 2, 1).toString());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,86,"NumberFormat format = new DecimalFormat(""0.000"", new DecimalFormatSymbols(Locale.US));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,87,"Assert.assertEquals(""{3.000; 2.000; 1.000}"", new Vector3D(3, 2, 1).toString(format));"

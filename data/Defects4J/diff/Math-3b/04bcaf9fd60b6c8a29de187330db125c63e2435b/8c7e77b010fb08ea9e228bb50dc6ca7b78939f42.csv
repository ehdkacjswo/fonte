is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,237, = ((Interval) list.remove(list.size() - 1)).getLower();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,237,x = list.remove(list.size() - 1).getLower();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,202,ector3D previous3D  = (Vector3D) plane.toSpace(loop[previous]);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,202,Vector3D previous3D  = plane.toSpace(loop[previous]);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,208,inal Vector3D current3D = (Vector3D) plane.toSpace(loop[current]);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,208,final Vector3D current3D = plane.toSpace(loop[current]);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,311,inal Vector3D point = (Vector3D) line.toSpace(Vector1D.ZERO);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,311,final Vector3D point = line.toSpace(Vector1D.ZERO);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,58,inal Line  inter      = (Line) otherPlane.intersection(thisPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,58,final Line  inter      = otherPlane.intersection(thisPlane);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,101,inal Line  inter      = (Line) otherPlane.intersection(thisPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,101,final Line  inter      = otherPlane.intersection(thisPlane);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,167,inal Vector1D x = (Vector1D) thisLine.toSubSpace(crossing);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,167,final Vector1D x = thisLine.toSubSpace(crossing);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,190,inal Vector1D x      = (Vector1D) thisLine.toSubSpace(crossing);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,190,final Vector1D x      = thisLine.toSubSpace(crossing);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,608,"eturn (AbstractRegion<S, T>) buildNew(recurseTransform(getTree(false), transform));"
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,608,"return buildNew(recurseTransform(getTree(false), transform));"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,959,ouble dist_3 = v1.getDistance((RealVector) v2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,959,double dist_3 = v1.getDistance(v2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,969,ouble d_getL1Distance_3 = v1.getL1Distance((RealVector) v2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,969,double d_getL1Distance_3 = v1.getL1Distance(v2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,979,ouble d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,979,double d_getLInfDistance_3 = v1. getLInfDistance(v2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1010,ealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1010,RealVector  v_ebeMultiply_3 = v1.ebeMultiply(v2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1023,ealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1023,RealVector  v_ebeDivide_3 = v1.ebeDivide(v2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1041,ealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1041,RealMatrix m_outerProduct_3 = v1.outerProduct(v2);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,108,ouble[] bounds = ((EmpiricalDistributionImpl) empiricalDistribution2).getGeneratorUpperBounds();
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,108,double[] bounds = empiricalDistribution2.getGeneratorUpperBounds();

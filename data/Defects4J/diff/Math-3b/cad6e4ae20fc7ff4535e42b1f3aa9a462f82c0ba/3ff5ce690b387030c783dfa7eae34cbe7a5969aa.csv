is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,276,"   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,276,"*   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,335,"   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,335,"*   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,465,"   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length), mean); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,465,"*   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,542,"   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length), mean); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,542,"*   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,29,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,30,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,31,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1032,* Normalizes an array to make it sum to a specified value.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1033,* Returns the result of the transformation <pre>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1034,*    x |-> x * normalizedSum / sum
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1035,* </pre>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1036,"* applied to each non-NaN element x of the input array, where sum is the"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1037,* sum of the non-NaN entries in the input array.</p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1039,* <p>Throws IllegalArgumentException if {@code normalizedSum} is infinite
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1040,* or NaN and ArithmeticException if the input array contains any infinite elements
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1041,* or sums to 0.</p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1043,"* <p>Ignores (i.e., copies unchanged to the output array) NaNs in the input array.</p>"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1045,* @param values Input array to be normalized
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1046,* @param normalizedSum Target sum for the normalized array
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1047,* @return the normalized array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1048,* @throws MathArithmeticException if the input array contains infinite
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1049,* elements or sums to zero.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1050,* @throws MathIllegalArgumentException if the target sum is infinite or {@code NaN}.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1051,* @since 2.1
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1053,"public static double[] normalizeArray(double[] values, double normalizedSum) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1054,if (Double.isInfinite(normalizedSum)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1055,throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1057,if (Double.isNaN(normalizedSum)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1058,throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1060,double sum = 0d;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1061,final int len = values.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1062,double[] out = new double[len];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1063,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1064,if (Double.isInfinite(values[i])) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1065,"throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1067,if (!Double.isNaN(values[i])) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1068,sum += values[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1071,if (sum == 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1072,throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1074,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1075,if (Double.isNaN(values[i])) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1076,out[i] = Double.NaN;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1077,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1078,out[i] = values[i] * normalizedSum / sum;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,1081,return out;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,940, <p>Normalizes an array to make it sum to a specified value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,941, Returns the result of the transformation <pre>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,942,    x |-> x * normalizedSum / sum
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,943, </pre>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,944," applied to each non-NaN element x of the input array, where sum is the"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,945, sum of the non-NaN entries in the input array.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,947, <p>Throws IllegalArgumentException if {@code normalizedSum} is infinite
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,948, or NaN and ArithmeticException if the input array contains any infinite elements
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,949, or sums to 0</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,951," <p>Ignores (i.e., copies unchanged to the output array) NaNs in the input array.</p>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,953, @param values input array to be normalized
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,954, @param normalizedSum target sum for the normalized array
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,955, @return normalized array
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,956, @throws MathArithmeticException if the input array contains infinite elements or sums to zero
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,957, @throws MathIllegalArgumentException if the target sum is infinite or NaN
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,958, @since 2.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,960,"ublic static double[] normalizeArray(double[] values, double normalizedSum) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,961,f (Double.isInfinite(normalizedSum)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,962,hrow new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,964,f (Double.isNaN(normalizedSum)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,965,hrow new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,967,ouble sum = 0d;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,968,inal int len = values.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,969,ouble[] out = new double[len];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,970,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,971,f (Double.isInfinite(values[i])) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,972,"hrow new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,974,f (!Double.isNaN(values[i])) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,975,um += values[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,978,f (sum == 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,979,hrow new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,981,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,982,f (Double.isNaN(values[i])) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,983,ut[i] = Double.NaN;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,984, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,985,ut[i] = values[i] * normalizedSum / sum;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,988,eturn out;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,21,import org.apache.commons.math.util.MathArrays;
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,113,"ariance.evaluate(testArray, MathUtils.normalizeArray(identicalWeightsArray, testArray.length),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,113,"variance.evaluate(testArray, MathArrays.normalizeArray(identicalWeightsArray, testArray.length),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,20,import org.apache.commons.math.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,21,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,23,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,593,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,594,public void testNormalizeArray() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,595,"double[] testValues1 = new double[] {1, 1, 2};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,596,"TestUtils.assertEquals( new double[] {.25, .25, .5},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,597,"MathArrays.normalizeArray(testValues1, 1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,598,Double.MIN_VALUE);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,600,"double[] testValues2 = new double[] {-1, -1, 1};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,601,"TestUtils.assertEquals( new double[] {1, 1, -1},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,602,"MathArrays.normalizeArray(testValues2, 1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,603,Double.MIN_VALUE);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,605,// Ignore NaNs
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,606,"double[] testValues3 = new double[] {-1, -1, Double.NaN, 1, Double.NaN};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,607,"TestUtils.assertEquals( new double[] {1, 1,Double.NaN, -1, Double.NaN},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,608,"MathArrays.normalizeArray(testValues3, 1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,609,Double.MIN_VALUE);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,611,// Zero sum -> MathArithmeticException
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,612,"double[] zeroSum = new double[] {-1, 1};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,613,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,614,"MathArrays.normalizeArray(zeroSum, 1);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,615,"Assert.fail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,616,} catch (MathArithmeticException ex) {}
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,618,// Infinite elements -> MathArithmeticException
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,619,"double[] hasInf = new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,620,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,621,"MathArrays.normalizeArray(hasInf, 1);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,622,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,623,} catch (MathIllegalArgumentException ex) {}
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,625,// Infinite target -> MathIllegalArgumentException
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,626,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,627,"MathArrays.normalizeArray(testValues1, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,628,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,629,} catch (MathIllegalArgumentException ex) {}
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,631,// NaN target -> MathIllegalArgumentException
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,632,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,633,"MathArrays.normalizeArray(testValues1, Double.NaN);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,634,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,635,} catch (MathIllegalArgumentException ex) {}
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,845,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,846,ublic void testNormalizeArray() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,847,"ouble[] testValues1 = new double[] {1, 1, 2};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,848,estUtils.assertEquals(
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,849,"ew double[] {.25, .25, .5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,850,"athUtils.normalizeArray(testValues1, 1),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,851,ouble.MIN_VALUE);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,853,"ouble[] testValues2 = new double[] {-1, -1, 1};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,854,estUtils.assertEquals(
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,855,"ew double[] {1, 1, -1},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,856,"athUtils.normalizeArray(testValues2, 1),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,857,ouble.MIN_VALUE);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,859,/ Ignore NaNs
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,860,"ouble[] testValues3 = new double[] {-1, -1, Double.NaN, 1, Double.NaN};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,861,estUtils.assertEquals(
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,862,"ew double[] {1, 1,Double.NaN, -1, Double.NaN},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,863,"athUtils.normalizeArray(testValues3, 1),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,864,ouble.MIN_VALUE);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,866,/ Zero sum -> MathArithmeticException
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,867,"ouble[] zeroSum = new double[] {-1, 1};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,868,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,869,"athUtils.normalizeArray(zeroSum, 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,870,"ssert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,871, catch (MathArithmeticException ex) {}
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,873,/ Infinite elements -> MathArithmeticException
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,874,"ouble[] hasInf = new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,875,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,876,"athUtils.normalizeArray(hasInf, 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,877,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,878, catch (MathIllegalArgumentException ex) {}
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,880,/ Infinite target -> MathIllegalArgumentException
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,881,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,882,"athUtils.normalizeArray(testValues1, Double.POSITIVE_INFINITY);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,883,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,884, catch (MathIllegalArgumentException ex) {}
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,886,/ NaN target -> MathIllegalArgumentException
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,887,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,888,"athUtils.normalizeArray(testValues1, Double.NaN);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,889,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,890, catch (MathIllegalArgumentException ex) {}

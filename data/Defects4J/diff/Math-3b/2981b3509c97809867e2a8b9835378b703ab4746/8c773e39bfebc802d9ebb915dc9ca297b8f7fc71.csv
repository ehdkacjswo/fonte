is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,17,package org.apache.commons.math3.stat.clustering;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,20,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,21,import java.util.HashMap;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,22,import java.util.HashSet;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,23,import java.util.List;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,24,import java.util.Map;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,25,import java.util.Set;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,27,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,28,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,29,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,32,* DBSCAN (density-based spatial clustering of applications with noise) algorithm.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,33,* <p>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,34,"* The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e."
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,35,"* a point p is density connected to another point q, if there exists a chain of"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,36,"* points p<sub>i</sub>, with i = 1 .. n and p<sub>1</sub> = p and p<sub>n</sub> = q,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,37,"* such that each pair &lt;p<sub>i</sub>, p<sub>i+1</sub>&gt; is directly density-reachable."
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,38,* A point q is directly density-reachable from point p if it is in the &epsilon;-neighborhood
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,39,* of this point.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,40,* <p>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,41,"* Any point that is not density-reachable from a formed cluster is treated as noise, and"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,42,* will thus not be present in the result.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,43,* <p>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,44,* The algorithm requires two parameters:
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,45,* <ul>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,46,*   <li>eps: the distance that defines the &epsilon;-neighborhood of a point
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,47,*   <li>minPoints: the minimum number of density-connected points required to form a cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,48,* </ul>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,49,* <p>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,50,"* <b>Note:</b> as DBSCAN is not a centroid-based clustering algorithm, the resulting"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,51,"* {@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,52,* return {@code null}.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,54,* @param <T> type of the points to cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,55,"* @see <a href=""http://en.wikipedia.org/wiki/DBSCAN"">DBSCAN (wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,56,"* @see <a href=""http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf"">"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,57,* A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</a>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,58,* @version $Id$
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,59,* @since 3.1
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,61,public class DBSCANClusterer<T extends Clusterable<T>> {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,63,/** Maximum radius of the neighborhood to be considered. */
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,64,private final double              eps;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,66,/** Minimum number of points needed for a cluster. */
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,67,private final int                 minPts;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,69,/** Status of a point during the clustering process. */
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,70,private enum PointStatus {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,71,/** The point has is considered to be noise. */
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,72,"NOISE,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,73,/** The point is already part of a cluster. */
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,74,PART_OF_CLUSTER
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,78,* Creates a new instance of a DBSCANClusterer.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,80,* @param eps maximum radius of the neighborhood to be considered
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,81,* @param minPts minimum number of points needed for a cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,82,* @throws NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,84,"public DBSCANClusterer(final double eps, final int minPts)"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,85,throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,86,if (eps < 0.0d) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,87,throw new NotPositiveException(eps);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,89,if (minPts < 0) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,90,throw new NotPositiveException(minPts);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,92,this.eps = eps;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,93,this.minPts = minPts;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,97,* Returns the maximum radius of the neighborhood to be considered.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,99,* @return maximum radius of the neighborhood
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,101,public double getEps() {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,102,return eps;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,106,* Returns the minimum number of points needed for a cluster.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,108,* @return minimum number of points needed for a cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,110,public int getMinPts() {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,111,return minPts;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,115,* Performs DBSCAN cluster analysis.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,116,* <p>
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,117,"* <b>Note:</b> as DBSCAN is not a centroid-based clustering algorithm, the resulting"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,118,"* {@link Cluster} objects will have no defined center, i.e. {@link Cluster#getCenter()} will"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,119,* return {@code null}.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,121,* @param points the points to cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,122,* @return the list of clusters
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,123,* @throws NullArgumentException if the data points are null
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,125,public List<Cluster<T>> cluster(final Collection<T> points) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,127,// sanity checks
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,128,MathUtils.checkNotNull(points);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,130,final List<Cluster<T>> clusters = new ArrayList<Cluster<T>>();
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,131,"final Map<Clusterable<T>, PointStatus> visited = new HashMap<Clusterable<T>, PointStatus>();"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,133,for (final T point : points) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,134,if (visited.get(point) != null) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,135,continue;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,137,"final List<T> neighbors = getNeighbors(point, points);"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,138,if (neighbors.size() >= minPts) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,139,// DBSCAN does not care about center points
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,140,final Cluster<T> cluster = new Cluster<T>(null);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,141,"clusters.add(expandCluster(cluster, point, neighbors, points, visited));"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,142,} else {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,143,"visited.put(point, PointStatus.NOISE);"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,147,return clusters;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,151,* Expands the cluster to include density-reachable items.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,153,* @param cluster Cluster to expand
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,154,* @param point Point to add to cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,155,* @param neighbors List of neighbors
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,156,* @param points the data set
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,157,* @param visited the set of already visited points
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,158,* @return the expanded cluster
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,160,"private Cluster<T> expandCluster(final Cluster<T> cluster,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,161,"final T point,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,162,"final List<T> neighbors,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,163,"final Collection<T> points,"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,164,"final Map<Clusterable<T>, PointStatus> visited) {"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,165,cluster.addPoint(point);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,166,"visited.put(point, PointStatus.PART_OF_CLUSTER);"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,168,List<T> seeds = new ArrayList<T>(neighbors);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,169,int index = 0;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,170,while (index < seeds.size()) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,171,final T current = seeds.get(index);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,172,PointStatus pStatus = visited.get(current);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,173,// only check non-visited points
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,174,if (pStatus == null) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,175,"final List<T> currentNeighbors = getNeighbors(current, points);"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,176,if (currentNeighbors.size() >= minPts) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,177,"seeds = merge(seeds, currentNeighbors);"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,181,if (pStatus != PointStatus.PART_OF_CLUSTER) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,182,"visited.put(current, PointStatus.PART_OF_CLUSTER);"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,183,cluster.addPoint(current);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,186,index++;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,188,return cluster;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,192,* Returns a list of density-reachable neighbors of a {@code point}.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,194,* @param point the point to look for
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,195,* @param points possible neighbors
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,196,* @return the List of neighbors
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,198,"private List<T> getNeighbors(final T point, final Collection<T> points) {"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,199,final List<T> neighbors = new ArrayList<T>();
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,200,for (final T neighbor : points) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,201,if (point != neighbor && neighbor.distanceFrom(point) <= eps) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,202,neighbors.add(neighbor);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,205,return neighbors;
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,209,* Merges two lists together.
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,211,* @param one first list
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,212,* @param two second list
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,213,* @return merged lists
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,215,"private List<T> merge(final List<T> one, final List<T> two) {"
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,216,final Set<T> oneSet = new HashSet<T>(one);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,217,for (T item : two) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,218,if (!oneSet.contains(item)) {
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,219,one.add(item);
True,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java,222,return one;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,1,package org.apache.commons.math3.stat.clustering;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,3,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,4,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,6,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,9,* A simple implementation of {@link Clusterable} for points with double coordinates.
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,10,* @version $Id$
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,11,* @since 3.1
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,13,"public class EuclideanDoublePoint implements Clusterable<EuclideanDoublePoint>, Serializable {"
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,15,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,16,private static final long serialVersionUID = 8026472786091227632L;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,18,/** Point coordinates. */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,19,private final double[] point;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,22,* Build an instance wrapping an integer array.
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,23,* <p>
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,24,"* The wrapped array is referenced, it is <em>not</em> copied."
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,26,* @param point the n-dimensional point in integer space
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,28,public EuclideanDoublePoint(final double[] point) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,29,this.point = point;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,32,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,33,public EuclideanDoublePoint centroidOf(final Collection<EuclideanDoublePoint> points) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,34,final double[] centroid = new double[getPoint().length];
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,35,for (final EuclideanDoublePoint p : points) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,36,for (int i = 0; i < centroid.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,37,centroid[i] += p.getPoint()[i];
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,40,for (int i = 0; i < centroid.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,41,centroid[i] /= points.size();
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,43,return new EuclideanDoublePoint(centroid);
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,46,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,47,public double distanceFrom(final EuclideanDoublePoint p) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,48,"return MathArrays.distance(point, p.getPoint());"
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,51,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,52,@Override
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,53,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,54,if (!(other instanceof EuclideanDoublePoint)) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,55,return false;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,57,final double[] otherPoint = ((EuclideanDoublePoint) other).getPoint();
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,58,if (point.length != otherPoint.length) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,59,return false;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,61,for (int i = 0; i < point.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,62,if (point[i] != otherPoint[i]) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,63,return false;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,66,return true;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,70,* Get the n-dimensional point in integer space.
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,72,* @return a reference (not a copy!) to the wrapped array
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,74,public double[] getPoint() {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,75,return point;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,78,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,79,@Override
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,80,public int hashCode() {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,81,int hashCode = 0;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,82,for (final Double i : point) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,83,hashCode += i.hashCode() * 13 + 7;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,85,return hashCode;
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,88,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,89,@Override
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,90,public String toString() {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,91,"final StringBuilder buff = new StringBuilder(""("");"
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,92,final double[] coordinates = getPoint();
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,93,for (int i = 0; i < coordinates.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,94,buff.append(coordinates[i]);
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,95,if (i < coordinates.length - 1) {
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,96,"buff.append(',');"
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,99,buff.append(')');
True,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java,100,return buff.toString();
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,17,package org.apache.commons.math3.stat.clustering;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,20,import java.util.List;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,22,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,27,public class DBSCANClustererTest {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,30,public void testCluster() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,31,// Test data generated using: http://people.cs.nctu.edu.tw/~rsliang/dbscan/testdatagen.html
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,32,final EuclideanDoublePoint[] points = new EuclideanDoublePoint[] {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,33,"new EuclideanDoublePoint(new double[] { 83.08303244924173, 58.83387754182331 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,34,"new EuclideanDoublePoint(new double[] { 45.05445510940626, 23.469642649637535 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,35,"new EuclideanDoublePoint(new double[] { 14.96417921432294, 69.0264096390456 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,36,"new EuclideanDoublePoint(new double[] { 73.53189604333602, 34.896145021310076 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,37,"new EuclideanDoublePoint(new double[] { 73.28498173551634, 33.96860806993209 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,38,"new EuclideanDoublePoint(new double[] { 73.45828098873608, 33.92584423092194 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,39,"new EuclideanDoublePoint(new double[] { 73.9657889183145, 35.73191006924026 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,40,"new EuclideanDoublePoint(new double[] { 74.0074097183533, 36.81735596177168 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,41,"new EuclideanDoublePoint(new double[] { 73.41247541410848, 34.27314856695011 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,42,"new EuclideanDoublePoint(new double[] { 73.9156256353017, 36.83206791547127 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,43,"new EuclideanDoublePoint(new double[] { 74.81499205809087, 37.15682749846019 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,44,"new EuclideanDoublePoint(new double[] { 74.03144880081527, 37.57399178552441 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,45,"new EuclideanDoublePoint(new double[] { 74.51870941207744, 38.674258946906775 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,46,"new EuclideanDoublePoint(new double[] { 74.50754595105536, 35.58903978415765 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,47,"new EuclideanDoublePoint(new double[] { 74.51322752749547, 36.030572259100154 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,48,"new EuclideanDoublePoint(new double[] { 59.27900996617973, 46.41091720294207 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,49,"new EuclideanDoublePoint(new double[] { 59.73744793841615, 46.20015558367595 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,50,"new EuclideanDoublePoint(new double[] { 58.81134076672606, 45.71150126331486 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,51,"new EuclideanDoublePoint(new double[] { 58.52225539437495, 47.416083617601544 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,52,"new EuclideanDoublePoint(new double[] { 58.218626647023484, 47.36228902172297 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,53,"new EuclideanDoublePoint(new double[] { 60.27139669447206, 46.606106348801404 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,54,"new EuclideanDoublePoint(new double[] { 60.894962462363765, 46.976924697402865 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,55,"new EuclideanDoublePoint(new double[] { 62.29048673878424, 47.66970563563518 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,56,"new EuclideanDoublePoint(new double[] { 61.03857608977705, 46.212924720020965 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,57,"new EuclideanDoublePoint(new double[] { 60.16916214139201, 45.18193661351688 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,58,"new EuclideanDoublePoint(new double[] { 59.90036905976012, 47.555364347063005 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,59,"new EuclideanDoublePoint(new double[] { 62.33003634144552, 47.83941489877179 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,60,"new EuclideanDoublePoint(new double[] { 57.86035536718555, 47.31117930193432 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,61,"new EuclideanDoublePoint(new double[] { 58.13715479685925, 48.985960494028404 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,62,"new EuclideanDoublePoint(new double[] { 56.131923963548616, 46.8508904252667 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,63,"new EuclideanDoublePoint(new double[] { 55.976329887053, 47.46384037658572 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,64,"new EuclideanDoublePoint(new double[] { 56.23245975235477, 47.940035191131756 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,65,"new EuclideanDoublePoint(new double[] { 58.51687048212625, 46.622885352699086 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,66,"new EuclideanDoublePoint(new double[] { 57.85411081905477, 45.95394361577928 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,67,"new EuclideanDoublePoint(new double[] { 56.445776311447844, 45.162093662656844 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,68,"new EuclideanDoublePoint(new double[] { 57.36691949656233, 47.50097194337286 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,69,"new EuclideanDoublePoint(new double[] { 58.243626387557015, 46.114052729681134 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,70,"new EuclideanDoublePoint(new double[] { 56.27224595635198, 44.799080066150054 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,71,"new EuclideanDoublePoint(new double[] { 57.606924816500396, 46.94291057763621 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,72,"new EuclideanDoublePoint(new double[] { 30.18714230041951, 13.877149710431695 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,73,"new EuclideanDoublePoint(new double[] { 30.449448810657486, 13.490778346545994 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,74,"new EuclideanDoublePoint(new double[] { 30.295018390286714, 13.264889000216499 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,75,"new EuclideanDoublePoint(new double[] { 30.160201832884923, 11.89278262341395 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,76,"new EuclideanDoublePoint(new double[] { 31.341509791789576, 15.282655921997502 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,77,"new EuclideanDoublePoint(new double[] { 31.68601630325429, 14.756873246748 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,78,"new EuclideanDoublePoint(new double[] { 29.325963742565364, 12.097849250072613 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,79,"new EuclideanDoublePoint(new double[] { 29.54820742388256, 13.613295356975868 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,80,"new EuclideanDoublePoint(new double[] { 28.79359608888626, 10.36352064087987 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,81,"new EuclideanDoublePoint(new double[] { 31.01284597092308, 12.788479208014905 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,82,"new EuclideanDoublePoint(new double[] { 27.58509216737002, 11.47570110601373 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,83,"new EuclideanDoublePoint(new double[] { 28.593799561727792, 10.780998203903437 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,84,"new EuclideanDoublePoint(new double[] { 31.356105766724795, 15.080316198524088 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,85,"new EuclideanDoublePoint(new double[] { 31.25948503636755, 13.674329151166603 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,86,"new EuclideanDoublePoint(new double[] { 32.31590076372959, 14.95261758659035 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,87,"new EuclideanDoublePoint(new double[] { 30.460413702763617, 15.88402809202671 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,88,"new EuclideanDoublePoint(new double[] { 32.56178203062154, 14.586076852632686 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,89,"new EuclideanDoublePoint(new double[] { 32.76138648530468, 16.239837325178087 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,90,"new EuclideanDoublePoint(new double[] { 30.1829453331884, 14.709592407103628 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,91,"new EuclideanDoublePoint(new double[] { 29.55088173528202, 15.0651247180067 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,92,"new EuclideanDoublePoint(new double[] { 29.004155302187428, 14.089665298582986 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,93,"new EuclideanDoublePoint(new double[] { 29.339624439831823, 13.29096065578051 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,94,"new EuclideanDoublePoint(new double[] { 30.997460327576846, 14.551914158277214 }),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,95,"new EuclideanDoublePoint(new double[] { 30.66784126125276, 16.269703107886016 })"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,98,final DBSCANClusterer<EuclideanDoublePoint> transformer =
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,99,"new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,100,final List<Cluster<EuclideanDoublePoint>> clusters = transformer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,102,final List<EuclideanDoublePoint> clusterOne =
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,103,"Arrays.asList(points[3], points[4], points[5], points[6], points[7], points[8], points[9], points[10],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,104,"points[11], points[12], points[13], points[14]);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,105,final List<EuclideanDoublePoint> clusterTwo =
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,106,"Arrays.asList(points[15], points[16], points[17], points[18], points[19], points[20], points[21],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,107,"points[22], points[23], points[24], points[25], points[26], points[27], points[28],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,108,"points[29], points[30], points[31], points[32], points[33], points[34], points[35],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,109,"points[36], points[37], points[38]);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,110,final List<EuclideanDoublePoint> clusterThree =
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,111,"Arrays.asList(points[39], points[40], points[41], points[42], points[43], points[44], points[45],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,112,"points[46], points[47], points[48], points[49], points[50], points[51], points[52],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,113,"points[53], points[54], points[55], points[56], points[57], points[58], points[59],"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,114,"points[60], points[61], points[62]);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,116,boolean cluster1Found = false;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,117,boolean cluster2Found = false;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,118,boolean cluster3Found = false;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,119,"Assert.assertEquals(3, clusters.size());"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,120,for (final Cluster<EuclideanDoublePoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,121,if (cluster.getPoints().containsAll(clusterOne)) {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,122,cluster1Found = true;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,124,if (cluster.getPoints().containsAll(clusterTwo)) {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,125,cluster2Found = true;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,127,if (cluster.getPoints().containsAll(clusterThree)) {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,128,cluster3Found = true;
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,131,Assert.assertTrue(cluster1Found);
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,132,Assert.assertTrue(cluster2Found);
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,133,Assert.assertTrue(cluster3Found);
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,136,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,137,public void testSingleLink() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,138,final EuclideanIntegerPoint[] points = {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,139,"new EuclideanIntegerPoint(new int[] {10, 10}), // A"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,140,"new EuclideanIntegerPoint(new int[] {12, 9}),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,141,"new EuclideanIntegerPoint(new int[] {10, 8}),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,142,"new EuclideanIntegerPoint(new int[] {8, 8}),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,143,"new EuclideanIntegerPoint(new int[] {8, 6}),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,144,"new EuclideanIntegerPoint(new int[] {7, 7}),"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,145,"new EuclideanIntegerPoint(new int[] {5, 6}),  // B"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,146,"new EuclideanIntegerPoint(new int[] {14, 8}), // C"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,147,"new EuclideanIntegerPoint(new int[] {7, 15}), // N - Noise, should not be present"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,148,"new EuclideanIntegerPoint(new int[] {17, 8}), // D - single-link connected to C should not be present"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,152,"final DBSCANClusterer<EuclideanIntegerPoint> clusterer = new DBSCANClusterer<EuclideanIntegerPoint>(3, 3);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,153,List<Cluster<EuclideanIntegerPoint>> clusters = clusterer.cluster(Arrays.asList(points));
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,155,"Assert.assertEquals(1, clusters.size());"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,157,final List<EuclideanIntegerPoint> clusterOne =
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,158,"Arrays.asList(points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,159,Assert.assertTrue(clusters.get(0).getPoints().containsAll(clusterOne));
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,162,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,163,public void testGetEps() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,164,"final DBSCANClusterer<EuclideanDoublePoint> transformer = new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,165,"Assert.assertEquals(2.0, transformer.getEps(), 0.0);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,168,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,169,public void testGetMinPts() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,170,"final DBSCANClusterer<EuclideanDoublePoint> transformer = new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,171,"Assert.assertEquals(5, transformer.getMinPts());"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,174,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,175,public void testNegativeEps() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,176,"new DBSCANClusterer<EuclideanDoublePoint>(-2.0, 5);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,179,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,180,public void testNegativeMinPts() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,181,"new DBSCANClusterer<EuclideanDoublePoint>(2.0, -5);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,184,@Test(expected = NullArgumentException.class)
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,185,public void testNullDataset() {
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,186,"DBSCANClusterer<EuclideanDoublePoint> clusterer = new DBSCANClusterer<EuclideanDoublePoint>(2.0, 5);"
True,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java,187,clusterer.cluster(null);
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,17,package org.apache.commons.math3.stat.clustering;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,20,import java.util.List;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,22,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,27,public class EuclideanDoublePointTest {
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,30,public void testArrayIsReference() {
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,31,"final double[] array = { -3.0, -2.0, -1.0, 0.0, 1.0 };"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,32,"Assert.assertArrayEquals(array, new EuclideanDoublePoint(array).getPoint(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,35,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,36,public void testDistance() {
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,37,"final EuclideanDoublePoint e1 = new EuclideanDoublePoint(new double[] { -3.0, -2.0, -1.0, 0.0, 1.0 });"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,38,"final EuclideanDoublePoint e2 = new EuclideanDoublePoint(new double[] { 1.0, 0.0, -1.0, 1.0, 1.0 });"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,39,"Assert.assertEquals(FastMath.sqrt(21.0), e1.distanceFrom(e2), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,40,"Assert.assertEquals(0.0, e1.distanceFrom(e1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,41,"Assert.assertEquals(0.0, e2.distanceFrom(e2), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,44,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,45,public void testCentroid() {
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,46,final List<EuclideanDoublePoint> list = new ArrayList<EuclideanDoublePoint>();
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,47,"list.add(new EuclideanDoublePoint(new double[] { 1.0, 3.0 }));"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,48,"list.add(new EuclideanDoublePoint(new double[] { 2.0, 2.0 }));"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,49,"list.add(new EuclideanDoublePoint(new double[] { 3.0, 3.0 }));"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,50,"list.add(new EuclideanDoublePoint(new double[] { 2.0, 4.0 }));"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,51,final EuclideanDoublePoint c = list.get(0).centroidOf(list);
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,52,"Assert.assertEquals(2.0, c.getPoint()[0], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,53,"Assert.assertEquals(3.0, c.getPoint()[1], 1.0e-15);"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,56,@Test
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,57,public void testSerial() {
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,58,"final EuclideanDoublePoint p = new EuclideanDoublePoint(new double[] { -3.0, -2.0, -1.0, 0.0, 1.0 });"
True,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java,59,"Assert.assertEquals(p, TestUtils.serializeAndRecover(p));"

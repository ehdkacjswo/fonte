is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,56,rivate VectorialPointValuePair[] optima;
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,56,private PointVectorValuePair[] optima;
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,113,ublic VectorialPointValuePair[] getOptima() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,113,public PointVectorValuePair[] getOptima() {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,131,ublic ConvergenceChecker<VectorialPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,131,public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,138,"ublic VectorialPointValuePair optimize(int maxEval, final FUNC f,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,138,"public PointVectorValuePair optimize(int maxEval, final FUNC f,"
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,143,ptima = new VectorialPointValuePair[starts];
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,143,optima = new PointVectorValuePair[starts];
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,182,"rrays.sort(optima, new Comparator<VectorialPointValuePair>() {"
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,183,"ublic int compare(final VectorialPointValuePair o1,"
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,184,inal VectorialPointValuePair o2) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,182,"Arrays.sort(optima, new Comparator<PointVectorValuePair>() {"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,183,"public int compare(final PointVectorValuePair o1,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,184,final PointVectorValuePair o2) {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,192,rivate double weightedResidual(final VectorialPointValuePair pv) {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java,192,private double weightedResidual(final PointVectorValuePair pv) {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,36,xtends BaseOptimizer<VectorialPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,36,extends BaseOptimizer<PointVectorValuePair> {
False,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,57,"ectorialPointValuePair optimize(int maxEval, FUNC f, double[] target,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java,57,"PointVectorValuePair optimize(int maxEval, FUNC f, double[] target,"
True,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,26,* @see PointVectorValuePair
False,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,34, @param point Point coordinates (this instance will store
False,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,35," a copy of the array, not the array passed as argument)."
True,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,35,* @param point Point coordinates. This instance will store
True,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,36,"* a copy of the array, not the array passed as argument."
False,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,66,eturn getKey().clone();
True,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,67,final double[] p = getKey();
True,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,src/main/java/org/apache/commons/math/optimization/PointValuePair.java,68,return p == null ? null : p.clone();
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,18,package org.apache.commons.math.optimization;
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,20,import org.apache.commons.math.util.Pair;
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,23,* This class holds a point and the vectorial value of an objective function at
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,24,* that point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,26,* @see PointValuePair
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,27,* @see org.apache.commons.math.analysis.MultivariateVectorFunction
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,29,* @since 3.0
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,31,"public class PointVectorValuePair extends Pair<double[], double[]> {"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,33,* Builds a point/objective function value pair.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,35,* @param point Point coordinates. This instance will store
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,36,"* a copy of the array, not the array passed as argument."
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,37,* @param value Value of the objective function at the point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,39,"public PointVectorValuePair(final double[] point,"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,40,final double[] value) {
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,41,"this(point, value, true);"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,45,* Build a point/objective function value pair.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,47,* @param point Point coordinates.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,48,* @param value Value of the objective function at the point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,49,"* @param copyArray if {@code true}, the input arrays will be copied,"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,50,* otherwise they will be referenced.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,52,"public PointVectorValuePair(final double[] point,"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,53,"final double[] value,"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,54,final boolean copyArray) {
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,55,super(copyArray ?
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,56,((point == null) ? null :
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,57,point.clone()) :
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,58,"point,"
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,59,copyArray ?
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,60,((value == null) ? null :
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,61,value.clone()) :
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,62,value);
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,66,* Gets the point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,68,* @return a copy of the stored point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,70,public double[] getPoint() {
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,71,final double[] p = getKey();
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,72,return p == null ? null : p.clone();
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,76,* Gets a reference to the point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,78,* @return a reference to the internal array storing the point.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,80,public double[] getPointRef() {
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,81,return getKey();
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,85,* Gets the value of the objective function.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,87,* @return a copy of the stored value of the objective function.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,89,@Override
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,90,public double[] getValue() {
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,91,final double[] v = super.getValue();
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,92,return v == null ? null : v.clone();
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,96,* Gets a reference to the value of the objective function.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,98,* @return a reference to the internal array storing the value of
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,99,* the objective function.
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,101,public double[] getValueRef() {
True,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,src/main/java/org/apache/commons/math/optimization/PointVectorValuePair.java,102,return super.getValue();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,33,xtends AbstractConvergenceChecker<VectorialPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,33,extends AbstractConvergenceChecker<PointVectorValuePair> {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,72,"inal VectorialPointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,inal VectorialPointValuePair current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,72,"final PointVectorValuePair previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,final PointVectorValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,35,xtends AbstractConvergenceChecker<VectorialPointValuePair> {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,35,extends AbstractConvergenceChecker<PointVectorValuePair> {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,"inal VectorialPointValuePair previous,"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75,inal VectorialPointValuePair current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,"final PointVectorValuePair previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75,final PointVectorValuePair current) {
False,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,53,"oolean converged(int iteration, VectorialPointValuePair previous, VectorialPointValuePair current);"
True,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java,53,"boolean converged(int iteration, PointVectorValuePair previous, PointVectorValuePair current);"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,18,ackage org.apache.commons.math.optimization;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,23, This class holds a point and the vectorial value of an objective function at this point.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,24, <p>This is a simple immutable container.</p>
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,25, @see PointValuePair
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,26, @see org.apache.commons.math.analysis.MultivariateVectorFunction
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,27, @version $Id$
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,28, @since 2.0
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,30,ublic class VectorialPointValuePair implements Serializable {
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,32,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,33,rivate static final long serialVersionUID = 1003888396256744753L;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,35,** Point coordinates. */
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,36,rivate final double[] point;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,38,** Vectorial value of the objective function at the point. */
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,39,rivate final double[] value;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,41,** Build a point/objective function value pair.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,42, @param point point coordinates (the built instance will store
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,43," a copy of the array, not the array passed as argument)"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,44, @param value value of an objective function at the point
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,46,"ublic VectorialPointValuePair(final double[] point, final double[] value) {"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,47,his.point = (point == null) ? null : point.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,48,his.value = (value == null) ? null : value.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,51,** Build a point/objective function value pair.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,52, @param point point coordinates (the built instance will store
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,53," a copy of the array, not the array passed as argument)"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,54, @param value value of an objective function at the point
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,55," @param copyArray if true, the input arrays will be copied, otherwise"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,56, they will be referenced
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,58,"ublic VectorialPointValuePair(final double[] point, final double[] value,"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,59,inal boolean copyArray) {
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,60,his.point = copyArray ?
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,61,(point == null) ? null : point.clone()) :
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,62,oint;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,63,his.value = copyArray ?
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,64,(value == null) ? null : value.clone()) :
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,65,alue;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,68,** Get the point.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,69, @return a copy of the stored point
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,71,ublic double[] getPoint() {
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,72,eturn (point == null) ? null : point.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,75,** Get a reference to the point.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,76, <p>This method is provided as a convenience to avoid copying
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,77," the array, the elements of the array should <em>not</em> be modified.</p>"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,78, @return a reference to the internal array storing the point
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,80,ublic double[] getPointRef() {
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,81,eturn point;
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,84,** Get the value of the objective function.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,85, @return a copy of the stored value of the objective function
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,87,ublic double[] getValue() {
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,88,eturn (value == null) ? null : value.clone();
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,91,** Get a reference to the value of the objective function.
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,92, <p>This method is provided as a convenience to avoid copying
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,93," the array, the elements of the array should <em>not</em> be modified.</p>"
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,94, @return a reference to the internal array storing the value of the objective function
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,96,ublic double[] getValueRef() {
False,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java,97,eturn value;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,28,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,28,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,46,rivate ConvergenceChecker<VectorialPointValuePair> checker;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,46,private ConvergenceChecker<PointVectorValuePair> checker;
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,67,rotected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,67,protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,82,ublic ConvergenceChecker<VectorialPointValuePair> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,82,public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() {
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,104,"ublic VectorialPointValuePair optimize(int maxEval, FUNC f, double[] t, double[] w,"
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,104,"public PointVectorValuePair optimize(int maxEval, FUNC f, double[] t, double[] w,"
False,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,150,rotected abstract VectorialPointValuePair doOptimize();
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java,150,protected abstract PointVectorValuePair doOptimize();
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,27,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,27,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,157,ectorialPointValuePair optimum =
True,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java,157,PointVectorValuePair optimum =
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,30,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,30,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,92,rotected AbstractLeastSquaresOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,92,protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,255,"ublic VectorialPointValuePair optimize(int maxEval,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,255,"public PointVectorValuePair optimize(int maxEval,"
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,31,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,31,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,67,ublic GaussNewtonOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,67,public GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,91,onvergenceChecker<VectorialPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,91,ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,98,ublic VectorialPointValuePair doOptimize() {
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,98,public PointVectorValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,100,inal ConvergenceChecker<VectorialPointValuePair> checker
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,100,final ConvergenceChecker<PointVectorValuePair> checker
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,104,ectorialPointValuePair current = null;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,104,PointVectorValuePair current = null;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,110,ectorialPointValuePair previous = current;
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,110,PointVectorValuePair previous = current;
False,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,113,"urrent = new VectorialPointValuePair(point, objective);"
True,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,113,"current = new PointVectorValuePair(point, objective);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,23,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,23,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,169,ublic LevenbergMarquardtOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,169,public LevenbergMarquardtOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,196,"onvergenceChecker<VectorialPointValuePair> checker,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,196,"ConvergenceChecker<PointVectorValuePair> checker,"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,272,rotected VectorialPointValuePair doOptimize() {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,272,protected PointVectorValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,299,"ectorialPointValuePair current = new VectorialPointValuePair(point, objective);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,299,"PointVectorValuePair current = new PointVectorValuePair(point, objective);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,301,inal ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,301,final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,310,ectorialPointValuePair previous = current;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,310,PointVectorValuePair previous = current;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,360,"urrent = new VectorialPointValuePair(point, objective);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,360,"current = new PointVectorValuePair(point, objective);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,460,"urrent = new VectorialPointValuePair(point, objective);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,460,"current = new PointVectorValuePair(point, objective);"
False,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,120,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,120,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,124,ectorialPointValuePair[] optima = optimizer.getOptima();
True,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java,124,PointVectorValuePair[] optima = optimizer.getOptima();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,33,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,33,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,110,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,110,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,127,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,127,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,152,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,152,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,173,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,173,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,197,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,197,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,237,ectorialPointValuePair optimum1 =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,237,PointVectorValuePair optimum1 =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,252,ectorialPointValuePair optimum2 =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,252,PointVectorValuePair optimum2 =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,307,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,307,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,339,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,339,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,358,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,358,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,398,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,398,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,442,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,442,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,37,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,37,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,112,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,112,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,133,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,133,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,154,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,154,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,172,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,172,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,193,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,193,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,233,ectorialPointValuePair optimum1 =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,233,PointVectorValuePair optimum1 =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,248,ectorialPointValuePair optimum2 =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,248,PointVectorValuePair optimum2 =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,284,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,284,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,303,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,303,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,330,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,330,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,401,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,401,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,484,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,484,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,27,mport org.apache.commons.math.optimization.VectorialPointValuePair;
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,27,import org.apache.commons.math.optimization.PointVectorValuePair;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,512,ectorialPointValuePair optimum =
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,512,PointVectorValuePair optimum =
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,582,ublic void checkTheoreticalMinParams(VectorialPointValuePair optimum) {
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,582,public void checkTheoreticalMinParams(PointVectorValuePair optimum) {

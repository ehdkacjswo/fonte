is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,71,public void testNoAccessBelowDiagonal() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,72,checkNoAccessBelowDiagonal(testSquare5);
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,73,checkNoAccessBelowDiagonal(testSquare3);
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,76,private void checkNoAccessBelowDiagonal(double[][] data) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,77,double[][] modifiedData = new double[data.length][];
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,78,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,79,modifiedData[i] = data[i].clone();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,80,"Arrays.fill(modifiedData[i], 0, i, Double.NaN);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,82,"RealMatrix matrix = new RealMatrixImpl(modifiedData, false);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,83,TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix);
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,84,RealMatrix q  = transformer.getQ();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,85,RealMatrix qT = transformer.getQT();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,86,RealMatrix t  = transformer.getT();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,87,"double norm = q.multiply(t).multiply(qT).subtract(new RealMatrixImpl(data, false)).getNorm();"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,88,"assertEquals(0, norm, 4.0e-15);"
